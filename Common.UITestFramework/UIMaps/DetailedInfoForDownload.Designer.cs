// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Common.UITestFramework.UIMaps.DetailedInfoForDownloadClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public partial class DetailedInfoForDownload
    {
        
        /// <summary>
        /// ClickCloseButton
        /// </summary>
        public void ClickCloseButton()
        {
            #region Variable Declarations
            WinButton uICloseButton1 = this.UIDetailedInfoforDownlWindow.UICloseWindow.UICloseButton1;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton1, new Point(43, 5));
        }
        
        /// <summary>
        /// ClickErrorMessageTab
        /// </summary>
        public void ClickErrorMessageTab()
        {
            #region Variable Declarations
            WinTabPage uIErrorMessagesTabPage = this.UIDetailedInfoforDownlWindow1.UIDetailedmessagesTabList.UIErrorMessagesTabPage;
            #endregion

            // Click 'Error Messages' tab
            Mouse.Click(uIErrorMessagesTabPage, new Point(63, 11));
        }
        
        /// <summary>
        /// ClickingCancelButton
        /// </summary>
        public void ClickingCancelButton()
        {
            #region Variable Declarations
            WinButton uICancelButton = this.UIDetailedInfoforDownlWindow.UICloseWindow.UICancelButton;
            #endregion

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(39, 11));
        }
        
        #region Properties
        public UIDetailedInfoforDownlWindow UIDetailedInfoforDownlWindow
        {
            get
            {
                if ((this.mUIDetailedInfoforDownlWindow == null))
                {
                    this.mUIDetailedInfoforDownlWindow = new UIDetailedInfoforDownlWindow();
                }
                return this.mUIDetailedInfoforDownlWindow;
            }
        }
        
        public UIDetailedInfoforDownlWindow1 UIDetailedInfoforDownlWindow1
        {
            get
            {
                if ((this.mUIDetailedInfoforDownlWindow1 == null))
                {
                    this.mUIDetailedInfoforDownlWindow1 = new UIDetailedInfoforDownlWindow1();
                }
                return this.mUIDetailedInfoforDownlWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIDetailedInfoforDownlWindow mUIDetailedInfoforDownlWindow;
        
        private UIDetailedInfoforDownlWindow1 mUIDetailedInfoforDownlWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDetailedInfoforDownlWindow : WinWindow
    {
        
        public UIDetailedInfoforDownlWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Detailed Info for Download";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Detailed Info for Download");
            #endregion
        }
        
        #region Properties
        public UITaskDownloadObjectInMenuBar UITaskDownloadObjectInMenuBar
        {
            get
            {
                if ((this.mUITaskDownloadObjectInMenuBar == null))
                {
                    this.mUITaskDownloadObjectInMenuBar = new UITaskDownloadObjectInMenuBar(this);
                }
                return this.mUITaskDownloadObjectInMenuBar;
            }
        }
        
        public UISystemMenuItem1 UISystemMenuItem
        {
            get
            {
                if ((this.mUISystemMenuItem == null))
                {
                    this.mUISystemMenuItem = new UISystemMenuItem1(this);
                }
                return this.mUISystemMenuItem;
            }
        }
        
        public UISystemMenu UISystemMenu
        {
            get
            {
                if ((this.mUISystemMenu == null))
                {
                    this.mUISystemMenu = new UISystemMenu(this);
                }
                return this.mUISystemMenu;
            }
        }
        
        public UIDetailedInfoforDownlTitleBar UIDetailedInfoforDownlTitleBar
        {
            get
            {
                if ((this.mUIDetailedInfoforDownlTitleBar == null))
                {
                    this.mUIDetailedInfoforDownlTitleBar = new UIDetailedInfoforDownlTitleBar(this);
                }
                return this.mUIDetailedInfoforDownlTitleBar;
            }
        }
        
        public WinMenuBar UITaskDownloadObjectInMenuBar1
        {
            get
            {
                if ((this.mUITaskDownloadObjectInMenuBar1 == null))
                {
                    this.mUITaskDownloadObjectInMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUITaskDownloadObjectInMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUITaskDownloadObjectInMenuBar1;
            }
        }
        
        public UIDetailedInfoforDownlClient UIDetailedInfoforDownlClient
        {
            get
            {
                if ((this.mUIDetailedInfoforDownlClient == null))
                {
                    this.mUIDetailedInfoforDownlClient = new UIDetailedInfoforDownlClient(this);
                }
                return this.mUIDetailedInfoforDownlClient;
            }
        }
        
        public UITableLayoutPanel1Window UITableLayoutPanel1Window
        {
            get
            {
                if ((this.mUITableLayoutPanel1Window == null))
                {
                    this.mUITableLayoutPanel1Window = new UITableLayoutPanel1Window(this);
                }
                return this.mUITableLayoutPanel1Window;
            }
        }
        
        public UIPanelWindow UIPanelWindow
        {
            get
            {
                if ((this.mUIPanelWindow == null))
                {
                    this.mUIPanelWindow = new UIPanelWindow(this);
                }
                return this.mUIPanelWindow;
            }
        }
        
        public UISageGridViewJobsWindow UISageGridViewJobsWindow
        {
            get
            {
                if ((this.mUISageGridViewJobsWindow == null))
                {
                    this.mUISageGridViewJobsWindow = new UISageGridViewJobsWindow(this);
                }
                return this.mUISageGridViewJobsWindow;
            }
        }
        
        public UIVerticalScrollBar UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public UIVerticalScrollBar1 UIVerticalScrollBar1
        {
            get
            {
                if ((this.mUIVerticalScrollBar1 == null))
                {
                    this.mUIVerticalScrollBar1 = new UIVerticalScrollBar1(this);
                }
                return this.mUIVerticalScrollBar1;
            }
        }
        
        public UIHorizontalScrollBar1 UIHorizontalScrollBar1
        {
            get
            {
                if ((this.mUIHorizontalScrollBar1 == null))
                {
                    this.mUIHorizontalScrollBar1 = new UIHorizontalScrollBar1(this);
                }
                return this.mUIHorizontalScrollBar1;
            }
        }
        
        public UIPanel2Window UIPanel2Window
        {
            get
            {
                if ((this.mUIPanel2Window == null))
                {
                    this.mUIPanel2Window = new UIPanel2Window(this);
                }
                return this.mUIPanel2Window;
            }
        }
        
        public UIDetailedmessagesWindow UIDetailedmessagesWindow
        {
            get
            {
                if ((this.mUIDetailedmessagesWindow == null))
                {
                    this.mUIDetailedmessagesWindow = new UIDetailedmessagesWindow(this);
                }
                return this.mUIDetailedmessagesWindow;
            }
        }
        
        public UIDetailedmessagesScrollBar UIDetailedmessagesScrollBar
        {
            get
            {
                if ((this.mUIDetailedmessagesScrollBar == null))
                {
                    this.mUIDetailedmessagesScrollBar = new UIDetailedmessagesScrollBar(this);
                }
                return this.mUIDetailedmessagesScrollBar;
            }
        }
        
        public UIDetailedmessagesScrollBar1 UIDetailedmessagesScrollBar1
        {
            get
            {
                if ((this.mUIDetailedmessagesScrollBar1 == null))
                {
                    this.mUIDetailedmessagesScrollBar1 = new UIDetailedmessagesScrollBar1(this);
                }
                return this.mUIDetailedmessagesScrollBar1;
            }
        }
        
        public UISageTabControl1Window UISageTabControl1Window
        {
            get
            {
                if ((this.mUISageTabControl1Window == null))
                {
                    this.mUISageTabControl1Window = new UISageTabControl1Window(this);
                }
                return this.mUISageTabControl1Window;
            }
        }
        
        public UIDetailedmessagesTabList UIDetailedmessagesTabList
        {
            get
            {
                if ((this.mUIDetailedmessagesTabList == null))
                {
                    this.mUIDetailedmessagesTabList = new UIDetailedmessagesTabList(this);
                }
                return this.mUIDetailedmessagesTabList;
            }
        }
        
        public UIInformationWindow UIInformationWindow
        {
            get
            {
                if ((this.mUIInformationWindow == null))
                {
                    this.mUIInformationWindow = new UIInformationWindow(this);
                }
                return this.mUIInformationWindow;
            }
        }
        
        public UIInformationClient UIInformationClient
        {
            get
            {
                if ((this.mUIInformationClient == null))
                {
                    this.mUIInformationClient = new UIInformationClient(this);
                }
                return this.mUIInformationClient;
            }
        }
        
        public UISageGridViewInfoWindow UISageGridViewInfoWindow
        {
            get
            {
                if ((this.mUISageGridViewInfoWindow == null))
                {
                    this.mUISageGridViewInfoWindow = new UISageGridViewInfoWindow(this);
                }
                return this.mUISageGridViewInfoWindow;
            }
        }
        
        public UIInformationScrollBar UIInformationScrollBar
        {
            get
            {
                if ((this.mUIInformationScrollBar == null))
                {
                    this.mUIInformationScrollBar = new UIInformationScrollBar(this);
                }
                return this.mUIInformationScrollBar;
            }
        }
        
        public UIInformationScrollBar1 UIInformationScrollBar1
        {
            get
            {
                if ((this.mUIInformationScrollBar1 == null))
                {
                    this.mUIInformationScrollBar1 = new UIInformationScrollBar1(this);
                }
                return this.mUIInformationScrollBar1;
            }
        }
        
        public UIErrorMessagesWindow UIErrorMessagesWindow
        {
            get
            {
                if ((this.mUIErrorMessagesWindow == null))
                {
                    this.mUIErrorMessagesWindow = new UIErrorMessagesWindow(this);
                }
                return this.mUIErrorMessagesWindow;
            }
        }
        
        public UIErrorMessagesClient UIErrorMessagesClient
        {
            get
            {
                if ((this.mUIErrorMessagesClient == null))
                {
                    this.mUIErrorMessagesClient = new UIErrorMessagesClient(this);
                }
                return this.mUIErrorMessagesClient;
            }
        }
        
        public UISageGridViewErrorWindow UISageGridViewErrorWindow
        {
            get
            {
                if ((this.mUISageGridViewErrorWindow == null))
                {
                    this.mUISageGridViewErrorWindow = new UISageGridViewErrorWindow(this);
                }
                return this.mUISageGridViewErrorWindow;
            }
        }
        
        public UIErrorMessagesScrollBar UIErrorMessagesScrollBar
        {
            get
            {
                if ((this.mUIErrorMessagesScrollBar == null))
                {
                    this.mUIErrorMessagesScrollBar = new UIErrorMessagesScrollBar(this);
                }
                return this.mUIErrorMessagesScrollBar;
            }
        }
        
        public UIErrorMessagesScrollBar1 UIErrorMessagesScrollBar1
        {
            get
            {
                if ((this.mUIErrorMessagesScrollBar1 == null))
                {
                    this.mUIErrorMessagesScrollBar1 = new UIErrorMessagesScrollBar1(this);
                }
                return this.mUIErrorMessagesScrollBar1;
            }
        }
        
        public UIVerticalScrollBar21 UIVerticalScrollBar2
        {
            get
            {
                if ((this.mUIVerticalScrollBar2 == null))
                {
                    this.mUIVerticalScrollBar2 = new UIVerticalScrollBar21(this);
                }
                return this.mUIVerticalScrollBar2;
            }
        }
        
        public UIHorizontalScrollBar21 UIHorizontalScrollBar2
        {
            get
            {
                if ((this.mUIHorizontalScrollBar2 == null))
                {
                    this.mUIHorizontalScrollBar2 = new UIHorizontalScrollBar21(this);
                }
                return this.mUIHorizontalScrollBar2;
            }
        }
        
        public UICloseWindow UICloseWindow
        {
            get
            {
                if ((this.mUICloseWindow == null))
                {
                    this.mUICloseWindow = new UICloseWindow(this);
                }
                return this.mUICloseWindow;
            }
        }
        
        public UICloseScrollBar UICloseScrollBar
        {
            get
            {
                if ((this.mUICloseScrollBar == null))
                {
                    this.mUICloseScrollBar = new UICloseScrollBar(this);
                }
                return this.mUICloseScrollBar;
            }
        }
        
        public UICloseScrollBar1 UICloseScrollBar1
        {
            get
            {
                if ((this.mUICloseScrollBar1 == null))
                {
                    this.mUICloseScrollBar1 = new UICloseScrollBar1(this);
                }
                return this.mUICloseScrollBar1;
            }
        }
        
        public UIVerticalScrollBar31 UIVerticalScrollBar3
        {
            get
            {
                if ((this.mUIVerticalScrollBar3 == null))
                {
                    this.mUIVerticalScrollBar3 = new UIVerticalScrollBar31(this);
                }
                return this.mUIVerticalScrollBar3;
            }
        }
        
        public UIHorizontalScrollBar31 UIHorizontalScrollBar3
        {
            get
            {
                if ((this.mUIHorizontalScrollBar3 == null))
                {
                    this.mUIHorizontalScrollBar3 = new UIHorizontalScrollBar31(this);
                }
                return this.mUIHorizontalScrollBar3;
            }
        }
        
        public UIVerticalScrollBar4 UIVerticalScrollBar4
        {
            get
            {
                if ((this.mUIVerticalScrollBar4 == null))
                {
                    this.mUIVerticalScrollBar4 = new UIVerticalScrollBar4(this);
                }
                return this.mUIVerticalScrollBar4;
            }
        }
        
        public UIHorizontalScrollBar4 UIHorizontalScrollBar4
        {
            get
            {
                if ((this.mUIHorizontalScrollBar4 == null))
                {
                    this.mUIHorizontalScrollBar4 = new UIHorizontalScrollBar4(this);
                }
                return this.mUIHorizontalScrollBar4;
            }
        }
        
        public UIDetailedInfoforDownlScrollBar UIDetailedInfoforDownlScrollBar
        {
            get
            {
                if ((this.mUIDetailedInfoforDownlScrollBar == null))
                {
                    this.mUIDetailedInfoforDownlScrollBar = new UIDetailedInfoforDownlScrollBar(this);
                }
                return this.mUIDetailedInfoforDownlScrollBar;
            }
        }
        
        public UIDetailedInfoforDownlScrollBar1 UIDetailedInfoforDownlScrollBar1
        {
            get
            {
                if ((this.mUIDetailedInfoforDownlScrollBar1 == null))
                {
                    this.mUIDetailedInfoforDownlScrollBar1 = new UIDetailedInfoforDownlScrollBar1(this);
                }
                return this.mUIDetailedInfoforDownlScrollBar1;
            }
        }
        
        public WinControl UIDetailedInfoforDownlGrip
        {
            get
            {
                if ((this.mUIDetailedInfoforDownlGrip == null))
                {
                    this.mUIDetailedInfoforDownlGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIDetailedInfoforDownlGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIDetailedInfoforDownlGrip;
            }
        }
        #endregion
        
        #region Fields
        private UITaskDownloadObjectInMenuBar mUITaskDownloadObjectInMenuBar;
        
        private UISystemMenuItem1 mUISystemMenuItem;
        
        private UISystemMenu mUISystemMenu;
        
        private UIDetailedInfoforDownlTitleBar mUIDetailedInfoforDownlTitleBar;
        
        private WinMenuBar mUITaskDownloadObjectInMenuBar1;
        
        private UIDetailedInfoforDownlClient mUIDetailedInfoforDownlClient;
        
        private UITableLayoutPanel1Window mUITableLayoutPanel1Window;
        
        private UIPanelWindow mUIPanelWindow;
        
        private UISageGridViewJobsWindow mUISageGridViewJobsWindow;
        
        private UIVerticalScrollBar mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar mUIHorizontalScrollBar;
        
        private UIVerticalScrollBar1 mUIVerticalScrollBar1;
        
        private UIHorizontalScrollBar1 mUIHorizontalScrollBar1;
        
        private UIPanel2Window mUIPanel2Window;
        
        private UIDetailedmessagesWindow mUIDetailedmessagesWindow;
        
        private UIDetailedmessagesScrollBar mUIDetailedmessagesScrollBar;
        
        private UIDetailedmessagesScrollBar1 mUIDetailedmessagesScrollBar1;
        
        private UISageTabControl1Window mUISageTabControl1Window;
        
        private UIDetailedmessagesTabList mUIDetailedmessagesTabList;
        
        private UIInformationWindow mUIInformationWindow;
        
        private UIInformationClient mUIInformationClient;
        
        private UISageGridViewInfoWindow mUISageGridViewInfoWindow;
        
        private UIInformationScrollBar mUIInformationScrollBar;
        
        private UIInformationScrollBar1 mUIInformationScrollBar1;
        
        private UIErrorMessagesWindow mUIErrorMessagesWindow;
        
        private UIErrorMessagesClient mUIErrorMessagesClient;
        
        private UISageGridViewErrorWindow mUISageGridViewErrorWindow;
        
        private UIErrorMessagesScrollBar mUIErrorMessagesScrollBar;
        
        private UIErrorMessagesScrollBar1 mUIErrorMessagesScrollBar1;
        
        private UIVerticalScrollBar21 mUIVerticalScrollBar2;
        
        private UIHorizontalScrollBar21 mUIHorizontalScrollBar2;
        
        private UICloseWindow mUICloseWindow;
        
        private UICloseScrollBar mUICloseScrollBar;
        
        private UICloseScrollBar1 mUICloseScrollBar1;
        
        private UIVerticalScrollBar31 mUIVerticalScrollBar3;
        
        private UIHorizontalScrollBar31 mUIHorizontalScrollBar3;
        
        private UIVerticalScrollBar4 mUIVerticalScrollBar4;
        
        private UIHorizontalScrollBar4 mUIHorizontalScrollBar4;
        
        private UIDetailedInfoforDownlScrollBar mUIDetailedInfoforDownlScrollBar;
        
        private UIDetailedInfoforDownlScrollBar1 mUIDetailedInfoforDownlScrollBar1;
        
        private WinControl mUIDetailedInfoforDownlGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UITaskDownloadObjectInMenuBar : WinMenuBar
    {
        
        public UITaskDownloadObjectInMenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "System";
            #endregion
        }
        
        #region Properties
        public UISystemMenuItem UISystemMenuItem
        {
            get
            {
                if ((this.mUISystemMenuItem == null))
                {
                    this.mUISystemMenuItem = new UISystemMenuItem(this);
                }
                return this.mUISystemMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UISystemMenuItem mUISystemMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISystemMenuItem : WinMenuItem
    {
        
        public UISystemMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "System";
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIRestoreMenuItem
        {
            get
            {
                if ((this.mUIRestoreMenuItem == null))
                {
                    this.mUIRestoreMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIRestoreMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Restore";
                    this.mUIRestoreMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUIRestoreMenuItem;
            }
        }
        
        public WinMenuItem UIMoveMenuItem
        {
            get
            {
                if ((this.mUIMoveMenuItem == null))
                {
                    this.mUIMoveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIMoveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Move";
                    this.mUIMoveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUIMoveMenuItem;
            }
        }
        
        public WinMenuItem UISizeMenuItem
        {
            get
            {
                if ((this.mUISizeMenuItem == null))
                {
                    this.mUISizeMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISizeMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Size";
                    this.mUISizeMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUISizeMenuItem;
            }
        }
        
        public WinMenuItem UIMinimizeMenuItem
        {
            get
            {
                if ((this.mUIMinimizeMenuItem == null))
                {
                    this.mUIMinimizeMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIMinimizeMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Minimize";
                    this.mUIMinimizeMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUIMinimizeMenuItem;
            }
        }
        
        public WinMenuItem UIMaximizeMenuItem
        {
            get
            {
                if ((this.mUIMaximizeMenuItem == null))
                {
                    this.mUIMaximizeMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIMaximizeMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Maximize";
                    this.mUIMaximizeMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUIMaximizeMenuItem;
            }
        }
        
        public WinMenuItem UICloseAltF4MenuItem
        {
            get
            {
                if ((this.mUICloseAltF4MenuItem == null))
                {
                    this.mUICloseAltF4MenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseAltF4MenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close\tAlt+F4";
                    this.mUICloseAltF4MenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUICloseAltF4MenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIRestoreMenuItem;
        
        private WinMenuItem mUIMoveMenuItem;
        
        private WinMenuItem mUISizeMenuItem;
        
        private WinMenuItem mUIMinimizeMenuItem;
        
        private WinMenuItem mUIMaximizeMenuItem;
        
        private WinMenuItem mUICloseAltF4MenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISystemMenuItem1 : WinMenuItem
    {
        
        public UISystemMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "System";
            #endregion
        }
        
        #region Properties
        public WinMenu UISystemMenu
        {
            get
            {
                if ((this.mUISystemMenu == null))
                {
                    this.mUISystemMenu = new WinMenu(this);
                    #region Search Criteria
                    this.mUISystemMenu.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    this.mUISystemMenu.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISystemMenu.SearchConfigurations.Remove(SearchConfiguration.VisibleOnly);
                    #endregion
                }
                return this.mUISystemMenu;
            }
        }
        #endregion
        
        #region Fields
        private WinMenu mUISystemMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISystemMenu : WinMenu
    {
        
        public UISystemMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "System";
            this.SearchConfigurations.Remove(SearchConfiguration.VisibleOnly);
            #endregion
        }
        
        #region Properties
        public WinSeparator UIItemSeparator
        {
            get
            {
                if ((this.mUIItemSeparator == null))
                {
                    this.mUIItemSeparator = new WinSeparator(this);
                }
                return this.mUIItemSeparator;
            }
        }
        #endregion
        
        #region Fields
        private WinSeparator mUIItemSeparator;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDetailedInfoforDownlTitleBar : WinTitleBar
    {
        
        public UIDetailedInfoforDownlTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDetailedInfoforDownlClient : WinClient
    {
        
        public UIDetailedInfoforDownlClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Detailed Info for Download";
            #endregion
        }
        
        #region Properties
        public WinWindow UITableLayoutPanel1Window
        {
            get
            {
                if ((this.mUITableLayoutPanel1Window == null))
                {
                    this.mUITableLayoutPanel1Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUITableLayoutPanel1Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUITableLayoutPanel1Window;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUITableLayoutPanel1Window;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UITableLayoutPanel1Window : WinWindow
    {
        
        public UITableLayoutPanel1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "tableLayoutPanel1";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UITableLayoutPanel1MenuBar
        {
            get
            {
                if ((this.mUITableLayoutPanel1MenuBar == null))
                {
                    this.mUITableLayoutPanel1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUITableLayoutPanel1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUITableLayoutPanel1MenuBar;
            }
        }
        
        public WinTitleBar UITableLayoutPanel1TitleBar
        {
            get
            {
                if ((this.mUITableLayoutPanel1TitleBar == null))
                {
                    this.mUITableLayoutPanel1TitleBar = new WinTitleBar(this);
                }
                return this.mUITableLayoutPanel1TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UITableLayoutPanel1MenuBar1
        {
            get
            {
                if ((this.mUITableLayoutPanel1MenuBar1 == null))
                {
                    this.mUITableLayoutPanel1MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUITableLayoutPanel1MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUITableLayoutPanel1MenuBar1;
            }
        }
        
        public WinClient UITableLayoutPanel1Client
        {
            get
            {
                if ((this.mUITableLayoutPanel1Client == null))
                {
                    this.mUITableLayoutPanel1Client = new WinClient(this);
                }
                return this.mUITableLayoutPanel1Client;
            }
        }
        
        public WinWindow UIPanelWindow
        {
            get
            {
                if ((this.mUIPanelWindow == null))
                {
                    this.mUIPanelWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIPanelWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIPanelWindow.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    #endregion
                }
                return this.mUIPanelWindow;
            }
        }
        
        public WinWindow UIPanel2Window
        {
            get
            {
                if ((this.mUIPanel2Window == null))
                {
                    this.mUIPanel2Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUIPanel2Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIPanel2Window.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
                    #endregion
                }
                return this.mUIPanel2Window;
            }
        }
        
        public WinScrollBar UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIVerticalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public WinScrollBar UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIHorizontalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UITableLayoutPanel1Grip
        {
            get
            {
                if ((this.mUITableLayoutPanel1Grip == null))
                {
                    this.mUITableLayoutPanel1Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUITableLayoutPanel1Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUITableLayoutPanel1Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUITableLayoutPanel1MenuBar;
        
        private WinTitleBar mUITableLayoutPanel1TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUITableLayoutPanel1MenuBar1;
        
        private WinClient mUITableLayoutPanel1Client;
        
        private WinWindow mUIPanelWindow;
        
        private WinWindow mUIPanel2Window;
        
        private WinScrollBar mUIVerticalScrollBar;
        
        private WinScrollBar mUIHorizontalScrollBar;
        
        private WinControl mUITableLayoutPanel1Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPanelWindow : WinWindow
    {
        
        public UIPanelWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "panel";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIPanelMenuBar
        {
            get
            {
                if ((this.mUIPanelMenuBar == null))
                {
                    this.mUIPanelMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanelMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIPanelMenuBar;
            }
        }
        
        public WinTitleBar UIPanelTitleBar
        {
            get
            {
                if ((this.mUIPanelTitleBar == null))
                {
                    this.mUIPanelTitleBar = new WinTitleBar(this);
                }
                return this.mUIPanelTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIPanelMenuBar1
        {
            get
            {
                if ((this.mUIPanelMenuBar1 == null))
                {
                    this.mUIPanelMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanelMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIPanelMenuBar1;
            }
        }
        
        public WinClient UIPanelClient
        {
            get
            {
                if ((this.mUIPanelClient == null))
                {
                    this.mUIPanelClient = new WinClient(this);
                }
                return this.mUIPanelClient;
            }
        }
        
        public WinWindow UISageGridViewJobsWindow
        {
            get
            {
                if ((this.mUISageGridViewJobsWindow == null))
                {
                    this.mUISageGridViewJobsWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUISageGridViewJobsWindow.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "DataGridView";
                    this.mUISageGridViewJobsWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUISageGridViewJobsWindow;
            }
        }
        
        public WinScrollBar UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIVerticalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public WinScrollBar UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIHorizontalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIPanelGrip
        {
            get
            {
                if ((this.mUIPanelGrip == null))
                {
                    this.mUIPanelGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIPanelGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIPanelGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIPanelMenuBar;
        
        private WinTitleBar mUIPanelTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIPanelMenuBar1;
        
        private WinClient mUIPanelClient;
        
        private WinWindow mUISageGridViewJobsWindow;
        
        private WinScrollBar mUIVerticalScrollBar;
        
        private WinScrollBar mUIHorizontalScrollBar;
        
        private WinControl mUIPanelGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISageGridViewJobsWindow : WinWindow
    {
        
        public UISageGridViewJobsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "sageGridViewJobs";
            this.WindowTitles.Add("Detailed Info for Download");
            #endregion
        }
        
        #region Properties
        public WinMenuBar UISageGridViewJobsMenuBar
        {
            get
            {
                if ((this.mUISageGridViewJobsMenuBar == null))
                {
                    this.mUISageGridViewJobsMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISageGridViewJobsMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUISageGridViewJobsMenuBar;
            }
        }
        
        public WinTitleBar UISageGridViewJobsTitleBar
        {
            get
            {
                if ((this.mUISageGridViewJobsTitleBar == null))
                {
                    this.mUISageGridViewJobsTitleBar = new WinTitleBar(this);
                }
                return this.mUISageGridViewJobsTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UISageGridViewJobsMenuBar1
        {
            get
            {
                if ((this.mUISageGridViewJobsMenuBar1 == null))
                {
                    this.mUISageGridViewJobsMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISageGridViewJobsMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUISageGridViewJobsMenuBar1;
            }
        }
        
        public WinScrollBar UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIVerticalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public WinScrollBar UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIHorizontalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UISageGridViewJobsGrip
        {
            get
            {
                if ((this.mUISageGridViewJobsGrip == null))
                {
                    this.mUISageGridViewJobsGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUISageGridViewJobsGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUISageGridViewJobsGrip;
            }
        }
        
        public UIDataGridViewTable UIDataGridViewTable
        {
            get
            {
                if ((this.mUIDataGridViewTable == null))
                {
                    this.mUIDataGridViewTable = new UIDataGridViewTable(this);
                }
                return this.mUIDataGridViewTable;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUISageGridViewJobsMenuBar;
        
        private WinTitleBar mUISageGridViewJobsTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUISageGridViewJobsMenuBar1;
        
        private WinScrollBar mUIVerticalScrollBar;
        
        private WinScrollBar mUIHorizontalScrollBar;
        
        private WinControl mUISageGridViewJobsGrip;
        
        private UIDataGridViewTable mUIDataGridViewTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDataGridViewTable : WinTable
    {
        
        public UIDataGridViewTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTable.PropertyNames.Name] = "DataGridView";
            this.WindowTitles.Add("Detailed Info for Download");
            #endregion
        }
        
        #region Properties
        public UIRow0Row UIRow0Row
        {
            get
            {
                if ((this.mUIRow0Row == null))
                {
                    this.mUIRow0Row = new UIRow0Row(this);
                }
                return this.mUIRow0Row;
            }
        }
        
        public UIRow0Row1 UIRow0Row1
        {
            get
            {
                if ((this.mUIRow0Row1 == null))
                {
                    this.mUIRow0Row1 = new UIRow0Row1(this);
                }
                return this.mUIRow0Row1;
            }
        }
        
        public UIRow0Row2 UIRow0Row2
        {
            get
            {
                if ((this.mUIRow0Row2 == null))
                {
                    this.mUIRow0Row2 = new UIRow0Row2(this);
                }
                return this.mUIRow0Row2;
            }
        }
        #endregion
        
        #region Fields
        private UIRow0Row mUIRow0Row;
        
        private UIRow0Row1 mUIRow0Row1;
        
        private UIRow0Row2 mUIRow0Row2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow0Row : WinRow
    {
        
        public UIRow0Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "haih@ad-sage.com #46848300(USD)->UFUcx;Finished;(null)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Detailed Info for Download");
            #endregion
        }
        
        #region Properties
        public WinCell UIHaihadsagecom4684830Cell
        {
            get
            {
                if ((this.mUIHaihadsagecom4684830Cell == null))
                {
                    this.mUIHaihadsagecom4684830Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIHaihadsagecom4684830Cell.SearchProperties[WinCell.PropertyNames.Value] = "haih@ad-sage.com #46848300(USD)->UFUcx";
                    this.mUIHaihadsagecom4684830Cell.WindowTitles.Add("Detailed Info for Download");
                    #endregion
                }
                return this.mUIHaihadsagecom4684830Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIHaihadsagecom4684830Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow0Row1 : WinRow
    {
        
        public UIRow0Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "haih@ad-sage.com #46848300(USD)->JJN23PRzg;Finished;(null)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Detailed Info for Download");
            #endregion
        }
        
        #region Properties
        public WinCell UIHaihadsagecom4684830Cell
        {
            get
            {
                if ((this.mUIHaihadsagecom4684830Cell == null))
                {
                    this.mUIHaihadsagecom4684830Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIHaihadsagecom4684830Cell.SearchProperties[WinCell.PropertyNames.Value] = "haih@ad-sage.com #46848300(USD)->JJN23PRzg";
                    this.mUIHaihadsagecom4684830Cell.WindowTitles.Add("Detailed Info for Download");
                    #endregion
                }
                return this.mUIHaihadsagecom4684830Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIHaihadsagecom4684830Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow0Row2 : WinRow
    {
        
        public UIRow0Row2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "Account2 #348004880(USD);Finished;(null)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Detailed Info for Download");
            #endregion
        }
        
        #region Properties
        public WinCell UIAccount2348004880USDCell
        {
            get
            {
                if ((this.mUIAccount2348004880USDCell == null))
                {
                    this.mUIAccount2348004880USDCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAccount2348004880USDCell.SearchProperties[WinCell.PropertyNames.Value] = "Account2 #348004880(USD)";
                    this.mUIAccount2348004880USDCell.WindowTitles.Add("Detailed Info for Download");
                    #endregion
                }
                return this.mUIAccount2348004880USDCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIAccount2348004880USDCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar : WinScrollBar
    {
        
        public UIVerticalScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar : WinScrollBar
    {
        
        public UIHorizontalScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar1 : WinScrollBar
    {
        
        public UIVerticalScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar1 : WinScrollBar
    {
        
        public UIHorizontalScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPanel2Window : WinWindow
    {
        
        public UIPanel2Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "panel2";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIPanel2MenuBar
        {
            get
            {
                if ((this.mUIPanel2MenuBar == null))
                {
                    this.mUIPanel2MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanel2MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIPanel2MenuBar;
            }
        }
        
        public WinTitleBar UIPanel2TitleBar
        {
            get
            {
                if ((this.mUIPanel2TitleBar == null))
                {
                    this.mUIPanel2TitleBar = new WinTitleBar(this);
                }
                return this.mUIPanel2TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIPanel2MenuBar1
        {
            get
            {
                if ((this.mUIPanel2MenuBar1 == null))
                {
                    this.mUIPanel2MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanel2MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIPanel2MenuBar1;
            }
        }
        
        public WinClient UIPanel2Client
        {
            get
            {
                if ((this.mUIPanel2Client == null))
                {
                    this.mUIPanel2Client = new WinClient(this);
                }
                return this.mUIPanel2Client;
            }
        }
        
        public WinWindow UIDetailedmessagesWindow
        {
            get
            {
                if ((this.mUIDetailedmessagesWindow == null))
                {
                    this.mUIDetailedmessagesWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIDetailedmessagesWindow.SearchProperties[WinWindow.PropertyNames.Name] = "Detailed messages";
                    this.mUIDetailedmessagesWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIDetailedmessagesWindow;
            }
        }
        
        public WinWindow UISageTabControl1Window
        {
            get
            {
                if ((this.mUISageTabControl1Window == null))
                {
                    this.mUISageTabControl1Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUISageTabControl1Window.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Detailed messages";
                    this.mUISageTabControl1Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.SysTabControl32", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUISageTabControl1Window;
            }
        }
        
        public WinWindow UICloseWindow
        {
            get
            {
                if ((this.mUICloseWindow == null))
                {
                    this.mUICloseWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUICloseWindow.SearchProperties[WinWindow.PropertyNames.Name] = "Close";
                    this.mUICloseWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.BUTTON", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUICloseWindow;
            }
        }
        
        public WinScrollBar UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIVerticalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public WinScrollBar UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIHorizontalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIPanel2Grip
        {
            get
            {
                if ((this.mUIPanel2Grip == null))
                {
                    this.mUIPanel2Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUIPanel2Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIPanel2Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIPanel2MenuBar;
        
        private WinTitleBar mUIPanel2TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIPanel2MenuBar1;
        
        private WinClient mUIPanel2Client;
        
        private WinWindow mUIDetailedmessagesWindow;
        
        private WinWindow mUISageTabControl1Window;
        
        private WinWindow mUICloseWindow;
        
        private WinScrollBar mUIVerticalScrollBar;
        
        private WinScrollBar mUIHorizontalScrollBar;
        
        private WinControl mUIPanel2Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDetailedmessagesWindow : WinWindow
    {
        
        public UIDetailedmessagesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "lblExpand";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UILblExpandMenuBar
        {
            get
            {
                if ((this.mUILblExpandMenuBar == null))
                {
                    this.mUILblExpandMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILblExpandMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUILblExpandMenuBar;
            }
        }
        
        public WinTitleBar UIDetailedmessagesTitleBar
        {
            get
            {
                if ((this.mUIDetailedmessagesTitleBar == null))
                {
                    this.mUIDetailedmessagesTitleBar = new WinTitleBar(this);
                }
                return this.mUIDetailedmessagesTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UILblExpandMenuBar1
        {
            get
            {
                if ((this.mUILblExpandMenuBar1 == null))
                {
                    this.mUILblExpandMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILblExpandMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUILblExpandMenuBar1;
            }
        }
        
        public WinText UIDetailedmessagesText
        {
            get
            {
                if ((this.mUIDetailedmessagesText == null))
                {
                    this.mUIDetailedmessagesText = new WinText(this);
                    #region Search Criteria
                    this.mUIDetailedmessagesText.SearchProperties[WinText.PropertyNames.Name] = "Detailed messages";
                    #endregion
                }
                return this.mUIDetailedmessagesText;
            }
        }
        
        public WinScrollBar UIDetailedmessagesScrollBar
        {
            get
            {
                if ((this.mUIDetailedmessagesScrollBar == null))
                {
                    this.mUIDetailedmessagesScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIDetailedmessagesScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIDetailedmessagesScrollBar;
            }
        }
        
        public WinScrollBar UIDetailedmessagesScrollBar1
        {
            get
            {
                if ((this.mUIDetailedmessagesScrollBar1 == null))
                {
                    this.mUIDetailedmessagesScrollBar1 = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIDetailedmessagesScrollBar1.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIDetailedmessagesScrollBar1;
            }
        }
        
        public WinControl UIDetailedmessagesGrip
        {
            get
            {
                if ((this.mUIDetailedmessagesGrip == null))
                {
                    this.mUIDetailedmessagesGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIDetailedmessagesGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIDetailedmessagesGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUILblExpandMenuBar;
        
        private WinTitleBar mUIDetailedmessagesTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUILblExpandMenuBar1;
        
        private WinText mUIDetailedmessagesText;
        
        private WinScrollBar mUIDetailedmessagesScrollBar;
        
        private WinScrollBar mUIDetailedmessagesScrollBar1;
        
        private WinControl mUIDetailedmessagesGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDetailedmessagesScrollBar : WinScrollBar
    {
        
        public UIDetailedmessagesScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDetailedmessagesScrollBar1 : WinScrollBar
    {
        
        public UIDetailedmessagesScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISageTabControl1Window : WinWindow
    {
        
        public UISageTabControl1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "sageTabControl1";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UISageTabControl1MenuBar
        {
            get
            {
                if ((this.mUISageTabControl1MenuBar == null))
                {
                    this.mUISageTabControl1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISageTabControl1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUISageTabControl1MenuBar;
            }
        }
        
        public WinTitleBar UISageTabControl1TitleBar
        {
            get
            {
                if ((this.mUISageTabControl1TitleBar == null))
                {
                    this.mUISageTabControl1TitleBar = new WinTitleBar(this);
                }
                return this.mUISageTabControl1TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UISageTabControl1MenuBar1
        {
            get
            {
                if ((this.mUISageTabControl1MenuBar1 == null))
                {
                    this.mUISageTabControl1MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISageTabControl1MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUISageTabControl1MenuBar1;
            }
        }
        
        public WinTabList UIDetailedmessagesTabList
        {
            get
            {
                if ((this.mUIDetailedmessagesTabList == null))
                {
                    this.mUIDetailedmessagesTabList = new WinTabList(this);
                    #region Search Criteria
                    this.mUIDetailedmessagesTabList.SearchProperties[WinTabList.PropertyNames.Name] = "Detailed messages";
                    #endregion
                }
                return this.mUIDetailedmessagesTabList;
            }
        }
        
        public WinScrollBar UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIVerticalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public WinScrollBar UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIHorizontalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UISageTabControl1Grip
        {
            get
            {
                if ((this.mUISageTabControl1Grip == null))
                {
                    this.mUISageTabControl1Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUISageTabControl1Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUISageTabControl1Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUISageTabControl1MenuBar;
        
        private WinTitleBar mUISageTabControl1TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUISageTabControl1MenuBar1;
        
        private WinTabList mUIDetailedmessagesTabList;
        
        private WinScrollBar mUIVerticalScrollBar;
        
        private WinScrollBar mUIHorizontalScrollBar;
        
        private WinControl mUISageTabControl1Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDetailedmessagesTabList : WinTabList
    {
        
        public UIDetailedmessagesTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTabList.PropertyNames.Name] = "Detailed messages";
            #endregion
        }
        
        #region Properties
        public WinTabPage UIInformationTabPage
        {
            get
            {
                if ((this.mUIInformationTabPage == null))
                {
                    this.mUIInformationTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUIInformationTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Information";
                    #endregion
                }
                return this.mUIInformationTabPage;
            }
        }
        
        public WinTabPage UIErrorMessagesTabPage
        {
            get
            {
                if ((this.mUIErrorMessagesTabPage == null))
                {
                    this.mUIErrorMessagesTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUIErrorMessagesTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Error Messages";
                    #endregion
                }
                return this.mUIErrorMessagesTabPage;
            }
        }
        
        public WinWindow UIInformationWindow
        {
            get
            {
                if ((this.mUIInformationWindow == null))
                {
                    this.mUIInformationWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIInformationWindow.SearchProperties[WinWindow.PropertyNames.Name] = "Information";
                    this.mUIInformationWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIInformationWindow;
            }
        }
        
        public WinWindow UIErrorMessagesWindow
        {
            get
            {
                if ((this.mUIErrorMessagesWindow == null))
                {
                    this.mUIErrorMessagesWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIErrorMessagesWindow.SearchProperties[WinWindow.PropertyNames.Name] = "Error Messages";
                    this.mUIErrorMessagesWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIErrorMessagesWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinTabPage mUIInformationTabPage;
        
        private WinTabPage mUIErrorMessagesTabPage;
        
        private WinWindow mUIInformationWindow;
        
        private WinWindow mUIErrorMessagesWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIInformationWindow : WinWindow
    {
        
        public UIInformationWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "tabPage1";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UITabPage1MenuBar
        {
            get
            {
                if ((this.mUITabPage1MenuBar == null))
                {
                    this.mUITabPage1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUITabPage1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUITabPage1MenuBar;
            }
        }
        
        public WinTitleBar UIInformationTitleBar
        {
            get
            {
                if ((this.mUIInformationTitleBar == null))
                {
                    this.mUIInformationTitleBar = new WinTitleBar(this);
                }
                return this.mUIInformationTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UITabPage1MenuBar1
        {
            get
            {
                if ((this.mUITabPage1MenuBar1 == null))
                {
                    this.mUITabPage1MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUITabPage1MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUITabPage1MenuBar1;
            }
        }
        
        public WinClient UIInformationClient
        {
            get
            {
                if ((this.mUIInformationClient == null))
                {
                    this.mUIInformationClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIInformationClient.SearchProperties[WinControl.PropertyNames.Name] = "Information";
                    #endregion
                }
                return this.mUIInformationClient;
            }
        }
        
        public WinScrollBar UIInformationScrollBar
        {
            get
            {
                if ((this.mUIInformationScrollBar == null))
                {
                    this.mUIInformationScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIInformationScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIInformationScrollBar;
            }
        }
        
        public WinScrollBar UIInformationScrollBar1
        {
            get
            {
                if ((this.mUIInformationScrollBar1 == null))
                {
                    this.mUIInformationScrollBar1 = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIInformationScrollBar1.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIInformationScrollBar1;
            }
        }
        
        public WinControl UIInformationGrip
        {
            get
            {
                if ((this.mUIInformationGrip == null))
                {
                    this.mUIInformationGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIInformationGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIInformationGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUITabPage1MenuBar;
        
        private WinTitleBar mUIInformationTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUITabPage1MenuBar1;
        
        private WinClient mUIInformationClient;
        
        private WinScrollBar mUIInformationScrollBar;
        
        private WinScrollBar mUIInformationScrollBar1;
        
        private WinControl mUIInformationGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIInformationClient : WinClient
    {
        
        public UIInformationClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Information";
            #endregion
        }
        
        #region Properties
        public WinWindow UISageGridViewInfoWindow
        {
            get
            {
                if ((this.mUISageGridViewInfoWindow == null))
                {
                    this.mUISageGridViewInfoWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUISageGridViewInfoWindow.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "DataGridView";
                    this.mUISageGridViewInfoWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUISageGridViewInfoWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUISageGridViewInfoWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISageGridViewInfoWindow : WinWindow
    {
        
        public UISageGridViewInfoWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "sageGridViewInfo";
            this.WindowTitles.Add("Detailed Info for Download");
            #endregion
        }
        
        #region Properties
        public WinMenuBar UISageGridViewInfoMenuBar
        {
            get
            {
                if ((this.mUISageGridViewInfoMenuBar == null))
                {
                    this.mUISageGridViewInfoMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISageGridViewInfoMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUISageGridViewInfoMenuBar;
            }
        }
        
        public WinTitleBar UISageGridViewInfoTitleBar
        {
            get
            {
                if ((this.mUISageGridViewInfoTitleBar == null))
                {
                    this.mUISageGridViewInfoTitleBar = new WinTitleBar(this);
                }
                return this.mUISageGridViewInfoTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UISageGridViewInfoMenuBar1
        {
            get
            {
                if ((this.mUISageGridViewInfoMenuBar1 == null))
                {
                    this.mUISageGridViewInfoMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISageGridViewInfoMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUISageGridViewInfoMenuBar1;
            }
        }
        
        public UIDataGridViewTable1 UIDataGridViewTable
        {
            get
            {
                if ((this.mUIDataGridViewTable == null))
                {
                    this.mUIDataGridViewTable = new UIDataGridViewTable1(this);
                }
                return this.mUIDataGridViewTable;
            }
        }
        
        public UIVerticalScrollBar2 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar2(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar2 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar2(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UISageGridViewInfoGrip
        {
            get
            {
                if ((this.mUISageGridViewInfoGrip == null))
                {
                    this.mUISageGridViewInfoGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUISageGridViewInfoGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUISageGridViewInfoGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUISageGridViewInfoMenuBar;
        
        private WinTitleBar mUISageGridViewInfoTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUISageGridViewInfoMenuBar1;
        
        private UIDataGridViewTable1 mUIDataGridViewTable;
        
        private UIVerticalScrollBar2 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar2 mUIHorizontalScrollBar;
        
        private WinControl mUISageGridViewInfoGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDataGridViewTable1 : WinTable
    {
        
        public UIDataGridViewTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTable.PropertyNames.Name] = "DataGridView";
            this.WindowTitles.Add("Detailed Info for Download");
            #endregion
        }
        
        #region Properties
        public WinRow UIRow0Row
        {
            get
            {
                if ((this.mUIRow0Row == null))
                {
                    this.mUIRow0Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow0Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 0";
                    this.mUIRow0Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow0Row;
            }
        }
        
        public UIRow0Row11 UIRow0Row1
        {
            get
            {
                if ((this.mUIRow0Row1 == null))
                {
                    this.mUIRow0Row1 = new UIRow0Row11(this);
                }
                return this.mUIRow0Row1;
            }
        }
        
        public WinRow UIRow1Row
        {
            get
            {
                if ((this.mUIRow1Row == null))
                {
                    this.mUIRow1Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow1Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 1";
                    this.mUIRow1Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow1Row;
            }
        }
        
        public UIRow1Row1 UIRow1Row1
        {
            get
            {
                if ((this.mUIRow1Row1 == null))
                {
                    this.mUIRow1Row1 = new UIRow1Row1(this);
                }
                return this.mUIRow1Row1;
            }
        }
        
        public UIRow1Row2 UIRow1Row2
        {
            get
            {
                if ((this.mUIRow1Row2 == null))
                {
                    this.mUIRow1Row2 = new UIRow1Row2(this);
                }
                return this.mUIRow1Row2;
            }
        }
        
        public UIRow1Row3 UIRow1Row3
        {
            get
            {
                if ((this.mUIRow1Row3 == null))
                {
                    this.mUIRow1Row3 = new UIRow1Row3(this);
                }
                return this.mUIRow1Row3;
            }
        }
        
        public UIRow2Row UIRow2Row
        {
            get
            {
                if ((this.mUIRow2Row == null))
                {
                    this.mUIRow2Row = new UIRow2Row(this);
                }
                return this.mUIRow2Row;
            }
        }
        
        public UIRow3Row UIRow3Row
        {
            get
            {
                if ((this.mUIRow3Row == null))
                {
                    this.mUIRow3Row = new UIRow3Row(this);
                }
                return this.mUIRow3Row;
            }
        }
        
        public UIRow4Row UIRow4Row
        {
            get
            {
                if ((this.mUIRow4Row == null))
                {
                    this.mUIRow4Row = new UIRow4Row(this);
                }
                return this.mUIRow4Row;
            }
        }
        
        public WinRow UIRow2Row1
        {
            get
            {
                if ((this.mUIRow2Row1 == null))
                {
                    this.mUIRow2Row1 = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow2Row1.SearchProperties[WinRow.PropertyNames.Name] = "Row 2";
                    this.mUIRow2Row1.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mUIRow2Row1.WindowTitles.Add("Detailed Info for Download");
                    #endregion
                }
                return this.mUIRow2Row1;
            }
        }
        
        public WinRow UIRow3Row1
        {
            get
            {
                if ((this.mUIRow3Row1 == null))
                {
                    this.mUIRow3Row1 = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow3Row1.SearchProperties[WinRow.PropertyNames.Name] = "Row 3";
                    this.mUIRow3Row1.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mUIRow3Row1.WindowTitles.Add("Detailed Info for Download");
                    #endregion
                }
                return this.mUIRow3Row1;
            }
        }
        
        public WinRow UIRow4Row1
        {
            get
            {
                if ((this.mUIRow4Row1 == null))
                {
                    this.mUIRow4Row1 = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow4Row1.SearchProperties[WinRow.PropertyNames.Name] = "Row 4";
                    this.mUIRow4Row1.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mUIRow4Row1.WindowTitles.Add("Detailed Info for Download");
                    #endregion
                }
                return this.mUIRow4Row1;
            }
        }
        
        public UIRow1Row4 UIRow1Row4
        {
            get
            {
                if ((this.mUIRow1Row4 == null))
                {
                    this.mUIRow1Row4 = new UIRow1Row4(this);
                }
                return this.mUIRow1Row4;
            }
        }
        
        public UIRow3Row2 UIRow3Row2
        {
            get
            {
                if ((this.mUIRow3Row2 == null))
                {
                    this.mUIRow3Row2 = new UIRow3Row2(this);
                }
                return this.mUIRow3Row2;
            }
        }
        
        public UIRow2Row2 UIRow2Row2
        {
            get
            {
                if ((this.mUIRow2Row2 == null))
                {
                    this.mUIRow2Row2 = new UIRow2Row2(this);
                }
                return this.mUIRow2Row2;
            }
        }
        
        public UIRow0Row21 UIRow0Row2
        {
            get
            {
                if ((this.mUIRow0Row2 == null))
                {
                    this.mUIRow0Row2 = new UIRow0Row21(this);
                }
                return this.mUIRow0Row2;
            }
        }
        
        public UIRow1Row5 UIRow1Row5
        {
            get
            {
                if ((this.mUIRow1Row5 == null))
                {
                    this.mUIRow1Row5 = new UIRow1Row5(this);
                }
                return this.mUIRow1Row5;
            }
        }
        
        public UIRow0Row3 UIRow0Row3
        {
            get
            {
                if ((this.mUIRow0Row3 == null))
                {
                    this.mUIRow0Row3 = new UIRow0Row3(this);
                }
                return this.mUIRow0Row3;
            }
        }
        
        public UIRow1Row6 UIRow1Row6
        {
            get
            {
                if ((this.mUIRow1Row6 == null))
                {
                    this.mUIRow1Row6 = new UIRow1Row6(this);
                }
                return this.mUIRow1Row6;
            }
        }
        
        public UIRow1Row7 UIRow1Row7
        {
            get
            {
                if ((this.mUIRow1Row7 == null))
                {
                    this.mUIRow1Row7 = new UIRow1Row7(this);
                }
                return this.mUIRow1Row7;
            }
        }
        #endregion
        
        #region Fields
        private WinRow mUIRow0Row;
        
        private UIRow0Row11 mUIRow0Row1;
        
        private WinRow mUIRow1Row;
        
        private UIRow1Row1 mUIRow1Row1;
        
        private UIRow1Row2 mUIRow1Row2;
        
        private UIRow1Row3 mUIRow1Row3;
        
        private UIRow2Row mUIRow2Row;
        
        private UIRow3Row mUIRow3Row;
        
        private UIRow4Row mUIRow4Row;
        
        private WinRow mUIRow2Row1;
        
        private WinRow mUIRow3Row1;
        
        private WinRow mUIRow4Row1;
        
        private UIRow1Row4 mUIRow1Row4;
        
        private UIRow3Row2 mUIRow3Row2;
        
        private UIRow2Row2 mUIRow2Row2;
        
        private UIRow0Row21 mUIRow0Row2;
        
        private UIRow1Row5 mUIRow1Row5;
        
        private UIRow0Row3 mUIRow0Row3;
        
        private UIRow1Row6 mUIRow1Row6;
        
        private UIRow1Row7 mUIRow1Row7;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow0Row11 : WinRow
    {
        
        public UIRow0Row11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "System.Drawing.Bitmap;Campaigns downloaded so far: 1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UISystemDrawingBitmapCell
        {
            get
            {
                if ((this.mUISystemDrawingBitmapCell == null))
                {
                    this.mUISystemDrawingBitmapCell = new WinCell(this);
                    #region Search Criteria
                    this.mUISystemDrawingBitmapCell.SearchProperties[WinCell.PropertyNames.Value] = "System.Drawing.Bitmap";
                    #endregion
                }
                return this.mUISystemDrawingBitmapCell;
            }
        }
        
        public WinCell UICampaignsdownloadedsCell
        {
            get
            {
                if ((this.mUICampaignsdownloadedsCell == null))
                {
                    this.mUICampaignsdownloadedsCell = new WinCell(this);
                    #region Search Criteria
                    this.mUICampaignsdownloadedsCell.SearchProperties[WinCell.PropertyNames.Value] = "Campaigns downloaded so far: 1";
                    #endregion
                }
                return this.mUICampaignsdownloadedsCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUISystemDrawingBitmapCell;
        
        private WinCell mUICampaignsdownloadedsCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow1Row1 : WinRow
    {
        
        public UIRow1Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "System.Drawing.Bitmap;Ads downloaded so far: 0";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UISystemDrawingBitmapCell
        {
            get
            {
                if ((this.mUISystemDrawingBitmapCell == null))
                {
                    this.mUISystemDrawingBitmapCell = new WinCell(this);
                    #region Search Criteria
                    this.mUISystemDrawingBitmapCell.SearchProperties[WinCell.PropertyNames.Value] = "System.Drawing.Bitmap";
                    #endregion
                }
                return this.mUISystemDrawingBitmapCell;
            }
        }
        
        public WinCell UIAddownloadedsofar0Cell
        {
            get
            {
                if ((this.mUIAddownloadedsofar0Cell == null))
                {
                    this.mUIAddownloadedsofar0Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAddownloadedsofar0Cell.SearchProperties[WinCell.PropertyNames.Value] = "Ads downloaded so far: 0";
                    #endregion
                }
                return this.mUIAddownloadedsofar0Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUISystemDrawingBitmapCell;
        
        private WinCell mUIAddownloadedsofar0Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow1Row2 : WinRow
    {
        
        public UIRow1Row2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "System.Drawing.Bitmap;Ads downloaded so far: 1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Detailed Info for Download");
            #endregion
        }
        
        #region Properties
        public WinCell UIAddownloadedsofar1Cell
        {
            get
            {
                if ((this.mUIAddownloadedsofar1Cell == null))
                {
                    this.mUIAddownloadedsofar1Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAddownloadedsofar1Cell.SearchProperties[WinCell.PropertyNames.Value] = "Ads downloaded so far: 1";
                    this.mUIAddownloadedsofar1Cell.WindowTitles.Add("Detailed Info for Download");
                    #endregion
                }
                return this.mUIAddownloadedsofar1Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIAddownloadedsofar1Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow1Row3 : WinRow
    {
        
        public UIRow1Row3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "System.Drawing.Bitmap;Ad groups downloaded so far: 0";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Detailed Info for Download");
            #endregion
        }
        
        #region Properties
        public WinCell UIAdgroupsdownloadedsoCell
        {
            get
            {
                if ((this.mUIAdgroupsdownloadedsoCell == null))
                {
                    this.mUIAdgroupsdownloadedsoCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAdgroupsdownloadedsoCell.SearchProperties[WinCell.PropertyNames.Value] = "Ad groups downloaded so far: 0";
                    this.mUIAdgroupsdownloadedsoCell.WindowTitles.Add("Detailed Info for Download");
                    #endregion
                }
                return this.mUIAdgroupsdownloadedsoCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIAdgroupsdownloadedsoCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow2Row : WinRow
    {
        
        public UIRow2Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "System.Drawing.Bitmap;Keywords downloaded so far: 0";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Detailed Info for Download");
            #endregion
        }
        
        #region Properties
        public WinCell UIKeywordsdownloadedsoCell
        {
            get
            {
                if ((this.mUIKeywordsdownloadedsoCell == null))
                {
                    this.mUIKeywordsdownloadedsoCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIKeywordsdownloadedsoCell.SearchProperties[WinCell.PropertyNames.Value] = "Keywords downloaded so far: 0";
                    this.mUIKeywordsdownloadedsoCell.WindowTitles.Add("Detailed Info for Download");
                    #endregion
                }
                return this.mUIKeywordsdownloadedsoCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIKeywordsdownloadedsoCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow3Row : WinRow
    {
        
        public UIRow3Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "System.Drawing.Bitmap;Text ads downloaded so far: 0";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Detailed Info for Download");
            #endregion
        }
        
        #region Properties
        public WinCell UITextadsdownloadedsofCell
        {
            get
            {
                if ((this.mUITextadsdownloadedsofCell == null))
                {
                    this.mUITextadsdownloadedsofCell = new WinCell(this);
                    #region Search Criteria
                    this.mUITextadsdownloadedsofCell.SearchProperties[WinCell.PropertyNames.Value] = "Text ads downloaded so far: 0";
                    this.mUITextadsdownloadedsofCell.WindowTitles.Add("Detailed Info for Download");
                    #endregion
                }
                return this.mUITextadsdownloadedsofCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUITextadsdownloadedsofCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow4Row : WinRow
    {
        
        public UIRow4Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "System.Drawing.Bitmap;Placements downloaded so far: 0";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Detailed Info for Download");
            #endregion
        }
        
        #region Properties
        public WinCell UIPlacementsdownloadedCell
        {
            get
            {
                if ((this.mUIPlacementsdownloadedCell == null))
                {
                    this.mUIPlacementsdownloadedCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIPlacementsdownloadedCell.SearchProperties[WinCell.PropertyNames.Value] = "Placements downloaded so far: 0";
                    this.mUIPlacementsdownloadedCell.WindowTitles.Add("Detailed Info for Download");
                    #endregion
                }
                return this.mUIPlacementsdownloadedCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIPlacementsdownloadedCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow1Row4 : WinRow
    {
        
        public UIRow1Row4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "System.Drawing.Bitmap;Ad groups downloaded so far: 1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Detailed Info for Download");
            #endregion
        }
        
        #region Properties
        public WinCell UIAdgroupsdownloadedsoCell
        {
            get
            {
                if ((this.mUIAdgroupsdownloadedsoCell == null))
                {
                    this.mUIAdgroupsdownloadedsoCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAdgroupsdownloadedsoCell.SearchProperties[WinCell.PropertyNames.Value] = "Ad groups downloaded so far: 1";
                    this.mUIAdgroupsdownloadedsoCell.WindowTitles.Add("Detailed Info for Download");
                    #endregion
                }
                return this.mUIAdgroupsdownloadedsoCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIAdgroupsdownloadedsoCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow3Row2 : WinRow
    {
        
        public UIRow3Row2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "System.Drawing.Bitmap;Text ads downloaded so far: 1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Detailed Info for Download");
            #endregion
        }
        
        #region Properties
        public WinCell UITextadsdownloadedsofCell
        {
            get
            {
                if ((this.mUITextadsdownloadedsofCell == null))
                {
                    this.mUITextadsdownloadedsofCell = new WinCell(this);
                    #region Search Criteria
                    this.mUITextadsdownloadedsofCell.SearchProperties[WinCell.PropertyNames.Value] = "Text ads downloaded so far: 1";
                    this.mUITextadsdownloadedsofCell.WindowTitles.Add("Detailed Info for Download");
                    #endregion
                }
                return this.mUITextadsdownloadedsofCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUITextadsdownloadedsofCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow2Row2 : WinRow
    {
        
        public UIRow2Row2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "System.Drawing.Bitmap;Keywords downloaded so far: 1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Detailed Info for Download");
            #endregion
        }
        
        #region Properties
        public WinCell UIKeywordsdownloadedsoCell
        {
            get
            {
                if ((this.mUIKeywordsdownloadedsoCell == null))
                {
                    this.mUIKeywordsdownloadedsoCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIKeywordsdownloadedsoCell.SearchProperties[WinCell.PropertyNames.Value] = "Keywords downloaded so far: 1";
                    this.mUIKeywordsdownloadedsoCell.WindowTitles.Add("Detailed Info for Download");
                    #endregion
                }
                return this.mUIKeywordsdownloadedsoCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIKeywordsdownloadedsoCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow0Row21 : WinRow
    {
        
        public UIRow0Row21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "System.Drawing.Bitmap;Campaigns downloaded so far: 4";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Detailed Info for Download");
            #endregion
        }
        
        #region Properties
        public WinCell UICampaignsdownloadedsCell
        {
            get
            {
                if ((this.mUICampaignsdownloadedsCell == null))
                {
                    this.mUICampaignsdownloadedsCell = new WinCell(this);
                    #region Search Criteria
                    this.mUICampaignsdownloadedsCell.SearchProperties[WinCell.PropertyNames.Value] = "Campaigns downloaded so far: 4";
                    this.mUICampaignsdownloadedsCell.WindowTitles.Add("Detailed Info for Download");
                    #endregion
                }
                return this.mUICampaignsdownloadedsCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUICampaignsdownloadedsCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow1Row5 : WinRow
    {
        
        public UIRow1Row5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "System.Drawing.Bitmap;Ads downloaded so far: 13";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Detailed Info for Download");
            #endregion
        }
        
        #region Properties
        public WinCell UIAdsdownloadedsofar13Cell
        {
            get
            {
                if ((this.mUIAdsdownloadedsofar13Cell == null))
                {
                    this.mUIAdsdownloadedsofar13Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAdsdownloadedsofar13Cell.SearchProperties[WinCell.PropertyNames.Value] = "Ads downloaded so far: 13";
                    this.mUIAdsdownloadedsofar13Cell.WindowTitles.Add("Detailed Info for Download");
                    #endregion
                }
                return this.mUIAdsdownloadedsofar13Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIAdsdownloadedsofar13Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow0Row3 : WinRow
    {
        
        public UIRow0Row3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinRow.PropertyNames.Value, "Campaigns downloaded so far: ", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Detailed Info for Download");
            #endregion
        }
        
        #region Properties
        public WinCell UICampaignsdownloadedsCell
        {
            get
            {
                if ((this.mUICampaignsdownloadedsCell == null))
                {
                    this.mUICampaignsdownloadedsCell = new WinCell(this);
                    #region Search Criteria
                    this.mUICampaignsdownloadedsCell.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Value, "Campaigns downloaded so far: ", PropertyExpressionOperator.Contains));
                    this.mUICampaignsdownloadedsCell.WindowTitles.Add("Detailed Info for Download");
                    #endregion
                }
                return this.mUICampaignsdownloadedsCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUICampaignsdownloadedsCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow1Row6 : WinRow
    {
        
        public UIRow1Row6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinRow.PropertyNames.Value, "Ads downloaded so far: ", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Detailed Info for Download");
            #endregion
        }
        
        #region Properties
        public WinCell UIAdsdownloadedsofar53Cell
        {
            get
            {
                if ((this.mUIAdsdownloadedsofar53Cell == null))
                {
                    this.mUIAdsdownloadedsofar53Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAdsdownloadedsofar53Cell.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Value, "Ads downloaded so far: ", PropertyExpressionOperator.Contains));
                    this.mUIAdsdownloadedsofar53Cell.WindowTitles.Add("Detailed Info for Download");
                    #endregion
                }
                return this.mUIAdsdownloadedsofar53Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIAdsdownloadedsofar53Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow1Row7 : WinRow
    {
        
        public UIRow1Row7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "System.Drawing.Bitmap;Ads downloaded so far: 5";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Detailed Info for Download");
            #endregion
        }
        
        #region Properties
        public WinCell UIAdsdownloadedsofar5Cell
        {
            get
            {
                if ((this.mUIAdsdownloadedsofar5Cell == null))
                {
                    this.mUIAdsdownloadedsofar5Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAdsdownloadedsofar5Cell.SearchProperties[WinCell.PropertyNames.Value] = "Ads downloaded so far: 5";
                    this.mUIAdsdownloadedsofar5Cell.WindowTitles.Add("Detailed Info for Download");
                    #endregion
                }
                return this.mUIAdsdownloadedsofar5Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIAdsdownloadedsofar5Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar2 : WinScrollBar
    {
        
        public UIVerticalScrollBar2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar2 : WinScrollBar
    {
        
        public UIHorizontalScrollBar2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIInformationScrollBar : WinScrollBar
    {
        
        public UIInformationScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIInformationScrollBar1 : WinScrollBar
    {
        
        public UIInformationScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIErrorMessagesWindow : WinWindow
    {
        
        public UIErrorMessagesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "tabPage2";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UITabPage2MenuBar
        {
            get
            {
                if ((this.mUITabPage2MenuBar == null))
                {
                    this.mUITabPage2MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUITabPage2MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUITabPage2MenuBar;
            }
        }
        
        public WinTitleBar UIErrorMessagesTitleBar
        {
            get
            {
                if ((this.mUIErrorMessagesTitleBar == null))
                {
                    this.mUIErrorMessagesTitleBar = new WinTitleBar(this);
                }
                return this.mUIErrorMessagesTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UITabPage2MenuBar1
        {
            get
            {
                if ((this.mUITabPage2MenuBar1 == null))
                {
                    this.mUITabPage2MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUITabPage2MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUITabPage2MenuBar1;
            }
        }
        
        public WinClient UIErrorMessagesClient
        {
            get
            {
                if ((this.mUIErrorMessagesClient == null))
                {
                    this.mUIErrorMessagesClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIErrorMessagesClient.SearchProperties[WinControl.PropertyNames.Name] = "Error Messages";
                    #endregion
                }
                return this.mUIErrorMessagesClient;
            }
        }
        
        public WinScrollBar UIErrorMessagesScrollBar
        {
            get
            {
                if ((this.mUIErrorMessagesScrollBar == null))
                {
                    this.mUIErrorMessagesScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIErrorMessagesScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIErrorMessagesScrollBar;
            }
        }
        
        public WinScrollBar UIErrorMessagesScrollBar1
        {
            get
            {
                if ((this.mUIErrorMessagesScrollBar1 == null))
                {
                    this.mUIErrorMessagesScrollBar1 = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIErrorMessagesScrollBar1.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIErrorMessagesScrollBar1;
            }
        }
        
        public WinControl UIErrorMessagesGrip
        {
            get
            {
                if ((this.mUIErrorMessagesGrip == null))
                {
                    this.mUIErrorMessagesGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIErrorMessagesGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIErrorMessagesGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUITabPage2MenuBar;
        
        private WinTitleBar mUIErrorMessagesTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUITabPage2MenuBar1;
        
        private WinClient mUIErrorMessagesClient;
        
        private WinScrollBar mUIErrorMessagesScrollBar;
        
        private WinScrollBar mUIErrorMessagesScrollBar1;
        
        private WinControl mUIErrorMessagesGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIErrorMessagesClient : WinClient
    {
        
        public UIErrorMessagesClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Error Messages";
            #endregion
        }
        
        #region Properties
        public WinWindow UISageGridViewErrorWindow
        {
            get
            {
                if ((this.mUISageGridViewErrorWindow == null))
                {
                    this.mUISageGridViewErrorWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUISageGridViewErrorWindow.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "DataGridView";
                    this.mUISageGridViewErrorWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUISageGridViewErrorWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUISageGridViewErrorWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISageGridViewErrorWindow : WinWindow
    {
        
        public UISageGridViewErrorWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "sageGridViewError";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UISageGridViewErrorMenuBar
        {
            get
            {
                if ((this.mUISageGridViewErrorMenuBar == null))
                {
                    this.mUISageGridViewErrorMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISageGridViewErrorMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUISageGridViewErrorMenuBar;
            }
        }
        
        public WinTitleBar UISageGridViewErrorTitleBar
        {
            get
            {
                if ((this.mUISageGridViewErrorTitleBar == null))
                {
                    this.mUISageGridViewErrorTitleBar = new WinTitleBar(this);
                }
                return this.mUISageGridViewErrorTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UISageGridViewErrorMenuBar1
        {
            get
            {
                if ((this.mUISageGridViewErrorMenuBar1 == null))
                {
                    this.mUISageGridViewErrorMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISageGridViewErrorMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUISageGridViewErrorMenuBar1;
            }
        }
        
        public WinTable UIDataGridViewTable
        {
            get
            {
                if ((this.mUIDataGridViewTable == null))
                {
                    this.mUIDataGridViewTable = new WinTable(this);
                    #region Search Criteria
                    this.mUIDataGridViewTable.SearchProperties[WinTable.PropertyNames.Name] = "DataGridView";
                    #endregion
                }
                return this.mUIDataGridViewTable;
            }
        }
        
        public UIVerticalScrollBar3 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar3(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar3 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar3(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UISageGridViewErrorGrip
        {
            get
            {
                if ((this.mUISageGridViewErrorGrip == null))
                {
                    this.mUISageGridViewErrorGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUISageGridViewErrorGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUISageGridViewErrorGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUISageGridViewErrorMenuBar;
        
        private WinTitleBar mUISageGridViewErrorTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUISageGridViewErrorMenuBar1;
        
        private WinTable mUIDataGridViewTable;
        
        private UIVerticalScrollBar3 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar3 mUIHorizontalScrollBar;
        
        private WinControl mUISageGridViewErrorGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar3 : WinScrollBar
    {
        
        public UIVerticalScrollBar3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar3 : WinScrollBar
    {
        
        public UIHorizontalScrollBar3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIErrorMessagesScrollBar : WinScrollBar
    {
        
        public UIErrorMessagesScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIErrorMessagesScrollBar1 : WinScrollBar
    {
        
        public UIErrorMessagesScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar21 : WinScrollBar
    {
        
        public UIVerticalScrollBar21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar21 : WinScrollBar
    {
        
        public UIHorizontalScrollBar21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UICloseWindow : WinWindow
    {
        
        public UICloseWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "sageButton1";
            this.WindowTitles.Add("Detailed Info for Download");
            #endregion
        }
        
        #region Properties
        public WinMenuBar UISageButton1MenuBar
        {
            get
            {
                if ((this.mUISageButton1MenuBar == null))
                {
                    this.mUISageButton1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISageButton1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUISageButton1MenuBar;
            }
        }
        
        public WinTitleBar UICloseTitleBar
        {
            get
            {
                if ((this.mUICloseTitleBar == null))
                {
                    this.mUICloseTitleBar = new WinTitleBar(this);
                }
                return this.mUICloseTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UISageButton1MenuBar1
        {
            get
            {
                if ((this.mUISageButton1MenuBar1 == null))
                {
                    this.mUISageButton1MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISageButton1MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUISageButton1MenuBar1;
            }
        }
        
        public WinButton UICloseButton1
        {
            get
            {
                if ((this.mUICloseButton1 == null))
                {
                    this.mUICloseButton1 = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton1.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton1;
            }
        }
        
        public WinScrollBar UICloseScrollBar
        {
            get
            {
                if ((this.mUICloseScrollBar == null))
                {
                    this.mUICloseScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUICloseScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUICloseScrollBar;
            }
        }
        
        public WinScrollBar UICloseScrollBar1
        {
            get
            {
                if ((this.mUICloseScrollBar1 == null))
                {
                    this.mUICloseScrollBar1 = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUICloseScrollBar1.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUICloseScrollBar1;
            }
        }
        
        public WinControl UICloseGrip
        {
            get
            {
                if ((this.mUICloseGrip == null))
                {
                    this.mUICloseGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUICloseGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUICloseGrip;
            }
        }
        
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Detailed Info for Download");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUISageButton1MenuBar;
        
        private WinTitleBar mUICloseTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUISageButton1MenuBar1;
        
        private WinButton mUICloseButton1;
        
        private WinScrollBar mUICloseScrollBar;
        
        private WinScrollBar mUICloseScrollBar1;
        
        private WinControl mUICloseGrip;
        
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UICloseScrollBar : WinScrollBar
    {
        
        public UICloseScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UICloseScrollBar1 : WinScrollBar
    {
        
        public UICloseScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar31 : WinScrollBar
    {
        
        public UIVerticalScrollBar31(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar31 : WinScrollBar
    {
        
        public UIHorizontalScrollBar31(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar4 : WinScrollBar
    {
        
        public UIVerticalScrollBar4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar4 : WinScrollBar
    {
        
        public UIHorizontalScrollBar4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDetailedInfoforDownlScrollBar : WinScrollBar
    {
        
        public UIDetailedInfoforDownlScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDetailedInfoforDownlScrollBar1 : WinScrollBar
    {
        
        public UIDetailedInfoforDownlScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDetailedInfoforDownlWindow1 : WinWindow
    {
        
        public UIDetailedInfoforDownlWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Detailed Info for Download Performance";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Detailed Info for Download Performance");
            #endregion
        }
        
        #region Properties
        public UISageGridViewInfoWindow1 UISageGridViewInfoWindow
        {
            get
            {
                if ((this.mUISageGridViewInfoWindow == null))
                {
                    this.mUISageGridViewInfoWindow = new UISageGridViewInfoWindow1(this);
                }
                return this.mUISageGridViewInfoWindow;
            }
        }
        
        public UISageGridViewJobsWindow1 UISageGridViewJobsWindow
        {
            get
            {
                if ((this.mUISageGridViewJobsWindow == null))
                {
                    this.mUISageGridViewJobsWindow = new UISageGridViewJobsWindow1(this);
                }
                return this.mUISageGridViewJobsWindow;
            }
        }
        
        public UIDetailedmessagesTabList1 UIDetailedmessagesTabList
        {
            get
            {
                if ((this.mUIDetailedmessagesTabList == null))
                {
                    this.mUIDetailedmessagesTabList = new UIDetailedmessagesTabList1(this);
                }
                return this.mUIDetailedmessagesTabList;
            }
        }
        #endregion
        
        #region Fields
        private UISageGridViewInfoWindow1 mUISageGridViewInfoWindow;
        
        private UISageGridViewJobsWindow1 mUISageGridViewJobsWindow;
        
        private UIDetailedmessagesTabList1 mUIDetailedmessagesTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISageGridViewInfoWindow1 : WinWindow
    {
        
        public UISageGridViewInfoWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "sageGridViewInfo";
            this.WindowTitles.Add("Detailed Info for Download Performance");
            #endregion
        }
        
        #region Properties
        public UIDataGridViewTable2 UIDataGridViewTable
        {
            get
            {
                if ((this.mUIDataGridViewTable == null))
                {
                    this.mUIDataGridViewTable = new UIDataGridViewTable2(this);
                }
                return this.mUIDataGridViewTable;
            }
        }
        #endregion
        
        #region Fields
        private UIDataGridViewTable2 mUIDataGridViewTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDataGridViewTable2 : WinTable
    {
        
        public UIDataGridViewTable2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTable.PropertyNames.Name] = "DataGridView";
            this.WindowTitles.Add("Detailed Info for Download Performance");
            #endregion
        }
        
        #region Properties
        public UIRow0Row4 UIRow0Row
        {
            get
            {
                if ((this.mUIRow0Row == null))
                {
                    this.mUIRow0Row = new UIRow0Row4(this);
                }
                return this.mUIRow0Row;
            }
        }
        
        public UIRow1Row UIRow1Row
        {
            get
            {
                if ((this.mUIRow1Row == null))
                {
                    this.mUIRow1Row = new UIRow1Row(this);
                }
                return this.mUIRow1Row;
            }
        }
        
        public UIRow2Row1 UIRow2Row
        {
            get
            {
                if ((this.mUIRow2Row == null))
                {
                    this.mUIRow2Row = new UIRow2Row1(this);
                }
                return this.mUIRow2Row;
            }
        }
        
        public UIRow3Row1 UIRow3Row
        {
            get
            {
                if ((this.mUIRow3Row == null))
                {
                    this.mUIRow3Row = new UIRow3Row1(this);
                }
                return this.mUIRow3Row;
            }
        }
        
        public UIRow4Row1 UIRow4Row
        {
            get
            {
                if ((this.mUIRow4Row == null))
                {
                    this.mUIRow4Row = new UIRow4Row1(this);
                }
                return this.mUIRow4Row;
            }
        }
        
        public UIRow5Row UIRow5Row
        {
            get
            {
                if ((this.mUIRow5Row == null))
                {
                    this.mUIRow5Row = new UIRow5Row(this);
                }
                return this.mUIRow5Row;
            }
        }
        #endregion
        
        #region Fields
        private UIRow0Row4 mUIRow0Row;
        
        private UIRow1Row mUIRow1Row;
        
        private UIRow2Row1 mUIRow2Row;
        
        private UIRow3Row1 mUIRow3Row;
        
        private UIRow4Row1 mUIRow4Row;
        
        private UIRow5Row mUIRow5Row;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow0Row4 : WinRow
    {
        
        public UIRow0Row4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinRow.PropertyNames.Value, "Account2 #348004880(USD)", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Detailed Info for Download Performance");
            #endregion
        }
        
        #region Properties
        public WinCell UIAccount2348004880USDCell
        {
            get
            {
                if ((this.mUIAccount2348004880USDCell == null))
                {
                    this.mUIAccount2348004880USDCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAccount2348004880USDCell.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Value, "Account2 #348004880(USD)", PropertyExpressionOperator.Contains));
                    this.mUIAccount2348004880USDCell.WindowTitles.Add("Detailed Info for Download Performance");
                    #endregion
                }
                return this.mUIAccount2348004880USDCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIAccount2348004880USDCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow1Row : WinRow
    {
        
        public UIRow1Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinRow.PropertyNames.Value, "Account2 #348004880(USD)", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinRow.PropertyNames.Instance] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Detailed Info for Download Performance");
            #endregion
        }
        
        #region Properties
        public WinCell UIAccount2348004880USDCell
        {
            get
            {
                if ((this.mUIAccount2348004880USDCell == null))
                {
                    this.mUIAccount2348004880USDCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAccount2348004880USDCell.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Value, "Account2 #348004880(USD)", PropertyExpressionOperator.Contains));
                    this.mUIAccount2348004880USDCell.WindowTitles.Add("Detailed Info for Download Performance");
                    #endregion
                }
                return this.mUIAccount2348004880USDCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIAccount2348004880USDCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow2Row1 : WinRow
    {
        
        public UIRow2Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinRow.PropertyNames.Value, "Account2 #348004880(USD)", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinRow.PropertyNames.Instance] = "3";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Detailed Info for Download Performance");
            #endregion
        }
        
        #region Properties
        public WinCell UIAccount2348004880USDCell
        {
            get
            {
                if ((this.mUIAccount2348004880USDCell == null))
                {
                    this.mUIAccount2348004880USDCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAccount2348004880USDCell.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Value, "Account2 #348004880(USD)", PropertyExpressionOperator.Contains));
                    this.mUIAccount2348004880USDCell.WindowTitles.Add("Detailed Info for Download Performance");
                    #endregion
                }
                return this.mUIAccount2348004880USDCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIAccount2348004880USDCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow3Row1 : WinRow
    {
        
        public UIRow3Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinRow.PropertyNames.Value, "Account2 #348004880(USD)", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinRow.PropertyNames.Instance] = "4";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Detailed Info for Download Performance");
            #endregion
        }
        
        #region Properties
        public WinCell UIAccount2348004880USDCell
        {
            get
            {
                if ((this.mUIAccount2348004880USDCell == null))
                {
                    this.mUIAccount2348004880USDCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAccount2348004880USDCell.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Value, "Account2 #348004880(USD)", PropertyExpressionOperator.Contains));
                    this.mUIAccount2348004880USDCell.WindowTitles.Add("Detailed Info for Download Performance");
                    #endregion
                }
                return this.mUIAccount2348004880USDCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIAccount2348004880USDCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow4Row1 : WinRow
    {
        
        public UIRow4Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinRow.PropertyNames.Value, "Account2 #348004880(USD)", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinRow.PropertyNames.Instance] = "5";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Detailed Info for Download Performance");
            #endregion
        }
        
        #region Properties
        public WinCell UIAccount2348004880USDCell
        {
            get
            {
                if ((this.mUIAccount2348004880USDCell == null))
                {
                    this.mUIAccount2348004880USDCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAccount2348004880USDCell.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Value, "Account2 #348004880(USD)", PropertyExpressionOperator.Contains));
                    this.mUIAccount2348004880USDCell.WindowTitles.Add("Detailed Info for Download Performance");
                    #endregion
                }
                return this.mUIAccount2348004880USDCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIAccount2348004880USDCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow5Row : WinRow
    {
        
        public UIRow5Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinRow.PropertyNames.Value, "Account2 #348004880(USD)", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinRow.PropertyNames.Instance] = "6";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Detailed Info for Download Performance");
            #endregion
        }
        
        #region Properties
        public WinCell UIAccount2348004880USDCell
        {
            get
            {
                if ((this.mUIAccount2348004880USDCell == null))
                {
                    this.mUIAccount2348004880USDCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAccount2348004880USDCell.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Value, "Account2 #348004880(USD)", PropertyExpressionOperator.Contains));
                    this.mUIAccount2348004880USDCell.WindowTitles.Add("Detailed Info for Download Performance");
                    #endregion
                }
                return this.mUIAccount2348004880USDCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIAccount2348004880USDCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISageGridViewJobsWindow1 : WinWindow
    {
        
        public UISageGridViewJobsWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "sageGridViewJobs";
            this.WindowTitles.Add("Detailed Info for Download Performance");
            #endregion
        }
        
        #region Properties
        public UIDataGridViewTable3 UIDataGridViewTable
        {
            get
            {
                if ((this.mUIDataGridViewTable == null))
                {
                    this.mUIDataGridViewTable = new UIDataGridViewTable3(this);
                }
                return this.mUIDataGridViewTable;
            }
        }
        #endregion
        
        #region Fields
        private UIDataGridViewTable3 mUIDataGridViewTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDataGridViewTable3 : WinTable
    {
        
        public UIDataGridViewTable3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTable.PropertyNames.Name] = "DataGridView";
            this.WindowTitles.Add("Detailed Info for Download Performance");
            #endregion
        }
        
        #region Properties
        public WinRow UIRow0Row
        {
            get
            {
                if ((this.mUIRow0Row == null))
                {
                    this.mUIRow0Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow0Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 0";
                    this.mUIRow0Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mUIRow0Row.WindowTitles.Add("Detailed Info for Download Performance");
                    #endregion
                }
                return this.mUIRow0Row;
            }
        }
        #endregion
        
        #region Fields
        private WinRow mUIRow0Row;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDetailedmessagesTabList1 : WinTabList
    {
        
        public UIDetailedmessagesTabList1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTabList.PropertyNames.Name] = "Detailed messages";
            this.WindowTitles.Add("Detailed Info for Download Performance");
            #endregion
        }
        
        #region Properties
        public WinTabPage UIErrorMessagesTabPage
        {
            get
            {
                if ((this.mUIErrorMessagesTabPage == null))
                {
                    this.mUIErrorMessagesTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUIErrorMessagesTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Error Messages";
                    this.mUIErrorMessagesTabPage.WindowTitles.Add("Detailed Info for Download Performance");
                    #endregion
                }
                return this.mUIErrorMessagesTabPage;
            }
        }
        #endregion
        
        #region Fields
        private WinTabPage mUIErrorMessagesTabPage;
        #endregion
    }
}
