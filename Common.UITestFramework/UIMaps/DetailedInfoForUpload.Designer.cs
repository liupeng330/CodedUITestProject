// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Common.UITestFramework.UIMaps.DetailedInfoForUploadClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public partial class DetailedInfoForUpload
    {
        
        /// <summary>
        /// ClickErrorMessageTab
        /// </summary>
        public void ClickErrorMessageTab()
        {
            #region Variable Declarations
            WinTabPage uIErrorMessagesTabPage = this.UIDetailedInfoforUploaWindow.UIDetailedmessagesTabList.UIErrorMessagesTabPage;
            #endregion

            // Click 'Error Messages' tab
            Mouse.Click(uIErrorMessagesTabPage, new Point(52, 13));
        }
        
        /// <summary>
        /// VerifyDeleteOneAdCenterAdGroup - Use 'VerifyDeleteOneAdCenterAdGroupExpectedValues' to pass parameters into this method.
        /// </summary>
        public void VerifyDeleteOneAdCenterAdGroup()
        {
            #region Variable Declarations
            WinRow uIRow0Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow0Row;
            WinRow uIRow1Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow1Row;
            WinRow uIRow2Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow2Row;
            WinRow uIRow3Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow3Row;
            #endregion

            // Verify that 'Row 0' row's property 'Value' equals 'Campaigns(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyDeleteOneAdCenterAdGroupExpectedValues.UIRow0RowValue, uIRow0Row.Value);

            // Verify that 'Row 1' row's property 'Value' equals 'Ad groups(1);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;1 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyDeleteOneAdCenterAdGroupExpectedValues.UIRow1RowValue, uIRow1Row.Value);

            // Verify that 'Row 2' row's property 'Value' equals 'Keywords(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyDeleteOneAdCenterAdGroupExpectedValues.UIRow2RowValue, uIRow2Row.Value);

            // Verify that 'Row 3' row's property 'Value' equals 'Text ads(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyDeleteOneAdCenterAdGroupExpectedValues.UIRow3RowValue, uIRow3Row.Value);
        }
        
        /// <summary>
        /// VerifyDeleteOneAdCenterCampaign - Use 'VerifyDeleteOneAdCenterCampaignExpectedValues' to pass parameters into this method.
        /// </summary>
        public void VerifyDeleteOneAdCenterCampaign()
        {
            #region Variable Declarations
            WinRow uIRow0Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow0Row;
            WinRow uIRow1Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow1Row;
            WinRow uIRow2Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow2Row;
            WinRow uIRow3Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow3Row;
            #endregion

            // Verify that 'Row 0' row's property 'Value' equals 'Campaigns(1);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;1 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyDeleteOneAdCenterCampaignExpectedValues.UIRow0RowValue, uIRow0Row.Value);

            // Verify that 'Row 1' row's property 'Value' equals 'Ad groups(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyDeleteOneAdCenterCampaignExpectedValues.UIRow1RowValue, uIRow1Row.Value);

            // Verify that 'Row 2' row's property 'Value' equals 'Keywords(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyDeleteOneAdCenterCampaignExpectedValues.UIRow2RowValue, uIRow2Row.Value);

            // Verify that 'Row 3' row's property 'Value' equals 'Text ads(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyDeleteOneAdCenterCampaignExpectedValues.UIRow3RowValue, uIRow3Row.Value);
        }
        
        /// <summary>
        /// VerifyDeleteOneAdvertisement - Use 'VerifyDeleteOneAdvertisementExpectedValues' to pass parameters into this method.
        /// </summary>
        public void VerifyDeleteOneAdvertisement()
        {
            #region Variable Declarations
            WinCell uIHaihadsagecom4684830Cell = this.UIDetailedInfoforUploaWindow.UISageGridViewJobsWindow.UIDataGridViewTable.UIRow0Row.UIHaihadsagecom4684830Cell;
            WinCell uIFinishedCell = this.UIDetailedInfoforUploaWindow.UISageGridViewJobsWindow.UIDataGridViewTable.UIRow0Row.UIFinishedCell;
            WinCell uICampaigns0Cell = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow0Row4.UICampaigns0Cell;
            WinCell uIItem0Succeeded0FaileCell = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow0Row4.UIItem0Succeeded0FaileCell;
            WinCell uIItem0Succeeded0FaileCell1 = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow0Row4.UIItem0Succeeded0FaileCell1;
            WinCell uIItem0Succeeded0FaileCell2 = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow0Row4.UIItem0Succeeded0FaileCell2;
            WinCell uIAdgroups1Cell = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow1Row3.UIAdgroups1Cell;
            WinCell uIItem0Succeeded0FaileCell3 = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow1Row3.UIItem0Succeeded0FaileCell;
            WinCell uIItem0Succeeded0FaileCell11 = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow1Row3.UIItem0Succeeded0FaileCell1;
            WinCell uIItem1Succeeded0FaileCell = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow1Row3.UIItem1Succeeded0FaileCell;
            #endregion

            // Verify that 'haih@ad-sage.com #46848300(USD)' cell's property 'Value' equals 'haih@ad-sage.com #46848300(USD)'
            Assert.AreEqual(this.VerifyDeleteOneAdvertisementExpectedValues.UIHaihadsagecom4684830CellValue, uIHaihadsagecom4684830Cell.Value);

            // Verify that 'Finished' cell's property 'Value' equals 'Finished'
            Assert.AreEqual(this.VerifyDeleteOneAdvertisementExpectedValues.UIFinishedCellValue, uIFinishedCell.Value);

            // Verify that 'Campaigns(0)' cell's property 'Value' equals 'Campaigns(0)'
            Assert.AreEqual(this.VerifyDeleteOneAdvertisementExpectedValues.UICampaigns0CellValue, uICampaigns0Cell.Value);

            // Verify that '0 Succeeded, 0 Failed' cell's property 'Value' equals '0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyDeleteOneAdvertisementExpectedValues.UIItem0Succeeded0FaileCellValue, uIItem0Succeeded0FaileCell.Value);

            // Verify that '0 Succeeded, 0 Failed' cell's property 'Value' equals '0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyDeleteOneAdvertisementExpectedValues.UIItem0Succeeded0FaileCell1Value, uIItem0Succeeded0FaileCell1.Value);

            // Verify that '0 Succeeded, 0 Failed' cell's property 'Value' equals '0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyDeleteOneAdvertisementExpectedValues.UIItem0Succeeded0FaileCell2Value, uIItem0Succeeded0FaileCell2.Value);

            // Verify that 'Ad groups(1)' cell's property 'Value' equals 'Ads(1)'
            Assert.AreEqual(this.VerifyDeleteOneAdvertisementExpectedValues.UIAdgroups1CellValue, uIAdgroups1Cell.Value);

            // Verify that '0 Succeeded, 0 Failed' cell's property 'Value' equals '0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyDeleteOneAdvertisementExpectedValues.UIItem0Succeeded0FaileCellValue1, uIItem0Succeeded0FaileCell3.Value);

            // Verify that '0 Succeeded, 0 Failed' cell's property 'Value' equals '0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyDeleteOneAdvertisementExpectedValues.UIItem0Succeeded0FaileCell1Value1, uIItem0Succeeded0FaileCell11.Value);

            // Verify that '1 Succeeded, 0 Failed' cell's property 'Value' equals '1 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyDeleteOneAdvertisementExpectedValues.UIItem1Succeeded0FaileCellValue, uIItem1Succeeded0FaileCell.Value);
        }
        
        /// <summary>
        /// VerifyDeleteOneCampaign - Use 'VerifyDeleteOneCampaignExpectedValues' to pass parameters into this method.
        /// </summary>
        public void VerifyDeleteOneCampaign()
        {
            #region Variable Declarations
            WinCell uIHaihadsagecom4684830Cell = this.UIDetailedInfoforUploaWindow.UISageGridViewJobsWindow.UIDataGridViewTable.UIRow0Row.UIHaihadsagecom4684830Cell;
            WinCell uIFinishedCell = this.UIDetailedInfoforUploaWindow.UISageGridViewJobsWindow.UIDataGridViewTable.UIRow0Row.UIFinishedCell;
            WinCell uICampaigns1Cell = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow0Row2.UICampaigns1Cell;
            WinCell uIItem0Succeeded0FaileCell = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow0Row2.UIItem0Succeeded0FaileCell;
            WinCell uIItem0Succeeded0FaileCell1 = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow0Row2.UIItem0Succeeded0FaileCell1;
            WinCell uIItem1Succeeded0FaileCell = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow0Row2.UIItem1Succeeded0FaileCell;
            WinCell uIAdgroups0Cell = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow1Row1.UIAdgroups0Cell;
            WinCell uIItem0Succeeded0FaileCell2 = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow1Row1.UIItem0Succeeded0FaileCell;
            WinCell uIItem0Succeeded0FaileCell11 = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow1Row1.UIItem0Succeeded0FaileCell1;
            WinCell uIItem0Succeeded0FaileCell21 = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow1Row1.UIItem0Succeeded0FaileCell2;
            #endregion

            // Verify that 'haih@ad-sage.com #46848300(USD)' cell's property 'Value' equals 'haih@ad-sage.com #46848300(USD)'
            Assert.AreEqual(this.VerifyDeleteOneCampaignExpectedValues.UIHaihadsagecom4684830CellValue, uIHaihadsagecom4684830Cell.Value);

            // Verify that 'Finished' cell's property 'Value' equals 'Finished'
            Assert.AreEqual(this.VerifyDeleteOneCampaignExpectedValues.UIFinishedCellValue, uIFinishedCell.Value);

            // Verify that 'Campaigns(1)' cell's property 'Value' equals 'Campaigns(1)'
            Assert.AreEqual(this.VerifyDeleteOneCampaignExpectedValues.UICampaigns1CellValue, uICampaigns1Cell.Value);

            // Verify that '0 Succeeded, 0 Failed' cell's property 'Value' equals '0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyDeleteOneCampaignExpectedValues.UIItem0Succeeded0FaileCellValue, uIItem0Succeeded0FaileCell.Value);

            // Verify that '0 Succeeded, 0 Failed' cell's property 'Value' equals '0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyDeleteOneCampaignExpectedValues.UIItem0Succeeded0FaileCell1Value, uIItem0Succeeded0FaileCell1.Value);

            // Verify that '1 Succeeded, 0 Failed' cell's property 'Value' equals '1 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyDeleteOneCampaignExpectedValues.UIItem1Succeeded0FaileCellValue, uIItem1Succeeded0FaileCell.Value);

            // Verify that 'Ad groups(0)' cell's property 'Value' equals 'Ads(0)'
            Assert.AreEqual(this.VerifyDeleteOneCampaignExpectedValues.UIAdgroups0CellValue, uIAdgroups0Cell.Value);

            // Verify that '0 Succeeded, 0 Failed' cell's property 'Value' equals '0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyDeleteOneCampaignExpectedValues.UIItem0Succeeded0FaileCellValue1, uIItem0Succeeded0FaileCell2.Value);

            // Verify that '0 Succeeded, 0 Failed' cell's property 'Value' equals '0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyDeleteOneCampaignExpectedValues.UIItem0Succeeded0FaileCell1Value1, uIItem0Succeeded0FaileCell11.Value);

            // Verify that '0 Succeeded, 0 Failed' cell's property 'Value' equals '0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyDeleteOneCampaignExpectedValues.UIItem0Succeeded0FaileCell2Value, uIItem0Succeeded0FaileCell21.Value);
        }
        
        /// <summary>
        /// VerifyDeleteOneGoogleAdvertisement - Use 'VerifyDeleteOneGoogleAdvertisementExpectedValues' to pass parameters into this method.
        /// </summary>
        public void VerifyDeleteOneGoogleAdvertisement()
        {
            #region Variable Declarations
            WinRow uIRow0Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow0Row;
            WinRow uIRow1Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow1Row;
            WinRow uIRow2Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow2Row;
            WinRow uIRow3Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow3Row;
            WinRow uIRow4Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow4Row;
            #endregion

            // Verify that 'Row 0' row's property 'Value' equals 'Campaigns(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyDeleteOneGoogleAdvertisementExpectedValues.UIRow0RowValue, uIRow0Row.Value);

            // Verify that 'Row 1' row's property 'Value' equals 'Ad groups(1);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;1 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyDeleteOneGoogleAdvertisementExpectedValues.UIRow1RowValue, uIRow1Row.Value);

            // Verify that 'Row 2' row's property 'Value' equals 'Keywords(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyDeleteOneGoogleAdvertisementExpectedValues.UIRow2RowValue, uIRow2Row.Value);

            // Verify that 'Row 3' row's property 'Value' equals 'Text ads(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyDeleteOneGoogleAdvertisementExpectedValues.UIRow3RowValue, uIRow3Row.Value);

            // Verify that 'Row 4' row's property 'Value' equals 'Placements(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyDeleteOneGoogleAdvertisementExpectedValues.UIRow4RowValue, uIRow4Row.Value);
        }
        
        /// <summary>
        /// VerifyDeleteOneGoogleCampaign - Use 'VerifyDeleteOneGoogleCampaignExpectedValues' to pass parameters into this method.
        /// </summary>
        public void VerifyDeleteOneGoogleCampaign()
        {
            #region Variable Declarations
            WinRow uIRow0Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow0Row;
            WinRow uIRow1Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow1Row;
            WinRow uIRow2Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow2Row;
            WinRow uIRow3Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow3Row;
            WinRow uIRow4Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow4Row;
            #endregion

            // Verify that 'Row 0' row's property 'Value' equals 'Campaigns(1);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;1 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyDeleteOneGoogleCampaignExpectedValues.UIRow0RowValue, uIRow0Row.Value);

            // Verify that 'Row 1' row's property 'Value' equals 'Ad groups(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyDeleteOneGoogleCampaignExpectedValues.UIRow1RowValue, uIRow1Row.Value);

            // Verify that 'Row 2' row's property 'Value' equals 'Keywords(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyDeleteOneGoogleCampaignExpectedValues.UIRow2RowValue, uIRow2Row.Value);

            // Verify that 'Row 3' row's property 'Value' equals 'Text ads(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyDeleteOneGoogleCampaignExpectedValues.UIRow3RowValue, uIRow3Row.Value);

            // Verify that 'Row 4' row's property 'Value' equals 'Placements(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyDeleteOneGoogleCampaignExpectedValues.UIRow4RowValue, uIRow4Row.Value);
        }
        
        /// <summary>
        /// VerifyDeleteOneTextAdForGoogle - Use 'VerifyDeleteOneTextAdForGoogleExpectedValues' to pass parameters into this method.
        /// </summary>
        public void VerifyDeleteOneTextAdForGoogle()
        {
            #region Variable Declarations
            WinRow uIRow0Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow0Row;
            WinRow uIRow1Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow1Row;
            WinRow uIRow2Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow2Row;
            WinRow uIRow3Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow3Row;
            WinRow uIRow4Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow4Row;
            #endregion

            // Verify that 'Row 0' row's property 'Value' equals 'Campaigns(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyDeleteOneTextAdForGoogleExpectedValues.UIRow0RowValue, uIRow0Row.Value);

            // Verify that 'Row 1' row's property 'Value' equals 'Ad groups(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyDeleteOneTextAdForGoogleExpectedValues.UIRow1RowValue, uIRow1Row.Value);

            // Verify that 'Row 2' row's property 'Value' equals 'Keywords(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyDeleteOneTextAdForGoogleExpectedValues.UIRow2RowValue, uIRow2Row.Value);

            // Verify that 'Row 3' row's property 'Value' equals 'Text ads(1);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;1 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyDeleteOneTextAdForGoogleExpectedValues.UIRow3RowValue, uIRow3Row.Value);

            // Verify that 'Row 4' row's property 'Value' equals 'Placements(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyDeleteOneTextAdForGoogleExpectedValues.UIRow4RowValue, uIRow4Row.Value);
        }
        
        /// <summary>
        /// VerifyEditOneAdCenterCampaign - Use 'VerifyEditOneAdCenterCampaignExpectedValues' to pass parameters into this method.
        /// </summary>
        public void VerifyEditOneAdCenterCampaign()
        {
            #region Variable Declarations
            WinRow uIRow0Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow0Row;
            WinRow uIRow1Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow1Row;
            WinRow uIRow2Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow2Row;
            WinRow uIRow3Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow3Row;
            #endregion

            // Verify that 'Row 0' row's property 'Value' equals 'Campaigns(1);0 Succeeded, 0 Failed;1 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyEditOneAdCenterCampaignExpectedValues.UIRow0RowValue, uIRow0Row.Value);

            // Verify that 'Row 1' row's property 'Value' equals 'Ad groups(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyEditOneAdCenterCampaignExpectedValues.UIRow1RowValue, uIRow1Row.Value);

            // Verify that 'Row 2' row's property 'Value' equals 'Keywords(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyEditOneAdCenterCampaignExpectedValues.UIRow2RowValue, uIRow2Row.Value);

            // Verify that 'Row 3' row's property 'Value' equals 'Text ads(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyEditOneAdCenterCampaignExpectedValues.UIRow3RowValue, uIRow3Row.Value);
        }
        
        /// <summary>
        /// VerifyEditOneGoogleCampaign - Use 'VerifyEditOneGoogleCampaignExpectedValues' to pass parameters into this method.
        /// </summary>
        public void VerifyEditOneGoogleCampaign()
        {
            #region Variable Declarations
            WinRow uIRow0Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow0Row;
            WinRow uIRow1Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow1Row;
            WinRow uIRow2Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow2Row;
            WinRow uIRow3Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow3Row;
            WinRow uIRow4Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow4Row;
            #endregion

            // Verify that 'Row 0' row's property 'Value' equals 'Campaigns(1);0 Succeeded, 0 Failed;1 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyEditOneGoogleCampaignExpectedValues.UIRow0RowValue, uIRow0Row.Value);

            // Verify that 'Row 1' row's property 'Value' equals 'Ad groups(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyEditOneGoogleCampaignExpectedValues.UIRow1RowValue, uIRow1Row.Value);

            // Verify that 'Row 2' row's property 'Value' equals 'Keywords(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyEditOneGoogleCampaignExpectedValues.UIRow2RowValue, uIRow2Row.Value);

            // Verify that 'Row 3' row's property 'Value' equals 'Text ads(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyEditOneGoogleCampaignExpectedValues.UIRow3RowValue, uIRow3Row.Value);

            // Verify that 'Row 4' row's property 'Value' equals 'Placements(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyEditOneGoogleCampaignExpectedValues.UIRow4RowValue, uIRow4Row.Value);
        }
        
        /// <summary>
        /// VerifyUpdateOneAdvertisement - Use 'VerifyUpdateOneAdvertisementExpectedValues' to pass parameters into this method.
        /// </summary>
        public void VerifyUpdateOneAdvertisement()
        {
            #region Variable Declarations
            WinCell uIHaihadsagecom4684830Cell = this.UIDetailedInfoforUploaWindow.UISageGridViewJobsWindow.UIDataGridViewTable.UIRow0Row.UIHaihadsagecom4684830Cell;
            WinCell uIFinishedCell = this.UIDetailedInfoforUploaWindow.UISageGridViewJobsWindow.UIDataGridViewTable.UIRow0Row.UIFinishedCell;
            WinCell uICampaigns0Cell = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow0Row4.UICampaigns0Cell;
            WinCell uIItem0Succeeded0FaileCell = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow0Row4.UIItem0Succeeded0FaileCell;
            WinCell uIItem0Succeeded0FaileCell1 = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow0Row4.UIItem0Succeeded0FaileCell1;
            WinCell uIItem0Succeeded0FaileCell2 = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow0Row4.UIItem0Succeeded0FaileCell2;
            WinCell uIAdgroups1Cell = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow1Row4.UIAdgroups1Cell;
            WinCell uIItem0Succeeded0FaileCell3 = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow1Row4.UIItem0Succeeded0FaileCell;
            WinCell uIItem1Succeeded0FaileCell = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow1Row4.UIItem1Succeeded0FaileCell;
            WinCell uIItem0Succeeded0FaileCell11 = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow1Row4.UIItem0Succeeded0FaileCell1;
            #endregion

            // Verify that 'haih@ad-sage.com #46848300(USD)' cell's property 'Value' equals 'haih@ad-sage.com #46848300(USD)'
            Assert.AreEqual(this.VerifyUpdateOneAdvertisementExpectedValues.UIHaihadsagecom4684830CellValue, uIHaihadsagecom4684830Cell.Value);

            // Verify that 'Finished' cell's property 'Value' equals 'Finished'
            Assert.AreEqual(this.VerifyUpdateOneAdvertisementExpectedValues.UIFinishedCellValue, uIFinishedCell.Value);

            // Verify that 'Campaigns(0)' cell's property 'Value' equals 'Campaigns(0)'
            Assert.AreEqual(this.VerifyUpdateOneAdvertisementExpectedValues.UICampaigns0CellValue, uICampaigns0Cell.Value);

            // Verify that '0 Succeeded, 0 Failed' cell's property 'Value' equals '0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUpdateOneAdvertisementExpectedValues.UIItem0Succeeded0FaileCellValue, uIItem0Succeeded0FaileCell.Value);

            // Verify that '0 Succeeded, 0 Failed' cell's property 'Value' equals '0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUpdateOneAdvertisementExpectedValues.UIItem0Succeeded0FaileCell1Value, uIItem0Succeeded0FaileCell1.Value);

            // Verify that '0 Succeeded, 0 Failed' cell's property 'Value' equals '0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUpdateOneAdvertisementExpectedValues.UIItem0Succeeded0FaileCell2Value, uIItem0Succeeded0FaileCell2.Value);

            // Verify that 'Ad groups(1)' cell's property 'Value' equals 'Ads(1)'
            Assert.AreEqual(this.VerifyUpdateOneAdvertisementExpectedValues.UIAdgroups1CellValue, uIAdgroups1Cell.Value);

            // Verify that '0 Succeeded, 0 Failed' cell's property 'Value' equals '0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUpdateOneAdvertisementExpectedValues.UIItem0Succeeded0FaileCellValue1, uIItem0Succeeded0FaileCell3.Value);

            // Verify that '1 Succeeded, 0 Failed' cell's property 'Value' equals '1 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUpdateOneAdvertisementExpectedValues.UIItem1Succeeded0FaileCellValue, uIItem1Succeeded0FaileCell.Value);

            // Verify that '0 Succeeded, 0 Failed' cell's property 'Value' equals '0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUpdateOneAdvertisementExpectedValues.UIItem0Succeeded0FaileCell1Value1, uIItem0Succeeded0FaileCell11.Value);
        }
        
        /// <summary>
        /// VerifyUpdateOneAdvertisementForAdCenter - Use 'VerifyUpdateOneAdvertisementForAdCenterExpectedValues' to pass parameters into this method.
        /// </summary>
        public void VerifyUpdateOneAdvertisementForAdCenter()
        {
            #region Variable Declarations
            WinRow uIRow0Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow0Row;
            WinRow uIRow1Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow1Row;
            WinRow uIRow2Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow2Row;
            WinRow uIRow3Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow3Row;
            #endregion

            // Verify that 'Row 0' row's property 'Value' equals 'Campaigns(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUpdateOneAdvertisementForAdCenterExpectedValues.UIRow0RowValue, uIRow0Row.Value);

            // Verify that 'Row 1' row's property 'Value' equals 'Ad groups(1);0 Succeeded, 0 Failed;1 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUpdateOneAdvertisementForAdCenterExpectedValues.UIRow1RowValue, uIRow1Row.Value);

            // Verify that 'Row 2' row's property 'Value' equals 'Keywords(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUpdateOneAdvertisementForAdCenterExpectedValues.UIRow2RowValue, uIRow2Row.Value);

            // Verify that 'Row 3' row's property 'Value' equals 'Text ads(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUpdateOneAdvertisementForAdCenterExpectedValues.UIRow3RowValue, uIRow3Row.Value);
        }
        
        /// <summary>
        /// VerifyUpdateOneAdvertisementForGoogle - Use 'VerifyUpdateOneAdvertisementForGoogleExpectedValues' to pass parameters into this method.
        /// </summary>
        public void VerifyUpdateOneAdvertisementForGoogle()
        {
            #region Variable Declarations
            WinRow uIRow0Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow0Row;
            WinRow uIRow1Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow1Row;
            WinRow uIRow2Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow2Row;
            WinRow uIRow3Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow3Row;
            WinRow uIRow4Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow4Row;
            #endregion

            // Verify that 'Row 0' row's property 'Value' equals 'Campaigns(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUpdateOneAdvertisementForGoogleExpectedValues.UIRow0RowValue, uIRow0Row.Value);

            // Verify that 'Row 1' row's property 'Value' equals 'Ad groups(1);0 Succeeded, 0 Failed;1 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUpdateOneAdvertisementForGoogleExpectedValues.UIRow1RowValue, uIRow1Row.Value);

            // Verify that 'Row 2' row's property 'ControlType' equals 'Row'
            Assert.AreEqual(this.VerifyUpdateOneAdvertisementForGoogleExpectedValues.UIRow2RowControlType, uIRow2Row.ControlType.ToString());

            // Verify that 'Row 3' row's property 'Value' equals 'Text ads(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUpdateOneAdvertisementForGoogleExpectedValues.UIRow3RowValue, uIRow3Row.Value);

            // Verify that 'Row 4' row's property 'Value' equals 'Placements(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUpdateOneAdvertisementForGoogleExpectedValues.UIRow4RowValue, uIRow4Row.Value);
        }
        
        /// <summary>
        /// VerifyUpdateOneCampaign - Use 'VerifyUpdateOneCampaignExpectedValues' to pass parameters into this method.
        /// </summary>
        public void VerifyUpdateOneCampaign()
        {
            #region Variable Declarations
            WinCell uIHaihadsagecom4684830Cell = this.UIDetailedInfoforUploaWindow.UISageGridViewJobsWindow.UIDataGridViewTable.UIRow0Row.UIHaihadsagecom4684830Cell;
            WinCell uIFinishedCell = this.UIDetailedInfoforUploaWindow.UISageGridViewJobsWindow.UIDataGridViewTable.UIRow0Row.UIFinishedCell;
            WinCell uICampaigns1Cell = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow0Row3.UICampaigns1Cell;
            WinCell uIItem0Succeeded0FaileCell = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow0Row3.UIItem0Succeeded0FaileCell;
            WinCell uIItem1Succeeded1FaileCell = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow0Row3.UIItem1Succeeded1FaileCell;
            WinCell uIItem0Succeeded0FaileCell1 = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow0Row3.UIItem0Succeeded0FaileCell1;
            WinCell uIAdgroups0Cell = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow1Row1.UIAdgroups0Cell;
            WinCell uIItem0Succeeded0FaileCell2 = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow1Row1.UIItem0Succeeded0FaileCell;
            WinCell uIItem0Succeeded0FaileCell11 = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow1Row1.UIItem0Succeeded0FaileCell1;
            WinCell uIItem0Succeeded0FaileCell21 = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow1Row1.UIItem0Succeeded0FaileCell2;
            #endregion

            // Verify that 'haih@ad-sage.com #46848300(USD)' cell's property 'Value' equals 'haih@ad-sage.com #46848300(USD)'
            Assert.AreEqual(this.VerifyUpdateOneCampaignExpectedValues.UIHaihadsagecom4684830CellValue, uIHaihadsagecom4684830Cell.Value);

            // Verify that 'Finished' cell's property 'Value' equals 'Finished'
            Assert.AreEqual(this.VerifyUpdateOneCampaignExpectedValues.UIFinishedCellValue, uIFinishedCell.Value);

            // Verify that 'Campaigns(1)' cell's property 'Value' equals 'Campaigns(1)'
            Assert.AreEqual(this.VerifyUpdateOneCampaignExpectedValues.UICampaigns1CellValue, uICampaigns1Cell.Value);

            // Verify that '0 Succeeded, 0 Failed' cell's property 'Value' equals '0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUpdateOneCampaignExpectedValues.UIItem0Succeeded0FaileCellValue, uIItem0Succeeded0FaileCell.Value);

            // Verify that '1 Succeeded, 1 Failed' cell's property 'Value' equals '1 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUpdateOneCampaignExpectedValues.UIItem1Succeeded1FaileCellValue, uIItem1Succeeded1FaileCell.Value);

            // Verify that '1 Succeeded, 1 Failed' cell's property 'Value' equals '1 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUpdateOneCampaignExpectedValues.UIItem1Succeeded1FaileCellValue1, uIItem1Succeeded1FaileCell.Value);

            // Verify that '0 Succeeded, 0 Failed' cell's property 'Value' equals '0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUpdateOneCampaignExpectedValues.UIItem0Succeeded0FaileCell1Value, uIItem0Succeeded0FaileCell1.Value);

            // Verify that 'Ad groups(0)' cell's property 'Value' equals 'Ads(0)'
            Assert.AreEqual(this.VerifyUpdateOneCampaignExpectedValues.UIAdgroups0CellValue, uIAdgroups0Cell.Value);

            // Verify that '0 Succeeded, 0 Failed' cell's property 'Value' equals '0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUpdateOneCampaignExpectedValues.UIItem0Succeeded0FaileCellValue1, uIItem0Succeeded0FaileCell2.Value);

            // Verify that '0 Succeeded, 0 Failed' cell's property 'Value' equals '0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUpdateOneCampaignExpectedValues.UIItem0Succeeded0FaileCell1Value1, uIItem0Succeeded0FaileCell11.Value);

            // Verify that '0 Succeeded, 0 Failed' cell's property 'Value' equals '0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUpdateOneCampaignExpectedValues.UIItem0Succeeded0FaileCell2Value, uIItem0Succeeded0FaileCell21.Value);
        }
        
        /// <summary>
        /// VerifyUpdateOneTextAdForAdCenter - Use 'VerifyUpdateOneTextAdForAdCenterExpectedValues' to pass parameters into this method.
        /// </summary>
        public void VerifyUpdateOneTextAdForAdCenter()
        {
            #region Variable Declarations
            WinRow uIRow0Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow0Row;
            WinRow uIRow1Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow1Row;
            WinRow uIRow2Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow2Row;
            WinRow uIRow3Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow3Row;
            #endregion

            // Verify that 'Row 0' row's property 'Value' equals 'Campaigns(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUpdateOneTextAdForAdCenterExpectedValues.UIRow0RowValue, uIRow0Row.Value);

            // Verify that 'Row 1' row's property 'Value' equals 'Ad groups(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUpdateOneTextAdForAdCenterExpectedValues.UIRow1RowValue, uIRow1Row.Value);

            // Verify that 'Row 2' row's property 'Value' equals 'Keywords(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUpdateOneTextAdForAdCenterExpectedValues.UIRow2RowValue, uIRow2Row.Value);

            // Verify that 'Row 3' row's property 'Value' equals 'Text ads(1);0 Succeeded, 0 Failed;1 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUpdateOneTextAdForAdCenterExpectedValues.UIRow3RowValue, uIRow3Row.Value);
        }
        
        /// <summary>
        /// VerifyUpdateOneTextAdForGoogle - Use 'VerifyUpdateOneTextAdForGoogleExpectedValues' to pass parameters into this method.
        /// </summary>
        public void VerifyUpdateOneTextAdForGoogle()
        {
            #region Variable Declarations
            WinRow uIRow0Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow0Row;
            WinRow uIRow1Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow1Row;
            WinRow uIRow2Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow2Row;
            WinRow uIRow3Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow3Row;
            WinRow uIRow4Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow4Row;
            #endregion

            // Verify that 'Row 0' row's property 'Value' equals 'Campaigns(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUpdateOneTextAdForGoogleExpectedValues.UIRow0RowValue, uIRow0Row.Value);

            // Verify that 'Row 1' row's property 'Value' equals 'Ad groups(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUpdateOneTextAdForGoogleExpectedValues.UIRow1RowValue, uIRow1Row.Value);

            // Verify that 'Row 2' row's property 'Value' equals 'Keywords(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUpdateOneTextAdForGoogleExpectedValues.UIRow2RowValue, uIRow2Row.Value);

            // Verify that 'Row 3' row's property 'Value' equals 'Text ads(2);1 Succeeded, 0 Failed;0 Succeeded, 0 Failed;1 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUpdateOneTextAdForGoogleExpectedValues.UIRow3RowValue, uIRow3Row.Value);

            // Verify that 'Row 4' row's property 'Value' equals 'Placements(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUpdateOneTextAdForGoogleExpectedValues.UIRow4RowValue, uIRow4Row.Value);
        }
        
        /// <summary>
        /// VerifyUploadOneAdCenterAdvertisement - Use 'VerifyUploadOneAdCenterAdvertisementExpectedValues' to pass parameters into this method.
        /// </summary>
        public void VerifyUploadOneAdCenterAdvertisement()
        {
            #region Variable Declarations
            WinRow uIRow0Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow0Row;
            WinRow uIRow1Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow1Row;
            WinRow uIRow2Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow2Row;
            WinRow uIRow3Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow3Row;
            #endregion

            // Verify that 'Row 0' row's property 'Value' equals 'Campaigns(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUploadOneAdCenterAdvertisementExpectedValues.UIRow0RowValue, uIRow0Row.Value);

            // Verify that 'Row 1' row's property 'Value' equals 'Ad groups(1);1 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUploadOneAdCenterAdvertisementExpectedValues.UIRow1RowValue, uIRow1Row.Value);

            // Verify that 'Row 2' row's property 'Value' equals 'Keywords(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUploadOneAdCenterAdvertisementExpectedValues.UIRow2RowValue, uIRow2Row.Value);

            // Verify that 'Row 3' row's property 'Value' equals 'Text ads(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUploadOneAdCenterAdvertisementExpectedValues.UIRow3RowValue, uIRow3Row.Value);
        }
        
        /// <summary>
        /// VerifyUploadOneAdCenterCampaign - Use 'VerifyUploadOneAdCenterCampaignExpectedValues' to pass parameters into this method.
        /// </summary>
        public void VerifyUploadOneAdCenterCampaign()
        {
            #region Variable Declarations
            WinRow uIRow0Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow0Row;
            WinRow uIRow1Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow1Row;
            WinRow uIRow2Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow2Row;
            WinRow uIRow3Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow3Row;
            #endregion

            // Verify that 'Row 0' row's property 'Value' equals 'Campaigns(1);1 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUploadOneAdCenterCampaignExpectedValues.UIRow0RowValue, uIRow0Row.Value);

            // Verify that 'Row 1' row's property 'Value' equals 'Ad groups(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUploadOneAdCenterCampaignExpectedValues.UIRow1RowValue, uIRow1Row.Value);

            // Verify that 'Row 2' row's property 'Value' equals 'Keywords(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUploadOneAdCenterCampaignExpectedValues.UIRow2RowValue, uIRow2Row.Value);

            // Verify that 'Row 3' row's property 'Value' equals 'Text ads(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUploadOneAdCenterCampaignExpectedValues.UIRow3RowValue, uIRow3Row.Value);
        }
        
        /// <summary>
        /// VerifyUploadOneAdCenterTextAd - Use 'VerifyUploadOneAdCenterTextAdExpectedValues' to pass parameters into this method.
        /// </summary>
        public void VerifyUploadOneAdCenterTextAd()
        {
            #region Variable Declarations
            WinRow uIRow0Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow0Row;
            WinRow uIRow1Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow1Row;
            WinRow uIRow2Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow2Row;
            WinRow uIRow3Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow3Row;
            #endregion

            // Verify that 'Row 0' row's property 'Value' equals 'Campaigns(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUploadOneAdCenterTextAdExpectedValues.UIRow0RowValue, uIRow0Row.Value);

            // Verify that 'Row 1' row's property 'Value' equals 'Ad groups(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUploadOneAdCenterTextAdExpectedValues.UIRow1RowValue, uIRow1Row.Value);

            // Verify that 'Row 2' row's property 'Value' equals 'Keywords(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUploadOneAdCenterTextAdExpectedValues.UIRow2RowValue, uIRow2Row.Value);

            // Verify that 'Row 3' row's property 'Value' equals 'Text ads(1);1 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUploadOneAdCenterTextAdExpectedValues.UIRow3RowValue, uIRow3Row.Value);
        }
        
        /// <summary>
        /// VerifyUploadOneAdvertisement - Use 'VerifyUploadOneAdvertisementExpectedValues' to pass parameters into this method.
        /// </summary>
        public void VerifyUploadOneAdvertisement()
        {
            #region Variable Declarations
            WinCell uIHaihadsagecom4684830Cell = this.UIDetailedInfoforUploaWindow.UISageGridViewJobsWindow.UIDataGridViewTable.UIRow0Row.UIHaihadsagecom4684830Cell;
            WinCell uIFinishedCell = this.UIDetailedInfoforUploaWindow.UISageGridViewJobsWindow.UIDataGridViewTable.UIRow0Row.UIFinishedCell;
            WinCell uICampaigns0Cell = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow0Row4.UICampaigns0Cell;
            WinCell uIItem0Succeeded0FaileCell = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow0Row4.UIItem0Succeeded0FaileCell;
            WinCell uIItem0Succeeded0FaileCell1 = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow0Row4.UIItem0Succeeded0FaileCell1;
            WinCell uIItem0Succeeded0FaileCell2 = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow0Row4.UIItem0Succeeded0FaileCell2;
            WinCell uIAdgroups1Cell = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow1Row2.UIAdgroups1Cell;
            WinCell uIItem1Succeeded0FaileCell = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow1Row2.UIItem1Succeeded0FaileCell;
            WinCell uIItem0Succeeded0FaileCell3 = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow1Row2.UIItem0Succeeded0FaileCell;
            WinCell uIItem0Succeeded0FaileCell11 = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow1Row2.UIItem0Succeeded0FaileCell1;
            #endregion

            // Verify that 'haih@ad-sage.com #46848300(USD)' cell's property 'Value' equals 'haih@ad-sage.com #46848300(USD)'
            Assert.AreEqual(this.VerifyUploadOneAdvertisementExpectedValues.UIHaihadsagecom4684830CellValue, uIHaihadsagecom4684830Cell.Value);

            // Verify that 'Finished' cell's property 'Value' equals 'Finished'
            Assert.AreEqual(this.VerifyUploadOneAdvertisementExpectedValues.UIFinishedCellValue, uIFinishedCell.Value);

            // Verify that 'Campaigns(0)' cell's property 'Value' equals 'Campaigns(0)'
            Assert.AreEqual(this.VerifyUploadOneAdvertisementExpectedValues.UICampaigns0CellValue, uICampaigns0Cell.Value);

            // Verify that '0 Succeeded, 0 Failed' cell's property 'Value' equals '0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUploadOneAdvertisementExpectedValues.UIItem0Succeeded0FaileCellValue, uIItem0Succeeded0FaileCell.Value);

            // Verify that '0 Succeeded, 0 Failed' cell's property 'Value' equals '0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUploadOneAdvertisementExpectedValues.UIItem0Succeeded0FaileCell1Value, uIItem0Succeeded0FaileCell1.Value);

            // Verify that '0 Succeeded, 0 Failed' cell's property 'Value' equals '0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUploadOneAdvertisementExpectedValues.UIItem0Succeeded0FaileCell2Value, uIItem0Succeeded0FaileCell2.Value);

            // Verify that 'Ad groups(1)' cell's property 'Value' equals 'Ads(1)'
            Assert.AreEqual(this.VerifyUploadOneAdvertisementExpectedValues.UIAdgroups1CellValue, uIAdgroups1Cell.Value);

            // Verify that '1 Succeeded, 0 Failed' cell's property 'Value' equals '1 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUploadOneAdvertisementExpectedValues.UIItem1Succeeded0FaileCellValue, uIItem1Succeeded0FaileCell.Value);

            // Verify that '0 Succeeded, 0 Failed' cell's property 'Value' equals '0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUploadOneAdvertisementExpectedValues.UIItem0Succeeded0FaileCellValue1, uIItem0Succeeded0FaileCell3.Value);

            // Verify that '0 Succeeded, 0 Failed' cell's property 'Value' equals '0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUploadOneAdvertisementExpectedValues.UIItem0Succeeded0FaileCell1Value1, uIItem0Succeeded0FaileCell11.Value);
        }
        
        /// <summary>
        /// VerifyUploadOneGoogleAdvertisement - Use 'VerifyUploadOneGoogleAdvertisementExpectedValues' to pass parameters into this method.
        /// </summary>
        public void VerifyUploadOneGoogleAdvertisement()
        {
            #region Variable Declarations
            WinRow uIRow0Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow0Row;
            WinRow uIRow1Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow1Row;
            WinRow uIRow2Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow2Row;
            WinRow uIRow3Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow3Row;
            WinRow uIRow4Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow4Row;
            #endregion

            // Verify that 'Row 0' row's property 'Value' equals 'Campaigns(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUploadOneGoogleAdvertisementExpectedValues.UIRow0RowValue, uIRow0Row.Value);

            // Verify that 'Row 1' row's property 'Value' equals 'Ad groups(1);1 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUploadOneGoogleAdvertisementExpectedValues.UIRow1RowValue, uIRow1Row.Value);

            // Verify that 'Row 2' row's property 'Value' equals 'Keywords(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUploadOneGoogleAdvertisementExpectedValues.UIRow2RowValue, uIRow2Row.Value);

            // Verify that 'Row 3' row's property 'Value' equals 'Text ads(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUploadOneGoogleAdvertisementExpectedValues.UIRow3RowValue, uIRow3Row.Value);

            // Verify that 'Row 4' row's property 'Value' equals 'Placements(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUploadOneGoogleAdvertisementExpectedValues.UIRow4RowValue, uIRow4Row.Value);
        }
        
        /// <summary>
        /// VerifyUploadOneGoogleCampaign - Use 'VerifyUploadOneGoogleCampaignExpectedValues' to pass parameters into this method.
        /// </summary>
        public void VerifyUploadOneGoogleCampaign()
        {
            #region Variable Declarations
            WinRow uIRow0Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow0Row;
            WinRow uIRow1Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow1Row;
            WinRow uIRow2Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow2Row;
            WinRow uIRow3Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow3Row;
            WinRow uIRow4Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow4Row;
            #endregion

            // Verify that 'Row 0' row's property 'Value' equals 'Campaigns(1);1 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUploadOneGoogleCampaignExpectedValues.UIRow0RowValue, uIRow0Row.Value);

            // Verify that 'Row 1' row's property 'Value' equals 'Ad groups(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUploadOneGoogleCampaignExpectedValues.UIRow1RowValue, uIRow1Row.Value);

            // Verify that 'Row 2' row's property 'Value' equals 'Keywords(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUploadOneGoogleCampaignExpectedValues.UIRow2RowValue, uIRow2Row.Value);

            // Verify that 'Row 3' row's property 'Value' equals 'Text ads(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUploadOneGoogleCampaignExpectedValues.UIRow3RowValue, uIRow3Row.Value);

            // Verify that 'Row 4' row's property 'Value' equals 'Placements(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUploadOneGoogleCampaignExpectedValues.UIRow4RowValue, uIRow4Row.Value);
        }
        
        /// <summary>
        /// VerifyUploadOneGoogleKeywords - Use 'VerifyUploadOneGoogleKeywordsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void VerifyUploadOneGoogleKeywords()
        {
            #region Variable Declarations
            WinRow uIRow0Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow0Row;
            WinRow uIRow1Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow1Row;
            WinRow uIRow2Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow2Row;
            WinRow uIRow3Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow3Row;
            WinRow uIRow4Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow4Row;
            #endregion

            // Verify that 'Row 0' row's property 'Value' equals 'Campaigns(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUploadOneGoogleKeywordsExpectedValues.UIRow0RowValue, uIRow0Row.Value);

            // Verify that 'Row 1' row's property 'Value' equals 'Ad groups(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUploadOneGoogleKeywordsExpectedValues.UIRow1RowValue, uIRow1Row.Value);

            // Verify that 'Row 2' row's property 'Value' equals 'Keywords(1);1 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUploadOneGoogleKeywordsExpectedValues.UIRow2RowValue, uIRow2Row.Value);

            // Verify that 'Row 3' row's property 'Value' equals 'Text ads(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUploadOneGoogleKeywordsExpectedValues.UIRow3RowValue, uIRow3Row.Value);

            // Verify that 'Row 4' row's property 'Value' equals 'Placements(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUploadOneGoogleKeywordsExpectedValues.UIRow4RowValue, uIRow4Row.Value);
        }
        
        /// <summary>
        /// VerifyUploadOneGoogleTextAd - Use 'VerifyUploadOneGoogleTextAdExpectedValues' to pass parameters into this method.
        /// </summary>
        public void VerifyUploadOneGoogleTextAd()
        {
            #region Variable Declarations
            WinRow uIRow0Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow0Row;
            WinRow uIRow1Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow1Row;
            WinRow uIRow2Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow2Row;
            WinRow uIRow3Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow3Row;
            WinRow uIRow4Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow4Row;
            #endregion

            // Verify that 'Row 0' row's property 'Value' equals 'Campaigns(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUploadOneGoogleTextAdExpectedValues.UIRow0RowValue, uIRow0Row.Value);

            // Verify that 'Row 1' row's property 'Value' equals 'Ad groups(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUploadOneGoogleTextAdExpectedValues.UIRow1RowValue, uIRow1Row.Value);

            // Verify that 'Row 2' row's property 'Value' equals 'Keywords(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUploadOneGoogleTextAdExpectedValues.UIRow2RowValue, uIRow2Row.Value);

            // Verify that 'Row 3' row's property 'Value' equals 'Text ads(1);1 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUploadOneGoogleTextAdExpectedValues.UIRow3RowValue, uIRow3Row.Value);

            // Verify that 'Row 4' row's property 'Value' equals 'Placements(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUploadOneGoogleTextAdExpectedValues.UIRow4RowValue, uIRow4Row.Value);
        }
        
        /// <summary>
        /// VerifyDeleteOneTextAdForAdCenter - Use 'VerifyDeleteOneTextAdForAdCenterExpectedValues' to pass parameters into this method.
        /// </summary>
        public void VerifyDeleteOneTextAdForAdCenter()
        {
            #region Variable Declarations
            WinRow uIRow0Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow0Row;
            WinRow uIRow1Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow1Row;
            WinRow uIRow2Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow2Row;
            WinRow uIRow3Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow3Row;
            #endregion

            // Verify that 'Row 0' row's property 'Value' equals 'Campaigns(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyDeleteOneTextAdForAdCenterExpectedValues.UIRow0RowValue, uIRow0Row.Value);

            // Verify that 'Row 1' row's property 'Value' equals 'Ad groups(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyDeleteOneTextAdForAdCenterExpectedValues.UIRow1RowValue, uIRow1Row.Value);

            // Verify that 'Row 2' row's property 'Value' equals 'Keywords(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyDeleteOneTextAdForAdCenterExpectedValues.UIRow2RowValue, uIRow2Row.Value);

            // Verify that 'Row 3' row's property 'Value' equals 'Text ads(1);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;1 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyDeleteOneTextAdForAdCenterExpectedValues.UIRow3RowValue, uIRow3Row.Value);
        }
        
        /// <summary>
        /// VerifyUploadOneAdcenterKeywords - Use 'VerifyUploadOneAdcenterKeywordsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void VerifyUploadOneAdcenterKeywords()
        {
            #region Variable Declarations
            WinRow uIRow0Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow0Row;
            WinRow uIRow1Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow1Row;
            WinRow uIRow2Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow2Row;
            WinRow uIRow3Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow3Row;
            #endregion

            // Verify that 'Row 0' row's property 'Value' equals 'Campaigns(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUploadOneAdcenterKeywordsExpectedValues.UIRow0RowValue, uIRow0Row.Value);

            // Verify that 'Row 1' row's property 'Value' equals 'Ad groups(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUploadOneAdcenterKeywordsExpectedValues.UIRow1RowValue, uIRow1Row.Value);

            // Verify that 'Row 2' row's property 'Value' equals 'Keywords(1);1 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUploadOneAdcenterKeywordsExpectedValues.UIRow2RowValue, uIRow2Row.Value);

            // Verify that 'Row 3' row's property 'Value' equals 'Text ads(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUploadOneAdcenterKeywordsExpectedValues.UIRow3RowValue, uIRow3Row.Value);
        }
        
        /// <summary>
        /// VerifyDeleteOneKeywordForAdcenter - Use 'VerifyDeleteOneKeywordForAdcenterExpectedValues' to pass parameters into this method.
        /// </summary>
        public void VerifyDeleteOneKeywordForAdcenter()
        {
            #region Variable Declarations
            WinRow uIRow0Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow0Row;
            WinRow uIRow1Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow1Row;
            WinRow uIRow2Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow2Row;
            WinRow uIRow3Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow3Row;
            #endregion

            // Verify that 'Row 0' row's property 'Value' equals 'Campaigns(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyDeleteOneKeywordForAdcenterExpectedValues.UIRow0RowValue, uIRow0Row.Value);

            // Verify that 'Row 1' row's property 'Value' equals 'Ad groups(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyDeleteOneKeywordForAdcenterExpectedValues.UIRow1RowValue, uIRow1Row.Value);

            // Verify that 'Row 2' row's property 'Value' equals 'Keywords(1);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;1 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyDeleteOneKeywordForAdcenterExpectedValues.UIRow2RowValue, uIRow2Row.Value);

            // Verify that 'Row 3' row's property 'Value' equals 'Text ads(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyDeleteOneKeywordForAdcenterExpectedValues.UIRow3RowValue, uIRow3Row.Value);
        }
        
        /// <summary>
        /// VerifyUpdateOneAdcenterKeywords - Use 'VerifyUpdateOneAdcenterKeywordsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void VerifyUpdateOneAdcenterKeywords()
        {
            #region Variable Declarations
            WinRow uIRow0Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow0Row;
            WinRow uIRow1Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow1Row;
            WinRow uIRow2Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow2Row;
            WinRow uIRow3Row = this.UIDetailedInfoforUploaWindow.UISageGridViewInfoWindow.UIDataGridViewTable.UIRow3Row;
            #endregion

            // Verify that 'Row 0' row's property 'Value' equals 'Campaigns(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUpdateOneAdcenterKeywordsExpectedValues.UIRow0RowValue, uIRow0Row.Value);

            // Verify that 'Row 1' row's property 'Value' equals 'Ad groups(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUpdateOneAdcenterKeywordsExpectedValues.UIRow1RowValue, uIRow1Row.Value);

            // Verify that 'Row 2' row's property 'Value' equals 'Keywords(1);0 Succeeded, 0 Failed;1 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUpdateOneAdcenterKeywordsExpectedValues.UIRow2RowValue, uIRow2Row.Value);

            // Verify that 'Row 3' row's property 'Value' equals 'Text ads(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
            Assert.AreEqual(this.VerifyUpdateOneAdcenterKeywordsExpectedValues.UIRow3RowValue, uIRow3Row.Value);
        }
        
        #region Properties
        public virtual VerifyDeleteOneAdCenterAdGroupExpectedValues VerifyDeleteOneAdCenterAdGroupExpectedValues
        {
            get
            {
                if ((this.mVerifyDeleteOneAdCenterAdGroupExpectedValues == null))
                {
                    this.mVerifyDeleteOneAdCenterAdGroupExpectedValues = new VerifyDeleteOneAdCenterAdGroupExpectedValues();
                }
                return this.mVerifyDeleteOneAdCenterAdGroupExpectedValues;
            }
        }
        
        public virtual VerifyDeleteOneAdCenterCampaignExpectedValues VerifyDeleteOneAdCenterCampaignExpectedValues
        {
            get
            {
                if ((this.mVerifyDeleteOneAdCenterCampaignExpectedValues == null))
                {
                    this.mVerifyDeleteOneAdCenterCampaignExpectedValues = new VerifyDeleteOneAdCenterCampaignExpectedValues();
                }
                return this.mVerifyDeleteOneAdCenterCampaignExpectedValues;
            }
        }
        
        public virtual VerifyDeleteOneAdvertisementExpectedValues VerifyDeleteOneAdvertisementExpectedValues
        {
            get
            {
                if ((this.mVerifyDeleteOneAdvertisementExpectedValues == null))
                {
                    this.mVerifyDeleteOneAdvertisementExpectedValues = new VerifyDeleteOneAdvertisementExpectedValues();
                }
                return this.mVerifyDeleteOneAdvertisementExpectedValues;
            }
        }
        
        public virtual VerifyDeleteOneCampaignExpectedValues VerifyDeleteOneCampaignExpectedValues
        {
            get
            {
                if ((this.mVerifyDeleteOneCampaignExpectedValues == null))
                {
                    this.mVerifyDeleteOneCampaignExpectedValues = new VerifyDeleteOneCampaignExpectedValues();
                }
                return this.mVerifyDeleteOneCampaignExpectedValues;
            }
        }
        
        public virtual VerifyDeleteOneGoogleAdvertisementExpectedValues VerifyDeleteOneGoogleAdvertisementExpectedValues
        {
            get
            {
                if ((this.mVerifyDeleteOneGoogleAdvertisementExpectedValues == null))
                {
                    this.mVerifyDeleteOneGoogleAdvertisementExpectedValues = new VerifyDeleteOneGoogleAdvertisementExpectedValues();
                }
                return this.mVerifyDeleteOneGoogleAdvertisementExpectedValues;
            }
        }
        
        public virtual VerifyDeleteOneGoogleCampaignExpectedValues VerifyDeleteOneGoogleCampaignExpectedValues
        {
            get
            {
                if ((this.mVerifyDeleteOneGoogleCampaignExpectedValues == null))
                {
                    this.mVerifyDeleteOneGoogleCampaignExpectedValues = new VerifyDeleteOneGoogleCampaignExpectedValues();
                }
                return this.mVerifyDeleteOneGoogleCampaignExpectedValues;
            }
        }
        
        public virtual VerifyDeleteOneTextAdForGoogleExpectedValues VerifyDeleteOneTextAdForGoogleExpectedValues
        {
            get
            {
                if ((this.mVerifyDeleteOneTextAdForGoogleExpectedValues == null))
                {
                    this.mVerifyDeleteOneTextAdForGoogleExpectedValues = new VerifyDeleteOneTextAdForGoogleExpectedValues();
                }
                return this.mVerifyDeleteOneTextAdForGoogleExpectedValues;
            }
        }
        
        public virtual VerifyEditOneAdCenterCampaignExpectedValues VerifyEditOneAdCenterCampaignExpectedValues
        {
            get
            {
                if ((this.mVerifyEditOneAdCenterCampaignExpectedValues == null))
                {
                    this.mVerifyEditOneAdCenterCampaignExpectedValues = new VerifyEditOneAdCenterCampaignExpectedValues();
                }
                return this.mVerifyEditOneAdCenterCampaignExpectedValues;
            }
        }
        
        public virtual VerifyEditOneGoogleCampaignExpectedValues VerifyEditOneGoogleCampaignExpectedValues
        {
            get
            {
                if ((this.mVerifyEditOneGoogleCampaignExpectedValues == null))
                {
                    this.mVerifyEditOneGoogleCampaignExpectedValues = new VerifyEditOneGoogleCampaignExpectedValues();
                }
                return this.mVerifyEditOneGoogleCampaignExpectedValues;
            }
        }
        
        public virtual VerifyUpdateOneAdvertisementExpectedValues VerifyUpdateOneAdvertisementExpectedValues
        {
            get
            {
                if ((this.mVerifyUpdateOneAdvertisementExpectedValues == null))
                {
                    this.mVerifyUpdateOneAdvertisementExpectedValues = new VerifyUpdateOneAdvertisementExpectedValues();
                }
                return this.mVerifyUpdateOneAdvertisementExpectedValues;
            }
        }
        
        public virtual VerifyUpdateOneAdvertisementForAdCenterExpectedValues VerifyUpdateOneAdvertisementForAdCenterExpectedValues
        {
            get
            {
                if ((this.mVerifyUpdateOneAdvertisementForAdCenterExpectedValues == null))
                {
                    this.mVerifyUpdateOneAdvertisementForAdCenterExpectedValues = new VerifyUpdateOneAdvertisementForAdCenterExpectedValues();
                }
                return this.mVerifyUpdateOneAdvertisementForAdCenterExpectedValues;
            }
        }
        
        public virtual VerifyUpdateOneAdvertisementForGoogleExpectedValues VerifyUpdateOneAdvertisementForGoogleExpectedValues
        {
            get
            {
                if ((this.mVerifyUpdateOneAdvertisementForGoogleExpectedValues == null))
                {
                    this.mVerifyUpdateOneAdvertisementForGoogleExpectedValues = new VerifyUpdateOneAdvertisementForGoogleExpectedValues();
                }
                return this.mVerifyUpdateOneAdvertisementForGoogleExpectedValues;
            }
        }
        
        public virtual VerifyUpdateOneCampaignExpectedValues VerifyUpdateOneCampaignExpectedValues
        {
            get
            {
                if ((this.mVerifyUpdateOneCampaignExpectedValues == null))
                {
                    this.mVerifyUpdateOneCampaignExpectedValues = new VerifyUpdateOneCampaignExpectedValues();
                }
                return this.mVerifyUpdateOneCampaignExpectedValues;
            }
        }
        
        public virtual VerifyUpdateOneTextAdForAdCenterExpectedValues VerifyUpdateOneTextAdForAdCenterExpectedValues
        {
            get
            {
                if ((this.mVerifyUpdateOneTextAdForAdCenterExpectedValues == null))
                {
                    this.mVerifyUpdateOneTextAdForAdCenterExpectedValues = new VerifyUpdateOneTextAdForAdCenterExpectedValues();
                }
                return this.mVerifyUpdateOneTextAdForAdCenterExpectedValues;
            }
        }
        
        public virtual VerifyUpdateOneTextAdForGoogleExpectedValues VerifyUpdateOneTextAdForGoogleExpectedValues
        {
            get
            {
                if ((this.mVerifyUpdateOneTextAdForGoogleExpectedValues == null))
                {
                    this.mVerifyUpdateOneTextAdForGoogleExpectedValues = new VerifyUpdateOneTextAdForGoogleExpectedValues();
                }
                return this.mVerifyUpdateOneTextAdForGoogleExpectedValues;
            }
        }
        
        public virtual VerifyUploadOneAdCenterAdvertisementExpectedValues VerifyUploadOneAdCenterAdvertisementExpectedValues
        {
            get
            {
                if ((this.mVerifyUploadOneAdCenterAdvertisementExpectedValues == null))
                {
                    this.mVerifyUploadOneAdCenterAdvertisementExpectedValues = new VerifyUploadOneAdCenterAdvertisementExpectedValues();
                }
                return this.mVerifyUploadOneAdCenterAdvertisementExpectedValues;
            }
        }
        
        public virtual VerifyUploadOneAdCenterCampaignExpectedValues VerifyUploadOneAdCenterCampaignExpectedValues
        {
            get
            {
                if ((this.mVerifyUploadOneAdCenterCampaignExpectedValues == null))
                {
                    this.mVerifyUploadOneAdCenterCampaignExpectedValues = new VerifyUploadOneAdCenterCampaignExpectedValues();
                }
                return this.mVerifyUploadOneAdCenterCampaignExpectedValues;
            }
        }
        
        public virtual VerifyUploadOneAdCenterTextAdExpectedValues VerifyUploadOneAdCenterTextAdExpectedValues
        {
            get
            {
                if ((this.mVerifyUploadOneAdCenterTextAdExpectedValues == null))
                {
                    this.mVerifyUploadOneAdCenterTextAdExpectedValues = new VerifyUploadOneAdCenterTextAdExpectedValues();
                }
                return this.mVerifyUploadOneAdCenterTextAdExpectedValues;
            }
        }
        
        public virtual VerifyUploadOneAdvertisementExpectedValues VerifyUploadOneAdvertisementExpectedValues
        {
            get
            {
                if ((this.mVerifyUploadOneAdvertisementExpectedValues == null))
                {
                    this.mVerifyUploadOneAdvertisementExpectedValues = new VerifyUploadOneAdvertisementExpectedValues();
                }
                return this.mVerifyUploadOneAdvertisementExpectedValues;
            }
        }
        
        public virtual VerifyUploadOneGoogleAdvertisementExpectedValues VerifyUploadOneGoogleAdvertisementExpectedValues
        {
            get
            {
                if ((this.mVerifyUploadOneGoogleAdvertisementExpectedValues == null))
                {
                    this.mVerifyUploadOneGoogleAdvertisementExpectedValues = new VerifyUploadOneGoogleAdvertisementExpectedValues();
                }
                return this.mVerifyUploadOneGoogleAdvertisementExpectedValues;
            }
        }
        
        public virtual VerifyUploadOneGoogleCampaignExpectedValues VerifyUploadOneGoogleCampaignExpectedValues
        {
            get
            {
                if ((this.mVerifyUploadOneGoogleCampaignExpectedValues == null))
                {
                    this.mVerifyUploadOneGoogleCampaignExpectedValues = new VerifyUploadOneGoogleCampaignExpectedValues();
                }
                return this.mVerifyUploadOneGoogleCampaignExpectedValues;
            }
        }
        
        public virtual VerifyUploadOneGoogleKeywordsExpectedValues VerifyUploadOneGoogleKeywordsExpectedValues
        {
            get
            {
                if ((this.mVerifyUploadOneGoogleKeywordsExpectedValues == null))
                {
                    this.mVerifyUploadOneGoogleKeywordsExpectedValues = new VerifyUploadOneGoogleKeywordsExpectedValues();
                }
                return this.mVerifyUploadOneGoogleKeywordsExpectedValues;
            }
        }
        
        public virtual VerifyUploadOneGoogleTextAdExpectedValues VerifyUploadOneGoogleTextAdExpectedValues
        {
            get
            {
                if ((this.mVerifyUploadOneGoogleTextAdExpectedValues == null))
                {
                    this.mVerifyUploadOneGoogleTextAdExpectedValues = new VerifyUploadOneGoogleTextAdExpectedValues();
                }
                return this.mVerifyUploadOneGoogleTextAdExpectedValues;
            }
        }
        
        public virtual VerifyDeleteOneTextAdForAdCenterExpectedValues VerifyDeleteOneTextAdForAdCenterExpectedValues
        {
            get
            {
                if ((this.mVerifyDeleteOneTextAdForAdCenterExpectedValues == null))
                {
                    this.mVerifyDeleteOneTextAdForAdCenterExpectedValues = new VerifyDeleteOneTextAdForAdCenterExpectedValues();
                }
                return this.mVerifyDeleteOneTextAdForAdCenterExpectedValues;
            }
        }
        
        public virtual VerifyUploadOneAdcenterKeywordsExpectedValues VerifyUploadOneAdcenterKeywordsExpectedValues
        {
            get
            {
                if ((this.mVerifyUploadOneAdcenterKeywordsExpectedValues == null))
                {
                    this.mVerifyUploadOneAdcenterKeywordsExpectedValues = new VerifyUploadOneAdcenterKeywordsExpectedValues();
                }
                return this.mVerifyUploadOneAdcenterKeywordsExpectedValues;
            }
        }
        
        public virtual VerifyDeleteOneKeywordForAdcenterExpectedValues VerifyDeleteOneKeywordForAdcenterExpectedValues
        {
            get
            {
                if ((this.mVerifyDeleteOneKeywordForAdcenterExpectedValues == null))
                {
                    this.mVerifyDeleteOneKeywordForAdcenterExpectedValues = new VerifyDeleteOneKeywordForAdcenterExpectedValues();
                }
                return this.mVerifyDeleteOneKeywordForAdcenterExpectedValues;
            }
        }
        
        public virtual VerifyUpdateOneAdcenterKeywordsExpectedValues VerifyUpdateOneAdcenterKeywordsExpectedValues
        {
            get
            {
                if ((this.mVerifyUpdateOneAdcenterKeywordsExpectedValues == null))
                {
                    this.mVerifyUpdateOneAdcenterKeywordsExpectedValues = new VerifyUpdateOneAdcenterKeywordsExpectedValues();
                }
                return this.mVerifyUpdateOneAdcenterKeywordsExpectedValues;
            }
        }
        
        public UIDetailedInfoforUploaWindow UIDetailedInfoforUploaWindow
        {
            get
            {
                if ((this.mUIDetailedInfoforUploaWindow == null))
                {
                    this.mUIDetailedInfoforUploaWindow = new UIDetailedInfoforUploaWindow();
                }
                return this.mUIDetailedInfoforUploaWindow;
            }
        }
        #endregion
        
        #region Fields
        private VerifyDeleteOneAdCenterAdGroupExpectedValues mVerifyDeleteOneAdCenterAdGroupExpectedValues;
        
        private VerifyDeleteOneAdCenterCampaignExpectedValues mVerifyDeleteOneAdCenterCampaignExpectedValues;
        
        private VerifyDeleteOneAdvertisementExpectedValues mVerifyDeleteOneAdvertisementExpectedValues;
        
        private VerifyDeleteOneCampaignExpectedValues mVerifyDeleteOneCampaignExpectedValues;
        
        private VerifyDeleteOneGoogleAdvertisementExpectedValues mVerifyDeleteOneGoogleAdvertisementExpectedValues;
        
        private VerifyDeleteOneGoogleCampaignExpectedValues mVerifyDeleteOneGoogleCampaignExpectedValues;
        
        private VerifyDeleteOneTextAdForGoogleExpectedValues mVerifyDeleteOneTextAdForGoogleExpectedValues;
        
        private VerifyEditOneAdCenterCampaignExpectedValues mVerifyEditOneAdCenterCampaignExpectedValues;
        
        private VerifyEditOneGoogleCampaignExpectedValues mVerifyEditOneGoogleCampaignExpectedValues;
        
        private VerifyUpdateOneAdvertisementExpectedValues mVerifyUpdateOneAdvertisementExpectedValues;
        
        private VerifyUpdateOneAdvertisementForAdCenterExpectedValues mVerifyUpdateOneAdvertisementForAdCenterExpectedValues;
        
        private VerifyUpdateOneAdvertisementForGoogleExpectedValues mVerifyUpdateOneAdvertisementForGoogleExpectedValues;
        
        private VerifyUpdateOneCampaignExpectedValues mVerifyUpdateOneCampaignExpectedValues;
        
        private VerifyUpdateOneTextAdForAdCenterExpectedValues mVerifyUpdateOneTextAdForAdCenterExpectedValues;
        
        private VerifyUpdateOneTextAdForGoogleExpectedValues mVerifyUpdateOneTextAdForGoogleExpectedValues;
        
        private VerifyUploadOneAdCenterAdvertisementExpectedValues mVerifyUploadOneAdCenterAdvertisementExpectedValues;
        
        private VerifyUploadOneAdCenterCampaignExpectedValues mVerifyUploadOneAdCenterCampaignExpectedValues;
        
        private VerifyUploadOneAdCenterTextAdExpectedValues mVerifyUploadOneAdCenterTextAdExpectedValues;
        
        private VerifyUploadOneAdvertisementExpectedValues mVerifyUploadOneAdvertisementExpectedValues;
        
        private VerifyUploadOneGoogleAdvertisementExpectedValues mVerifyUploadOneGoogleAdvertisementExpectedValues;
        
        private VerifyUploadOneGoogleCampaignExpectedValues mVerifyUploadOneGoogleCampaignExpectedValues;
        
        private VerifyUploadOneGoogleKeywordsExpectedValues mVerifyUploadOneGoogleKeywordsExpectedValues;
        
        private VerifyUploadOneGoogleTextAdExpectedValues mVerifyUploadOneGoogleTextAdExpectedValues;
        
        private VerifyDeleteOneTextAdForAdCenterExpectedValues mVerifyDeleteOneTextAdForAdCenterExpectedValues;
        
        private VerifyUploadOneAdcenterKeywordsExpectedValues mVerifyUploadOneAdcenterKeywordsExpectedValues;
        
        private VerifyDeleteOneKeywordForAdcenterExpectedValues mVerifyDeleteOneKeywordForAdcenterExpectedValues;
        
        private VerifyUpdateOneAdcenterKeywordsExpectedValues mVerifyUpdateOneAdcenterKeywordsExpectedValues;
        
        private UIDetailedInfoforUploaWindow mUIDetailedInfoforUploaWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'VerifyDeleteOneAdCenterAdGroup'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class VerifyDeleteOneAdCenterAdGroupExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Row 0' row's property 'Value' equals 'Campaigns(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow0RowValue = "Campaigns(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 1' row's property 'Value' equals 'Ad groups(1);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;1 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow1RowValue = "Ad groups(1);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;1 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 2' row's property 'Value' equals 'Keywords(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow2RowValue = "Keywords(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 3' row's property 'Value' equals 'Text ads(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow3RowValue = "Text ads(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'VerifyDeleteOneAdCenterCampaign'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class VerifyDeleteOneAdCenterCampaignExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Row 0' row's property 'Value' equals 'Campaigns(1);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;1 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow0RowValue = "Campaigns(1);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;1 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 1' row's property 'Value' equals 'Ad groups(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow1RowValue = "Ad groups(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 2' row's property 'Value' equals 'Keywords(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow2RowValue = "Keywords(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 3' row's property 'Value' equals 'Text ads(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow3RowValue = "Text ads(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'VerifyDeleteOneAdvertisement'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class VerifyDeleteOneAdvertisementExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'haih@ad-sage.com #46848300(USD)' cell's property 'Value' equals 'haih@ad-sage.com #46848300(USD)'
        /// </summary>
        public string UIHaihadsagecom4684830CellValue = "haih@ad-sage.com #46848300(USD)";
        
        /// <summary>
        /// Verify that 'Finished' cell's property 'Value' equals 'Finished'
        /// </summary>
        public string UIFinishedCellValue = "Finished";
        
        /// <summary>
        /// Verify that 'Campaigns(0)' cell's property 'Value' equals 'Campaigns(0)'
        /// </summary>
        public string UICampaigns0CellValue = "Campaigns(0)";
        
        /// <summary>
        /// Verify that '0 Succeeded, 0 Failed' cell's property 'Value' equals '0 Succeeded, 0 Failed'
        /// </summary>
        public string UIItem0Succeeded0FaileCellValue = "0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that '0 Succeeded, 0 Failed' cell's property 'Value' equals '0 Succeeded, 0 Failed'
        /// </summary>
        public string UIItem0Succeeded0FaileCell1Value = "0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that '0 Succeeded, 0 Failed' cell's property 'Value' equals '0 Succeeded, 0 Failed'
        /// </summary>
        public string UIItem0Succeeded0FaileCell2Value = "0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Ad groups(1)' cell's property 'Value' equals 'Ads(1)'
        /// </summary>
        public string UIAdgroups1CellValue = "Ads(1)";
        
        /// <summary>
        /// Verify that '0 Succeeded, 0 Failed' cell's property 'Value' equals '0 Succeeded, 0 Failed'
        /// </summary>
        public string UIItem0Succeeded0FaileCellValue1 = "0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that '0 Succeeded, 0 Failed' cell's property 'Value' equals '0 Succeeded, 0 Failed'
        /// </summary>
        public string UIItem0Succeeded0FaileCell1Value1 = "0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that '1 Succeeded, 0 Failed' cell's property 'Value' equals '1 Succeeded, 0 Failed'
        /// </summary>
        public string UIItem1Succeeded0FaileCellValue = "1 Succeeded, 0 Failed";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'VerifyDeleteOneCampaign'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class VerifyDeleteOneCampaignExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'haih@ad-sage.com #46848300(USD)' cell's property 'Value' equals 'haih@ad-sage.com #46848300(USD)'
        /// </summary>
        public string UIHaihadsagecom4684830CellValue = "haih@ad-sage.com #46848300(USD)";
        
        /// <summary>
        /// Verify that 'Finished' cell's property 'Value' equals 'Finished'
        /// </summary>
        public string UIFinishedCellValue = "Finished";
        
        /// <summary>
        /// Verify that 'Campaigns(1)' cell's property 'Value' equals 'Campaigns(1)'
        /// </summary>
        public string UICampaigns1CellValue = "Campaigns(1)";
        
        /// <summary>
        /// Verify that '0 Succeeded, 0 Failed' cell's property 'Value' equals '0 Succeeded, 0 Failed'
        /// </summary>
        public string UIItem0Succeeded0FaileCellValue = "0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that '0 Succeeded, 0 Failed' cell's property 'Value' equals '0 Succeeded, 0 Failed'
        /// </summary>
        public string UIItem0Succeeded0FaileCell1Value = "0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that '1 Succeeded, 0 Failed' cell's property 'Value' equals '1 Succeeded, 0 Failed'
        /// </summary>
        public string UIItem1Succeeded0FaileCellValue = "1 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Ad groups(0)' cell's property 'Value' equals 'Ads(0)'
        /// </summary>
        public string UIAdgroups0CellValue = "Ads(0)";
        
        /// <summary>
        /// Verify that '0 Succeeded, 0 Failed' cell's property 'Value' equals '0 Succeeded, 0 Failed'
        /// </summary>
        public string UIItem0Succeeded0FaileCellValue1 = "0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that '0 Succeeded, 0 Failed' cell's property 'Value' equals '0 Succeeded, 0 Failed'
        /// </summary>
        public string UIItem0Succeeded0FaileCell1Value1 = "0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that '0 Succeeded, 0 Failed' cell's property 'Value' equals '0 Succeeded, 0 Failed'
        /// </summary>
        public string UIItem0Succeeded0FaileCell2Value = "0 Succeeded, 0 Failed";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'VerifyDeleteOneGoogleAdvertisement'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class VerifyDeleteOneGoogleAdvertisementExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Row 0' row's property 'Value' equals 'Campaigns(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow0RowValue = "Campaigns(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 1' row's property 'Value' equals 'Ad groups(1);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;1 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow1RowValue = "Ad groups(1);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;1 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 2' row's property 'Value' equals 'Keywords(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow2RowValue = "Keywords(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 3' row's property 'Value' equals 'Text ads(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow3RowValue = "Text ads(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 4' row's property 'Value' equals 'Placements(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow4RowValue = "Placements(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'VerifyDeleteOneGoogleCampaign'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class VerifyDeleteOneGoogleCampaignExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Row 0' row's property 'Value' equals 'Campaigns(1);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;1 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow0RowValue = "Campaigns(1);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;1 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 1' row's property 'Value' equals 'Ad groups(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow1RowValue = "Ad groups(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 2' row's property 'Value' equals 'Keywords(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow2RowValue = "Keywords(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 3' row's property 'Value' equals 'Text ads(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow3RowValue = "Text ads(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 4' row's property 'Value' equals 'Placements(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow4RowValue = "Placements(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'VerifyDeleteOneTextAdForGoogle'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class VerifyDeleteOneTextAdForGoogleExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Row 0' row's property 'Value' equals 'Campaigns(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow0RowValue = "Campaigns(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 1' row's property 'Value' equals 'Ad groups(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow1RowValue = "Ad groups(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 2' row's property 'Value' equals 'Keywords(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow2RowValue = "Keywords(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 3' row's property 'Value' equals 'Text ads(1);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;1 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow3RowValue = "Text ads(1);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;1 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 4' row's property 'Value' equals 'Placements(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow4RowValue = "Placements(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'VerifyEditOneAdCenterCampaign'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class VerifyEditOneAdCenterCampaignExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Row 0' row's property 'Value' equals 'Campaigns(1);0 Succeeded, 0 Failed;1 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow0RowValue = "Campaigns(1);0 Succeeded, 0 Failed;1 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 1' row's property 'Value' equals 'Ad groups(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow1RowValue = "Ad groups(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 2' row's property 'Value' equals 'Keywords(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow2RowValue = "Keywords(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 3' row's property 'Value' equals 'Text ads(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow3RowValue = "Text ads(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'VerifyEditOneGoogleCampaign'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class VerifyEditOneGoogleCampaignExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Row 0' row's property 'Value' equals 'Campaigns(1);0 Succeeded, 0 Failed;1 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow0RowValue = "Campaigns(1);0 Succeeded, 0 Failed;1 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 1' row's property 'Value' equals 'Ad groups(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow1RowValue = "Ad groups(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 2' row's property 'Value' equals 'Keywords(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow2RowValue = "Keywords(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 3' row's property 'Value' equals 'Text ads(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow3RowValue = "Text ads(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 4' row's property 'Value' equals 'Placements(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow4RowValue = "Placements(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'VerifyUpdateOneAdvertisement'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class VerifyUpdateOneAdvertisementExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'haih@ad-sage.com #46848300(USD)' cell's property 'Value' equals 'haih@ad-sage.com #46848300(USD)'
        /// </summary>
        public string UIHaihadsagecom4684830CellValue = "haih@ad-sage.com #46848300(USD)";
        
        /// <summary>
        /// Verify that 'Finished' cell's property 'Value' equals 'Finished'
        /// </summary>
        public string UIFinishedCellValue = "Finished";
        
        /// <summary>
        /// Verify that 'Campaigns(0)' cell's property 'Value' equals 'Campaigns(0)'
        /// </summary>
        public string UICampaigns0CellValue = "Campaigns(0)";
        
        /// <summary>
        /// Verify that '0 Succeeded, 0 Failed' cell's property 'Value' equals '0 Succeeded, 0 Failed'
        /// </summary>
        public string UIItem0Succeeded0FaileCellValue = "0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that '0 Succeeded, 0 Failed' cell's property 'Value' equals '0 Succeeded, 0 Failed'
        /// </summary>
        public string UIItem0Succeeded0FaileCell1Value = "0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that '0 Succeeded, 0 Failed' cell's property 'Value' equals '0 Succeeded, 0 Failed'
        /// </summary>
        public string UIItem0Succeeded0FaileCell2Value = "0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Ad groups(1)' cell's property 'Value' equals 'Ads(1)'
        /// </summary>
        public string UIAdgroups1CellValue = "Ads(1)";
        
        /// <summary>
        /// Verify that '0 Succeeded, 0 Failed' cell's property 'Value' equals '0 Succeeded, 0 Failed'
        /// </summary>
        public string UIItem0Succeeded0FaileCellValue1 = "0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that '1 Succeeded, 0 Failed' cell's property 'Value' equals '1 Succeeded, 0 Failed'
        /// </summary>
        public string UIItem1Succeeded0FaileCellValue = "1 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that '0 Succeeded, 0 Failed' cell's property 'Value' equals '0 Succeeded, 0 Failed'
        /// </summary>
        public string UIItem0Succeeded0FaileCell1Value1 = "0 Succeeded, 0 Failed";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'VerifyUpdateOneAdvertisementForAdCenter'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class VerifyUpdateOneAdvertisementForAdCenterExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Row 0' row's property 'Value' equals 'Campaigns(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow0RowValue = "Campaigns(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 1' row's property 'Value' equals 'Ad groups(1);0 Succeeded, 0 Failed;1 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow1RowValue = "Ad groups(1);0 Succeeded, 0 Failed;1 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 2' row's property 'Value' equals 'Keywords(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow2RowValue = "Keywords(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 3' row's property 'Value' equals 'Text ads(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow3RowValue = "Text ads(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'VerifyUpdateOneAdvertisementForGoogle'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class VerifyUpdateOneAdvertisementForGoogleExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Row 0' row's property 'Value' equals 'Campaigns(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow0RowValue = "Campaigns(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 1' row's property 'Value' equals 'Ad groups(1);0 Succeeded, 0 Failed;1 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow1RowValue = "Ad groups(1);0 Succeeded, 0 Failed;1 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 2' row's property 'ControlType' equals 'Row'
        /// </summary>
        public string UIRow2RowControlType = "Row";
        
        /// <summary>
        /// Verify that 'Row 3' row's property 'Value' equals 'Text ads(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow3RowValue = "Text ads(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 4' row's property 'Value' equals 'Placements(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow4RowValue = "Placements(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'VerifyUpdateOneCampaign'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class VerifyUpdateOneCampaignExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'haih@ad-sage.com #46848300(USD)' cell's property 'Value' equals 'haih@ad-sage.com #46848300(USD)'
        /// </summary>
        public string UIHaihadsagecom4684830CellValue = "haih@ad-sage.com #46848300(USD)";
        
        /// <summary>
        /// Verify that 'Finished' cell's property 'Value' equals 'Finished'
        /// </summary>
        public string UIFinishedCellValue = "Finished";
        
        /// <summary>
        /// Verify that 'Campaigns(1)' cell's property 'Value' equals 'Campaigns(1)'
        /// </summary>
        public string UICampaigns1CellValue = "Campaigns(1)";
        
        /// <summary>
        /// Verify that '0 Succeeded, 0 Failed' cell's property 'Value' equals '0 Succeeded, 0 Failed'
        /// </summary>
        public string UIItem0Succeeded0FaileCellValue = "0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that '1 Succeeded, 1 Failed' cell's property 'Value' equals '1 Succeeded, 0 Failed'
        /// </summary>
        public string UIItem1Succeeded1FaileCellValue = "1 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that '1 Succeeded, 1 Failed' cell's property 'Value' equals '1 Succeeded, 0 Failed'
        /// </summary>
        public string UIItem1Succeeded1FaileCellValue1 = "1 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that '0 Succeeded, 0 Failed' cell's property 'Value' equals '0 Succeeded, 0 Failed'
        /// </summary>
        public string UIItem0Succeeded0FaileCell1Value = "0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Ad groups(0)' cell's property 'Value' equals 'Ads(0)'
        /// </summary>
        public string UIAdgroups0CellValue = "Ads(0)";
        
        /// <summary>
        /// Verify that '0 Succeeded, 0 Failed' cell's property 'Value' equals '0 Succeeded, 0 Failed'
        /// </summary>
        public string UIItem0Succeeded0FaileCellValue1 = "0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that '0 Succeeded, 0 Failed' cell's property 'Value' equals '0 Succeeded, 0 Failed'
        /// </summary>
        public string UIItem0Succeeded0FaileCell1Value1 = "0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that '0 Succeeded, 0 Failed' cell's property 'Value' equals '0 Succeeded, 0 Failed'
        /// </summary>
        public string UIItem0Succeeded0FaileCell2Value = "0 Succeeded, 0 Failed";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'VerifyUpdateOneTextAdForAdCenter'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class VerifyUpdateOneTextAdForAdCenterExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Row 0' row's property 'Value' equals 'Campaigns(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow0RowValue = "Campaigns(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 1' row's property 'Value' equals 'Ad groups(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow1RowValue = "Ad groups(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 2' row's property 'Value' equals 'Keywords(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow2RowValue = "Keywords(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 3' row's property 'Value' equals 'Text ads(1);0 Succeeded, 0 Failed;1 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow3RowValue = "Text ads(1);0 Succeeded, 0 Failed;1 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'VerifyUpdateOneTextAdForGoogle'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class VerifyUpdateOneTextAdForGoogleExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Row 0' row's property 'Value' equals 'Campaigns(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow0RowValue = "Campaigns(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 1' row's property 'Value' equals 'Ad groups(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow1RowValue = "Ad groups(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 2' row's property 'Value' equals 'Keywords(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow2RowValue = "Keywords(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 3' row's property 'Value' equals 'Text ads(2);1 Succeeded, 0 Failed;0 Succeeded, 0 Failed;1 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow3RowValue = "Text ads(2);1 Succeeded, 0 Failed;0 Succeeded, 0 Failed;1 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 4' row's property 'Value' equals 'Placements(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow4RowValue = "Placements(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'VerifyUploadOneAdCenterAdvertisement'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class VerifyUploadOneAdCenterAdvertisementExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Row 0' row's property 'Value' equals 'Campaigns(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow0RowValue = "Campaigns(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 1' row's property 'Value' equals 'Ad groups(1);1 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow1RowValue = "Ad groups(1);1 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 2' row's property 'Value' equals 'Keywords(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow2RowValue = "Keywords(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 3' row's property 'Value' equals 'Text ads(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow3RowValue = "Text ads(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'VerifyUploadOneAdCenterCampaign'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class VerifyUploadOneAdCenterCampaignExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Row 0' row's property 'Value' equals 'Campaigns(1);1 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow0RowValue = "Campaigns(1);1 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 1' row's property 'Value' equals 'Ad groups(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow1RowValue = "Ad groups(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 2' row's property 'Value' equals 'Keywords(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow2RowValue = "Keywords(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 3' row's property 'Value' equals 'Text ads(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow3RowValue = "Text ads(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'VerifyUploadOneAdCenterTextAd'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class VerifyUploadOneAdCenterTextAdExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Row 0' row's property 'Value' equals 'Campaigns(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow0RowValue = "Campaigns(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 1' row's property 'Value' equals 'Ad groups(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow1RowValue = "Ad groups(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 2' row's property 'Value' equals 'Keywords(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow2RowValue = "Keywords(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 3' row's property 'Value' equals 'Text ads(1);1 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow3RowValue = "Text ads(1);1 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'VerifyUploadOneAdvertisement'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class VerifyUploadOneAdvertisementExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'haih@ad-sage.com #46848300(USD)' cell's property 'Value' equals 'haih@ad-sage.com #46848300(USD)'
        /// </summary>
        public string UIHaihadsagecom4684830CellValue = "haih@ad-sage.com #46848300(USD)";
        
        /// <summary>
        /// Verify that 'Finished' cell's property 'Value' equals 'Finished'
        /// </summary>
        public string UIFinishedCellValue = "Finished";
        
        /// <summary>
        /// Verify that 'Campaigns(0)' cell's property 'Value' equals 'Campaigns(0)'
        /// </summary>
        public string UICampaigns0CellValue = "Campaigns(0)";
        
        /// <summary>
        /// Verify that '0 Succeeded, 0 Failed' cell's property 'Value' equals '0 Succeeded, 0 Failed'
        /// </summary>
        public string UIItem0Succeeded0FaileCellValue = "0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that '0 Succeeded, 0 Failed' cell's property 'Value' equals '0 Succeeded, 0 Failed'
        /// </summary>
        public string UIItem0Succeeded0FaileCell1Value = "0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that '0 Succeeded, 0 Failed' cell's property 'Value' equals '0 Succeeded, 0 Failed'
        /// </summary>
        public string UIItem0Succeeded0FaileCell2Value = "0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Ad groups(1)' cell's property 'Value' equals 'Ads(1)'
        /// </summary>
        public string UIAdgroups1CellValue = "Ads(1)";
        
        /// <summary>
        /// Verify that '1 Succeeded, 0 Failed' cell's property 'Value' equals '1 Succeeded, 0 Failed'
        /// </summary>
        public string UIItem1Succeeded0FaileCellValue = "1 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that '0 Succeeded, 0 Failed' cell's property 'Value' equals '0 Succeeded, 0 Failed'
        /// </summary>
        public string UIItem0Succeeded0FaileCellValue1 = "0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that '0 Succeeded, 0 Failed' cell's property 'Value' equals '0 Succeeded, 0 Failed'
        /// </summary>
        public string UIItem0Succeeded0FaileCell1Value1 = "0 Succeeded, 0 Failed";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'VerifyUploadOneGoogleAdvertisement'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class VerifyUploadOneGoogleAdvertisementExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Row 0' row's property 'Value' equals 'Campaigns(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow0RowValue = "Campaigns(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 1' row's property 'Value' equals 'Ad groups(1);1 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow1RowValue = "Ad groups(1);1 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 2' row's property 'Value' equals 'Keywords(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow2RowValue = "Keywords(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 3' row's property 'Value' equals 'Text ads(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow3RowValue = "Text ads(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 4' row's property 'Value' equals 'Placements(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow4RowValue = "Placements(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'VerifyUploadOneGoogleCampaign'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class VerifyUploadOneGoogleCampaignExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Row 0' row's property 'Value' equals 'Campaigns(1);1 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow0RowValue = "Campaigns(1);1 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 1' row's property 'Value' equals 'Ad groups(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow1RowValue = "Ad groups(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 2' row's property 'Value' equals 'Keywords(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow2RowValue = "Keywords(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 3' row's property 'Value' equals 'Text ads(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow3RowValue = "Text ads(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 4' row's property 'Value' equals 'Placements(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow4RowValue = "Placements(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'VerifyUploadOneGoogleKeywords'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class VerifyUploadOneGoogleKeywordsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Row 0' row's property 'Value' equals 'Campaigns(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow0RowValue = "Campaigns(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 1' row's property 'Value' equals 'Ad groups(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow1RowValue = "Ad groups(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 2' row's property 'Value' equals 'Keywords(1);1 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow2RowValue = "Keywords(1);1 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 3' row's property 'Value' equals 'Text ads(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow3RowValue = "Text ads(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 4' row's property 'Value' equals 'Placements(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow4RowValue = "Placements(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'VerifyUploadOneGoogleTextAd'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class VerifyUploadOneGoogleTextAdExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Row 0' row's property 'Value' equals 'Campaigns(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow0RowValue = "Campaigns(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 1' row's property 'Value' equals 'Ad groups(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow1RowValue = "Ad groups(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 2' row's property 'Value' equals 'Keywords(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow2RowValue = "Keywords(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 3' row's property 'Value' equals 'Text ads(1);1 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow3RowValue = "Text ads(1);1 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 4' row's property 'Value' equals 'Placements(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow4RowValue = "Placements(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'VerifyDeleteOneTextAdForAdCenter'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class VerifyDeleteOneTextAdForAdCenterExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Row 0' row's property 'Value' equals 'Campaigns(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow0RowValue = "Campaigns(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 1' row's property 'Value' equals 'Ad groups(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow1RowValue = "Ad groups(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 2' row's property 'Value' equals 'Keywords(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow2RowValue = "Keywords(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 3' row's property 'Value' equals 'Text ads(1);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;1 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow3RowValue = "Text ads(1);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;1 Succeeded, 0 Failed";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'VerifyUploadOneAdcenterKeywords'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class VerifyUploadOneAdcenterKeywordsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Row 0' row's property 'Value' equals 'Campaigns(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow0RowValue = "Campaigns(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 1' row's property 'Value' equals 'Ad groups(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow1RowValue = "Ad groups(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 2' row's property 'Value' equals 'Keywords(1);1 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow2RowValue = "Keywords(1);1 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 3' row's property 'Value' equals 'Text ads(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow3RowValue = "Text ads(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'VerifyDeleteOneKeywordForAdcenter'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class VerifyDeleteOneKeywordForAdcenterExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Row 0' row's property 'Value' equals 'Campaigns(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow0RowValue = "Campaigns(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 1' row's property 'Value' equals 'Ad groups(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow1RowValue = "Ad groups(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 2' row's property 'Value' equals 'Keywords(1);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;1 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow2RowValue = "Keywords(1);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;1 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 3' row's property 'Value' equals 'Text ads(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow3RowValue = "Text ads(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'VerifyUpdateOneAdcenterKeywords'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class VerifyUpdateOneAdcenterKeywordsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Row 0' row's property 'Value' equals 'Campaigns(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow0RowValue = "Campaigns(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 1' row's property 'Value' equals 'Ad groups(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow1RowValue = "Ad groups(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 2' row's property 'Value' equals 'Keywords(1);0 Succeeded, 0 Failed;1 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow2RowValue = "Keywords(2);1 Succeeded, 0 Failed;0 Succeeded, 0 Failed;1 Succeeded, 0 Failed";
        
        /// <summary>
        /// Verify that 'Row 3' row's property 'Value' equals 'Text ads(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed'
        /// </summary>
        public string UIRow3RowValue = "Text ads(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDetailedInfoforUploaWindow : WinWindow
    {
        
        public UIDetailedInfoforUploaWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Detailed Info for Upload";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Detailed Info for Upload");
            #endregion
        }
        
        #region Properties
        public UITaskUploadObjectInfoMenuBar UITaskUploadObjectInfoMenuBar
        {
            get
            {
                if ((this.mUITaskUploadObjectInfoMenuBar == null))
                {
                    this.mUITaskUploadObjectInfoMenuBar = new UITaskUploadObjectInfoMenuBar(this);
                }
                return this.mUITaskUploadObjectInfoMenuBar;
            }
        }
        
        public UISystemMenuItem1 UISystemMenuItem
        {
            get
            {
                if ((this.mUISystemMenuItem == null))
                {
                    this.mUISystemMenuItem = new UISystemMenuItem1(this);
                }
                return this.mUISystemMenuItem;
            }
        }
        
        public UISystemMenu UISystemMenu
        {
            get
            {
                if ((this.mUISystemMenu == null))
                {
                    this.mUISystemMenu = new UISystemMenu(this);
                }
                return this.mUISystemMenu;
            }
        }
        
        public UIDetailedInfoforUploaTitleBar UIDetailedInfoforUploaTitleBar
        {
            get
            {
                if ((this.mUIDetailedInfoforUploaTitleBar == null))
                {
                    this.mUIDetailedInfoforUploaTitleBar = new UIDetailedInfoforUploaTitleBar(this);
                }
                return this.mUIDetailedInfoforUploaTitleBar;
            }
        }
        
        public WinMenuBar UITaskUploadObjectInfoMenuBar1
        {
            get
            {
                if ((this.mUITaskUploadObjectInfoMenuBar1 == null))
                {
                    this.mUITaskUploadObjectInfoMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUITaskUploadObjectInfoMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUITaskUploadObjectInfoMenuBar1;
            }
        }
        
        public UIDetailedInfoforUploaClient UIDetailedInfoforUploaClient
        {
            get
            {
                if ((this.mUIDetailedInfoforUploaClient == null))
                {
                    this.mUIDetailedInfoforUploaClient = new UIDetailedInfoforUploaClient(this);
                }
                return this.mUIDetailedInfoforUploaClient;
            }
        }
        
        public UITableLayoutPanel1Window UITableLayoutPanel1Window
        {
            get
            {
                if ((this.mUITableLayoutPanel1Window == null))
                {
                    this.mUITableLayoutPanel1Window = new UITableLayoutPanel1Window(this);
                }
                return this.mUITableLayoutPanel1Window;
            }
        }
        
        public UIPanelWindow UIPanelWindow
        {
            get
            {
                if ((this.mUIPanelWindow == null))
                {
                    this.mUIPanelWindow = new UIPanelWindow(this);
                }
                return this.mUIPanelWindow;
            }
        }
        
        public UISageGridViewJobsWindow UISageGridViewJobsWindow
        {
            get
            {
                if ((this.mUISageGridViewJobsWindow == null))
                {
                    this.mUISageGridViewJobsWindow = new UISageGridViewJobsWindow(this);
                }
                return this.mUISageGridViewJobsWindow;
            }
        }
        
        public UIVerticalScrollBar UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public UIVerticalScrollBar1 UIVerticalScrollBar1
        {
            get
            {
                if ((this.mUIVerticalScrollBar1 == null))
                {
                    this.mUIVerticalScrollBar1 = new UIVerticalScrollBar1(this);
                }
                return this.mUIVerticalScrollBar1;
            }
        }
        
        public UIHorizontalScrollBar1 UIHorizontalScrollBar1
        {
            get
            {
                if ((this.mUIHorizontalScrollBar1 == null))
                {
                    this.mUIHorizontalScrollBar1 = new UIHorizontalScrollBar1(this);
                }
                return this.mUIHorizontalScrollBar1;
            }
        }
        
        public UIPanel2Window UIPanel2Window
        {
            get
            {
                if ((this.mUIPanel2Window == null))
                {
                    this.mUIPanel2Window = new UIPanel2Window(this);
                }
                return this.mUIPanel2Window;
            }
        }
        
        public UIDetailedmessagesWindow UIDetailedmessagesWindow
        {
            get
            {
                if ((this.mUIDetailedmessagesWindow == null))
                {
                    this.mUIDetailedmessagesWindow = new UIDetailedmessagesWindow(this);
                }
                return this.mUIDetailedmessagesWindow;
            }
        }
        
        public UIDetailedmessagesScrollBar UIDetailedmessagesScrollBar
        {
            get
            {
                if ((this.mUIDetailedmessagesScrollBar == null))
                {
                    this.mUIDetailedmessagesScrollBar = new UIDetailedmessagesScrollBar(this);
                }
                return this.mUIDetailedmessagesScrollBar;
            }
        }
        
        public UIDetailedmessagesScrollBar1 UIDetailedmessagesScrollBar1
        {
            get
            {
                if ((this.mUIDetailedmessagesScrollBar1 == null))
                {
                    this.mUIDetailedmessagesScrollBar1 = new UIDetailedmessagesScrollBar1(this);
                }
                return this.mUIDetailedmessagesScrollBar1;
            }
        }
        
        public UISageTabControl1Window UISageTabControl1Window
        {
            get
            {
                if ((this.mUISageTabControl1Window == null))
                {
                    this.mUISageTabControl1Window = new UISageTabControl1Window(this);
                }
                return this.mUISageTabControl1Window;
            }
        }
        
        public UIDetailedmessagesTabList UIDetailedmessagesTabList
        {
            get
            {
                if ((this.mUIDetailedmessagesTabList == null))
                {
                    this.mUIDetailedmessagesTabList = new UIDetailedmessagesTabList(this);
                }
                return this.mUIDetailedmessagesTabList;
            }
        }
        
        public UIInformationWindow UIInformationWindow
        {
            get
            {
                if ((this.mUIInformationWindow == null))
                {
                    this.mUIInformationWindow = new UIInformationWindow(this);
                }
                return this.mUIInformationWindow;
            }
        }
        
        public UIInformationClient UIInformationClient
        {
            get
            {
                if ((this.mUIInformationClient == null))
                {
                    this.mUIInformationClient = new UIInformationClient(this);
                }
                return this.mUIInformationClient;
            }
        }
        
        public UISageGridViewInfoWindow UISageGridViewInfoWindow
        {
            get
            {
                if ((this.mUISageGridViewInfoWindow == null))
                {
                    this.mUISageGridViewInfoWindow = new UISageGridViewInfoWindow(this);
                }
                return this.mUISageGridViewInfoWindow;
            }
        }
        
        public UIInformationScrollBar UIInformationScrollBar
        {
            get
            {
                if ((this.mUIInformationScrollBar == null))
                {
                    this.mUIInformationScrollBar = new UIInformationScrollBar(this);
                }
                return this.mUIInformationScrollBar;
            }
        }
        
        public UIInformationScrollBar1 UIInformationScrollBar1
        {
            get
            {
                if ((this.mUIInformationScrollBar1 == null))
                {
                    this.mUIInformationScrollBar1 = new UIInformationScrollBar1(this);
                }
                return this.mUIInformationScrollBar1;
            }
        }
        
        public UIVerticalScrollBar21 UIVerticalScrollBar2
        {
            get
            {
                if ((this.mUIVerticalScrollBar2 == null))
                {
                    this.mUIVerticalScrollBar2 = new UIVerticalScrollBar21(this);
                }
                return this.mUIVerticalScrollBar2;
            }
        }
        
        public UIHorizontalScrollBar21 UIHorizontalScrollBar2
        {
            get
            {
                if ((this.mUIHorizontalScrollBar2 == null))
                {
                    this.mUIHorizontalScrollBar2 = new UIHorizontalScrollBar21(this);
                }
                return this.mUIHorizontalScrollBar2;
            }
        }
        
        public UICloseWindow UICloseWindow
        {
            get
            {
                if ((this.mUICloseWindow == null))
                {
                    this.mUICloseWindow = new UICloseWindow(this);
                }
                return this.mUICloseWindow;
            }
        }
        
        public UICloseScrollBar UICloseScrollBar
        {
            get
            {
                if ((this.mUICloseScrollBar == null))
                {
                    this.mUICloseScrollBar = new UICloseScrollBar(this);
                }
                return this.mUICloseScrollBar;
            }
        }
        
        public UICloseScrollBar1 UICloseScrollBar1
        {
            get
            {
                if ((this.mUICloseScrollBar1 == null))
                {
                    this.mUICloseScrollBar1 = new UICloseScrollBar1(this);
                }
                return this.mUICloseScrollBar1;
            }
        }
        
        public UIVerticalScrollBar3 UIVerticalScrollBar3
        {
            get
            {
                if ((this.mUIVerticalScrollBar3 == null))
                {
                    this.mUIVerticalScrollBar3 = new UIVerticalScrollBar3(this);
                }
                return this.mUIVerticalScrollBar3;
            }
        }
        
        public UIHorizontalScrollBar3 UIHorizontalScrollBar3
        {
            get
            {
                if ((this.mUIHorizontalScrollBar3 == null))
                {
                    this.mUIHorizontalScrollBar3 = new UIHorizontalScrollBar3(this);
                }
                return this.mUIHorizontalScrollBar3;
            }
        }
        
        public UIVerticalScrollBar4 UIVerticalScrollBar4
        {
            get
            {
                if ((this.mUIVerticalScrollBar4 == null))
                {
                    this.mUIVerticalScrollBar4 = new UIVerticalScrollBar4(this);
                }
                return this.mUIVerticalScrollBar4;
            }
        }
        
        public UIHorizontalScrollBar4 UIHorizontalScrollBar4
        {
            get
            {
                if ((this.mUIHorizontalScrollBar4 == null))
                {
                    this.mUIHorizontalScrollBar4 = new UIHorizontalScrollBar4(this);
                }
                return this.mUIHorizontalScrollBar4;
            }
        }
        
        public UIDetailedInfoforUploaScrollBar UIDetailedInfoforUploaScrollBar
        {
            get
            {
                if ((this.mUIDetailedInfoforUploaScrollBar == null))
                {
                    this.mUIDetailedInfoforUploaScrollBar = new UIDetailedInfoforUploaScrollBar(this);
                }
                return this.mUIDetailedInfoforUploaScrollBar;
            }
        }
        
        public UIDetailedInfoforUploaScrollBar1 UIDetailedInfoforUploaScrollBar1
        {
            get
            {
                if ((this.mUIDetailedInfoforUploaScrollBar1 == null))
                {
                    this.mUIDetailedInfoforUploaScrollBar1 = new UIDetailedInfoforUploaScrollBar1(this);
                }
                return this.mUIDetailedInfoforUploaScrollBar1;
            }
        }
        
        public WinControl UIDetailedInfoforUploaGrip
        {
            get
            {
                if ((this.mUIDetailedInfoforUploaGrip == null))
                {
                    this.mUIDetailedInfoforUploaGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIDetailedInfoforUploaGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIDetailedInfoforUploaGrip;
            }
        }
        #endregion
        
        #region Fields
        private UITaskUploadObjectInfoMenuBar mUITaskUploadObjectInfoMenuBar;
        
        private UISystemMenuItem1 mUISystemMenuItem;
        
        private UISystemMenu mUISystemMenu;
        
        private UIDetailedInfoforUploaTitleBar mUIDetailedInfoforUploaTitleBar;
        
        private WinMenuBar mUITaskUploadObjectInfoMenuBar1;
        
        private UIDetailedInfoforUploaClient mUIDetailedInfoforUploaClient;
        
        private UITableLayoutPanel1Window mUITableLayoutPanel1Window;
        
        private UIPanelWindow mUIPanelWindow;
        
        private UISageGridViewJobsWindow mUISageGridViewJobsWindow;
        
        private UIVerticalScrollBar mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar mUIHorizontalScrollBar;
        
        private UIVerticalScrollBar1 mUIVerticalScrollBar1;
        
        private UIHorizontalScrollBar1 mUIHorizontalScrollBar1;
        
        private UIPanel2Window mUIPanel2Window;
        
        private UIDetailedmessagesWindow mUIDetailedmessagesWindow;
        
        private UIDetailedmessagesScrollBar mUIDetailedmessagesScrollBar;
        
        private UIDetailedmessagesScrollBar1 mUIDetailedmessagesScrollBar1;
        
        private UISageTabControl1Window mUISageTabControl1Window;
        
        private UIDetailedmessagesTabList mUIDetailedmessagesTabList;
        
        private UIInformationWindow mUIInformationWindow;
        
        private UIInformationClient mUIInformationClient;
        
        private UISageGridViewInfoWindow mUISageGridViewInfoWindow;
        
        private UIInformationScrollBar mUIInformationScrollBar;
        
        private UIInformationScrollBar1 mUIInformationScrollBar1;
        
        private UIVerticalScrollBar21 mUIVerticalScrollBar2;
        
        private UIHorizontalScrollBar21 mUIHorizontalScrollBar2;
        
        private UICloseWindow mUICloseWindow;
        
        private UICloseScrollBar mUICloseScrollBar;
        
        private UICloseScrollBar1 mUICloseScrollBar1;
        
        private UIVerticalScrollBar3 mUIVerticalScrollBar3;
        
        private UIHorizontalScrollBar3 mUIHorizontalScrollBar3;
        
        private UIVerticalScrollBar4 mUIVerticalScrollBar4;
        
        private UIHorizontalScrollBar4 mUIHorizontalScrollBar4;
        
        private UIDetailedInfoforUploaScrollBar mUIDetailedInfoforUploaScrollBar;
        
        private UIDetailedInfoforUploaScrollBar1 mUIDetailedInfoforUploaScrollBar1;
        
        private WinControl mUIDetailedInfoforUploaGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITaskUploadObjectInfoMenuBar : WinMenuBar
    {
        
        public UITaskUploadObjectInfoMenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "System";
            #endregion
        }
        
        #region Properties
        public UISystemMenuItem UISystemMenuItem
        {
            get
            {
                if ((this.mUISystemMenuItem == null))
                {
                    this.mUISystemMenuItem = new UISystemMenuItem(this);
                }
                return this.mUISystemMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UISystemMenuItem mUISystemMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISystemMenuItem : WinMenuItem
    {
        
        public UISystemMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "System";
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIRestoreMenuItem
        {
            get
            {
                if ((this.mUIRestoreMenuItem == null))
                {
                    this.mUIRestoreMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIRestoreMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Restore";
                    this.mUIRestoreMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUIRestoreMenuItem;
            }
        }
        
        public WinMenuItem UIMoveMenuItem
        {
            get
            {
                if ((this.mUIMoveMenuItem == null))
                {
                    this.mUIMoveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIMoveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Move";
                    this.mUIMoveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUIMoveMenuItem;
            }
        }
        
        public WinMenuItem UISizeMenuItem
        {
            get
            {
                if ((this.mUISizeMenuItem == null))
                {
                    this.mUISizeMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISizeMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Size";
                    this.mUISizeMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUISizeMenuItem;
            }
        }
        
        public WinMenuItem UIMinimizeMenuItem
        {
            get
            {
                if ((this.mUIMinimizeMenuItem == null))
                {
                    this.mUIMinimizeMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIMinimizeMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Minimize";
                    this.mUIMinimizeMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUIMinimizeMenuItem;
            }
        }
        
        public WinMenuItem UIMaximizeMenuItem
        {
            get
            {
                if ((this.mUIMaximizeMenuItem == null))
                {
                    this.mUIMaximizeMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIMaximizeMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Maximize";
                    this.mUIMaximizeMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUIMaximizeMenuItem;
            }
        }
        
        public WinMenuItem UICloseAltF4MenuItem
        {
            get
            {
                if ((this.mUICloseAltF4MenuItem == null))
                {
                    this.mUICloseAltF4MenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseAltF4MenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close\tAlt+F4";
                    this.mUICloseAltF4MenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUICloseAltF4MenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIRestoreMenuItem;
        
        private WinMenuItem mUIMoveMenuItem;
        
        private WinMenuItem mUISizeMenuItem;
        
        private WinMenuItem mUIMinimizeMenuItem;
        
        private WinMenuItem mUIMaximizeMenuItem;
        
        private WinMenuItem mUICloseAltF4MenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISystemMenuItem1 : WinMenuItem
    {
        
        public UISystemMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "System";
            #endregion
        }
        
        #region Properties
        public WinMenu UISystemMenu
        {
            get
            {
                if ((this.mUISystemMenu == null))
                {
                    this.mUISystemMenu = new WinMenu(this);
                    #region Search Criteria
                    this.mUISystemMenu.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    this.mUISystemMenu.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISystemMenu.SearchConfigurations.Remove(SearchConfiguration.VisibleOnly);
                    #endregion
                }
                return this.mUISystemMenu;
            }
        }
        #endregion
        
        #region Fields
        private WinMenu mUISystemMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISystemMenu : WinMenu
    {
        
        public UISystemMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "System";
            this.SearchConfigurations.Remove(SearchConfiguration.VisibleOnly);
            #endregion
        }
        
        #region Properties
        public WinSeparator UIItemSeparator
        {
            get
            {
                if ((this.mUIItemSeparator == null))
                {
                    this.mUIItemSeparator = new WinSeparator(this);
                }
                return this.mUIItemSeparator;
            }
        }
        #endregion
        
        #region Fields
        private WinSeparator mUIItemSeparator;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDetailedInfoforUploaTitleBar : WinTitleBar
    {
        
        public UIDetailedInfoforUploaTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDetailedInfoforUploaClient : WinClient
    {
        
        public UIDetailedInfoforUploaClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Detailed Info for Upload";
            #endregion
        }
        
        #region Properties
        public WinWindow UITableLayoutPanel1Window
        {
            get
            {
                if ((this.mUITableLayoutPanel1Window == null))
                {
                    this.mUITableLayoutPanel1Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUITableLayoutPanel1Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUITableLayoutPanel1Window;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUITableLayoutPanel1Window;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITableLayoutPanel1Window : WinWindow
    {
        
        public UITableLayoutPanel1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "tableLayoutPanel1";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UITableLayoutPanel1MenuBar
        {
            get
            {
                if ((this.mUITableLayoutPanel1MenuBar == null))
                {
                    this.mUITableLayoutPanel1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUITableLayoutPanel1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUITableLayoutPanel1MenuBar;
            }
        }
        
        public WinTitleBar UITableLayoutPanel1TitleBar
        {
            get
            {
                if ((this.mUITableLayoutPanel1TitleBar == null))
                {
                    this.mUITableLayoutPanel1TitleBar = new WinTitleBar(this);
                }
                return this.mUITableLayoutPanel1TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UITableLayoutPanel1MenuBar1
        {
            get
            {
                if ((this.mUITableLayoutPanel1MenuBar1 == null))
                {
                    this.mUITableLayoutPanel1MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUITableLayoutPanel1MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUITableLayoutPanel1MenuBar1;
            }
        }
        
        public WinClient UITableLayoutPanel1Client
        {
            get
            {
                if ((this.mUITableLayoutPanel1Client == null))
                {
                    this.mUITableLayoutPanel1Client = new WinClient(this);
                }
                return this.mUITableLayoutPanel1Client;
            }
        }
        
        public WinWindow UIPanelWindow
        {
            get
            {
                if ((this.mUIPanelWindow == null))
                {
                    this.mUIPanelWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIPanelWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIPanelWindow.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    #endregion
                }
                return this.mUIPanelWindow;
            }
        }
        
        public WinWindow UIPanel2Window
        {
            get
            {
                if ((this.mUIPanel2Window == null))
                {
                    this.mUIPanel2Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUIPanel2Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIPanel2Window.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
                    #endregion
                }
                return this.mUIPanel2Window;
            }
        }
        
        public WinScrollBar UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIVerticalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public WinScrollBar UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIHorizontalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UITableLayoutPanel1Grip
        {
            get
            {
                if ((this.mUITableLayoutPanel1Grip == null))
                {
                    this.mUITableLayoutPanel1Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUITableLayoutPanel1Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUITableLayoutPanel1Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUITableLayoutPanel1MenuBar;
        
        private WinTitleBar mUITableLayoutPanel1TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUITableLayoutPanel1MenuBar1;
        
        private WinClient mUITableLayoutPanel1Client;
        
        private WinWindow mUIPanelWindow;
        
        private WinWindow mUIPanel2Window;
        
        private WinScrollBar mUIVerticalScrollBar;
        
        private WinScrollBar mUIHorizontalScrollBar;
        
        private WinControl mUITableLayoutPanel1Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPanelWindow : WinWindow
    {
        
        public UIPanelWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "panel";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIPanelMenuBar
        {
            get
            {
                if ((this.mUIPanelMenuBar == null))
                {
                    this.mUIPanelMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanelMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIPanelMenuBar;
            }
        }
        
        public WinTitleBar UIPanelTitleBar
        {
            get
            {
                if ((this.mUIPanelTitleBar == null))
                {
                    this.mUIPanelTitleBar = new WinTitleBar(this);
                }
                return this.mUIPanelTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIPanelMenuBar1
        {
            get
            {
                if ((this.mUIPanelMenuBar1 == null))
                {
                    this.mUIPanelMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanelMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIPanelMenuBar1;
            }
        }
        
        public WinClient UIPanelClient
        {
            get
            {
                if ((this.mUIPanelClient == null))
                {
                    this.mUIPanelClient = new WinClient(this);
                }
                return this.mUIPanelClient;
            }
        }
        
        public WinWindow UISageGridViewJobsWindow
        {
            get
            {
                if ((this.mUISageGridViewJobsWindow == null))
                {
                    this.mUISageGridViewJobsWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUISageGridViewJobsWindow.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "DataGridView";
                    this.mUISageGridViewJobsWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUISageGridViewJobsWindow;
            }
        }
        
        public WinScrollBar UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIVerticalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public WinScrollBar UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIHorizontalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIPanelGrip
        {
            get
            {
                if ((this.mUIPanelGrip == null))
                {
                    this.mUIPanelGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIPanelGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIPanelGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIPanelMenuBar;
        
        private WinTitleBar mUIPanelTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIPanelMenuBar1;
        
        private WinClient mUIPanelClient;
        
        private WinWindow mUISageGridViewJobsWindow;
        
        private WinScrollBar mUIVerticalScrollBar;
        
        private WinScrollBar mUIHorizontalScrollBar;
        
        private WinControl mUIPanelGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISageGridViewJobsWindow : WinWindow
    {
        
        public UISageGridViewJobsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "sageGridViewJobs";
            this.WindowTitles.Add("Detailed Info for Upload");
            #endregion
        }
        
        #region Properties
        public WinScrollBar UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIVerticalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public WinScrollBar UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIHorizontalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UISageGridViewJobsGrip
        {
            get
            {
                if ((this.mUISageGridViewJobsGrip == null))
                {
                    this.mUISageGridViewJobsGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUISageGridViewJobsGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUISageGridViewJobsGrip;
            }
        }
        
        public UIDataGridViewTable UIDataGridViewTable
        {
            get
            {
                if ((this.mUIDataGridViewTable == null))
                {
                    this.mUIDataGridViewTable = new UIDataGridViewTable(this);
                }
                return this.mUIDataGridViewTable;
            }
        }
        #endregion
        
        #region Fields
        private WinScrollBar mUIVerticalScrollBar;
        
        private WinScrollBar mUIHorizontalScrollBar;
        
        private WinControl mUISageGridViewJobsGrip;
        
        private UIDataGridViewTable mUIDataGridViewTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDataGridViewTable : WinTable
    {
        
        public UIDataGridViewTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTable.PropertyNames.Name] = "DataGridView";
            this.WindowTitles.Add("Detailed Info for Upload");
            #endregion
        }
        
        #region Properties
        public UIRow0Row UIRow0Row
        {
            get
            {
                if ((this.mUIRow0Row == null))
                {
                    this.mUIRow0Row = new UIRow0Row(this);
                }
                return this.mUIRow0Row;
            }
        }
        #endregion
        
        #region Fields
        private UIRow0Row mUIRow0Row;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRow0Row : WinRow
    {
        
        public UIRow0Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "haih@ad-sage.com #46848300(USD);Finished;(null)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Detailed Info for Upload");
            #endregion
        }
        
        #region Properties
        public WinCell UIHaihadsagecom4684830Cell
        {
            get
            {
                if ((this.mUIHaihadsagecom4684830Cell == null))
                {
                    this.mUIHaihadsagecom4684830Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIHaihadsagecom4684830Cell.SearchProperties[WinCell.PropertyNames.Value] = "haih@ad-sage.com #46848300(USD)";
                    this.mUIHaihadsagecom4684830Cell.WindowTitles.Add("Detailed Info for Upload");
                    #endregion
                }
                return this.mUIHaihadsagecom4684830Cell;
            }
        }
        
        public WinCell UIFinishedCell
        {
            get
            {
                if ((this.mUIFinishedCell == null))
                {
                    this.mUIFinishedCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFinishedCell.SearchProperties[WinCell.PropertyNames.Value] = "Finished";
                    this.mUIFinishedCell.WindowTitles.Add("Detailed Info for Upload");
                    #endregion
                }
                return this.mUIFinishedCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIHaihadsagecom4684830Cell;
        
        private WinCell mUIFinishedCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar : WinScrollBar
    {
        
        public UIVerticalScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar : WinScrollBar
    {
        
        public UIHorizontalScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar1 : WinScrollBar
    {
        
        public UIVerticalScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar1 : WinScrollBar
    {
        
        public UIHorizontalScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPanel2Window : WinWindow
    {
        
        public UIPanel2Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "panel2";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIPanel2MenuBar
        {
            get
            {
                if ((this.mUIPanel2MenuBar == null))
                {
                    this.mUIPanel2MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanel2MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIPanel2MenuBar;
            }
        }
        
        public WinTitleBar UIPanel2TitleBar
        {
            get
            {
                if ((this.mUIPanel2TitleBar == null))
                {
                    this.mUIPanel2TitleBar = new WinTitleBar(this);
                }
                return this.mUIPanel2TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIPanel2MenuBar1
        {
            get
            {
                if ((this.mUIPanel2MenuBar1 == null))
                {
                    this.mUIPanel2MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanel2MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIPanel2MenuBar1;
            }
        }
        
        public WinClient UIPanel2Client
        {
            get
            {
                if ((this.mUIPanel2Client == null))
                {
                    this.mUIPanel2Client = new WinClient(this);
                }
                return this.mUIPanel2Client;
            }
        }
        
        public WinWindow UIDetailedmessagesWindow
        {
            get
            {
                if ((this.mUIDetailedmessagesWindow == null))
                {
                    this.mUIDetailedmessagesWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIDetailedmessagesWindow.SearchProperties[WinWindow.PropertyNames.Name] = "Detailed messages";
                    this.mUIDetailedmessagesWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIDetailedmessagesWindow;
            }
        }
        
        public WinWindow UISageTabControl1Window
        {
            get
            {
                if ((this.mUISageTabControl1Window == null))
                {
                    this.mUISageTabControl1Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUISageTabControl1Window.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Detailed messages";
                    this.mUISageTabControl1Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.SysTabControl32", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUISageTabControl1Window;
            }
        }
        
        public WinWindow UICloseWindow
        {
            get
            {
                if ((this.mUICloseWindow == null))
                {
                    this.mUICloseWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUICloseWindow.SearchProperties[WinWindow.PropertyNames.Name] = "Close";
                    this.mUICloseWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.BUTTON", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUICloseWindow;
            }
        }
        
        public WinScrollBar UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIVerticalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public WinScrollBar UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIHorizontalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIPanel2Grip
        {
            get
            {
                if ((this.mUIPanel2Grip == null))
                {
                    this.mUIPanel2Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUIPanel2Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIPanel2Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIPanel2MenuBar;
        
        private WinTitleBar mUIPanel2TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIPanel2MenuBar1;
        
        private WinClient mUIPanel2Client;
        
        private WinWindow mUIDetailedmessagesWindow;
        
        private WinWindow mUISageTabControl1Window;
        
        private WinWindow mUICloseWindow;
        
        private WinScrollBar mUIVerticalScrollBar;
        
        private WinScrollBar mUIHorizontalScrollBar;
        
        private WinControl mUIPanel2Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDetailedmessagesWindow : WinWindow
    {
        
        public UIDetailedmessagesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "lblExpand";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UILblExpandMenuBar
        {
            get
            {
                if ((this.mUILblExpandMenuBar == null))
                {
                    this.mUILblExpandMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILblExpandMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUILblExpandMenuBar;
            }
        }
        
        public WinTitleBar UIDetailedmessagesTitleBar
        {
            get
            {
                if ((this.mUIDetailedmessagesTitleBar == null))
                {
                    this.mUIDetailedmessagesTitleBar = new WinTitleBar(this);
                }
                return this.mUIDetailedmessagesTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UILblExpandMenuBar1
        {
            get
            {
                if ((this.mUILblExpandMenuBar1 == null))
                {
                    this.mUILblExpandMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILblExpandMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUILblExpandMenuBar1;
            }
        }
        
        public WinText UIDetailedmessagesText
        {
            get
            {
                if ((this.mUIDetailedmessagesText == null))
                {
                    this.mUIDetailedmessagesText = new WinText(this);
                    #region Search Criteria
                    this.mUIDetailedmessagesText.SearchProperties[WinText.PropertyNames.Name] = "Detailed messages";
                    #endregion
                }
                return this.mUIDetailedmessagesText;
            }
        }
        
        public WinScrollBar UIDetailedmessagesScrollBar
        {
            get
            {
                if ((this.mUIDetailedmessagesScrollBar == null))
                {
                    this.mUIDetailedmessagesScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIDetailedmessagesScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIDetailedmessagesScrollBar;
            }
        }
        
        public WinScrollBar UIDetailedmessagesScrollBar1
        {
            get
            {
                if ((this.mUIDetailedmessagesScrollBar1 == null))
                {
                    this.mUIDetailedmessagesScrollBar1 = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIDetailedmessagesScrollBar1.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIDetailedmessagesScrollBar1;
            }
        }
        
        public WinControl UIDetailedmessagesGrip
        {
            get
            {
                if ((this.mUIDetailedmessagesGrip == null))
                {
                    this.mUIDetailedmessagesGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIDetailedmessagesGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIDetailedmessagesGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUILblExpandMenuBar;
        
        private WinTitleBar mUIDetailedmessagesTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUILblExpandMenuBar1;
        
        private WinText mUIDetailedmessagesText;
        
        private WinScrollBar mUIDetailedmessagesScrollBar;
        
        private WinScrollBar mUIDetailedmessagesScrollBar1;
        
        private WinControl mUIDetailedmessagesGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDetailedmessagesScrollBar : WinScrollBar
    {
        
        public UIDetailedmessagesScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDetailedmessagesScrollBar1 : WinScrollBar
    {
        
        public UIDetailedmessagesScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISageTabControl1Window : WinWindow
    {
        
        public UISageTabControl1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "sageTabControl1";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UISageTabControl1MenuBar
        {
            get
            {
                if ((this.mUISageTabControl1MenuBar == null))
                {
                    this.mUISageTabControl1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISageTabControl1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUISageTabControl1MenuBar;
            }
        }
        
        public WinTitleBar UISageTabControl1TitleBar
        {
            get
            {
                if ((this.mUISageTabControl1TitleBar == null))
                {
                    this.mUISageTabControl1TitleBar = new WinTitleBar(this);
                }
                return this.mUISageTabControl1TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UISageTabControl1MenuBar1
        {
            get
            {
                if ((this.mUISageTabControl1MenuBar1 == null))
                {
                    this.mUISageTabControl1MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISageTabControl1MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUISageTabControl1MenuBar1;
            }
        }
        
        public WinTabList UIDetailedmessagesTabList
        {
            get
            {
                if ((this.mUIDetailedmessagesTabList == null))
                {
                    this.mUIDetailedmessagesTabList = new WinTabList(this);
                    #region Search Criteria
                    this.mUIDetailedmessagesTabList.SearchProperties[WinTabList.PropertyNames.Name] = "Detailed messages";
                    #endregion
                }
                return this.mUIDetailedmessagesTabList;
            }
        }
        
        public WinScrollBar UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIVerticalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public WinScrollBar UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIHorizontalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UISageTabControl1Grip
        {
            get
            {
                if ((this.mUISageTabControl1Grip == null))
                {
                    this.mUISageTabControl1Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUISageTabControl1Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUISageTabControl1Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUISageTabControl1MenuBar;
        
        private WinTitleBar mUISageTabControl1TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUISageTabControl1MenuBar1;
        
        private WinTabList mUIDetailedmessagesTabList;
        
        private WinScrollBar mUIVerticalScrollBar;
        
        private WinScrollBar mUIHorizontalScrollBar;
        
        private WinControl mUISageTabControl1Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDetailedmessagesTabList : WinTabList
    {
        
        public UIDetailedmessagesTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTabList.PropertyNames.Name] = "Detailed messages";
            #endregion
        }
        
        #region Properties
        public WinTabPage UIInformationTabPage
        {
            get
            {
                if ((this.mUIInformationTabPage == null))
                {
                    this.mUIInformationTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUIInformationTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Information";
                    #endregion
                }
                return this.mUIInformationTabPage;
            }
        }
        
        public WinTabPage UIErrorMessagesTabPage
        {
            get
            {
                if ((this.mUIErrorMessagesTabPage == null))
                {
                    this.mUIErrorMessagesTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUIErrorMessagesTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Error Messages";
                    #endregion
                }
                return this.mUIErrorMessagesTabPage;
            }
        }
        
        public WinWindow UIInformationWindow
        {
            get
            {
                if ((this.mUIInformationWindow == null))
                {
                    this.mUIInformationWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIInformationWindow.SearchProperties[WinWindow.PropertyNames.Name] = "Information";
                    this.mUIInformationWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIInformationWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinTabPage mUIInformationTabPage;
        
        private WinTabPage mUIErrorMessagesTabPage;
        
        private WinWindow mUIInformationWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIInformationWindow : WinWindow
    {
        
        public UIInformationWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "tabPage1";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UITabPage1MenuBar
        {
            get
            {
                if ((this.mUITabPage1MenuBar == null))
                {
                    this.mUITabPage1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUITabPage1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUITabPage1MenuBar;
            }
        }
        
        public WinTitleBar UIInformationTitleBar
        {
            get
            {
                if ((this.mUIInformationTitleBar == null))
                {
                    this.mUIInformationTitleBar = new WinTitleBar(this);
                }
                return this.mUIInformationTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UITabPage1MenuBar1
        {
            get
            {
                if ((this.mUITabPage1MenuBar1 == null))
                {
                    this.mUITabPage1MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUITabPage1MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUITabPage1MenuBar1;
            }
        }
        
        public WinClient UIInformationClient
        {
            get
            {
                if ((this.mUIInformationClient == null))
                {
                    this.mUIInformationClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIInformationClient.SearchProperties[WinControl.PropertyNames.Name] = "Information";
                    #endregion
                }
                return this.mUIInformationClient;
            }
        }
        
        public WinScrollBar UIInformationScrollBar
        {
            get
            {
                if ((this.mUIInformationScrollBar == null))
                {
                    this.mUIInformationScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIInformationScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIInformationScrollBar;
            }
        }
        
        public WinScrollBar UIInformationScrollBar1
        {
            get
            {
                if ((this.mUIInformationScrollBar1 == null))
                {
                    this.mUIInformationScrollBar1 = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIInformationScrollBar1.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIInformationScrollBar1;
            }
        }
        
        public WinControl UIInformationGrip
        {
            get
            {
                if ((this.mUIInformationGrip == null))
                {
                    this.mUIInformationGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIInformationGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIInformationGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUITabPage1MenuBar;
        
        private WinTitleBar mUIInformationTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUITabPage1MenuBar1;
        
        private WinClient mUIInformationClient;
        
        private WinScrollBar mUIInformationScrollBar;
        
        private WinScrollBar mUIInformationScrollBar1;
        
        private WinControl mUIInformationGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIInformationClient : WinClient
    {
        
        public UIInformationClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Information";
            #endregion
        }
        
        #region Properties
        public WinWindow UISageGridViewInfoWindow
        {
            get
            {
                if ((this.mUISageGridViewInfoWindow == null))
                {
                    this.mUISageGridViewInfoWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUISageGridViewInfoWindow.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "DataGridView";
                    this.mUISageGridViewInfoWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUISageGridViewInfoWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUISageGridViewInfoWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISageGridViewInfoWindow : WinWindow
    {
        
        public UISageGridViewInfoWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "sageGridViewInfo";
            this.WindowTitles.Add("Detailed Info for Upload");
            #endregion
        }
        
        #region Properties
        public WinMenuBar UISageGridViewInfoMenuBar
        {
            get
            {
                if ((this.mUISageGridViewInfoMenuBar == null))
                {
                    this.mUISageGridViewInfoMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISageGridViewInfoMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUISageGridViewInfoMenuBar;
            }
        }
        
        public WinTitleBar UISageGridViewInfoTitleBar
        {
            get
            {
                if ((this.mUISageGridViewInfoTitleBar == null))
                {
                    this.mUISageGridViewInfoTitleBar = new WinTitleBar(this);
                }
                return this.mUISageGridViewInfoTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UISageGridViewInfoMenuBar1
        {
            get
            {
                if ((this.mUISageGridViewInfoMenuBar1 == null))
                {
                    this.mUISageGridViewInfoMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISageGridViewInfoMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUISageGridViewInfoMenuBar1;
            }
        }
        
        public UIDataGridViewTable1 UIDataGridViewTable
        {
            get
            {
                if ((this.mUIDataGridViewTable == null))
                {
                    this.mUIDataGridViewTable = new UIDataGridViewTable1(this);
                }
                return this.mUIDataGridViewTable;
            }
        }
        
        public UIVerticalScrollBar2 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar2(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar2 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar2(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UISageGridViewInfoGrip
        {
            get
            {
                if ((this.mUISageGridViewInfoGrip == null))
                {
                    this.mUISageGridViewInfoGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUISageGridViewInfoGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUISageGridViewInfoGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUISageGridViewInfoMenuBar;
        
        private WinTitleBar mUISageGridViewInfoTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUISageGridViewInfoMenuBar1;
        
        private UIDataGridViewTable1 mUIDataGridViewTable;
        
        private UIVerticalScrollBar2 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar2 mUIHorizontalScrollBar;
        
        private WinControl mUISageGridViewInfoGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDataGridViewTable1 : WinTable
    {
        
        public UIDataGridViewTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTable.PropertyNames.Name] = "DataGridView";
            this.WindowTitles.Add("Detailed Info for Upload");
            #endregion
        }
        
        #region Properties
        public UITopRowRow UITopRowRow
        {
            get
            {
                if ((this.mUITopRowRow == null))
                {
                    this.mUITopRowRow = new UITopRowRow(this);
                }
                return this.mUITopRowRow;
            }
        }
        
        public WinRow UIRow0Row
        {
            get
            {
                if ((this.mUIRow0Row == null))
                {
                    this.mUIRow0Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow0Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 0";
                    this.mUIRow0Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow0Row;
            }
        }
        
        public UIRow0Row1 UIRow0Row1
        {
            get
            {
                if ((this.mUIRow0Row1 == null))
                {
                    this.mUIRow0Row1 = new UIRow0Row1(this);
                }
                return this.mUIRow0Row1;
            }
        }
        
        public WinRow UIRow1Row
        {
            get
            {
                if ((this.mUIRow1Row == null))
                {
                    this.mUIRow1Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow1Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 1";
                    this.mUIRow1Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow1Row;
            }
        }
        
        public UIRow1Row1 UIRow1Row1
        {
            get
            {
                if ((this.mUIRow1Row1 == null))
                {
                    this.mUIRow1Row1 = new UIRow1Row1(this);
                }
                return this.mUIRow1Row1;
            }
        }
        
        public UIRow0Row2 UIRow0Row2
        {
            get
            {
                if ((this.mUIRow0Row2 == null))
                {
                    this.mUIRow0Row2 = new UIRow0Row2(this);
                }
                return this.mUIRow0Row2;
            }
        }
        
        public UIRow0Row3 UIRow0Row3
        {
            get
            {
                if ((this.mUIRow0Row3 == null))
                {
                    this.mUIRow0Row3 = new UIRow0Row3(this);
                }
                return this.mUIRow0Row3;
            }
        }
        
        public UIRow0Row4 UIRow0Row4
        {
            get
            {
                if ((this.mUIRow0Row4 == null))
                {
                    this.mUIRow0Row4 = new UIRow0Row4(this);
                }
                return this.mUIRow0Row4;
            }
        }
        
        public UIRow1Row2 UIRow1Row2
        {
            get
            {
                if ((this.mUIRow1Row2 == null))
                {
                    this.mUIRow1Row2 = new UIRow1Row2(this);
                }
                return this.mUIRow1Row2;
            }
        }
        
        public UIRow1Row3 UIRow1Row3
        {
            get
            {
                if ((this.mUIRow1Row3 == null))
                {
                    this.mUIRow1Row3 = new UIRow1Row3(this);
                }
                return this.mUIRow1Row3;
            }
        }
        
        public UIRow1Row4 UIRow1Row4
        {
            get
            {
                if ((this.mUIRow1Row4 == null))
                {
                    this.mUIRow1Row4 = new UIRow1Row4(this);
                }
                return this.mUIRow1Row4;
            }
        }
        
        public WinRow UIRow2Row
        {
            get
            {
                if ((this.mUIRow2Row == null))
                {
                    this.mUIRow2Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow2Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 2";
                    this.mUIRow2Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mUIRow2Row.WindowTitles.Add("Detailed Info for Upload");
                    #endregion
                }
                return this.mUIRow2Row;
            }
        }
        
        public WinRow UIRow3Row
        {
            get
            {
                if ((this.mUIRow3Row == null))
                {
                    this.mUIRow3Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow3Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 3";
                    this.mUIRow3Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mUIRow3Row.WindowTitles.Add("Detailed Info for Upload");
                    #endregion
                }
                return this.mUIRow3Row;
            }
        }
        
        public WinRow UIRow4Row
        {
            get
            {
                if ((this.mUIRow4Row == null))
                {
                    this.mUIRow4Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow4Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 4";
                    this.mUIRow4Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mUIRow4Row.WindowTitles.Add("Detailed Info for Upload");
                    #endregion
                }
                return this.mUIRow4Row;
            }
        }
        
        public WinRow UI行0Row
        {
            get
            {
                if ((this.mUI行0Row == null))
                {
                    this.mUI行0Row = new WinRow(this);
                    #region Search Criteria
                    this.mUI行0Row.SearchProperties[WinRow.PropertyNames.Name] = "行 0";
                    this.mUI行0Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mUI行0Row.WindowTitles.Add("Detailed Info for Upload");
                    #endregion
                }
                return this.mUI行0Row;
            }
        }
        
        public WinRow UI行1Row
        {
            get
            {
                if ((this.mUI行1Row == null))
                {
                    this.mUI行1Row = new WinRow(this);
                    #region Search Criteria
                    this.mUI行1Row.SearchProperties[WinRow.PropertyNames.Name] = "行 1";
                    this.mUI行1Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mUI行1Row.WindowTitles.Add("Detailed Info for Upload");
                    #endregion
                }
                return this.mUI行1Row;
            }
        }
        
        public WinRow UI行2Row
        {
            get
            {
                if ((this.mUI行2Row == null))
                {
                    this.mUI行2Row = new WinRow(this);
                    #region Search Criteria
                    this.mUI行2Row.SearchProperties[WinRow.PropertyNames.Name] = "行 2";
                    this.mUI行2Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mUI行2Row.WindowTitles.Add("Detailed Info for Upload");
                    #endregion
                }
                return this.mUI行2Row;
            }
        }
        
        public WinRow UI行3Row
        {
            get
            {
                if ((this.mUI行3Row == null))
                {
                    this.mUI行3Row = new WinRow(this);
                    #region Search Criteria
                    this.mUI行3Row.SearchProperties[WinRow.PropertyNames.Name] = "行 3";
                    this.mUI行3Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mUI行3Row.WindowTitles.Add("Detailed Info for Upload");
                    #endregion
                }
                return this.mUI行3Row;
            }
        }
        #endregion
        
        #region Fields
        private UITopRowRow mUITopRowRow;
        
        private WinRow mUIRow0Row;
        
        private UIRow0Row1 mUIRow0Row1;
        
        private WinRow mUIRow1Row;
        
        private UIRow1Row1 mUIRow1Row1;
        
        private UIRow0Row2 mUIRow0Row2;
        
        private UIRow0Row3 mUIRow0Row3;
        
        private UIRow0Row4 mUIRow0Row4;
        
        private UIRow1Row2 mUIRow1Row2;
        
        private UIRow1Row3 mUIRow1Row3;
        
        private UIRow1Row4 mUIRow1Row4;
        
        private WinRow mUIRow2Row;
        
        private WinRow mUIRow3Row;
        
        private WinRow mUIRow4Row;
        
        private WinRow mUI行0Row;
        
        private WinRow mUI行1Row;
        
        private WinRow mUI行2Row;
        
        private WinRow mUI行3Row;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITopRowRow : WinRow
    {
        
        public UITopRowRow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Name] = "Top Row";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinColumnHeader UIUploadObjectColumnHeader
        {
            get
            {
                if ((this.mUIUploadObjectColumnHeader == null))
                {
                    this.mUIUploadObjectColumnHeader = new WinColumnHeader(this);
                    #region Search Criteria
                    this.mUIUploadObjectColumnHeader.SearchProperties[WinControl.PropertyNames.Name] = "Upload Object";
                    #endregion
                }
                return this.mUIUploadObjectColumnHeader;
            }
        }
        
        public WinColumnHeader UINewColumnHeader
        {
            get
            {
                if ((this.mUINewColumnHeader == null))
                {
                    this.mUINewColumnHeader = new WinColumnHeader(this);
                    #region Search Criteria
                    this.mUINewColumnHeader.SearchProperties[WinControl.PropertyNames.Name] = "New";
                    #endregion
                }
                return this.mUINewColumnHeader;
            }
        }
        
        public WinColumnHeader UIUpdateColumnHeader
        {
            get
            {
                if ((this.mUIUpdateColumnHeader == null))
                {
                    this.mUIUpdateColumnHeader = new WinColumnHeader(this);
                    #region Search Criteria
                    this.mUIUpdateColumnHeader.SearchProperties[WinControl.PropertyNames.Name] = "Update";
                    #endregion
                }
                return this.mUIUpdateColumnHeader;
            }
        }
        
        public WinColumnHeader UIDeleteColumnHeader
        {
            get
            {
                if ((this.mUIDeleteColumnHeader == null))
                {
                    this.mUIDeleteColumnHeader = new WinColumnHeader(this);
                    #region Search Criteria
                    this.mUIDeleteColumnHeader.SearchProperties[WinControl.PropertyNames.Name] = "Delete";
                    #endregion
                }
                return this.mUIDeleteColumnHeader;
            }
        }
        #endregion
        
        #region Fields
        private WinColumnHeader mUIUploadObjectColumnHeader;
        
        private WinColumnHeader mUINewColumnHeader;
        
        private WinColumnHeader mUIUpdateColumnHeader;
        
        private WinColumnHeader mUIDeleteColumnHeader;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRow0Row1 : WinRow
    {
        
        public UIRow0Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "Campaigns(1);1 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UICampaigns1Cell
        {
            get
            {
                if ((this.mUICampaigns1Cell == null))
                {
                    this.mUICampaigns1Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUICampaigns1Cell.SearchProperties[WinCell.PropertyNames.Value] = "Campaigns(1)";
                    #endregion
                }
                return this.mUICampaigns1Cell;
            }
        }
        
        public WinCell UIItem1Succeeded0FaileCell
        {
            get
            {
                if ((this.mUIItem1Succeeded0FaileCell == null))
                {
                    this.mUIItem1Succeeded0FaileCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem1Succeeded0FaileCell.SearchProperties[WinCell.PropertyNames.Value] = "1 Succeeded, 0 Failed";
                    #endregion
                }
                return this.mUIItem1Succeeded0FaileCell;
            }
        }
        
        public WinCell UIItem0Succeeded0FaileCell
        {
            get
            {
                if ((this.mUIItem0Succeeded0FaileCell == null))
                {
                    this.mUIItem0Succeeded0FaileCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Succeeded0FaileCell.SearchProperties[WinCell.PropertyNames.Value] = "0 Succeeded, 0 Failed";
                    #endregion
                }
                return this.mUIItem0Succeeded0FaileCell;
            }
        }
        
        public WinCell UIItem0Succeeded0FaileCell1
        {
            get
            {
                if ((this.mUIItem0Succeeded0FaileCell1 == null))
                {
                    this.mUIItem0Succeeded0FaileCell1 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Succeeded0FaileCell1.SearchProperties[WinCell.PropertyNames.Value] = "0 Succeeded, 0 Failed";
                    this.mUIItem0Succeeded0FaileCell1.SearchProperties[WinCell.PropertyNames.Instance] = "2";
                    #endregion
                }
                return this.mUIItem0Succeeded0FaileCell1;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUICampaigns1Cell;
        
        private WinCell mUIItem1Succeeded0FaileCell;
        
        private WinCell mUIItem0Succeeded0FaileCell;
        
        private WinCell mUIItem0Succeeded0FaileCell1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRow1Row1 : WinRow
    {
        
        public UIRow1Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "Ads(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIAdgroups0Cell
        {
            get
            {
                if ((this.mUIAdgroups0Cell == null))
                {
                    this.mUIAdgroups0Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAdgroups0Cell.SearchProperties[WinCell.PropertyNames.Value] = "Ads(0)";
                    #endregion
                }
                return this.mUIAdgroups0Cell;
            }
        }
        
        public WinCell UIItem0Succeeded0FaileCell
        {
            get
            {
                if ((this.mUIItem0Succeeded0FaileCell == null))
                {
                    this.mUIItem0Succeeded0FaileCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Succeeded0FaileCell.SearchProperties[WinCell.PropertyNames.Value] = "0 Succeeded, 0 Failed";
                    #endregion
                }
                return this.mUIItem0Succeeded0FaileCell;
            }
        }
        
        public WinCell UIItem0Succeeded0FaileCell1
        {
            get
            {
                if ((this.mUIItem0Succeeded0FaileCell1 == null))
                {
                    this.mUIItem0Succeeded0FaileCell1 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Succeeded0FaileCell1.SearchProperties[WinCell.PropertyNames.Value] = "0 Succeeded, 0 Failed";
                    this.mUIItem0Succeeded0FaileCell1.SearchProperties[WinCell.PropertyNames.Instance] = "2";
                    #endregion
                }
                return this.mUIItem0Succeeded0FaileCell1;
            }
        }
        
        public WinCell UIItem0Succeeded0FaileCell2
        {
            get
            {
                if ((this.mUIItem0Succeeded0FaileCell2 == null))
                {
                    this.mUIItem0Succeeded0FaileCell2 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Succeeded0FaileCell2.SearchProperties[WinCell.PropertyNames.Value] = "0 Succeeded, 0 Failed";
                    this.mUIItem0Succeeded0FaileCell2.SearchProperties[WinCell.PropertyNames.Instance] = "3";
                    #endregion
                }
                return this.mUIItem0Succeeded0FaileCell2;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIAdgroups0Cell;
        
        private WinCell mUIItem0Succeeded0FaileCell;
        
        private WinCell mUIItem0Succeeded0FaileCell1;
        
        private WinCell mUIItem0Succeeded0FaileCell2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRow0Row2 : WinRow
    {
        
        public UIRow0Row2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "Campaigns(1);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;1 Succeeded, 0 Failed";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Detailed Info for Upload");
            #endregion
        }
        
        #region Properties
        public WinCell UICampaigns1Cell
        {
            get
            {
                if ((this.mUICampaigns1Cell == null))
                {
                    this.mUICampaigns1Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUICampaigns1Cell.SearchProperties[WinCell.PropertyNames.Value] = "Campaigns(1)";
                    this.mUICampaigns1Cell.WindowTitles.Add("Detailed Info for Upload");
                    #endregion
                }
                return this.mUICampaigns1Cell;
            }
        }
        
        public WinCell UIItem0Succeeded0FaileCell
        {
            get
            {
                if ((this.mUIItem0Succeeded0FaileCell == null))
                {
                    this.mUIItem0Succeeded0FaileCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Succeeded0FaileCell.SearchProperties[WinCell.PropertyNames.Value] = "0 Succeeded, 0 Failed";
                    this.mUIItem0Succeeded0FaileCell.WindowTitles.Add("Detailed Info for Upload");
                    #endregion
                }
                return this.mUIItem0Succeeded0FaileCell;
            }
        }
        
        public WinCell UIItem0Succeeded0FaileCell1
        {
            get
            {
                if ((this.mUIItem0Succeeded0FaileCell1 == null))
                {
                    this.mUIItem0Succeeded0FaileCell1 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Succeeded0FaileCell1.SearchProperties[WinCell.PropertyNames.Value] = "0 Succeeded, 0 Failed";
                    this.mUIItem0Succeeded0FaileCell1.SearchProperties[WinCell.PropertyNames.Instance] = "2";
                    this.mUIItem0Succeeded0FaileCell1.WindowTitles.Add("Detailed Info for Upload");
                    #endregion
                }
                return this.mUIItem0Succeeded0FaileCell1;
            }
        }
        
        public WinCell UIItem1Succeeded0FaileCell
        {
            get
            {
                if ((this.mUIItem1Succeeded0FaileCell == null))
                {
                    this.mUIItem1Succeeded0FaileCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem1Succeeded0FaileCell.SearchProperties[WinCell.PropertyNames.Value] = "1 Succeeded, 0 Failed";
                    this.mUIItem1Succeeded0FaileCell.WindowTitles.Add("Detailed Info for Upload");
                    #endregion
                }
                return this.mUIItem1Succeeded0FaileCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUICampaigns1Cell;
        
        private WinCell mUIItem0Succeeded0FaileCell;
        
        private WinCell mUIItem0Succeeded0FaileCell1;
        
        private WinCell mUIItem1Succeeded0FaileCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRow0Row3 : WinRow
    {
        
        public UIRow0Row3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "Campaigns(1);0 Succeeded, 0 Failed;1 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Detailed Info for Upload");
            #endregion
        }
        
        #region Properties
        public WinCell UICampaigns1Cell
        {
            get
            {
                if ((this.mUICampaigns1Cell == null))
                {
                    this.mUICampaigns1Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUICampaigns1Cell.SearchProperties[WinCell.PropertyNames.Value] = "Campaigns(1)";
                    this.mUICampaigns1Cell.WindowTitles.Add("Detailed Info for Upload");
                    #endregion
                }
                return this.mUICampaigns1Cell;
            }
        }
        
        public WinCell UIItem0Succeeded0FaileCell
        {
            get
            {
                if ((this.mUIItem0Succeeded0FaileCell == null))
                {
                    this.mUIItem0Succeeded0FaileCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Succeeded0FaileCell.SearchProperties[WinCell.PropertyNames.Value] = "0 Succeeded, 0 Failed";
                    this.mUIItem0Succeeded0FaileCell.WindowTitles.Add("Detailed Info for Upload");
                    #endregion
                }
                return this.mUIItem0Succeeded0FaileCell;
            }
        }
        
        public WinCell UIItem1Succeeded1FaileCell
        {
            get
            {
                if ((this.mUIItem1Succeeded1FaileCell == null))
                {
                    this.mUIItem1Succeeded1FaileCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem1Succeeded1FaileCell.SearchProperties[WinCell.PropertyNames.Value] = "1 Succeeded, 0 Failed";
                    this.mUIItem1Succeeded1FaileCell.WindowTitles.Add("Detailed Info for Upload");
                    #endregion
                }
                return this.mUIItem1Succeeded1FaileCell;
            }
        }
        
        public WinCell UIItem0Succeeded0FaileCell1
        {
            get
            {
                if ((this.mUIItem0Succeeded0FaileCell1 == null))
                {
                    this.mUIItem0Succeeded0FaileCell1 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Succeeded0FaileCell1.SearchProperties[WinCell.PropertyNames.Value] = "0 Succeeded, 0 Failed";
                    this.mUIItem0Succeeded0FaileCell1.SearchProperties[WinCell.PropertyNames.Instance] = "2";
                    this.mUIItem0Succeeded0FaileCell1.WindowTitles.Add("Detailed Info for Upload");
                    #endregion
                }
                return this.mUIItem0Succeeded0FaileCell1;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUICampaigns1Cell;
        
        private WinCell mUIItem0Succeeded0FaileCell;
        
        private WinCell mUIItem1Succeeded1FaileCell;
        
        private WinCell mUIItem0Succeeded0FaileCell1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRow0Row4 : WinRow
    {
        
        public UIRow0Row4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "Campaigns(0);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Detailed Info for Upload");
            #endregion
        }
        
        #region Properties
        public WinCell UICampaigns0Cell
        {
            get
            {
                if ((this.mUICampaigns0Cell == null))
                {
                    this.mUICampaigns0Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUICampaigns0Cell.SearchProperties[WinCell.PropertyNames.Value] = "Campaigns(0)";
                    this.mUICampaigns0Cell.WindowTitles.Add("Detailed Info for Upload");
                    #endregion
                }
                return this.mUICampaigns0Cell;
            }
        }
        
        public WinCell UIItem0Succeeded0FaileCell
        {
            get
            {
                if ((this.mUIItem0Succeeded0FaileCell == null))
                {
                    this.mUIItem0Succeeded0FaileCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Succeeded0FaileCell.SearchProperties[WinCell.PropertyNames.Value] = "0 Succeeded, 0 Failed";
                    this.mUIItem0Succeeded0FaileCell.WindowTitles.Add("Detailed Info for Upload");
                    #endregion
                }
                return this.mUIItem0Succeeded0FaileCell;
            }
        }
        
        public WinCell UIItem0Succeeded0FaileCell1
        {
            get
            {
                if ((this.mUIItem0Succeeded0FaileCell1 == null))
                {
                    this.mUIItem0Succeeded0FaileCell1 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Succeeded0FaileCell1.SearchProperties[WinCell.PropertyNames.Value] = "0 Succeeded, 0 Failed";
                    this.mUIItem0Succeeded0FaileCell1.SearchProperties[WinCell.PropertyNames.Instance] = "2";
                    this.mUIItem0Succeeded0FaileCell1.WindowTitles.Add("Detailed Info for Upload");
                    #endregion
                }
                return this.mUIItem0Succeeded0FaileCell1;
            }
        }
        
        public WinCell UIItem0Succeeded0FaileCell2
        {
            get
            {
                if ((this.mUIItem0Succeeded0FaileCell2 == null))
                {
                    this.mUIItem0Succeeded0FaileCell2 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Succeeded0FaileCell2.SearchProperties[WinCell.PropertyNames.Value] = "0 Succeeded, 0 Failed";
                    this.mUIItem0Succeeded0FaileCell2.SearchProperties[WinCell.PropertyNames.Instance] = "3";
                    this.mUIItem0Succeeded0FaileCell2.WindowTitles.Add("Detailed Info for Upload");
                    #endregion
                }
                return this.mUIItem0Succeeded0FaileCell2;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUICampaigns0Cell;
        
        private WinCell mUIItem0Succeeded0FaileCell;
        
        private WinCell mUIItem0Succeeded0FaileCell1;
        
        private WinCell mUIItem0Succeeded0FaileCell2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRow1Row2 : WinRow
    {
        
        public UIRow1Row2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "Ads(1);1 Succeeded, 0 Failed;0 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Detailed Info for Upload");
            #endregion
        }
        
        #region Properties
        public WinCell UIAdgroups1Cell
        {
            get
            {
                if ((this.mUIAdgroups1Cell == null))
                {
                    this.mUIAdgroups1Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAdgroups1Cell.SearchProperties[WinCell.PropertyNames.Value] = "Ads(1)";
                    this.mUIAdgroups1Cell.WindowTitles.Add("Detailed Info for Upload");
                    #endregion
                }
                return this.mUIAdgroups1Cell;
            }
        }
        
        public WinCell UIItem1Succeeded0FaileCell
        {
            get
            {
                if ((this.mUIItem1Succeeded0FaileCell == null))
                {
                    this.mUIItem1Succeeded0FaileCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem1Succeeded0FaileCell.SearchProperties[WinCell.PropertyNames.Value] = "1 Succeeded, 0 Failed";
                    this.mUIItem1Succeeded0FaileCell.WindowTitles.Add("Detailed Info for Upload");
                    #endregion
                }
                return this.mUIItem1Succeeded0FaileCell;
            }
        }
        
        public WinCell UIItem0Succeeded0FaileCell
        {
            get
            {
                if ((this.mUIItem0Succeeded0FaileCell == null))
                {
                    this.mUIItem0Succeeded0FaileCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Succeeded0FaileCell.SearchProperties[WinCell.PropertyNames.Value] = "0 Succeeded, 0 Failed";
                    this.mUIItem0Succeeded0FaileCell.WindowTitles.Add("Detailed Info for Upload");
                    #endregion
                }
                return this.mUIItem0Succeeded0FaileCell;
            }
        }
        
        public WinCell UIItem0Succeeded0FaileCell1
        {
            get
            {
                if ((this.mUIItem0Succeeded0FaileCell1 == null))
                {
                    this.mUIItem0Succeeded0FaileCell1 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Succeeded0FaileCell1.SearchProperties[WinCell.PropertyNames.Value] = "0 Succeeded, 0 Failed";
                    this.mUIItem0Succeeded0FaileCell1.SearchProperties[WinCell.PropertyNames.Instance] = "2";
                    this.mUIItem0Succeeded0FaileCell1.WindowTitles.Add("Detailed Info for Upload");
                    #endregion
                }
                return this.mUIItem0Succeeded0FaileCell1;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIAdgroups1Cell;
        
        private WinCell mUIItem1Succeeded0FaileCell;
        
        private WinCell mUIItem0Succeeded0FaileCell;
        
        private WinCell mUIItem0Succeeded0FaileCell1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRow1Row3 : WinRow
    {
        
        public UIRow1Row3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "Ads(1);0 Succeeded, 0 Failed;0 Succeeded, 0 Failed;1 Succeeded, 0 Failed";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Detailed Info for Upload");
            #endregion
        }
        
        #region Properties
        public WinCell UIAdgroups1Cell
        {
            get
            {
                if ((this.mUIAdgroups1Cell == null))
                {
                    this.mUIAdgroups1Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAdgroups1Cell.SearchProperties[WinCell.PropertyNames.Value] = "Ads(1)";
                    this.mUIAdgroups1Cell.WindowTitles.Add("Detailed Info for Upload");
                    #endregion
                }
                return this.mUIAdgroups1Cell;
            }
        }
        
        public WinCell UIItem0Succeeded0FaileCell
        {
            get
            {
                if ((this.mUIItem0Succeeded0FaileCell == null))
                {
                    this.mUIItem0Succeeded0FaileCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Succeeded0FaileCell.SearchProperties[WinCell.PropertyNames.Value] = "0 Succeeded, 0 Failed";
                    this.mUIItem0Succeeded0FaileCell.WindowTitles.Add("Detailed Info for Upload");
                    #endregion
                }
                return this.mUIItem0Succeeded0FaileCell;
            }
        }
        
        public WinCell UIItem0Succeeded0FaileCell1
        {
            get
            {
                if ((this.mUIItem0Succeeded0FaileCell1 == null))
                {
                    this.mUIItem0Succeeded0FaileCell1 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Succeeded0FaileCell1.SearchProperties[WinCell.PropertyNames.Value] = "0 Succeeded, 0 Failed";
                    this.mUIItem0Succeeded0FaileCell1.SearchProperties[WinCell.PropertyNames.Instance] = "2";
                    this.mUIItem0Succeeded0FaileCell1.WindowTitles.Add("Detailed Info for Upload");
                    #endregion
                }
                return this.mUIItem0Succeeded0FaileCell1;
            }
        }
        
        public WinCell UIItem1Succeeded0FaileCell
        {
            get
            {
                if ((this.mUIItem1Succeeded0FaileCell == null))
                {
                    this.mUIItem1Succeeded0FaileCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem1Succeeded0FaileCell.SearchProperties[WinCell.PropertyNames.Value] = "1 Succeeded, 0 Failed";
                    this.mUIItem1Succeeded0FaileCell.WindowTitles.Add("Detailed Info for Upload");
                    #endregion
                }
                return this.mUIItem1Succeeded0FaileCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIAdgroups1Cell;
        
        private WinCell mUIItem0Succeeded0FaileCell;
        
        private WinCell mUIItem0Succeeded0FaileCell1;
        
        private WinCell mUIItem1Succeeded0FaileCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRow1Row4 : WinRow
    {
        
        public UIRow1Row4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "Ads(1);0 Succeeded, 0 Failed;1 Succeeded, 0 Failed;0 Succeeded, 0 Failed";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Detailed Info for Upload");
            #endregion
        }
        
        #region Properties
        public WinCell UIAdgroups1Cell
        {
            get
            {
                if ((this.mUIAdgroups1Cell == null))
                {
                    this.mUIAdgroups1Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAdgroups1Cell.SearchProperties[WinCell.PropertyNames.Value] = "Ads(1)";
                    this.mUIAdgroups1Cell.WindowTitles.Add("Detailed Info for Upload");
                    #endregion
                }
                return this.mUIAdgroups1Cell;
            }
        }
        
        public WinCell UIItem0Succeeded0FaileCell
        {
            get
            {
                if ((this.mUIItem0Succeeded0FaileCell == null))
                {
                    this.mUIItem0Succeeded0FaileCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Succeeded0FaileCell.SearchProperties[WinCell.PropertyNames.Value] = "0 Succeeded, 0 Failed";
                    this.mUIItem0Succeeded0FaileCell.WindowTitles.Add("Detailed Info for Upload");
                    #endregion
                }
                return this.mUIItem0Succeeded0FaileCell;
            }
        }
        
        public WinCell UIItem1Succeeded0FaileCell
        {
            get
            {
                if ((this.mUIItem1Succeeded0FaileCell == null))
                {
                    this.mUIItem1Succeeded0FaileCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem1Succeeded0FaileCell.SearchProperties[WinCell.PropertyNames.Value] = "1 Succeeded, 0 Failed";
                    this.mUIItem1Succeeded0FaileCell.WindowTitles.Add("Detailed Info for Upload");
                    #endregion
                }
                return this.mUIItem1Succeeded0FaileCell;
            }
        }
        
        public WinCell UIItem0Succeeded0FaileCell1
        {
            get
            {
                if ((this.mUIItem0Succeeded0FaileCell1 == null))
                {
                    this.mUIItem0Succeeded0FaileCell1 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Succeeded0FaileCell1.SearchProperties[WinCell.PropertyNames.Value] = "0 Succeeded, 0 Failed";
                    this.mUIItem0Succeeded0FaileCell1.SearchProperties[WinCell.PropertyNames.Instance] = "2";
                    this.mUIItem0Succeeded0FaileCell1.WindowTitles.Add("Detailed Info for Upload");
                    #endregion
                }
                return this.mUIItem0Succeeded0FaileCell1;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIAdgroups1Cell;
        
        private WinCell mUIItem0Succeeded0FaileCell;
        
        private WinCell mUIItem1Succeeded0FaileCell;
        
        private WinCell mUIItem0Succeeded0FaileCell1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar2 : WinScrollBar
    {
        
        public UIVerticalScrollBar2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar2 : WinScrollBar
    {
        
        public UIHorizontalScrollBar2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIInformationScrollBar : WinScrollBar
    {
        
        public UIInformationScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIInformationScrollBar1 : WinScrollBar
    {
        
        public UIInformationScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar21 : WinScrollBar
    {
        
        public UIVerticalScrollBar21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar21 : WinScrollBar
    {
        
        public UIHorizontalScrollBar21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICloseWindow : WinWindow
    {
        
        public UICloseWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "sageButton1";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UISageButton1MenuBar
        {
            get
            {
                if ((this.mUISageButton1MenuBar == null))
                {
                    this.mUISageButton1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISageButton1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUISageButton1MenuBar;
            }
        }
        
        public WinTitleBar UICloseTitleBar
        {
            get
            {
                if ((this.mUICloseTitleBar == null))
                {
                    this.mUICloseTitleBar = new WinTitleBar(this);
                }
                return this.mUICloseTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UISageButton1MenuBar1
        {
            get
            {
                if ((this.mUISageButton1MenuBar1 == null))
                {
                    this.mUISageButton1MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISageButton1MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUISageButton1MenuBar1;
            }
        }
        
        public WinButton UICloseButton1
        {
            get
            {
                if ((this.mUICloseButton1 == null))
                {
                    this.mUICloseButton1 = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton1.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton1;
            }
        }
        
        public WinScrollBar UICloseScrollBar
        {
            get
            {
                if ((this.mUICloseScrollBar == null))
                {
                    this.mUICloseScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUICloseScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUICloseScrollBar;
            }
        }
        
        public WinScrollBar UICloseScrollBar1
        {
            get
            {
                if ((this.mUICloseScrollBar1 == null))
                {
                    this.mUICloseScrollBar1 = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUICloseScrollBar1.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUICloseScrollBar1;
            }
        }
        
        public WinControl UICloseGrip
        {
            get
            {
                if ((this.mUICloseGrip == null))
                {
                    this.mUICloseGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUICloseGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUICloseGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUISageButton1MenuBar;
        
        private WinTitleBar mUICloseTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUISageButton1MenuBar1;
        
        private WinButton mUICloseButton1;
        
        private WinScrollBar mUICloseScrollBar;
        
        private WinScrollBar mUICloseScrollBar1;
        
        private WinControl mUICloseGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICloseScrollBar : WinScrollBar
    {
        
        public UICloseScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICloseScrollBar1 : WinScrollBar
    {
        
        public UICloseScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar3 : WinScrollBar
    {
        
        public UIVerticalScrollBar3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar3 : WinScrollBar
    {
        
        public UIHorizontalScrollBar3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar4 : WinScrollBar
    {
        
        public UIVerticalScrollBar4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar4 : WinScrollBar
    {
        
        public UIHorizontalScrollBar4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDetailedInfoforUploaScrollBar : WinScrollBar
    {
        
        public UIDetailedInfoforUploaScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDetailedInfoforUploaScrollBar1 : WinScrollBar
    {
        
        public UIDetailedInfoforUploaScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
}
