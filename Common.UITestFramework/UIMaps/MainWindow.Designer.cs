// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Common.UITestFramework.UIMaps.MainWindowClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public partial class MainWindow
    {
        
        /// <summary>
        /// ClickAdCenterAccount
        /// </summary>
        public void ClickAdCenterAccount()
        {
            #region Variable Declarations
            WinTreeItem uIMicrosoftadlabsUSDTreeItem = this.UIMicrosoftadlabsUSDadWindow.UIItemWindow.UIItemTree.UIYourAccounts1TreeItem.UIMicrosoftadlabsUSDTreeItem;
            #endregion

            // Click 'Your Accounts(1)' -> 'Microsoft adlabs(USD)' tree item
            Mouse.Click(uIMicrosoftadlabsUSDTreeItem, new Point(66, 7));
        }
        
        /// <summary>
        /// ClickGoogleAccount
        /// </summary>
        public void ClickGoogleAccount()
        {
            #region Variable Declarations
            WinTreeItem uIWss_adsagetest163comTreeItem = this.UIAdSageforPerformanceWindow.UIAccountTreeViewWindow.UIYourAccounts1TreeItem.UIWss_adsagetest163comTreeItem;
            #endregion

            // Click 'Your Accounts(1)' -> 'wss_adsagetest@163.com(CNY)' tree item
            Mouse.Click(uIWss_adsagetest163comTreeItem, new Point(32, 12));
        }
        
        /// <summary>
        /// ClickOptionsButton
        /// </summary>
        public void ClickOptionsButton()
        {
            #region Variable Declarations
            WinButton uIOptionsButton = this.UIAdSageforPerformanceWindow.UIRibbonToolBar4.UIOptionsButton;
            #endregion

            // Click 'Options' button
            Mouse.Click(uIOptionsButton, new Point(22, 35));
        }
        
        /// <summary>
        /// ExpandAccountsView - Use 'ExpandAccountsViewParams' to pass parameters into this method.
        /// </summary>
        public void ExpandAccountsView()
        {
            #region Variable Declarations
            WinTreeItem uIYourAccounts1TreeItem = this.UIAdSageforPerformanceWindow.UIAccountTreeViewWindow.UIYourAccounts1TreeItem;
            #endregion

            // Expand 'Your Accounts(1)' tree item
            uIYourAccounts1TreeItem.Expanded = this.ExpandAccountsViewParams.UIYourAccounts1TreeItemExpanded;
        }
        
        /// <summary>
        /// VerifyAdcenterAccountTree - Use 'VerifyAdcenterAccountTreeExpectedValues' to pass parameters into this method.
        /// </summary>
        public void VerifyAdcenterAccountTree()
        {
            #region Variable Declarations
            WinTreeItem uIMicrosoftadlabsUSDTreeItem = this.UIAdSageforPerformanceWindow.UIAccountTreeViewWindow.UIYourAccounts1TreeItem.UIMicrosoftadlabsUSDTreeItem;
            #endregion

            // Verify that 'Your Accounts(1)' -> 'Microsoft adlabs(USD)' tree item's property 'Name' equals 'Microsoft adlabs(USD)'
            Assert.AreEqual(this.VerifyAdcenterAccountTreeExpectedValues.UIMicrosoftadlabsUSDTreeItemName, uIMicrosoftadlabsUSDTreeItem.Name);
        }
        
        /// <summary>
        /// VerifyGoogleAccountTree - Use 'VerifyGoogleAccountTreeExpectedValues' to pass parameters into this method.
        /// </summary>
        public void VerifyGoogleAccountTree()
        {
            #region Variable Declarations
            WinTreeItem uIWss_adsagetest163comTreeItem = this.UIAdSageforPerformanceWindow.UIAccountTreeViewWindow.UIYourAccounts1TreeItem.UIWss_adsagetest163comTreeItem;
            #endregion

            // Verify that 'Your Accounts(1)' -> 'wss_adsagetest@163.com(CNY)' tree item's property 'Name' equals 'wss_adsagetest@163.com(CNY)'
            Assert.AreEqual(this.VerifyGoogleAccountTreeExpectedValues.UIWss_adsagetest163comTreeItemName, uIWss_adsagetest163comTreeItem.Name);
        }
        
        /// <summary>
        /// VerifyNoAccount - Use 'VerifyNoAccountExpectedValues' to pass parameters into this method.
        /// </summary>
        public void VerifyNoAccount()
        {
            #region Variable Declarations
            WinTreeItem uINoAccountTreeItem = this.UIAdSageforPerformanceWindow.UIAccountTreeViewWindow.UINoAccountTreeItem;
            #endregion

            // Verify that 'No Account' tree item's property 'Name' equals 'No Account'
            Assert.AreEqual(this.VerifyNoAccountExpectedValues.UINoAccountTreeItemName, uINoAccountTreeItem.Name);
        }
        
        /// <summary>
        /// ExpandAdCenterAccountTreeView - Use 'ExpandAdCenterAccountTreeViewParams' to pass parameters into this method.
        /// </summary>
        public void ExpandAdCenterAccountTreeView()
        {
            #region Variable Declarations
            WinTreeItem uIMicrosoftadlabsUSDTreeItem = this.UIMicrosoftadlabsUSDadWindow.UIItemWindow.UIItemTree.UIYourAccounts1TreeItem.UIMicrosoftadlabsUSDTreeItem;
            #endregion

            // Expand 'Your Accounts(1)' -> 'Microsoft adlabs(USD)' tree item
            uIMicrosoftadlabsUSDTreeItem.Expanded = this.ExpandAdCenterAccountTreeViewParams.UIMicrosoftadlabsUSDTreeItemExpanded;

            // Type '{Down}' in 'Your Accounts(1)' -> 'Microsoft adlabs(USD)' tree item
            Keyboard.SendKeys(uIMicrosoftadlabsUSDTreeItem, this.ExpandAdCenterAccountTreeViewParams.UIMicrosoftadlabsUSDTreeItemSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// ExpandGoogleAccountTreeView - Use 'ExpandGoogleAccountTreeViewParams' to pass parameters into this method.
        /// </summary>
        public void ExpandGoogleAccountTreeView()
        {
            #region Variable Declarations
            WinTreeItem uIWss_adsagetest163comTreeItem = this.UIWss_adsagetest163comWindow1.UIItemWindow.UIItemTree.UIYourAccounts1TreeItem.UIWss_adsagetest163comTreeItem;
            #endregion

            // Expand 'Your Accounts(1)' -> 'wss_adsagetest@163.com(CNY)' tree item
            uIWss_adsagetest163comTreeItem.Expanded = this.ExpandGoogleAccountTreeViewParams.UIWss_adsagetest163comTreeItemExpanded;

            // Type '{Down}' in 'Your Accounts(1)' -> 'wss_adsagetest@163.com(CNY)' tree item
            Keyboard.SendKeys(uIWss_adsagetest163comTreeItem, this.ExpandGoogleAccountTreeViewParams.UIWss_adsagetest163comTreeItemSendKeys, ModifierKeys.None);
        }
        
        #region Properties
        public virtual ExpandAccountsViewParams ExpandAccountsViewParams
        {
            get
            {
                if ((this.mExpandAccountsViewParams == null))
                {
                    this.mExpandAccountsViewParams = new ExpandAccountsViewParams();
                }
                return this.mExpandAccountsViewParams;
            }
        }
        
        public virtual VerifyAdcenterAccountTreeExpectedValues VerifyAdcenterAccountTreeExpectedValues
        {
            get
            {
                if ((this.mVerifyAdcenterAccountTreeExpectedValues == null))
                {
                    this.mVerifyAdcenterAccountTreeExpectedValues = new VerifyAdcenterAccountTreeExpectedValues();
                }
                return this.mVerifyAdcenterAccountTreeExpectedValues;
            }
        }
        
        public virtual VerifyGoogleAccountTreeExpectedValues VerifyGoogleAccountTreeExpectedValues
        {
            get
            {
                if ((this.mVerifyGoogleAccountTreeExpectedValues == null))
                {
                    this.mVerifyGoogleAccountTreeExpectedValues = new VerifyGoogleAccountTreeExpectedValues();
                }
                return this.mVerifyGoogleAccountTreeExpectedValues;
            }
        }
        
        public virtual VerifyNoAccountExpectedValues VerifyNoAccountExpectedValues
        {
            get
            {
                if ((this.mVerifyNoAccountExpectedValues == null))
                {
                    this.mVerifyNoAccountExpectedValues = new VerifyNoAccountExpectedValues();
                }
                return this.mVerifyNoAccountExpectedValues;
            }
        }
        
        public virtual ExpandAdCenterAccountTreeViewParams ExpandAdCenterAccountTreeViewParams
        {
            get
            {
                if ((this.mExpandAdCenterAccountTreeViewParams == null))
                {
                    this.mExpandAdCenterAccountTreeViewParams = new ExpandAdCenterAccountTreeViewParams();
                }
                return this.mExpandAdCenterAccountTreeViewParams;
            }
        }
        
        public virtual ExpandGoogleAccountTreeViewParams ExpandGoogleAccountTreeViewParams
        {
            get
            {
                if ((this.mExpandGoogleAccountTreeViewParams == null))
                {
                    this.mExpandGoogleAccountTreeViewParams = new ExpandGoogleAccountTreeViewParams();
                }
                return this.mExpandGoogleAccountTreeViewParams;
            }
        }
        
        public UIAdSageforPerformanceWindow UIAdSageforPerformanceWindow
        {
            get
            {
                if ((this.mUIAdSageforPerformanceWindow == null))
                {
                    this.mUIAdSageforPerformanceWindow = new UIAdSageforPerformanceWindow();
                }
                return this.mUIAdSageforPerformanceWindow;
            }
        }
        
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIWss_adsagetest163comWindow UIWss_adsagetest163comWindow
        {
            get
            {
                if ((this.mUIWss_adsagetest163comWindow == null))
                {
                    this.mUIWss_adsagetest163comWindow = new UIWss_adsagetest163comWindow();
                }
                return this.mUIWss_adsagetest163comWindow;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11();
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIMicrosoftadlabsUSDadWindow UIMicrosoftadlabsUSDadWindow
        {
            get
            {
                if ((this.mUIMicrosoftadlabsUSDadWindow == null))
                {
                    this.mUIMicrosoftadlabsUSDadWindow = new UIMicrosoftadlabsUSDadWindow();
                }
                return this.mUIMicrosoftadlabsUSDadWindow;
            }
        }
        
        public UIAccount2348004880USDWindow UIAccount2348004880USDWindow
        {
            get
            {
                if ((this.mUIAccount2348004880USDWindow == null))
                {
                    this.mUIAccount2348004880USDWindow = new UIAccount2348004880USDWindow();
                }
                return this.mUIAccount2348004880USDWindow;
            }
        }
        
        public UIWss_adsagetest163comWindow1 UIWss_adsagetest163comWindow1
        {
            get
            {
                if ((this.mUIWss_adsagetest163comWindow1 == null))
                {
                    this.mUIWss_adsagetest163comWindow1 = new UIWss_adsagetest163comWindow1();
                }
                return this.mUIWss_adsagetest163comWindow1;
            }
        }
        #endregion
        
        #region Fields
        private ExpandAccountsViewParams mExpandAccountsViewParams;
        
        private VerifyAdcenterAccountTreeExpectedValues mVerifyAdcenterAccountTreeExpectedValues;
        
        private VerifyGoogleAccountTreeExpectedValues mVerifyGoogleAccountTreeExpectedValues;
        
        private VerifyNoAccountExpectedValues mVerifyNoAccountExpectedValues;
        
        private ExpandAdCenterAccountTreeViewParams mExpandAdCenterAccountTreeViewParams;
        
        private ExpandGoogleAccountTreeViewParams mExpandGoogleAccountTreeViewParams;
        
        private UIAdSageforPerformanceWindow mUIAdSageforPerformanceWindow;
        
        private UIItemWindow2 mUIItemWindow;
        
        private UIWss_adsagetest163comWindow mUIWss_adsagetest163comWindow;
        
        private UIItemWindow11 mUIItemWindow1;
        
        private UIMicrosoftadlabsUSDadWindow mUIMicrosoftadlabsUSDadWindow;
        
        private UIAccount2348004880USDWindow mUIAccount2348004880USDWindow;
        
        private UIWss_adsagetest163comWindow1 mUIWss_adsagetest163comWindow1;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ExpandAccountsView'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class ExpandAccountsViewParams
    {
        
        #region Fields
        /// <summary>
        /// Expand 'Your Accounts(1)' tree item
        /// </summary>
        public bool UIYourAccounts1TreeItemExpanded = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'VerifyAdcenterAccountTree'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class VerifyAdcenterAccountTreeExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Your Accounts(1)' -> 'Microsoft adlabs(USD)' tree item's property 'Name' equals 'Microsoft adlabs(USD)'
        /// </summary>
        public string UIMicrosoftadlabsUSDTreeItemName = "Microsoft adlabs(USD)";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'VerifyGoogleAccountTree'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class VerifyGoogleAccountTreeExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Your Accounts(1)' -> 'wss_adsagetest@163.com(CNY)' tree item's property 'Name' equals 'wss_adsagetest@163.com(CNY)'
        /// </summary>
        public string UIWss_adsagetest163comTreeItemName = "wss_adsagetest@163.com(CNY)";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'VerifyNoAccount'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class VerifyNoAccountExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'No Account' tree item's property 'Name' equals 'No Account'
        /// </summary>
        public string UINoAccountTreeItemName = "No Account";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ExpandAdCenterAccountTreeView'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class ExpandAdCenterAccountTreeViewParams
    {
        
        #region Fields
        /// <summary>
        /// Expand 'Your Accounts(1)' -> 'Microsoft adlabs(USD)' tree item
        /// </summary>
        public bool UIMicrosoftadlabsUSDTreeItemExpanded = true;
        
        /// <summary>
        /// Type '{Down}' in 'Your Accounts(1)' -> 'Microsoft adlabs(USD)' tree item
        /// </summary>
        public string UIMicrosoftadlabsUSDTreeItemSendKeys = "{Down}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ExpandGoogleAccountTreeView'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class ExpandGoogleAccountTreeViewParams
    {
        
        #region Fields
        /// <summary>
        /// Expand 'Your Accounts(1)' -> 'wss_adsagetest@163.com(CNY)' tree item
        /// </summary>
        public bool UIWss_adsagetest163comTreeItemExpanded = true;
        
        /// <summary>
        /// Type '{Down}' in 'Your Accounts(1)' -> 'wss_adsagetest@163.com(CNY)' tree item
        /// </summary>
        public string UIWss_adsagetest163comTreeItemSendKeys = "{Down}";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAdSageforPerformanceWindow : WinWindow
    {
        
        public UIAdSageforPerformanceWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "adSage for Performance";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("adSage for Performance");
            this.WindowTitles.Add("haih@ad-sage.com #46848300(USD) - adSage for Performance");
            #endregion
        }
        
        #region Properties
        public UIRibbonFormMenuBar UIRibbonFormMenuBar
        {
            get
            {
                if ((this.mUIRibbonFormMenuBar == null))
                {
                    this.mUIRibbonFormMenuBar = new UIRibbonFormMenuBar(this);
                }
                return this.mUIRibbonFormMenuBar;
            }
        }
        
        public UISystemMenuItem1 UISystemMenuItem
        {
            get
            {
                if ((this.mUISystemMenuItem == null))
                {
                    this.mUISystemMenuItem = new UISystemMenuItem1(this);
                }
                return this.mUISystemMenuItem;
            }
        }
        
        public UISystemMenu UISystemMenu
        {
            get
            {
                if ((this.mUISystemMenu == null))
                {
                    this.mUISystemMenu = new UISystemMenu(this);
                }
                return this.mUISystemMenu;
            }
        }
        
        public UIAdSageforPerformanceTitleBar UIAdSageforPerformanceTitleBar
        {
            get
            {
                if ((this.mUIAdSageforPerformanceTitleBar == null))
                {
                    this.mUIAdSageforPerformanceTitleBar = new UIAdSageforPerformanceTitleBar(this);
                }
                return this.mUIAdSageforPerformanceTitleBar;
            }
        }
        
        public WinMenuBar UIRibbonFormMenuBar1
        {
            get
            {
                if ((this.mUIRibbonFormMenuBar1 == null))
                {
                    this.mUIRibbonFormMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIRibbonFormMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIRibbonFormMenuBar1;
            }
        }
        
        public UIAdSageforPerformanceClient UIAdSageforPerformanceClient
        {
            get
            {
                if ((this.mUIAdSageforPerformanceClient == null))
                {
                    this.mUIAdSageforPerformanceClient = new UIAdSageforPerformanceClient(this);
                }
                return this.mUIAdSageforPerformanceClient;
            }
        }
        
        public UISplitContainerControWindow UISplitContainerControWindow
        {
            get
            {
                if ((this.mUISplitContainerControWindow == null))
                {
                    this.mUISplitContainerControWindow = new UISplitContainerControWindow(this);
                }
                return this.mUISplitContainerControWindow;
            }
        }
        
        public UISplitContainerControPane UISplitContainerControPane
        {
            get
            {
                if ((this.mUISplitContainerControPane == null))
                {
                    this.mUISplitContainerControPane = new UISplitContainerControPane(this);
                }
                return this.mUISplitContainerControPane;
            }
        }
        
        public UIScrollbarScrollBar UIScrollbarScrollBar
        {
            get
            {
                if ((this.mUIScrollbarScrollBar == null))
                {
                    this.mUIScrollbarScrollBar = new UIScrollbarScrollBar(this);
                }
                return this.mUIScrollbarScrollBar;
            }
        }
        
        public UIPanel1Pane UIPanel1Pane
        {
            get
            {
                if ((this.mUIPanel1Pane == null))
                {
                    this.mUIPanel1Pane = new UIPanel1Pane(this);
                }
                return this.mUIPanel1Pane;
            }
        }
        
        public UIScrollbarScrollBar1 UIScrollbarScrollBar1
        {
            get
            {
                if ((this.mUIScrollbarScrollBar1 == null))
                {
                    this.mUIScrollbarScrollBar1 = new UIScrollbarScrollBar1(this);
                }
                return this.mUIScrollbarScrollBar1;
            }
        }
        
        public UINavBarControl1Window UINavBarControl1Window
        {
            get
            {
                if ((this.mUINavBarControl1Window == null))
                {
                    this.mUINavBarControl1Window = new UINavBarControl1Window(this);
                }
                return this.mUINavBarControl1Window;
            }
        }
        
        public UINavBarControl1Client UINavBarControl1Client
        {
            get
            {
                if ((this.mUINavBarControl1Client == null))
                {
                    this.mUINavBarControl1Client = new UINavBarControl1Client(this);
                }
                return this.mUINavBarControl1Client;
            }
        }
        
        public UINavBarGroupControlCoWindow UINavBarGroupControlCoWindow
        {
            get
            {
                if ((this.mUINavBarGroupControlCoWindow == null))
                {
                    this.mUINavBarGroupControlCoWindow = new UINavBarGroupControlCoWindow(this);
                }
                return this.mUINavBarGroupControlCoWindow;
            }
        }
        
        public UIAccountNavigatorContWindow UIAccountNavigatorContWindow
        {
            get
            {
                if ((this.mUIAccountNavigatorContWindow == null))
                {
                    this.mUIAccountNavigatorContWindow = new UIAccountNavigatorContWindow(this);
                }
                return this.mUIAccountNavigatorContWindow;
            }
        }
        
        public UIAccountTreeViewWindow UIAccountTreeViewWindow
        {
            get
            {
                if ((this.mUIAccountTreeViewWindow == null))
                {
                    this.mUIAccountTreeViewWindow = new UIAccountTreeViewWindow(this);
                }
                return this.mUIAccountTreeViewWindow;
            }
        }
        
        public UIPanel2Pane UIPanel2Pane
        {
            get
            {
                if ((this.mUIPanel2Pane == null))
                {
                    this.mUIPanel2Pane = new UIPanel2Pane(this);
                }
                return this.mUIPanel2Pane;
            }
        }
        
        public UIScrollbarScrollBar2 UIScrollbarScrollBar2
        {
            get
            {
                if ((this.mUIScrollbarScrollBar2 == null))
                {
                    this.mUIScrollbarScrollBar2 = new UIScrollbarScrollBar2(this);
                }
                return this.mUIScrollbarScrollBar2;
            }
        }
        
        public UIPanel1Window UIPanel1Window
        {
            get
            {
                if ((this.mUIPanel1Window == null))
                {
                    this.mUIPanel1Window = new UIPanel1Window(this);
                }
                return this.mUIPanel1Window;
            }
        }
        
        public UIDxTabPageContainerCoWindow UIDxTabPageContainerCoWindow
        {
            get
            {
                if ((this.mUIDxTabPageContainerCoWindow == null))
                {
                    this.mUIDxTabPageContainerCoWindow = new UIDxTabPageContainerCoWindow(this);
                }
                return this.mUIDxTabPageContainerCoWindow;
            }
        }
        
        public UITabPageContainerContClient UITabPageContainerContClient
        {
            get
            {
                if ((this.mUITabPageContainerContClient == null))
                {
                    this.mUITabPageContainerContClient = new UITabPageContainerContClient(this);
                }
                return this.mUITabPageContainerContClient;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemTabList UIItemTabList
        {
            get
            {
                if ((this.mUIItemTabList == null))
                {
                    this.mUIItemTabList = new UIItemTabList(this);
                }
                return this.mUIItemTabList;
            }
        }
        
        public UIDashboardReportContrWindow UIDashboardReportContrWindow
        {
            get
            {
                if ((this.mUIDashboardReportContrWindow == null))
                {
                    this.mUIDashboardReportContrWindow = new UIDashboardReportContrWindow(this);
                }
                return this.mUIDashboardReportContrWindow;
            }
        }
        
        public UIReportDateSelectContWindow UIReportDateSelectContWindow
        {
            get
            {
                if ((this.mUIReportDateSelectContWindow == null))
                {
                    this.mUIReportDateSelectContWindow = new UIReportDateSelectContWindow(this);
                }
                return this.mUIReportDateSelectContWindow;
            }
        }
        
        public UIDateRange07142011072Window UIDateRange07142011072Window
        {
            get
            {
                if ((this.mUIDateRange07142011072Window == null))
                {
                    this.mUIDateRange07142011072Window = new UIDateRange07142011072Window(this);
                }
                return this.mUIDateRange07142011072Window;
            }
        }
        
        public UILast7DaysWindow UILast7DaysWindow
        {
            get
            {
                if ((this.mUILast7DaysWindow == null))
                {
                    this.mUILast7DaysWindow = new UILast7DaysWindow(this);
                }
                return this.mUILast7DaysWindow;
            }
        }
        
        public UILast30DaysWindow UILast30DaysWindow
        {
            get
            {
                if ((this.mUILast30DaysWindow == null))
                {
                    this.mUILast30DaysWindow = new UILast30DaysWindow(this);
                }
                return this.mUILast30DaysWindow;
            }
        }
        
        public UITableLayoutPanel1Window UITableLayoutPanel1Window
        {
            get
            {
                if ((this.mUITableLayoutPanel1Window == null))
                {
                    this.mUITableLayoutPanel1Window = new UITableLayoutPanel1Window(this);
                }
                return this.mUITableLayoutPanel1Window;
            }
        }
        
        public UIBasicIndicatorPieChaWindow UIBasicIndicatorPieChaWindow
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaWindow == null))
                {
                    this.mUIBasicIndicatorPieChaWindow = new UIBasicIndicatorPieChaWindow(this);
                }
                return this.mUIBasicIndicatorPieChaWindow;
            }
        }
        
        public UILabel1Window UILabel1Window
        {
            get
            {
                if ((this.mUILabel1Window == null))
                {
                    this.mUILabel1Window = new UILabel1Window(this);
                }
                return this.mUILabel1Window;
            }
        }
        
        public UIPanel1Window1 UIPanel1Window1
        {
            get
            {
                if ((this.mUIPanel1Window1 == null))
                {
                    this.mUIPanel1Window1 = new UIPanel1Window1(this);
                }
                return this.mUIPanel1Window1;
            }
        }
        
        public UIImpressionsWindow UIImpressionsWindow
        {
            get
            {
                if ((this.mUIImpressionsWindow == null))
                {
                    this.mUIImpressionsWindow = new UIImpressionsWindow(this);
                }
                return this.mUIImpressionsWindow;
            }
        }
        
        public UILegendGridControlWindow UILegendGridControlWindow
        {
            get
            {
                if ((this.mUILegendGridControlWindow == null))
                {
                    this.mUILegendGridControlWindow = new UILegendGridControlWindow(this);
                }
                return this.mUILegendGridControlWindow;
            }
        }
        
        public UIPieChartWindow UIPieChartWindow
        {
            get
            {
                if ((this.mUIPieChartWindow == null))
                {
                    this.mUIPieChartWindow = new UIPieChartWindow(this);
                }
                return this.mUIPieChartWindow;
            }
        }
        
        public UIBasicIndicatorPieChaWindow1 UIBasicIndicatorPieChaWindow1
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaWindow1 == null))
                {
                    this.mUIBasicIndicatorPieChaWindow1 = new UIBasicIndicatorPieChaWindow1(this);
                }
                return this.mUIBasicIndicatorPieChaWindow1;
            }
        }
        
        public UILabel1Window1 UILabel1Window1
        {
            get
            {
                if ((this.mUILabel1Window1 == null))
                {
                    this.mUILabel1Window1 = new UILabel1Window1(this);
                }
                return this.mUILabel1Window1;
            }
        }
        
        public UIPanel1Window2 UIPanel1Window2
        {
            get
            {
                if ((this.mUIPanel1Window2 == null))
                {
                    this.mUIPanel1Window2 = new UIPanel1Window2(this);
                }
                return this.mUIPanel1Window2;
            }
        }
        
        public UIClicksWindow UIClicksWindow
        {
            get
            {
                if ((this.mUIClicksWindow == null))
                {
                    this.mUIClicksWindow = new UIClicksWindow(this);
                }
                return this.mUIClicksWindow;
            }
        }
        
        public UILegendGridControlWindow1 UILegendGridControlWindow1
        {
            get
            {
                if ((this.mUILegendGridControlWindow1 == null))
                {
                    this.mUILegendGridControlWindow1 = new UILegendGridControlWindow1(this);
                }
                return this.mUILegendGridControlWindow1;
            }
        }
        
        public UIPieChartWindow1 UIPieChartWindow1
        {
            get
            {
                if ((this.mUIPieChartWindow1 == null))
                {
                    this.mUIPieChartWindow1 = new UIPieChartWindow1(this);
                }
                return this.mUIPieChartWindow1;
            }
        }
        
        public UIBasicIndicatorPieChaWindow2 UIBasicIndicatorPieChaWindow2
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaWindow2 == null))
                {
                    this.mUIBasicIndicatorPieChaWindow2 = new UIBasicIndicatorPieChaWindow2(this);
                }
                return this.mUIBasicIndicatorPieChaWindow2;
            }
        }
        
        public UILabel1Window2 UILabel1Window2
        {
            get
            {
                if ((this.mUILabel1Window2 == null))
                {
                    this.mUILabel1Window2 = new UILabel1Window2(this);
                }
                return this.mUILabel1Window2;
            }
        }
        
        public UIPanel1Window3 UIPanel1Window3
        {
            get
            {
                if ((this.mUIPanel1Window3 == null))
                {
                    this.mUIPanel1Window3 = new UIPanel1Window3(this);
                }
                return this.mUIPanel1Window3;
            }
        }
        
        public UIConversionsWindow UIConversionsWindow
        {
            get
            {
                if ((this.mUIConversionsWindow == null))
                {
                    this.mUIConversionsWindow = new UIConversionsWindow(this);
                }
                return this.mUIConversionsWindow;
            }
        }
        
        public UILegendGridControlWindow2 UILegendGridControlWindow2
        {
            get
            {
                if ((this.mUILegendGridControlWindow2 == null))
                {
                    this.mUILegendGridControlWindow2 = new UILegendGridControlWindow2(this);
                }
                return this.mUILegendGridControlWindow2;
            }
        }
        
        public UIPieChartWindow2 UIPieChartWindow2
        {
            get
            {
                if ((this.mUIPieChartWindow2 == null))
                {
                    this.mUIPieChartWindow2 = new UIPieChartWindow2(this);
                }
                return this.mUIPieChartWindow2;
            }
        }
        
        public UIBasicIndicatorPieChaWindow3 UIBasicIndicatorPieChaWindow3
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaWindow3 == null))
                {
                    this.mUIBasicIndicatorPieChaWindow3 = new UIBasicIndicatorPieChaWindow3(this);
                }
                return this.mUIBasicIndicatorPieChaWindow3;
            }
        }
        
        public UILabel1Window3 UILabel1Window3
        {
            get
            {
                if ((this.mUILabel1Window3 == null))
                {
                    this.mUILabel1Window3 = new UILabel1Window3(this);
                }
                return this.mUILabel1Window3;
            }
        }
        
        public UIPanel1Window4 UIPanel1Window4
        {
            get
            {
                if ((this.mUIPanel1Window4 == null))
                {
                    this.mUIPanel1Window4 = new UIPanel1Window4(this);
                }
                return this.mUIPanel1Window4;
            }
        }
        
        public UISpentWindow UISpentWindow
        {
            get
            {
                if ((this.mUISpentWindow == null))
                {
                    this.mUISpentWindow = new UISpentWindow(this);
                }
                return this.mUISpentWindow;
            }
        }
        
        public UILegendGridControlWindow3 UILegendGridControlWindow3
        {
            get
            {
                if ((this.mUILegendGridControlWindow3 == null))
                {
                    this.mUILegendGridControlWindow3 = new UILegendGridControlWindow3(this);
                }
                return this.mUILegendGridControlWindow3;
            }
        }
        
        public UIPieChartWindow3 UIPieChartWindow3
        {
            get
            {
                if ((this.mUIPieChartWindow3 == null))
                {
                    this.mUIPieChartWindow3 = new UIPieChartWindow3(this);
                }
                return this.mUIPieChartWindow3;
            }
        }
        
        public UIPanel2Window UIPanel2Window
        {
            get
            {
                if ((this.mUIPanel2Window == null))
                {
                    this.mUIPanel2Window = new UIPanel2Window(this);
                }
                return this.mUIPanel2Window;
            }
        }
        
        public UIPanel1Window5 UIPanel1Window5
        {
            get
            {
                if ((this.mUIPanel1Window5 == null))
                {
                    this.mUIPanel1Window5 = new UIPanel1Window5(this);
                }
                return this.mUIPanel1Window5;
            }
        }
        
        public UIComboBoxShowTypeWindow UIComboBoxShowTypeWindow
        {
            get
            {
                if ((this.mUIComboBoxShowTypeWindow == null))
                {
                    this.mUIComboBoxShowTypeWindow = new UIComboBoxShowTypeWindow(this);
                }
                return this.mUIComboBoxShowTypeWindow;
            }
        }
        
        public UIPerformancebyWindow UIPerformancebyWindow
        {
            get
            {
                if ((this.mUIPerformancebyWindow == null))
                {
                    this.mUIPerformancebyWindow = new UIPerformancebyWindow(this);
                }
                return this.mUIPerformancebyWindow;
            }
        }
        
        public UILabel1Window4 UILabel1Window4
        {
            get
            {
                if ((this.mUILabel1Window4 == null))
                {
                    this.mUILabel1Window4 = new UILabel1Window4(this);
                }
                return this.mUILabel1Window4;
            }
        }
        
        public UIGridControl1Window UIGridControl1Window
        {
            get
            {
                if ((this.mUIGridControl1Window == null))
                {
                    this.mUIGridControl1Window = new UIGridControl1Window(this);
                }
                return this.mUIGridControl1Window;
            }
        }
        
        public UILabel3Window UILabel3Window
        {
            get
            {
                if ((this.mUILabel3Window == null))
                {
                    this.mUILabel3Window = new UILabel3Window(this);
                }
                return this.mUILabel3Window;
            }
        }
        
        public UIPanel3Window UIPanel3Window
        {
            get
            {
                if ((this.mUIPanel3Window == null))
                {
                    this.mUIPanel3Window = new UIPanel3Window(this);
                }
                return this.mUIPanel3Window;
            }
        }
        
        public UIComboBoxShowItemWindow UIComboBoxShowItemWindow
        {
            get
            {
                if ((this.mUIComboBoxShowItemWindow == null))
                {
                    this.mUIComboBoxShowItemWindow = new UIComboBoxShowItemWindow(this);
                }
                return this.mUIComboBoxShowItemWindow;
            }
        }
        
        public UITrendsofWindow UITrendsofWindow
        {
            get
            {
                if ((this.mUITrendsofWindow == null))
                {
                    this.mUITrendsofWindow = new UITrendsofWindow(this);
                }
                return this.mUITrendsofWindow;
            }
        }
        
        public UILabel2Window UILabel2Window
        {
            get
            {
                if ((this.mUILabel2Window == null))
                {
                    this.mUILabel2Window = new UILabel2Window(this);
                }
                return this.mUILabel2Window;
            }
        }
        
        public UITotalChartWindow UITotalChartWindow
        {
            get
            {
                if ((this.mUITotalChartWindow == null))
                {
                    this.mUITotalChartWindow = new UITotalChartWindow(this);
                }
                return this.mUITotalChartWindow;
            }
        }
        
        public UIVerticalScrollBar35 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar35(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar35 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar35(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public UISplitContainerControScrollBar UISplitContainerControScrollBar
        {
            get
            {
                if ((this.mUISplitContainerControScrollBar == null))
                {
                    this.mUISplitContainerControScrollBar = new UISplitContainerControScrollBar(this);
                }
                return this.mUISplitContainerControScrollBar;
            }
        }
        
        public UISplitContainerControScrollBar1 UISplitContainerControScrollBar1
        {
            get
            {
                if ((this.mUISplitContainerControScrollBar1 == null))
                {
                    this.mUISplitContainerControScrollBar1 = new UISplitContainerControScrollBar1(this);
                }
                return this.mUISplitContainerControScrollBar1;
            }
        }
        
        public UIRibbonStatusBarWindow UIRibbonStatusBarWindow
        {
            get
            {
                if ((this.mUIRibbonStatusBarWindow == null))
                {
                    this.mUIRibbonStatusBarWindow = new UIRibbonStatusBarWindow(this);
                }
                return this.mUIRibbonStatusBarWindow;
            }
        }
        
        public UIStatusBarPropertyPage UIStatusBarPropertyPage
        {
            get
            {
                if ((this.mUIStatusBarPropertyPage == null))
                {
                    this.mUIStatusBarPropertyPage = new UIStatusBarPropertyPage(this);
                }
                return this.mUIStatusBarPropertyPage;
            }
        }
        
        public UIVerticalScrollBar110 UIVerticalScrollBar1
        {
            get
            {
                if ((this.mUIVerticalScrollBar1 == null))
                {
                    this.mUIVerticalScrollBar1 = new UIVerticalScrollBar110(this);
                }
                return this.mUIVerticalScrollBar1;
            }
        }
        
        public UIHorizontalScrollBar110 UIHorizontalScrollBar1
        {
            get
            {
                if ((this.mUIHorizontalScrollBar1 == null))
                {
                    this.mUIHorizontalScrollBar1 = new UIHorizontalScrollBar110(this);
                }
                return this.mUIHorizontalScrollBar1;
            }
        }
        
        public UIRibbonWindow UIRibbonWindow
        {
            get
            {
                if ((this.mUIRibbonWindow == null))
                {
                    this.mUIRibbonWindow = new UIRibbonWindow(this);
                }
                return this.mUIRibbonWindow;
            }
        }
        
        public UITheRibbonPropertyPage UITheRibbonPropertyPage
        {
            get
            {
                if ((this.mUITheRibbonPropertyPage == null))
                {
                    this.mUITheRibbonPropertyPage = new UITheRibbonPropertyPage(this);
                }
                return this.mUITheRibbonPropertyPage;
            }
        }
        
        public UIRibbonToolBar UIRibbonToolBar
        {
            get
            {
                if ((this.mUIRibbonToolBar == null))
                {
                    this.mUIRibbonToolBar = new UIRibbonToolBar(this);
                }
                return this.mUIRibbonToolBar;
            }
        }
        
        public UIRibbonTabsTabList UIRibbonTabsTabList
        {
            get
            {
                if ((this.mUIRibbonTabsTabList == null))
                {
                    this.mUIRibbonTabsTabList = new UIRibbonTabsTabList(this);
                }
                return this.mUIRibbonTabsTabList;
            }
        }
        
        public UILowerRibbonPane UILowerRibbonPane
        {
            get
            {
                if ((this.mUILowerRibbonPane == null))
                {
                    this.mUILowerRibbonPane = new UILowerRibbonPane(this);
                }
                return this.mUILowerRibbonPane;
            }
        }
        
        public UIHomePropertyPage UIHomePropertyPage
        {
            get
            {
                if ((this.mUIHomePropertyPage == null))
                {
                    this.mUIHomePropertyPage = new UIHomePropertyPage(this);
                }
                return this.mUIHomePropertyPage;
            }
        }
        
        public UIRibbonToolBar1 UIRibbonToolBar1
        {
            get
            {
                if ((this.mUIRibbonToolBar1 == null))
                {
                    this.mUIRibbonToolBar1 = new UIRibbonToolBar1(this);
                }
                return this.mUIRibbonToolBar1;
            }
        }
        
        public UIRibbonToolBar2 UIRibbonToolBar2
        {
            get
            {
                if ((this.mUIRibbonToolBar2 == null))
                {
                    this.mUIRibbonToolBar2 = new UIRibbonToolBar2(this);
                }
                return this.mUIRibbonToolBar2;
            }
        }
        
        public UIRibbonToolBar3 UIRibbonToolBar3
        {
            get
            {
                if ((this.mUIRibbonToolBar3 == null))
                {
                    this.mUIRibbonToolBar3 = new UIRibbonToolBar3(this);
                }
                return this.mUIRibbonToolBar3;
            }
        }
        
        public UIVerticalScrollBar210 UIVerticalScrollBar2
        {
            get
            {
                if ((this.mUIVerticalScrollBar2 == null))
                {
                    this.mUIVerticalScrollBar2 = new UIVerticalScrollBar210(this);
                }
                return this.mUIVerticalScrollBar2;
            }
        }
        
        public UIHorizontalScrollBar210 UIHorizontalScrollBar2
        {
            get
            {
                if ((this.mUIHorizontalScrollBar2 == null))
                {
                    this.mUIHorizontalScrollBar2 = new UIHorizontalScrollBar210(this);
                }
                return this.mUIHorizontalScrollBar2;
            }
        }
        
        public UIAdSageforPerformanceScrollBar UIAdSageforPerformanceScrollBar
        {
            get
            {
                if ((this.mUIAdSageforPerformanceScrollBar == null))
                {
                    this.mUIAdSageforPerformanceScrollBar = new UIAdSageforPerformanceScrollBar(this);
                }
                return this.mUIAdSageforPerformanceScrollBar;
            }
        }
        
        public UIAdSageforPerformanceScrollBar1 UIAdSageforPerformanceScrollBar1
        {
            get
            {
                if ((this.mUIAdSageforPerformanceScrollBar1 == null))
                {
                    this.mUIAdSageforPerformanceScrollBar1 = new UIAdSageforPerformanceScrollBar1(this);
                }
                return this.mUIAdSageforPerformanceScrollBar1;
            }
        }
        
        public WinControl UIAdSageforPerformanceGrip
        {
            get
            {
                if ((this.mUIAdSageforPerformanceGrip == null))
                {
                    this.mUIAdSageforPerformanceGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIAdSageforPerformanceGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIAdSageforPerformanceGrip;
            }
        }
        
        public UIRibbonToolBar4 UIRibbonToolBar4
        {
            get
            {
                if ((this.mUIRibbonToolBar4 == null))
                {
                    this.mUIRibbonToolBar4 = new UIRibbonToolBar4(this);
                }
                return this.mUIRibbonToolBar4;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIRibbonFormMenuBar mUIRibbonFormMenuBar;
        
        private UISystemMenuItem1 mUISystemMenuItem;
        
        private UISystemMenu mUISystemMenu;
        
        private UIAdSageforPerformanceTitleBar mUIAdSageforPerformanceTitleBar;
        
        private WinMenuBar mUIRibbonFormMenuBar1;
        
        private UIAdSageforPerformanceClient mUIAdSageforPerformanceClient;
        
        private UISplitContainerControWindow mUISplitContainerControWindow;
        
        private UISplitContainerControPane mUISplitContainerControPane;
        
        private UIScrollbarScrollBar mUIScrollbarScrollBar;
        
        private UIPanel1Pane mUIPanel1Pane;
        
        private UIScrollbarScrollBar1 mUIScrollbarScrollBar1;
        
        private UINavBarControl1Window mUINavBarControl1Window;
        
        private UINavBarControl1Client mUINavBarControl1Client;
        
        private UINavBarGroupControlCoWindow mUINavBarGroupControlCoWindow;
        
        private UIAccountNavigatorContWindow mUIAccountNavigatorContWindow;
        
        private UIAccountTreeViewWindow mUIAccountTreeViewWindow;
        
        private UIPanel2Pane mUIPanel2Pane;
        
        private UIScrollbarScrollBar2 mUIScrollbarScrollBar2;
        
        private UIPanel1Window mUIPanel1Window;
        
        private UIDxTabPageContainerCoWindow mUIDxTabPageContainerCoWindow;
        
        private UITabPageContainerContClient mUITabPageContainerContClient;
        
        private UIItemWindow mUIItemWindow;
        
        private UIItemTabList mUIItemTabList;
        
        private UIDashboardReportContrWindow mUIDashboardReportContrWindow;
        
        private UIReportDateSelectContWindow mUIReportDateSelectContWindow;
        
        private UIDateRange07142011072Window mUIDateRange07142011072Window;
        
        private UILast7DaysWindow mUILast7DaysWindow;
        
        private UILast30DaysWindow mUILast30DaysWindow;
        
        private UITableLayoutPanel1Window mUITableLayoutPanel1Window;
        
        private UIBasicIndicatorPieChaWindow mUIBasicIndicatorPieChaWindow;
        
        private UILabel1Window mUILabel1Window;
        
        private UIPanel1Window1 mUIPanel1Window1;
        
        private UIImpressionsWindow mUIImpressionsWindow;
        
        private UILegendGridControlWindow mUILegendGridControlWindow;
        
        private UIPieChartWindow mUIPieChartWindow;
        
        private UIBasicIndicatorPieChaWindow1 mUIBasicIndicatorPieChaWindow1;
        
        private UILabel1Window1 mUILabel1Window1;
        
        private UIPanel1Window2 mUIPanel1Window2;
        
        private UIClicksWindow mUIClicksWindow;
        
        private UILegendGridControlWindow1 mUILegendGridControlWindow1;
        
        private UIPieChartWindow1 mUIPieChartWindow1;
        
        private UIBasicIndicatorPieChaWindow2 mUIBasicIndicatorPieChaWindow2;
        
        private UILabel1Window2 mUILabel1Window2;
        
        private UIPanel1Window3 mUIPanel1Window3;
        
        private UIConversionsWindow mUIConversionsWindow;
        
        private UILegendGridControlWindow2 mUILegendGridControlWindow2;
        
        private UIPieChartWindow2 mUIPieChartWindow2;
        
        private UIBasicIndicatorPieChaWindow3 mUIBasicIndicatorPieChaWindow3;
        
        private UILabel1Window3 mUILabel1Window3;
        
        private UIPanel1Window4 mUIPanel1Window4;
        
        private UISpentWindow mUISpentWindow;
        
        private UILegendGridControlWindow3 mUILegendGridControlWindow3;
        
        private UIPieChartWindow3 mUIPieChartWindow3;
        
        private UIPanel2Window mUIPanel2Window;
        
        private UIPanel1Window5 mUIPanel1Window5;
        
        private UIComboBoxShowTypeWindow mUIComboBoxShowTypeWindow;
        
        private UIPerformancebyWindow mUIPerformancebyWindow;
        
        private UILabel1Window4 mUILabel1Window4;
        
        private UIGridControl1Window mUIGridControl1Window;
        
        private UILabel3Window mUILabel3Window;
        
        private UIPanel3Window mUIPanel3Window;
        
        private UIComboBoxShowItemWindow mUIComboBoxShowItemWindow;
        
        private UITrendsofWindow mUITrendsofWindow;
        
        private UILabel2Window mUILabel2Window;
        
        private UITotalChartWindow mUITotalChartWindow;
        
        private UIVerticalScrollBar35 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar35 mUIHorizontalScrollBar;
        
        private UISplitContainerControScrollBar mUISplitContainerControScrollBar;
        
        private UISplitContainerControScrollBar1 mUISplitContainerControScrollBar1;
        
        private UIRibbonStatusBarWindow mUIRibbonStatusBarWindow;
        
        private UIStatusBarPropertyPage mUIStatusBarPropertyPage;
        
        private UIVerticalScrollBar110 mUIVerticalScrollBar1;
        
        private UIHorizontalScrollBar110 mUIHorizontalScrollBar1;
        
        private UIRibbonWindow mUIRibbonWindow;
        
        private UITheRibbonPropertyPage mUITheRibbonPropertyPage;
        
        private UIRibbonToolBar mUIRibbonToolBar;
        
        private UIRibbonTabsTabList mUIRibbonTabsTabList;
        
        private UILowerRibbonPane mUILowerRibbonPane;
        
        private UIHomePropertyPage mUIHomePropertyPage;
        
        private UIRibbonToolBar1 mUIRibbonToolBar1;
        
        private UIRibbonToolBar2 mUIRibbonToolBar2;
        
        private UIRibbonToolBar3 mUIRibbonToolBar3;
        
        private UIVerticalScrollBar210 mUIVerticalScrollBar2;
        
        private UIHorizontalScrollBar210 mUIHorizontalScrollBar2;
        
        private UIAdSageforPerformanceScrollBar mUIAdSageforPerformanceScrollBar;
        
        private UIAdSageforPerformanceScrollBar1 mUIAdSageforPerformanceScrollBar1;
        
        private WinControl mUIAdSageforPerformanceGrip;
        
        private UIRibbonToolBar4 mUIRibbonToolBar4;
        
        private UIItemWindow1 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRibbonFormMenuBar : WinMenuBar
    {
        
        public UIRibbonFormMenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "System";
            #endregion
        }
        
        #region Properties
        public UISystemMenuItem UISystemMenuItem
        {
            get
            {
                if ((this.mUISystemMenuItem == null))
                {
                    this.mUISystemMenuItem = new UISystemMenuItem(this);
                }
                return this.mUISystemMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UISystemMenuItem mUISystemMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISystemMenuItem : WinMenuItem
    {
        
        public UISystemMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "System";
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIRestoreMenuItem
        {
            get
            {
                if ((this.mUIRestoreMenuItem == null))
                {
                    this.mUIRestoreMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIRestoreMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Restore";
                    this.mUIRestoreMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUIRestoreMenuItem;
            }
        }
        
        public WinMenuItem UIMoveMenuItem
        {
            get
            {
                if ((this.mUIMoveMenuItem == null))
                {
                    this.mUIMoveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIMoveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Move";
                    this.mUIMoveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUIMoveMenuItem;
            }
        }
        
        public WinMenuItem UISizeMenuItem
        {
            get
            {
                if ((this.mUISizeMenuItem == null))
                {
                    this.mUISizeMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISizeMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Size";
                    this.mUISizeMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUISizeMenuItem;
            }
        }
        
        public WinMenuItem UIMinimizeMenuItem
        {
            get
            {
                if ((this.mUIMinimizeMenuItem == null))
                {
                    this.mUIMinimizeMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIMinimizeMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Minimize";
                    this.mUIMinimizeMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUIMinimizeMenuItem;
            }
        }
        
        public WinMenuItem UIMaximizeMenuItem
        {
            get
            {
                if ((this.mUIMaximizeMenuItem == null))
                {
                    this.mUIMaximizeMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIMaximizeMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Maximize";
                    this.mUIMaximizeMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUIMaximizeMenuItem;
            }
        }
        
        public WinMenuItem UICloseAltF4MenuItem
        {
            get
            {
                if ((this.mUICloseAltF4MenuItem == null))
                {
                    this.mUICloseAltF4MenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseAltF4MenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close\tAlt+F4";
                    this.mUICloseAltF4MenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUICloseAltF4MenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIRestoreMenuItem;
        
        private WinMenuItem mUIMoveMenuItem;
        
        private WinMenuItem mUISizeMenuItem;
        
        private WinMenuItem mUIMinimizeMenuItem;
        
        private WinMenuItem mUIMaximizeMenuItem;
        
        private WinMenuItem mUICloseAltF4MenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISystemMenuItem1 : WinMenuItem
    {
        
        public UISystemMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "System";
            #endregion
        }
        
        #region Properties
        public WinMenu UISystemMenu
        {
            get
            {
                if ((this.mUISystemMenu == null))
                {
                    this.mUISystemMenu = new WinMenu(this);
                    #region Search Criteria
                    this.mUISystemMenu.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    this.mUISystemMenu.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISystemMenu.SearchConfigurations.Remove(SearchConfiguration.VisibleOnly);
                    #endregion
                }
                return this.mUISystemMenu;
            }
        }
        #endregion
        
        #region Fields
        private WinMenu mUISystemMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISystemMenu : WinMenu
    {
        
        public UISystemMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "System";
            this.SearchConfigurations.Remove(SearchConfiguration.VisibleOnly);
            #endregion
        }
        
        #region Properties
        public WinSeparator UIItemSeparator
        {
            get
            {
                if ((this.mUIItemSeparator == null))
                {
                    this.mUIItemSeparator = new WinSeparator(this);
                }
                return this.mUIItemSeparator;
            }
        }
        #endregion
        
        #region Fields
        private WinSeparator mUIItemSeparator;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAdSageforPerformanceTitleBar : WinTitleBar
    {
        
        public UIAdSageforPerformanceTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIRestoreButton
        {
            get
            {
                if ((this.mUIRestoreButton == null))
                {
                    this.mUIRestoreButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIRestoreButton.SearchProperties[WinButton.PropertyNames.Name] = "Restore";
                    #endregion
                }
                return this.mUIRestoreButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIRestoreButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAdSageforPerformanceClient : WinClient
    {
        
        public UIAdSageforPerformanceClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "adSage for Performance";
            #endregion
        }
        
        #region Properties
        public WinWindow UISplitContainerControWindow
        {
            get
            {
                if ((this.mUISplitContainerControWindow == null))
                {
                    this.mUISplitContainerControWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUISplitContainerControWindow.SearchProperties[WinWindow.PropertyNames.Name] = "splitContainerControl1";
                    this.mUISplitContainerControWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUISplitContainerControWindow;
            }
        }
        
        public WinPane UISplitContainerControPane
        {
            get
            {
                if ((this.mUISplitContainerControPane == null))
                {
                    this.mUISplitContainerControPane = new WinPane(this);
                    #region Search Criteria
                    this.mUISplitContainerControPane.SearchProperties[WinControl.PropertyNames.Name] = "splitContainerControl1";
                    #endregion
                }
                return this.mUISplitContainerControPane;
            }
        }
        
        public WinWindow UIRibbonStatusBarWindow
        {
            get
            {
                if ((this.mUIRibbonStatusBarWindow == null))
                {
                    this.mUIRibbonStatusBarWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIRibbonStatusBarWindow.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Status Bar";
                    this.mUIRibbonStatusBarWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIRibbonStatusBarWindow;
            }
        }
        
        public WinControl UIStatusBarPropertyPage
        {
            get
            {
                if ((this.mUIStatusBarPropertyPage == null))
                {
                    this.mUIStatusBarPropertyPage = new WinControl(this);
                    #region Search Criteria
                    this.mUIStatusBarPropertyPage.SearchProperties[UITestControl.PropertyNames.Name] = "Status Bar";
                    this.mUIStatusBarPropertyPage.SearchProperties[UITestControl.PropertyNames.ControlType] = "PropertyPage";
                    #endregion
                }
                return this.mUIStatusBarPropertyPage;
            }
        }
        
        public WinWindow UIRibbonWindow
        {
            get
            {
                if ((this.mUIRibbonWindow == null))
                {
                    this.mUIRibbonWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIRibbonWindow.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "The Ribbon";
                    this.mUIRibbonWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIRibbonWindow;
            }
        }
        
        public WinControl UITheRibbonPropertyPage
        {
            get
            {
                if ((this.mUITheRibbonPropertyPage == null))
                {
                    this.mUITheRibbonPropertyPage = new WinControl(this);
                    #region Search Criteria
                    this.mUITheRibbonPropertyPage.SearchProperties[UITestControl.PropertyNames.Name] = "The Ribbon";
                    this.mUITheRibbonPropertyPage.SearchProperties[UITestControl.PropertyNames.ControlType] = "PropertyPage";
                    #endregion
                }
                return this.mUITheRibbonPropertyPage;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUISplitContainerControWindow;
        
        private WinPane mUISplitContainerControPane;
        
        private WinWindow mUIRibbonStatusBarWindow;
        
        private WinControl mUIStatusBarPropertyPage;
        
        private WinWindow mUIRibbonWindow;
        
        private WinControl mUITheRibbonPropertyPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISplitContainerControWindow : WinWindow
    {
        
        public UISplitContainerControWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "splitContainerControl1";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UISplitContainerControMenuBar
        {
            get
            {
                if ((this.mUISplitContainerControMenuBar == null))
                {
                    this.mUISplitContainerControMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISplitContainerControMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUISplitContainerControMenuBar;
            }
        }
        
        public WinTitleBar UISplitContainerControTitleBar
        {
            get
            {
                if ((this.mUISplitContainerControTitleBar == null))
                {
                    this.mUISplitContainerControTitleBar = new WinTitleBar(this);
                }
                return this.mUISplitContainerControTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UISplitContainerControMenuBar1
        {
            get
            {
                if ((this.mUISplitContainerControMenuBar1 == null))
                {
                    this.mUISplitContainerControMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISplitContainerControMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUISplitContainerControMenuBar1;
            }
        }
        
        public WinScrollBar UISplitContainerControScrollBar
        {
            get
            {
                if ((this.mUISplitContainerControScrollBar == null))
                {
                    this.mUISplitContainerControScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUISplitContainerControScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUISplitContainerControScrollBar;
            }
        }
        
        public WinScrollBar UISplitContainerControScrollBar1
        {
            get
            {
                if ((this.mUISplitContainerControScrollBar1 == null))
                {
                    this.mUISplitContainerControScrollBar1 = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUISplitContainerControScrollBar1.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUISplitContainerControScrollBar1;
            }
        }
        
        public WinControl UISplitContainerControGrip
        {
            get
            {
                if ((this.mUISplitContainerControGrip == null))
                {
                    this.mUISplitContainerControGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUISplitContainerControGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUISplitContainerControGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUISplitContainerControMenuBar;
        
        private WinTitleBar mUISplitContainerControTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUISplitContainerControMenuBar1;
        
        private WinScrollBar mUISplitContainerControScrollBar;
        
        private WinScrollBar mUISplitContainerControScrollBar1;
        
        private WinControl mUISplitContainerControGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISplitContainerControPane : WinPane
    {
        
        public UISplitContainerControPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "splitContainerControl1";
            #endregion
        }
        
        #region Properties
        public WinScrollBar UIScrollbarScrollBar
        {
            get
            {
                if ((this.mUIScrollbarScrollBar == null))
                {
                    this.mUIScrollbarScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIScrollbarScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "scroll bar";
                    #endregion
                }
                return this.mUIScrollbarScrollBar;
            }
        }
        
        public WinPane UIPanel1Pane
        {
            get
            {
                if ((this.mUIPanel1Pane == null))
                {
                    this.mUIPanel1Pane = new WinPane(this);
                    #region Search Criteria
                    this.mUIPanel1Pane.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    #endregion
                }
                return this.mUIPanel1Pane;
            }
        }
        
        public WinPane UIPanel2Pane
        {
            get
            {
                if ((this.mUIPanel2Pane == null))
                {
                    this.mUIPanel2Pane = new WinPane(this);
                    #region Search Criteria
                    this.mUIPanel2Pane.SearchProperties[WinControl.PropertyNames.Instance] = "2";
                    #endregion
                }
                return this.mUIPanel2Pane;
            }
        }
        #endregion
        
        #region Fields
        private WinScrollBar mUIScrollbarScrollBar;
        
        private WinPane mUIPanel1Pane;
        
        private WinPane mUIPanel2Pane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIScrollbarScrollBar : WinScrollBar
    {
        
        public UIScrollbarScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "scroll bar";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnLeftButton
        {
            get
            {
                if ((this.mUIColumnLeftButton == null))
                {
                    this.mUIColumnLeftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnLeftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column Left";
                    #endregion
                }
                return this.mUIColumnLeftButton;
            }
        }
        
        public WinButton UIPageLeftButton
        {
            get
            {
                if ((this.mUIPageLeftButton == null))
                {
                    this.mUIPageLeftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageLeftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Left";
                    #endregion
                }
                return this.mUIPageLeftButton;
            }
        }
        
        public WinButton UIPositionButton
        {
            get
            {
                if ((this.mUIPositionButton == null))
                {
                    this.mUIPositionButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPositionButton.SearchProperties[WinButton.PropertyNames.Name] = "Position";
                    #endregion
                }
                return this.mUIPositionButton;
            }
        }
        
        public WinButton UIPageRightButton
        {
            get
            {
                if ((this.mUIPageRightButton == null))
                {
                    this.mUIPageRightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageRightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Right";
                    #endregion
                }
                return this.mUIPageRightButton;
            }
        }
        
        public WinButton UIColumnRightButton
        {
            get
            {
                if ((this.mUIColumnRightButton == null))
                {
                    this.mUIColumnRightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnRightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column Right";
                    #endregion
                }
                return this.mUIColumnRightButton;
            }
        }
        
        public WinButton UILineUpButton
        {
            get
            {
                if ((this.mUILineUpButton == null))
                {
                    this.mUILineUpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineUpButton.SearchProperties[WinButton.PropertyNames.Name] = "Line Up";
                    #endregion
                }
                return this.mUILineUpButton;
            }
        }
        
        public WinButton UIPageUpButton
        {
            get
            {
                if ((this.mUIPageUpButton == null))
                {
                    this.mUIPageUpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageUpButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Up";
                    #endregion
                }
                return this.mUIPageUpButton;
            }
        }
        
        public WinButton UIPageDownButton
        {
            get
            {
                if ((this.mUIPageDownButton == null))
                {
                    this.mUIPageDownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageDownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Down";
                    #endregion
                }
                return this.mUIPageDownButton;
            }
        }
        
        public WinButton UILineDownButton
        {
            get
            {
                if ((this.mUILineDownButton == null))
                {
                    this.mUILineDownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineDownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line Down";
                    #endregion
                }
                return this.mUILineDownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnLeftButton;
        
        private WinButton mUIPageLeftButton;
        
        private WinButton mUIPositionButton;
        
        private WinButton mUIPageRightButton;
        
        private WinButton mUIColumnRightButton;
        
        private WinButton mUILineUpButton;
        
        private WinButton mUIPageUpButton;
        
        private WinButton mUIPageDownButton;
        
        private WinButton mUILineDownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPanel1Pane : WinPane
    {
        
        public UIPanel1Pane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinScrollBar UIScrollbarScrollBar
        {
            get
            {
                if ((this.mUIScrollbarScrollBar == null))
                {
                    this.mUIScrollbarScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIScrollbarScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "scroll bar";
                    #endregion
                }
                return this.mUIScrollbarScrollBar;
            }
        }
        #endregion
        
        #region Fields
        private WinScrollBar mUIScrollbarScrollBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIScrollbarScrollBar1 : WinScrollBar
    {
        
        public UIScrollbarScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "scroll bar";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnLeftButton
        {
            get
            {
                if ((this.mUIColumnLeftButton == null))
                {
                    this.mUIColumnLeftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnLeftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column Left";
                    #endregion
                }
                return this.mUIColumnLeftButton;
            }
        }
        
        public WinButton UIPageLeftButton
        {
            get
            {
                if ((this.mUIPageLeftButton == null))
                {
                    this.mUIPageLeftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageLeftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Left";
                    #endregion
                }
                return this.mUIPageLeftButton;
            }
        }
        
        public WinButton UIPositionButton
        {
            get
            {
                if ((this.mUIPositionButton == null))
                {
                    this.mUIPositionButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPositionButton.SearchProperties[WinButton.PropertyNames.Name] = "Position";
                    #endregion
                }
                return this.mUIPositionButton;
            }
        }
        
        public WinButton UIPageRightButton
        {
            get
            {
                if ((this.mUIPageRightButton == null))
                {
                    this.mUIPageRightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageRightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Right";
                    #endregion
                }
                return this.mUIPageRightButton;
            }
        }
        
        public WinButton UIColumnRightButton
        {
            get
            {
                if ((this.mUIColumnRightButton == null))
                {
                    this.mUIColumnRightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnRightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column Right";
                    #endregion
                }
                return this.mUIColumnRightButton;
            }
        }
        
        public WinButton UILineUpButton
        {
            get
            {
                if ((this.mUILineUpButton == null))
                {
                    this.mUILineUpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineUpButton.SearchProperties[WinButton.PropertyNames.Name] = "Line Up";
                    #endregion
                }
                return this.mUILineUpButton;
            }
        }
        
        public WinButton UIPageUpButton
        {
            get
            {
                if ((this.mUIPageUpButton == null))
                {
                    this.mUIPageUpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageUpButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Up";
                    #endregion
                }
                return this.mUIPageUpButton;
            }
        }
        
        public WinButton UIPageDownButton
        {
            get
            {
                if ((this.mUIPageDownButton == null))
                {
                    this.mUIPageDownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageDownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Down";
                    #endregion
                }
                return this.mUIPageDownButton;
            }
        }
        
        public WinButton UILineDownButton
        {
            get
            {
                if ((this.mUILineDownButton == null))
                {
                    this.mUILineDownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineDownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line Down";
                    #endregion
                }
                return this.mUILineDownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnLeftButton;
        
        private WinButton mUIPageLeftButton;
        
        private WinButton mUIPositionButton;
        
        private WinButton mUIPageRightButton;
        
        private WinButton mUIColumnRightButton;
        
        private WinButton mUILineUpButton;
        
        private WinButton mUIPageUpButton;
        
        private WinButton mUIPageDownButton;
        
        private WinButton mUILineDownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UINavBarControl1Window : WinWindow
    {
        
        public UINavBarControl1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "navBarControl1";
            #endregion
        }
        
        #region Properties
        public WinClient UINavBarControl1Client
        {
            get
            {
                if ((this.mUINavBarControl1Client == null))
                {
                    this.mUINavBarControl1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUINavBarControl1Client.SearchProperties[WinControl.PropertyNames.Name] = "navBarControl1";
                    #endregion
                }
                return this.mUINavBarControl1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUINavBarControl1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UINavBarControl1Client : WinClient
    {
        
        public UINavBarControl1Client(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "navBarControl1";
            #endregion
        }
        
        #region Properties
        public WinGroup UIAccountsViewGroup
        {
            get
            {
                if ((this.mUIAccountsViewGroup == null))
                {
                    this.mUIAccountsViewGroup = new WinGroup(this);
                    #region Search Criteria
                    this.mUIAccountsViewGroup.SearchProperties[WinControl.PropertyNames.Name] = "Accounts View";
                    #endregion
                }
                return this.mUIAccountsViewGroup;
            }
        }
        #endregion
        
        #region Fields
        private WinGroup mUIAccountsViewGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UINavBarGroupControlCoWindow : WinWindow
    {
        
        public UINavBarGroupControlCoWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "navBarGroupControlContainer1";
            #endregion
        }
        
        #region Properties
        public WinClient UINavBarGroupControlCoClient
        {
            get
            {
                if ((this.mUINavBarGroupControlCoClient == null))
                {
                    this.mUINavBarGroupControlCoClient = new WinClient(this);
                }
                return this.mUINavBarGroupControlCoClient;
            }
        }
        
        public WinWindow UIAccountNavigatorContWindow
        {
            get
            {
                if ((this.mUIAccountNavigatorContWindow == null))
                {
                    this.mUIAccountNavigatorContWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIAccountNavigatorContWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIAccountNavigatorContWindow.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    #endregion
                }
                return this.mUIAccountNavigatorContWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUINavBarGroupControlCoClient;
        
        private WinWindow mUIAccountNavigatorContWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAccountNavigatorContWindow : WinWindow
    {
        
        public UIAccountNavigatorContWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "AccountNavigatorControl";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIAccountNavigatorContMenuBar
        {
            get
            {
                if ((this.mUIAccountNavigatorContMenuBar == null))
                {
                    this.mUIAccountNavigatorContMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIAccountNavigatorContMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIAccountNavigatorContMenuBar;
            }
        }
        
        public WinTitleBar UIAccountNavigatorContTitleBar
        {
            get
            {
                if ((this.mUIAccountNavigatorContTitleBar == null))
                {
                    this.mUIAccountNavigatorContTitleBar = new WinTitleBar(this);
                }
                return this.mUIAccountNavigatorContTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIAccountNavigatorContMenuBar1
        {
            get
            {
                if ((this.mUIAccountNavigatorContMenuBar1 == null))
                {
                    this.mUIAccountNavigatorContMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIAccountNavigatorContMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIAccountNavigatorContMenuBar1;
            }
        }
        
        public WinClient UIAccountNavigatorContClient
        {
            get
            {
                if ((this.mUIAccountNavigatorContClient == null))
                {
                    this.mUIAccountNavigatorContClient = new WinClient(this);
                }
                return this.mUIAccountNavigatorContClient;
            }
        }
        
        public WinWindow UIAccountTreeViewWindow
        {
            get
            {
                if ((this.mUIAccountTreeViewWindow == null))
                {
                    this.mUIAccountTreeViewWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIAccountTreeViewWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.SysTreeView32", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIAccountTreeViewWindow;
            }
        }
        
        public UIVerticalScrollBar UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIAccountNavigatorContGrip
        {
            get
            {
                if ((this.mUIAccountNavigatorContGrip == null))
                {
                    this.mUIAccountNavigatorContGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIAccountNavigatorContGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIAccountNavigatorContGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIAccountNavigatorContMenuBar;
        
        private WinTitleBar mUIAccountNavigatorContTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIAccountNavigatorContMenuBar1;
        
        private WinClient mUIAccountNavigatorContClient;
        
        private WinWindow mUIAccountTreeViewWindow;
        
        private UIVerticalScrollBar mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar mUIHorizontalScrollBar;
        
        private WinControl mUIAccountNavigatorContGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar : WinScrollBar
    {
        
        public UIVerticalScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar : WinScrollBar
    {
        
        public UIHorizontalScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAccountTreeViewWindow : WinWindow
    {
        
        public UIAccountTreeViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "accountTreeView";
            this.WindowTitles.Add("adSage for Performance");
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIAccountTreeViewMenuBar
        {
            get
            {
                if ((this.mUIAccountTreeViewMenuBar == null))
                {
                    this.mUIAccountTreeViewMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIAccountTreeViewMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIAccountTreeViewMenuBar;
            }
        }
        
        public WinTitleBar UIAccountTreeViewTitleBar
        {
            get
            {
                if ((this.mUIAccountTreeViewTitleBar == null))
                {
                    this.mUIAccountTreeViewTitleBar = new WinTitleBar(this);
                }
                return this.mUIAccountTreeViewTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIAccountTreeViewMenuBar1
        {
            get
            {
                if ((this.mUIAccountTreeViewMenuBar1 == null))
                {
                    this.mUIAccountTreeViewMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIAccountTreeViewMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIAccountTreeViewMenuBar1;
            }
        }
        
        public WinTree UIAccountTreeViewTree
        {
            get
            {
                if ((this.mUIAccountTreeViewTree == null))
                {
                    this.mUIAccountTreeViewTree = new WinTree(this);
                }
                return this.mUIAccountTreeViewTree;
            }
        }
        
        public WinTreeItem UINoAccountTreeItem
        {
            get
            {
                if ((this.mUINoAccountTreeItem == null))
                {
                    this.mUINoAccountTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUINoAccountTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "No Account";
                    this.mUINoAccountTreeItem.SearchProperties["Value"] = "0";
                    #endregion
                }
                return this.mUINoAccountTreeItem;
            }
        }
        
        public UIVerticalScrollBar1 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar1(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar1 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar1(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIAccountTreeViewGrip
        {
            get
            {
                if ((this.mUIAccountTreeViewGrip == null))
                {
                    this.mUIAccountTreeViewGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIAccountTreeViewGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIAccountTreeViewGrip;
            }
        }
        
        public UIYourAccounts1TreeItem UIYourAccounts1TreeItem
        {
            get
            {
                if ((this.mUIYourAccounts1TreeItem == null))
                {
                    this.mUIYourAccounts1TreeItem = new UIYourAccounts1TreeItem(this);
                }
                return this.mUIYourAccounts1TreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIAccountTreeViewMenuBar;
        
        private WinTitleBar mUIAccountTreeViewTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIAccountTreeViewMenuBar1;
        
        private WinTree mUIAccountTreeViewTree;
        
        private WinTreeItem mUINoAccountTreeItem;
        
        private UIVerticalScrollBar1 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar1 mUIHorizontalScrollBar;
        
        private WinControl mUIAccountTreeViewGrip;
        
        private UIYourAccounts1TreeItem mUIYourAccounts1TreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar1 : WinScrollBar
    {
        
        public UIVerticalScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar1 : WinScrollBar
    {
        
        public UIHorizontalScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIYourAccounts1TreeItem : WinTreeItem
    {
        
        public UIYourAccounts1TreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Your Accounts(1)";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("adSage for Performance");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIHaihadsagecom4684830TreeItem
        {
            get
            {
                if ((this.mUIHaihadsagecom4684830TreeItem == null))
                {
                    this.mUIHaihadsagecom4684830TreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIHaihadsagecom4684830TreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "haih@ad-sage.com #46848300(USD)";
                    this.mUIHaihadsagecom4684830TreeItem.SearchProperties["Value"] = "1";
                    this.mUIHaihadsagecom4684830TreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIHaihadsagecom4684830TreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIHaihadsagecom4684830TreeItem.WindowTitles.Add("adSage for Performance");
                    #endregion
                }
                return this.mUIHaihadsagecom4684830TreeItem;
            }
        }
        
        public WinTreeItem UIWss_adsagetest163comTreeItem
        {
            get
            {
                if ((this.mUIWss_adsagetest163comTreeItem == null))
                {
                    this.mUIWss_adsagetest163comTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIWss_adsagetest163comTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "wss_adsagetest@163.com(CNY)";
                    this.mUIWss_adsagetest163comTreeItem.SearchProperties["Value"] = "1";
                    this.mUIWss_adsagetest163comTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIWss_adsagetest163comTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIWss_adsagetest163comTreeItem.WindowTitles.Add("adSage for Performance");
                    #endregion
                }
                return this.mUIWss_adsagetest163comTreeItem;
            }
        }
        
        public WinTreeItem UIMicrosoftadlabsUSDTreeItem
        {
            get
            {
                if ((this.mUIMicrosoftadlabsUSDTreeItem == null))
                {
                    this.mUIMicrosoftadlabsUSDTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIMicrosoftadlabsUSDTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Microsoft adlabs(USD)";
                    this.mUIMicrosoftadlabsUSDTreeItem.SearchProperties["Value"] = "1";
                    this.mUIMicrosoftadlabsUSDTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIMicrosoftadlabsUSDTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIMicrosoftadlabsUSDTreeItem.WindowTitles.Add("adSage for Performance");
                    #endregion
                }
                return this.mUIMicrosoftadlabsUSDTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIHaihadsagecom4684830TreeItem;
        
        private WinTreeItem mUIWss_adsagetest163comTreeItem;
        
        private WinTreeItem mUIMicrosoftadlabsUSDTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPanel2Pane : WinPane
    {
        
        public UIPanel2Pane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinScrollBar UIScrollbarScrollBar
        {
            get
            {
                if ((this.mUIScrollbarScrollBar == null))
                {
                    this.mUIScrollbarScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIScrollbarScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "scroll bar";
                    #endregion
                }
                return this.mUIScrollbarScrollBar;
            }
        }
        #endregion
        
        #region Fields
        private WinScrollBar mUIScrollbarScrollBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIScrollbarScrollBar2 : WinScrollBar
    {
        
        public UIScrollbarScrollBar2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "scroll bar";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnLeftButton
        {
            get
            {
                if ((this.mUIColumnLeftButton == null))
                {
                    this.mUIColumnLeftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnLeftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column Left";
                    #endregion
                }
                return this.mUIColumnLeftButton;
            }
        }
        
        public WinButton UIPageLeftButton
        {
            get
            {
                if ((this.mUIPageLeftButton == null))
                {
                    this.mUIPageLeftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageLeftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Left";
                    #endregion
                }
                return this.mUIPageLeftButton;
            }
        }
        
        public WinButton UIPositionButton
        {
            get
            {
                if ((this.mUIPositionButton == null))
                {
                    this.mUIPositionButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPositionButton.SearchProperties[WinButton.PropertyNames.Name] = "Position";
                    #endregion
                }
                return this.mUIPositionButton;
            }
        }
        
        public WinButton UIPageRightButton
        {
            get
            {
                if ((this.mUIPageRightButton == null))
                {
                    this.mUIPageRightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageRightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Right";
                    #endregion
                }
                return this.mUIPageRightButton;
            }
        }
        
        public WinButton UIColumnRightButton
        {
            get
            {
                if ((this.mUIColumnRightButton == null))
                {
                    this.mUIColumnRightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnRightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column Right";
                    #endregion
                }
                return this.mUIColumnRightButton;
            }
        }
        
        public WinButton UILineUpButton
        {
            get
            {
                if ((this.mUILineUpButton == null))
                {
                    this.mUILineUpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineUpButton.SearchProperties[WinButton.PropertyNames.Name] = "Line Up";
                    #endregion
                }
                return this.mUILineUpButton;
            }
        }
        
        public WinButton UIPageUpButton
        {
            get
            {
                if ((this.mUIPageUpButton == null))
                {
                    this.mUIPageUpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageUpButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Up";
                    #endregion
                }
                return this.mUIPageUpButton;
            }
        }
        
        public WinButton UIPageDownButton
        {
            get
            {
                if ((this.mUIPageDownButton == null))
                {
                    this.mUIPageDownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageDownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Down";
                    #endregion
                }
                return this.mUIPageDownButton;
            }
        }
        
        public WinButton UILineDownButton
        {
            get
            {
                if ((this.mUILineDownButton == null))
                {
                    this.mUILineDownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineDownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line Down";
                    #endregion
                }
                return this.mUILineDownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnLeftButton;
        
        private WinButton mUIPageLeftButton;
        
        private WinButton mUIPositionButton;
        
        private WinButton mUIPageRightButton;
        
        private WinButton mUIColumnRightButton;
        
        private WinButton mUILineUpButton;
        
        private WinButton mUIPageUpButton;
        
        private WinButton mUIPageDownButton;
        
        private WinButton mUILineDownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPanel1Window : WinWindow
    {
        
        public UIPanel1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "panel1";
            #endregion
        }
        
        #region Properties
        public WinClient UIPanel1Client
        {
            get
            {
                if ((this.mUIPanel1Client == null))
                {
                    this.mUIPanel1Client = new WinClient(this);
                }
                return this.mUIPanel1Client;
            }
        }
        
        public WinWindow UIDxTabPageContainerCoWindow
        {
            get
            {
                if ((this.mUIDxTabPageContainerCoWindow == null))
                {
                    this.mUIDxTabPageContainerCoWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIDxTabPageContainerCoWindow.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "TabPageContainerControl";
                    this.mUIDxTabPageContainerCoWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIDxTabPageContainerCoWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIPanel1Client;
        
        private WinWindow mUIDxTabPageContainerCoWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDxTabPageContainerCoWindow : WinWindow
    {
        
        public UIDxTabPageContainerCoWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "dxTabPageContainerControl1";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIDxTabPageContainerCoMenuBar
        {
            get
            {
                if ((this.mUIDxTabPageContainerCoMenuBar == null))
                {
                    this.mUIDxTabPageContainerCoMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIDxTabPageContainerCoMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIDxTabPageContainerCoMenuBar;
            }
        }
        
        public WinTitleBar UIDxTabPageContainerCoTitleBar
        {
            get
            {
                if ((this.mUIDxTabPageContainerCoTitleBar == null))
                {
                    this.mUIDxTabPageContainerCoTitleBar = new WinTitleBar(this);
                }
                return this.mUIDxTabPageContainerCoTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIDxTabPageContainerCoMenuBar1
        {
            get
            {
                if ((this.mUIDxTabPageContainerCoMenuBar1 == null))
                {
                    this.mUIDxTabPageContainerCoMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIDxTabPageContainerCoMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIDxTabPageContainerCoMenuBar1;
            }
        }
        
        public WinClient UITabPageContainerContClient
        {
            get
            {
                if ((this.mUITabPageContainerContClient == null))
                {
                    this.mUITabPageContainerContClient = new WinClient(this);
                    #region Search Criteria
                    this.mUITabPageContainerContClient.SearchProperties[WinControl.PropertyNames.Name] = "TabPageContainerControl";
                    #endregion
                }
                return this.mUITabPageContainerContClient;
            }
        }
        
        public WinScrollBar UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIVerticalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public WinScrollBar UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIHorizontalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIDxTabPageContainerCoGrip
        {
            get
            {
                if ((this.mUIDxTabPageContainerCoGrip == null))
                {
                    this.mUIDxTabPageContainerCoGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIDxTabPageContainerCoGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIDxTabPageContainerCoGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIDxTabPageContainerCoMenuBar;
        
        private WinTitleBar mUIDxTabPageContainerCoTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIDxTabPageContainerCoMenuBar1;
        
        private WinClient mUITabPageContainerContClient;
        
        private WinScrollBar mUIVerticalScrollBar;
        
        private WinScrollBar mUIHorizontalScrollBar;
        
        private WinControl mUIDxTabPageContainerCoGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UITabPageContainerContClient : WinClient
    {
        
        public UITabPageContainerContClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "TabPageContainerControl";
            #endregion
        }
        
        #region Properties
        public WinWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIItemWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIItemWindow;
            }
        }
        
        public WinMenuBar UISystemMenuBar
        {
            get
            {
                if ((this.mUISystemMenuBar == null))
                {
                    this.mUISystemMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISystemMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUISystemMenuBar;
            }
        }
        
        public WinMenuBar UIApplicationMenuBar
        {
            get
            {
                if ((this.mUIApplicationMenuBar == null))
                {
                    this.mUIApplicationMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIApplicationMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIApplicationMenuBar;
            }
        }
        
        public WinTabList UIItemTabList
        {
            get
            {
                if ((this.mUIItemTabList == null))
                {
                    this.mUIItemTabList = new WinTabList(this);
                }
                return this.mUIItemTabList;
            }
        }
        
        public WinScrollBar UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIVerticalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public WinScrollBar UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIHorizontalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUIItemWindow;
        
        private WinMenuBar mUISystemMenuBar;
        
        private WinMenuBar mUIApplicationMenuBar;
        
        private WinTabList mUIItemTabList;
        
        private WinScrollBar mUIVerticalScrollBar;
        
        private WinScrollBar mUIHorizontalScrollBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "10";
            #endregion
        }
        
        #region Properties
        public UIItemTitleBar UIItemTitleBar
        {
            get
            {
                if ((this.mUIItemTitleBar == null))
                {
                    this.mUIItemTitleBar = new UIItemTitleBar(this);
                }
                return this.mUIItemTitleBar;
            }
        }
        
        public UIVerticalScrollBar2 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar2(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar2 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar2(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIItemGrip
        {
            get
            {
                if ((this.mUIItemGrip == null))
                {
                    this.mUIItemGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIItemGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIItemGrip;
            }
        }
        #endregion
        
        #region Fields
        private UIItemTitleBar mUIItemTitleBar;
        
        private UIVerticalScrollBar2 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar2 mUIHorizontalScrollBar;
        
        private WinControl mUIItemGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemTitleBar : WinTitleBar
    {
        
        public UIItemTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar2 : WinScrollBar
    {
        
        public UIVerticalScrollBar2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar2 : WinScrollBar
    {
        
        public UIHorizontalScrollBar2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemTabList : WinTabList
    {
        
        public UIItemTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("haih@ad-sage.com #46848300(USD) - adSage for Performance");
            #endregion
        }
        
        #region Properties
        public WinButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WinButton(this);
                }
                return this.mUIItemButton;
            }
        }
        
        public WinTabPage UIAllAccountsDashboardTabPage
        {
            get
            {
                if ((this.mUIAllAccountsDashboardTabPage == null))
                {
                    this.mUIAllAccountsDashboardTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUIAllAccountsDashboardTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "All Accounts Dashboard";
                    #endregion
                }
                return this.mUIAllAccountsDashboardTabPage;
            }
        }
        
        public WinTabPage UIAllAccountsDashboardTabPage1
        {
            get
            {
                if ((this.mUIAllAccountsDashboardTabPage1 == null))
                {
                    this.mUIAllAccountsDashboardTabPage1 = new WinTabPage(this);
                    #region Search Criteria
                    this.mUIAllAccountsDashboardTabPage1.SearchProperties[WinTabPage.PropertyNames.Name] = "All Accounts Dashboard";
                    this.mUIAllAccountsDashboardTabPage1.SearchProperties[WinTabPage.PropertyNames.Instance] = "2";
                    #endregion
                }
                return this.mUIAllAccountsDashboardTabPage1;
            }
        }
        
        public WinTabPage UICampaigns0TabPage
        {
            get
            {
                if ((this.mUICampaigns0TabPage == null))
                {
                    this.mUICampaigns0TabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUICampaigns0TabPage.SearchProperties.Add(new PropertyExpression(WinTabPage.PropertyNames.Name, "Campaigns(0)", PropertyExpressionOperator.Contains));
                    this.mUICampaigns0TabPage.WindowTitles.Add("haih@ad-sage.com #46848300(USD) - adSage for Performance");
                    #endregion
                }
                return this.mUICampaigns0TabPage;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItemButton;
        
        private WinTabPage mUIAllAccountsDashboardTabPage;
        
        private WinTabPage mUIAllAccountsDashboardTabPage1;
        
        private WinTabPage mUICampaigns0TabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDashboardReportContrWindow : WinWindow
    {
        
        public UIDashboardReportContrWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "DashboardReportControl";
            #endregion
        }
        
        #region Properties
        public WinClient UIDashboardReportContrClient
        {
            get
            {
                if ((this.mUIDashboardReportContrClient == null))
                {
                    this.mUIDashboardReportContrClient = new WinClient(this);
                }
                return this.mUIDashboardReportContrClient;
            }
        }
        
        public WinWindow UIReportDateSelectContWindow
        {
            get
            {
                if ((this.mUIReportDateSelectContWindow == null))
                {
                    this.mUIReportDateSelectContWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIReportDateSelectContWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIReportDateSelectContWindow.SearchProperties[WinWindow.PropertyNames.Instance] = "31";
                    #endregion
                }
                return this.mUIReportDateSelectContWindow;
            }
        }
        
        public WinWindow UITableLayoutPanel1Window
        {
            get
            {
                if ((this.mUITableLayoutPanel1Window == null))
                {
                    this.mUITableLayoutPanel1Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUITableLayoutPanel1Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUITableLayoutPanel1Window.SearchProperties[WinWindow.PropertyNames.Instance] = "10";
                    #endregion
                }
                return this.mUITableLayoutPanel1Window;
            }
        }
        
        public WinWindow UIPanel2Window
        {
            get
            {
                if ((this.mUIPanel2Window == null))
                {
                    this.mUIPanel2Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUIPanel2Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIPanel2Window.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    #endregion
                }
                return this.mUIPanel2Window;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIDashboardReportContrClient;
        
        private WinWindow mUIReportDateSelectContWindow;
        
        private WinWindow mUITableLayoutPanel1Window;
        
        private WinWindow mUIPanel2Window;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIReportDateSelectContWindow : WinWindow
    {
        
        public UIReportDateSelectContWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "reportDateSelectControl";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIReportDateSelectContMenuBar
        {
            get
            {
                if ((this.mUIReportDateSelectContMenuBar == null))
                {
                    this.mUIReportDateSelectContMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIReportDateSelectContMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIReportDateSelectContMenuBar;
            }
        }
        
        public WinTitleBar UIReportDateSelectContTitleBar
        {
            get
            {
                if ((this.mUIReportDateSelectContTitleBar == null))
                {
                    this.mUIReportDateSelectContTitleBar = new WinTitleBar(this);
                }
                return this.mUIReportDateSelectContTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIReportDateSelectContMenuBar1
        {
            get
            {
                if ((this.mUIReportDateSelectContMenuBar1 == null))
                {
                    this.mUIReportDateSelectContMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIReportDateSelectContMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIReportDateSelectContMenuBar1;
            }
        }
        
        public WinClient UIReportDateSelectContClient
        {
            get
            {
                if ((this.mUIReportDateSelectContClient == null))
                {
                    this.mUIReportDateSelectContClient = new WinClient(this);
                }
                return this.mUIReportDateSelectContClient;
            }
        }
        
        public WinWindow UIDateRange07142011072Window
        {
            get
            {
                if ((this.mUIDateRange07142011072Window == null))
                {
                    this.mUIDateRange07142011072Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUIDateRange07142011072Window.SearchProperties[WinWindow.PropertyNames.Name] = "Date Range: 07/14/2011 - 07/20/2011";
                    this.mUIDateRange07142011072Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIDateRange07142011072Window;
            }
        }
        
        public WinText UIDateRange07142011072Text
        {
            get
            {
                if ((this.mUIDateRange07142011072Text == null))
                {
                    this.mUIDateRange07142011072Text = new WinText(this);
                    #region Search Criteria
                    this.mUIDateRange07142011072Text.SearchProperties[WinText.PropertyNames.Name] = "Date Range: 07/14/2011 - 07/20/2011";
                    #endregion
                }
                return this.mUIDateRange07142011072Text;
            }
        }
        
        public WinWindow UILast7DaysWindow
        {
            get
            {
                if ((this.mUILast7DaysWindow == null))
                {
                    this.mUILast7DaysWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUILast7DaysWindow.SearchProperties[WinWindow.PropertyNames.Name] = "Last 7 Days";
                    this.mUILast7DaysWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.BUTTON", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUILast7DaysWindow;
            }
        }
        
        public WinWindow UILast30DaysWindow
        {
            get
            {
                if ((this.mUILast30DaysWindow == null))
                {
                    this.mUILast30DaysWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUILast30DaysWindow.SearchProperties[WinWindow.PropertyNames.Name] = "Last 30 Days";
                    this.mUILast30DaysWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.BUTTON", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUILast30DaysWindow;
            }
        }
        
        public UIVerticalScrollBar3 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar3(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar3 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar3(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIReportDateSelectContGrip
        {
            get
            {
                if ((this.mUIReportDateSelectContGrip == null))
                {
                    this.mUIReportDateSelectContGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIReportDateSelectContGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIReportDateSelectContGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIReportDateSelectContMenuBar;
        
        private WinTitleBar mUIReportDateSelectContTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIReportDateSelectContMenuBar1;
        
        private WinClient mUIReportDateSelectContClient;
        
        private WinWindow mUIDateRange07142011072Window;
        
        private WinText mUIDateRange07142011072Text;
        
        private WinWindow mUILast7DaysWindow;
        
        private WinWindow mUILast30DaysWindow;
        
        private UIVerticalScrollBar3 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar3 mUIHorizontalScrollBar;
        
        private WinControl mUIReportDateSelectContGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar3 : WinScrollBar
    {
        
        public UIVerticalScrollBar3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar3 : WinScrollBar
    {
        
        public UIHorizontalScrollBar3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDateRange07142011072Window : WinWindow
    {
        
        public UIDateRange07142011072Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "labelControl";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UILabelControlMenuBar
        {
            get
            {
                if ((this.mUILabelControlMenuBar == null))
                {
                    this.mUILabelControlMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabelControlMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUILabelControlMenuBar;
            }
        }
        
        public WinTitleBar UIDateRange07142011072TitleBar
        {
            get
            {
                if ((this.mUIDateRange07142011072TitleBar == null))
                {
                    this.mUIDateRange07142011072TitleBar = new WinTitleBar(this);
                }
                return this.mUIDateRange07142011072TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UILabelControlMenuBar1
        {
            get
            {
                if ((this.mUILabelControlMenuBar1 == null))
                {
                    this.mUILabelControlMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabelControlMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUILabelControlMenuBar1;
            }
        }
        
        public UIDateRange07142011072ScrollBar UIDateRange07142011072ScrollBar
        {
            get
            {
                if ((this.mUIDateRange07142011072ScrollBar == null))
                {
                    this.mUIDateRange07142011072ScrollBar = new UIDateRange07142011072ScrollBar(this);
                }
                return this.mUIDateRange07142011072ScrollBar;
            }
        }
        
        public UIDateRange07142011072ScrollBar1 UIDateRange07142011072ScrollBar1
        {
            get
            {
                if ((this.mUIDateRange07142011072ScrollBar1 == null))
                {
                    this.mUIDateRange07142011072ScrollBar1 = new UIDateRange07142011072ScrollBar1(this);
                }
                return this.mUIDateRange07142011072ScrollBar1;
            }
        }
        
        public WinControl UIDateRange07142011072Grip
        {
            get
            {
                if ((this.mUIDateRange07142011072Grip == null))
                {
                    this.mUIDateRange07142011072Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUIDateRange07142011072Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIDateRange07142011072Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUILabelControlMenuBar;
        
        private WinTitleBar mUIDateRange07142011072TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUILabelControlMenuBar1;
        
        private UIDateRange07142011072ScrollBar mUIDateRange07142011072ScrollBar;
        
        private UIDateRange07142011072ScrollBar1 mUIDateRange07142011072ScrollBar1;
        
        private WinControl mUIDateRange07142011072Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDateRange07142011072ScrollBar : WinScrollBar
    {
        
        public UIDateRange07142011072ScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDateRange07142011072ScrollBar1 : WinScrollBar
    {
        
        public UIDateRange07142011072ScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UILast7DaysWindow : WinWindow
    {
        
        public UILast7DaysWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "sageButton7Days";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UISageButton7DaysMenuBar
        {
            get
            {
                if ((this.mUISageButton7DaysMenuBar == null))
                {
                    this.mUISageButton7DaysMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISageButton7DaysMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUISageButton7DaysMenuBar;
            }
        }
        
        public WinTitleBar UILast7DaysTitleBar
        {
            get
            {
                if ((this.mUILast7DaysTitleBar == null))
                {
                    this.mUILast7DaysTitleBar = new WinTitleBar(this);
                }
                return this.mUILast7DaysTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UISageButton7DaysMenuBar1
        {
            get
            {
                if ((this.mUISageButton7DaysMenuBar1 == null))
                {
                    this.mUISageButton7DaysMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISageButton7DaysMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUISageButton7DaysMenuBar1;
            }
        }
        
        public WinButton UILast7DaysButton
        {
            get
            {
                if ((this.mUILast7DaysButton == null))
                {
                    this.mUILast7DaysButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILast7DaysButton.SearchProperties[WinButton.PropertyNames.Name] = "Last 7 Days";
                    #endregion
                }
                return this.mUILast7DaysButton;
            }
        }
        
        public UILast7DaysScrollBar UILast7DaysScrollBar
        {
            get
            {
                if ((this.mUILast7DaysScrollBar == null))
                {
                    this.mUILast7DaysScrollBar = new UILast7DaysScrollBar(this);
                }
                return this.mUILast7DaysScrollBar;
            }
        }
        
        public UILast7DaysScrollBar1 UILast7DaysScrollBar1
        {
            get
            {
                if ((this.mUILast7DaysScrollBar1 == null))
                {
                    this.mUILast7DaysScrollBar1 = new UILast7DaysScrollBar1(this);
                }
                return this.mUILast7DaysScrollBar1;
            }
        }
        
        public WinControl UILast7DaysGrip
        {
            get
            {
                if ((this.mUILast7DaysGrip == null))
                {
                    this.mUILast7DaysGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUILast7DaysGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUILast7DaysGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUISageButton7DaysMenuBar;
        
        private WinTitleBar mUILast7DaysTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUISageButton7DaysMenuBar1;
        
        private WinButton mUILast7DaysButton;
        
        private UILast7DaysScrollBar mUILast7DaysScrollBar;
        
        private UILast7DaysScrollBar1 mUILast7DaysScrollBar1;
        
        private WinControl mUILast7DaysGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UILast7DaysScrollBar : WinScrollBar
    {
        
        public UILast7DaysScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UILast7DaysScrollBar1 : WinScrollBar
    {
        
        public UILast7DaysScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UILast30DaysWindow : WinWindow
    {
        
        public UILast30DaysWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "sageButton30Days";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UISageButton30DaysMenuBar
        {
            get
            {
                if ((this.mUISageButton30DaysMenuBar == null))
                {
                    this.mUISageButton30DaysMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISageButton30DaysMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUISageButton30DaysMenuBar;
            }
        }
        
        public WinTitleBar UILast30DaysTitleBar
        {
            get
            {
                if ((this.mUILast30DaysTitleBar == null))
                {
                    this.mUILast30DaysTitleBar = new WinTitleBar(this);
                }
                return this.mUILast30DaysTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UISageButton30DaysMenuBar1
        {
            get
            {
                if ((this.mUISageButton30DaysMenuBar1 == null))
                {
                    this.mUISageButton30DaysMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISageButton30DaysMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUISageButton30DaysMenuBar1;
            }
        }
        
        public WinButton UILast30DaysButton
        {
            get
            {
                if ((this.mUILast30DaysButton == null))
                {
                    this.mUILast30DaysButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILast30DaysButton.SearchProperties[WinButton.PropertyNames.Name] = "Last 30 Days";
                    #endregion
                }
                return this.mUILast30DaysButton;
            }
        }
        
        public UILast30DaysScrollBar UILast30DaysScrollBar
        {
            get
            {
                if ((this.mUILast30DaysScrollBar == null))
                {
                    this.mUILast30DaysScrollBar = new UILast30DaysScrollBar(this);
                }
                return this.mUILast30DaysScrollBar;
            }
        }
        
        public UILast30DaysScrollBar1 UILast30DaysScrollBar1
        {
            get
            {
                if ((this.mUILast30DaysScrollBar1 == null))
                {
                    this.mUILast30DaysScrollBar1 = new UILast30DaysScrollBar1(this);
                }
                return this.mUILast30DaysScrollBar1;
            }
        }
        
        public WinControl UILast30DaysGrip
        {
            get
            {
                if ((this.mUILast30DaysGrip == null))
                {
                    this.mUILast30DaysGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUILast30DaysGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUILast30DaysGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUISageButton30DaysMenuBar;
        
        private WinTitleBar mUILast30DaysTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUISageButton30DaysMenuBar1;
        
        private WinButton mUILast30DaysButton;
        
        private UILast30DaysScrollBar mUILast30DaysScrollBar;
        
        private UILast30DaysScrollBar1 mUILast30DaysScrollBar1;
        
        private WinControl mUILast30DaysGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UILast30DaysScrollBar : WinScrollBar
    {
        
        public UILast30DaysScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UILast30DaysScrollBar1 : WinScrollBar
    {
        
        public UILast30DaysScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UITableLayoutPanel1Window : WinWindow
    {
        
        public UITableLayoutPanel1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "tableLayoutPanel1";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UITableLayoutPanel1MenuBar
        {
            get
            {
                if ((this.mUITableLayoutPanel1MenuBar == null))
                {
                    this.mUITableLayoutPanel1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUITableLayoutPanel1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUITableLayoutPanel1MenuBar;
            }
        }
        
        public WinTitleBar UITableLayoutPanel1TitleBar
        {
            get
            {
                if ((this.mUITableLayoutPanel1TitleBar == null))
                {
                    this.mUITableLayoutPanel1TitleBar = new WinTitleBar(this);
                }
                return this.mUITableLayoutPanel1TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UITableLayoutPanel1MenuBar1
        {
            get
            {
                if ((this.mUITableLayoutPanel1MenuBar1 == null))
                {
                    this.mUITableLayoutPanel1MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUITableLayoutPanel1MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUITableLayoutPanel1MenuBar1;
            }
        }
        
        public WinClient UITableLayoutPanel1Client
        {
            get
            {
                if ((this.mUITableLayoutPanel1Client == null))
                {
                    this.mUITableLayoutPanel1Client = new WinClient(this);
                }
                return this.mUITableLayoutPanel1Client;
            }
        }
        
        public WinWindow UIBasicIndicatorPieChaWindow
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaWindow == null))
                {
                    this.mUIBasicIndicatorPieChaWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIBasicIndicatorPieChaWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIBasicIndicatorPieChaWindow.SearchProperties[WinWindow.PropertyNames.Instance] = "16";
                    #endregion
                }
                return this.mUIBasicIndicatorPieChaWindow;
            }
        }
        
        public WinWindow UIBasicIndicatorPieChaWindow1
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaWindow1 == null))
                {
                    this.mUIBasicIndicatorPieChaWindow1 = new WinWindow(this);
                    #region Search Criteria
                    this.mUIBasicIndicatorPieChaWindow1.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIBasicIndicatorPieChaWindow1.SearchProperties[WinWindow.PropertyNames.Instance] = "11";
                    #endregion
                }
                return this.mUIBasicIndicatorPieChaWindow1;
            }
        }
        
        public WinWindow UIBasicIndicatorPieChaWindow2
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaWindow2 == null))
                {
                    this.mUIBasicIndicatorPieChaWindow2 = new WinWindow(this);
                    #region Search Criteria
                    this.mUIBasicIndicatorPieChaWindow2.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIBasicIndicatorPieChaWindow2.SearchProperties[WinWindow.PropertyNames.Instance] = "6";
                    #endregion
                }
                return this.mUIBasicIndicatorPieChaWindow2;
            }
        }
        
        public WinWindow UIBasicIndicatorPieChaWindow3
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaWindow3 == null))
                {
                    this.mUIBasicIndicatorPieChaWindow3 = new WinWindow(this);
                    #region Search Criteria
                    this.mUIBasicIndicatorPieChaWindow3.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIBasicIndicatorPieChaWindow3.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    #endregion
                }
                return this.mUIBasicIndicatorPieChaWindow3;
            }
        }
        
        public UIVerticalScrollBar4 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar4(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar4 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar4(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UITableLayoutPanel1Grip
        {
            get
            {
                if ((this.mUITableLayoutPanel1Grip == null))
                {
                    this.mUITableLayoutPanel1Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUITableLayoutPanel1Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUITableLayoutPanel1Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUITableLayoutPanel1MenuBar;
        
        private WinTitleBar mUITableLayoutPanel1TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUITableLayoutPanel1MenuBar1;
        
        private WinClient mUITableLayoutPanel1Client;
        
        private WinWindow mUIBasicIndicatorPieChaWindow;
        
        private WinWindow mUIBasicIndicatorPieChaWindow1;
        
        private WinWindow mUIBasicIndicatorPieChaWindow2;
        
        private WinWindow mUIBasicIndicatorPieChaWindow3;
        
        private UIVerticalScrollBar4 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar4 mUIHorizontalScrollBar;
        
        private WinControl mUITableLayoutPanel1Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar4 : WinScrollBar
    {
        
        public UIVerticalScrollBar4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar4 : WinScrollBar
    {
        
        public UIHorizontalScrollBar4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIBasicIndicatorPieChaWindow : WinWindow
    {
        
        public UIBasicIndicatorPieChaWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "basicIndicatorPieChartControl1";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIBasicIndicatorPieChaMenuBar
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaMenuBar == null))
                {
                    this.mUIBasicIndicatorPieChaMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIBasicIndicatorPieChaMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIBasicIndicatorPieChaMenuBar;
            }
        }
        
        public WinTitleBar UIBasicIndicatorPieChaTitleBar
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaTitleBar == null))
                {
                    this.mUIBasicIndicatorPieChaTitleBar = new WinTitleBar(this);
                }
                return this.mUIBasicIndicatorPieChaTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIBasicIndicatorPieChaMenuBar1
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaMenuBar1 == null))
                {
                    this.mUIBasicIndicatorPieChaMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIBasicIndicatorPieChaMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIBasicIndicatorPieChaMenuBar1;
            }
        }
        
        public WinClient UIBasicIndicatorPieChaClient
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaClient == null))
                {
                    this.mUIBasicIndicatorPieChaClient = new WinClient(this);
                }
                return this.mUIBasicIndicatorPieChaClient;
            }
        }
        
        public WinWindow UILabel1Window
        {
            get
            {
                if ((this.mUILabel1Window == null))
                {
                    this.mUILabel1Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUILabel1Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUILabel1Window;
            }
        }
        
        public WinWindow UIPanel1Window
        {
            get
            {
                if ((this.mUIPanel1Window == null))
                {
                    this.mUIPanel1Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUIPanel1Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIPanel1Window.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
                    #endregion
                }
                return this.mUIPanel1Window;
            }
        }
        
        public WinWindow UILegendGridControlWindow
        {
            get
            {
                if ((this.mUILegendGridControlWindow == null))
                {
                    this.mUILegendGridControlWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUILegendGridControlWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUILegendGridControlWindow.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
                    #endregion
                }
                return this.mUILegendGridControlWindow;
            }
        }
        
        public WinWindow UIPieChartWindow
        {
            get
            {
                if ((this.mUIPieChartWindow == null))
                {
                    this.mUIPieChartWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIPieChartWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIPieChartWindow.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    #endregion
                }
                return this.mUIPieChartWindow;
            }
        }
        
        public UIVerticalScrollBar5 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar5(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar5 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar5(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIBasicIndicatorPieChaGrip
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaGrip == null))
                {
                    this.mUIBasicIndicatorPieChaGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIBasicIndicatorPieChaGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIBasicIndicatorPieChaGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIBasicIndicatorPieChaMenuBar;
        
        private WinTitleBar mUIBasicIndicatorPieChaTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIBasicIndicatorPieChaMenuBar1;
        
        private WinClient mUIBasicIndicatorPieChaClient;
        
        private WinWindow mUILabel1Window;
        
        private WinWindow mUIPanel1Window;
        
        private WinWindow mUILegendGridControlWindow;
        
        private WinWindow mUIPieChartWindow;
        
        private UIVerticalScrollBar5 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar5 mUIHorizontalScrollBar;
        
        private WinControl mUIBasicIndicatorPieChaGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar5 : WinScrollBar
    {
        
        public UIVerticalScrollBar5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar5 : WinScrollBar
    {
        
        public UIHorizontalScrollBar5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UILabel1Window : WinWindow
    {
        
        public UILabel1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "label1";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "5";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UILabel1MenuBar
        {
            get
            {
                if ((this.mUILabel1MenuBar == null))
                {
                    this.mUILabel1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabel1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUILabel1MenuBar;
            }
        }
        
        public WinTitleBar UILabel1TitleBar
        {
            get
            {
                if ((this.mUILabel1TitleBar == null))
                {
                    this.mUILabel1TitleBar = new WinTitleBar(this);
                }
                return this.mUILabel1TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UILabel1MenuBar1
        {
            get
            {
                if ((this.mUILabel1MenuBar1 == null))
                {
                    this.mUILabel1MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabel1MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUILabel1MenuBar1;
            }
        }
        
        public WinText UILabel1Text
        {
            get
            {
                if ((this.mUILabel1Text == null))
                {
                    this.mUILabel1Text = new WinText(this);
                }
                return this.mUILabel1Text;
            }
        }
        
        public UIVerticalScrollBar6 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar6(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar6 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar6(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UILabel1Grip
        {
            get
            {
                if ((this.mUILabel1Grip == null))
                {
                    this.mUILabel1Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUILabel1Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUILabel1Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUILabel1MenuBar;
        
        private WinTitleBar mUILabel1TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUILabel1MenuBar1;
        
        private WinText mUILabel1Text;
        
        private UIVerticalScrollBar6 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar6 mUIHorizontalScrollBar;
        
        private WinControl mUILabel1Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar6 : WinScrollBar
    {
        
        public UIVerticalScrollBar6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar6 : WinScrollBar
    {
        
        public UIHorizontalScrollBar6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPanel1Window1 : WinWindow
    {
        
        public UIPanel1Window1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "panel1";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "6";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIPanel1MenuBar
        {
            get
            {
                if ((this.mUIPanel1MenuBar == null))
                {
                    this.mUIPanel1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanel1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIPanel1MenuBar;
            }
        }
        
        public WinTitleBar UIPanel1TitleBar
        {
            get
            {
                if ((this.mUIPanel1TitleBar == null))
                {
                    this.mUIPanel1TitleBar = new WinTitleBar(this);
                }
                return this.mUIPanel1TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIPanel1MenuBar1
        {
            get
            {
                if ((this.mUIPanel1MenuBar1 == null))
                {
                    this.mUIPanel1MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanel1MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIPanel1MenuBar1;
            }
        }
        
        public WinClient UIPanel1Client
        {
            get
            {
                if ((this.mUIPanel1Client == null))
                {
                    this.mUIPanel1Client = new WinClient(this);
                }
                return this.mUIPanel1Client;
            }
        }
        
        public WinWindow UIImpressionsWindow
        {
            get
            {
                if ((this.mUIImpressionsWindow == null))
                {
                    this.mUIImpressionsWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIImpressionsWindow.SearchProperties[WinWindow.PropertyNames.Name] = "Impressions";
                    this.mUIImpressionsWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIImpressionsWindow;
            }
        }
        
        public WinText UIImpressionsText
        {
            get
            {
                if ((this.mUIImpressionsText == null))
                {
                    this.mUIImpressionsText = new WinText(this);
                    #region Search Criteria
                    this.mUIImpressionsText.SearchProperties[WinText.PropertyNames.Name] = "Impressions";
                    #endregion
                }
                return this.mUIImpressionsText;
            }
        }
        
        public UIVerticalScrollBar7 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar7(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar7 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar7(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIPanel1Grip
        {
            get
            {
                if ((this.mUIPanel1Grip == null))
                {
                    this.mUIPanel1Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUIPanel1Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIPanel1Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIPanel1MenuBar;
        
        private WinTitleBar mUIPanel1TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIPanel1MenuBar1;
        
        private WinClient mUIPanel1Client;
        
        private WinWindow mUIImpressionsWindow;
        
        private WinText mUIImpressionsText;
        
        private UIVerticalScrollBar7 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar7 mUIHorizontalScrollBar;
        
        private WinControl mUIPanel1Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar7 : WinScrollBar
    {
        
        public UIVerticalScrollBar7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar7 : WinScrollBar
    {
        
        public UIHorizontalScrollBar7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIImpressionsWindow : WinWindow
    {
        
        public UIImpressionsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "nameLabelControl";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "4";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UINameLabelControlMenuBar
        {
            get
            {
                if ((this.mUINameLabelControlMenuBar == null))
                {
                    this.mUINameLabelControlMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUINameLabelControlMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUINameLabelControlMenuBar;
            }
        }
        
        public WinTitleBar UIImpressionsTitleBar
        {
            get
            {
                if ((this.mUIImpressionsTitleBar == null))
                {
                    this.mUIImpressionsTitleBar = new WinTitleBar(this);
                }
                return this.mUIImpressionsTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UINameLabelControlMenuBar1
        {
            get
            {
                if ((this.mUINameLabelControlMenuBar1 == null))
                {
                    this.mUINameLabelControlMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUINameLabelControlMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUINameLabelControlMenuBar1;
            }
        }
        
        public UIImpressionsScrollBar UIImpressionsScrollBar
        {
            get
            {
                if ((this.mUIImpressionsScrollBar == null))
                {
                    this.mUIImpressionsScrollBar = new UIImpressionsScrollBar(this);
                }
                return this.mUIImpressionsScrollBar;
            }
        }
        
        public UIImpressionsScrollBar1 UIImpressionsScrollBar1
        {
            get
            {
                if ((this.mUIImpressionsScrollBar1 == null))
                {
                    this.mUIImpressionsScrollBar1 = new UIImpressionsScrollBar1(this);
                }
                return this.mUIImpressionsScrollBar1;
            }
        }
        
        public WinControl UIImpressionsGrip
        {
            get
            {
                if ((this.mUIImpressionsGrip == null))
                {
                    this.mUIImpressionsGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIImpressionsGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIImpressionsGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUINameLabelControlMenuBar;
        
        private WinTitleBar mUIImpressionsTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUINameLabelControlMenuBar1;
        
        private UIImpressionsScrollBar mUIImpressionsScrollBar;
        
        private UIImpressionsScrollBar1 mUIImpressionsScrollBar1;
        
        private WinControl mUIImpressionsGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIImpressionsScrollBar : WinScrollBar
    {
        
        public UIImpressionsScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIImpressionsScrollBar1 : WinScrollBar
    {
        
        public UIImpressionsScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UILegendGridControlWindow : WinWindow
    {
        
        public UILegendGridControlWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "legendGridControl";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "4";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UILegendGridControlMenuBar
        {
            get
            {
                if ((this.mUILegendGridControlMenuBar == null))
                {
                    this.mUILegendGridControlMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILegendGridControlMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUILegendGridControlMenuBar;
            }
        }
        
        public WinTitleBar UILegendGridControlTitleBar
        {
            get
            {
                if ((this.mUILegendGridControlTitleBar == null))
                {
                    this.mUILegendGridControlTitleBar = new WinTitleBar(this);
                }
                return this.mUILegendGridControlTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UILegendGridControlMenuBar1
        {
            get
            {
                if ((this.mUILegendGridControlMenuBar1 == null))
                {
                    this.mUILegendGridControlMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILegendGridControlMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUILegendGridControlMenuBar1;
            }
        }
        
        public UILegendGridControlTable UILegendGridControlTable
        {
            get
            {
                if ((this.mUILegendGridControlTable == null))
                {
                    this.mUILegendGridControlTable = new UILegendGridControlTable(this);
                }
                return this.mUILegendGridControlTable;
            }
        }
        
        public WinClient UIHeaderPanelClient
        {
            get
            {
                if ((this.mUIHeaderPanelClient == null))
                {
                    this.mUIHeaderPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIHeaderPanelClient.SearchProperties[WinControl.PropertyNames.Name] = "Header Panel";
                    #endregion
                }
                return this.mUIHeaderPanelClient;
            }
        }
        
        public WinClient UIDataPanelClient
        {
            get
            {
                if ((this.mUIDataPanelClient == null))
                {
                    this.mUIDataPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIDataPanelClient.SearchProperties[WinControl.PropertyNames.Name] = "Data Panel";
                    #endregion
                }
                return this.mUIDataPanelClient;
            }
        }
        
        public UIRow1Row UIRow1Row
        {
            get
            {
                if ((this.mUIRow1Row == null))
                {
                    this.mUIRow1Row = new UIRow1Row(this);
                }
                return this.mUIRow1Row;
            }
        }
        
        public UIRow2Row UIRow2Row
        {
            get
            {
                if ((this.mUIRow2Row == null))
                {
                    this.mUIRow2Row = new UIRow2Row(this);
                }
                return this.mUIRow2Row;
            }
        }
        
        public UIRow3Row UIRow3Row
        {
            get
            {
                if ((this.mUIRow3Row == null))
                {
                    this.mUIRow3Row = new UIRow3Row(this);
                }
                return this.mUIRow3Row;
            }
        }
        
        public UIVerticalScrollBar8 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar8(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar8 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar8(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UILegendGridControlGrip
        {
            get
            {
                if ((this.mUILegendGridControlGrip == null))
                {
                    this.mUILegendGridControlGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUILegendGridControlGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUILegendGridControlGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUILegendGridControlMenuBar;
        
        private WinTitleBar mUILegendGridControlTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUILegendGridControlMenuBar1;
        
        private UILegendGridControlTable mUILegendGridControlTable;
        
        private WinClient mUIHeaderPanelClient;
        
        private WinClient mUIDataPanelClient;
        
        private UIRow1Row mUIRow1Row;
        
        private UIRow2Row mUIRow2Row;
        
        private UIRow3Row mUIRow3Row;
        
        private UIVerticalScrollBar8 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar8 mUIHorizontalScrollBar;
        
        private WinControl mUILegendGridControlGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UILegendGridControlTable : WinTable
    {
        
        public UILegendGridControlTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public UIHeaderPanelClient UIHeaderPanelClient
        {
            get
            {
                if ((this.mUIHeaderPanelClient == null))
                {
                    this.mUIHeaderPanelClient = new UIHeaderPanelClient(this);
                }
                return this.mUIHeaderPanelClient;
            }
        }
        
        public UIDataPanelClient UIDataPanelClient
        {
            get
            {
                if ((this.mUIDataPanelClient == null))
                {
                    this.mUIDataPanelClient = new UIDataPanelClient(this);
                }
                return this.mUIDataPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UIHeaderPanelClient mUIHeaderPanelClient;
        
        private UIDataPanelClient mUIDataPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHeaderPanelClient : WinClient
    {
        
        public UIHeaderPanelClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinRowHeader UIItemRowHeader
        {
            get
            {
                if ((this.mUIItemRowHeader == null))
                {
                    this.mUIItemRowHeader = new WinRowHeader(this);
                }
                return this.mUIItemRowHeader;
            }
        }
        
        public WinRowHeader UIItemRowHeader1
        {
            get
            {
                if ((this.mUIItemRowHeader1 == null))
                {
                    this.mUIItemRowHeader1 = new WinRowHeader(this);
                }
                return this.mUIItemRowHeader1;
            }
        }
        
        public WinRowHeader UIItemRowHeader2
        {
            get
            {
                if ((this.mUIItemRowHeader2 == null))
                {
                    this.mUIItemRowHeader2 = new WinRowHeader(this);
                }
                return this.mUIItemRowHeader2;
            }
        }
        
        public WinRowHeader UIItemRowHeader3
        {
            get
            {
                if ((this.mUIItemRowHeader3 == null))
                {
                    this.mUIItemRowHeader3 = new WinRowHeader(this);
                }
                return this.mUIItemRowHeader3;
            }
        }
        #endregion
        
        #region Fields
        private WinRowHeader mUIItemRowHeader;
        
        private WinRowHeader mUIItemRowHeader1;
        
        private WinRowHeader mUIItemRowHeader2;
        
        private WinRowHeader mUIItemRowHeader3;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDataPanelClient : WinClient
    {
        
        public UIDataPanelClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Data Panel";
            #endregion
        }
        
        #region Properties
        public WinRow UIRow1Row
        {
            get
            {
                if ((this.mUIRow1Row == null))
                {
                    this.mUIRow1Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow1Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 1";
                    this.mUIRow1Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow1Row;
            }
        }
        
        public WinRow UIRow2Row
        {
            get
            {
                if ((this.mUIRow2Row == null))
                {
                    this.mUIRow2Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow2Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 2";
                    this.mUIRow2Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow2Row;
            }
        }
        
        public WinRow UIRow3Row
        {
            get
            {
                if ((this.mUIRow3Row == null))
                {
                    this.mUIRow3Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow3Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 3";
                    this.mUIRow3Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow3Row;
            }
        }
        #endregion
        
        #region Fields
        private WinRow mUIRow1Row;
        
        private WinRow mUIRow2Row;
        
        private WinRow mUIRow3Row;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow1Row : WinRow
    {
        
        public UIRow1Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Name] = "Row 1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIColorrow0Cell
        {
            get
            {
                if ((this.mUIColorrow0Cell == null))
                {
                    this.mUIColorrow0Cell = new WinCell(this);
                }
                return this.mUIColorrow0Cell;
            }
        }
        
        public WinCell UIFacebookCell
        {
            get
            {
                if ((this.mUIFacebookCell == null))
                {
                    this.mUIFacebookCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFacebookCell.SearchProperties[WinCell.PropertyNames.Value] = "Facebook";
                    #endregion
                }
                return this.mUIFacebookCell;
            }
        }
        
        public WinCell UIItem0Cell
        {
            get
            {
                if ((this.mUIItem0Cell == null))
                {
                    this.mUIItem0Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell.SearchProperties[WinCell.PropertyNames.Value] = "0";
                    #endregion
                }
                return this.mUIItem0Cell;
            }
        }
        
        public WinCell UIItem000Cell
        {
            get
            {
                if ((this.mUIItem000Cell == null))
                {
                    this.mUIItem000Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem000Cell.SearchProperties[WinCell.PropertyNames.Value] = "0.00 %";
                    #endregion
                }
                return this.mUIItem000Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIColorrow0Cell;
        
        private WinCell mUIFacebookCell;
        
        private WinCell mUIItem0Cell;
        
        private WinCell mUIItem000Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow2Row : WinRow
    {
        
        public UIRow2Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Name] = "Row 2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIColorrow1Cell
        {
            get
            {
                if ((this.mUIColorrow1Cell == null))
                {
                    this.mUIColorrow1Cell = new WinCell(this);
                }
                return this.mUIColorrow1Cell;
            }
        }
        
        public WinCell UIAdCenterCell
        {
            get
            {
                if ((this.mUIAdCenterCell == null))
                {
                    this.mUIAdCenterCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAdCenterCell.SearchProperties[WinCell.PropertyNames.Value] = "AdCenter";
                    #endregion
                }
                return this.mUIAdCenterCell;
            }
        }
        
        public WinCell UIItem0Cell
        {
            get
            {
                if ((this.mUIItem0Cell == null))
                {
                    this.mUIItem0Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell.SearchProperties[WinCell.PropertyNames.Value] = "0";
                    #endregion
                }
                return this.mUIItem0Cell;
            }
        }
        
        public WinCell UIItem000Cell
        {
            get
            {
                if ((this.mUIItem000Cell == null))
                {
                    this.mUIItem000Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem000Cell.SearchProperties[WinCell.PropertyNames.Value] = "0.00 %";
                    #endregion
                }
                return this.mUIItem000Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIColorrow1Cell;
        
        private WinCell mUIAdCenterCell;
        
        private WinCell mUIItem0Cell;
        
        private WinCell mUIItem000Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow3Row : WinRow
    {
        
        public UIRow3Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Name] = "Row 3";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIColorrow2Cell
        {
            get
            {
                if ((this.mUIColorrow2Cell == null))
                {
                    this.mUIColorrow2Cell = new WinCell(this);
                }
                return this.mUIColorrow2Cell;
            }
        }
        
        public WinCell UIGoogleCell
        {
            get
            {
                if ((this.mUIGoogleCell == null))
                {
                    this.mUIGoogleCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIGoogleCell.SearchProperties[WinCell.PropertyNames.Value] = "Google";
                    #endregion
                }
                return this.mUIGoogleCell;
            }
        }
        
        public WinCell UIItem0Cell
        {
            get
            {
                if ((this.mUIItem0Cell == null))
                {
                    this.mUIItem0Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell.SearchProperties[WinCell.PropertyNames.Value] = "0";
                    #endregion
                }
                return this.mUIItem0Cell;
            }
        }
        
        public WinCell UIItem000Cell
        {
            get
            {
                if ((this.mUIItem000Cell == null))
                {
                    this.mUIItem000Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem000Cell.SearchProperties[WinCell.PropertyNames.Value] = "0.00 %";
                    #endregion
                }
                return this.mUIItem000Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIColorrow2Cell;
        
        private WinCell mUIGoogleCell;
        
        private WinCell mUIItem0Cell;
        
        private WinCell mUIItem000Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar8 : WinScrollBar
    {
        
        public UIVerticalScrollBar8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar8 : WinScrollBar
    {
        
        public UIHorizontalScrollBar8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPieChartWindow : WinWindow
    {
        
        public UIPieChartWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "pieChart";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "4";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIPieChartMenuBar
        {
            get
            {
                if ((this.mUIPieChartMenuBar == null))
                {
                    this.mUIPieChartMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPieChartMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIPieChartMenuBar;
            }
        }
        
        public WinTitleBar UIPieChartTitleBar
        {
            get
            {
                if ((this.mUIPieChartTitleBar == null))
                {
                    this.mUIPieChartTitleBar = new WinTitleBar(this);
                }
                return this.mUIPieChartTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIPieChartMenuBar1
        {
            get
            {
                if ((this.mUIPieChartMenuBar1 == null))
                {
                    this.mUIPieChartMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPieChartMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIPieChartMenuBar1;
            }
        }
        
        public WinClient UIPieChartClient
        {
            get
            {
                if ((this.mUIPieChartClient == null))
                {
                    this.mUIPieChartClient = new WinClient(this);
                }
                return this.mUIPieChartClient;
            }
        }
        
        public UIVerticalScrollBar9 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar9(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar9 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar9(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIPieChartGrip
        {
            get
            {
                if ((this.mUIPieChartGrip == null))
                {
                    this.mUIPieChartGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIPieChartGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIPieChartGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIPieChartMenuBar;
        
        private WinTitleBar mUIPieChartTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIPieChartMenuBar1;
        
        private WinClient mUIPieChartClient;
        
        private UIVerticalScrollBar9 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar9 mUIHorizontalScrollBar;
        
        private WinControl mUIPieChartGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar9 : WinScrollBar
    {
        
        public UIVerticalScrollBar9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar9 : WinScrollBar
    {
        
        public UIHorizontalScrollBar9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIBasicIndicatorPieChaWindow1 : WinWindow
    {
        
        public UIBasicIndicatorPieChaWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "basicIndicatorPieChartControl2";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIBasicIndicatorPieChaMenuBar
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaMenuBar == null))
                {
                    this.mUIBasicIndicatorPieChaMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIBasicIndicatorPieChaMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIBasicIndicatorPieChaMenuBar;
            }
        }
        
        public WinTitleBar UIBasicIndicatorPieChaTitleBar
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaTitleBar == null))
                {
                    this.mUIBasicIndicatorPieChaTitleBar = new WinTitleBar(this);
                }
                return this.mUIBasicIndicatorPieChaTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIBasicIndicatorPieChaMenuBar1
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaMenuBar1 == null))
                {
                    this.mUIBasicIndicatorPieChaMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIBasicIndicatorPieChaMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIBasicIndicatorPieChaMenuBar1;
            }
        }
        
        public WinClient UIBasicIndicatorPieChaClient
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaClient == null))
                {
                    this.mUIBasicIndicatorPieChaClient = new WinClient(this);
                }
                return this.mUIBasicIndicatorPieChaClient;
            }
        }
        
        public WinWindow UILabel1Window
        {
            get
            {
                if ((this.mUILabel1Window == null))
                {
                    this.mUILabel1Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUILabel1Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUILabel1Window;
            }
        }
        
        public WinWindow UIPanel1Window
        {
            get
            {
                if ((this.mUIPanel1Window == null))
                {
                    this.mUIPanel1Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUIPanel1Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIPanel1Window.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
                    #endregion
                }
                return this.mUIPanel1Window;
            }
        }
        
        public WinWindow UILegendGridControlWindow
        {
            get
            {
                if ((this.mUILegendGridControlWindow == null))
                {
                    this.mUILegendGridControlWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUILegendGridControlWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUILegendGridControlWindow.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
                    #endregion
                }
                return this.mUILegendGridControlWindow;
            }
        }
        
        public WinWindow UIPieChartWindow
        {
            get
            {
                if ((this.mUIPieChartWindow == null))
                {
                    this.mUIPieChartWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIPieChartWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIPieChartWindow.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    #endregion
                }
                return this.mUIPieChartWindow;
            }
        }
        
        public UIVerticalScrollBar10 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar10(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar10 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar10(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIBasicIndicatorPieChaGrip
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaGrip == null))
                {
                    this.mUIBasicIndicatorPieChaGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIBasicIndicatorPieChaGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIBasicIndicatorPieChaGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIBasicIndicatorPieChaMenuBar;
        
        private WinTitleBar mUIBasicIndicatorPieChaTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIBasicIndicatorPieChaMenuBar1;
        
        private WinClient mUIBasicIndicatorPieChaClient;
        
        private WinWindow mUILabel1Window;
        
        private WinWindow mUIPanel1Window;
        
        private WinWindow mUILegendGridControlWindow;
        
        private WinWindow mUIPieChartWindow;
        
        private UIVerticalScrollBar10 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar10 mUIHorizontalScrollBar;
        
        private WinControl mUIBasicIndicatorPieChaGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar10 : WinScrollBar
    {
        
        public UIVerticalScrollBar10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar10 : WinScrollBar
    {
        
        public UIHorizontalScrollBar10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UILabel1Window1 : WinWindow
    {
        
        public UILabel1Window1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "label1";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "4";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UILabel1MenuBar
        {
            get
            {
                if ((this.mUILabel1MenuBar == null))
                {
                    this.mUILabel1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabel1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUILabel1MenuBar;
            }
        }
        
        public WinTitleBar UILabel1TitleBar
        {
            get
            {
                if ((this.mUILabel1TitleBar == null))
                {
                    this.mUILabel1TitleBar = new WinTitleBar(this);
                }
                return this.mUILabel1TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UILabel1MenuBar1
        {
            get
            {
                if ((this.mUILabel1MenuBar1 == null))
                {
                    this.mUILabel1MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabel1MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUILabel1MenuBar1;
            }
        }
        
        public WinText UILabel1Text
        {
            get
            {
                if ((this.mUILabel1Text == null))
                {
                    this.mUILabel1Text = new WinText(this);
                }
                return this.mUILabel1Text;
            }
        }
        
        public UIVerticalScrollBar11 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar11(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar11 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar11(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UILabel1Grip
        {
            get
            {
                if ((this.mUILabel1Grip == null))
                {
                    this.mUILabel1Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUILabel1Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUILabel1Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUILabel1MenuBar;
        
        private WinTitleBar mUILabel1TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUILabel1MenuBar1;
        
        private WinText mUILabel1Text;
        
        private UIVerticalScrollBar11 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar11 mUIHorizontalScrollBar;
        
        private WinControl mUILabel1Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar11 : WinScrollBar
    {
        
        public UIVerticalScrollBar11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar11 : WinScrollBar
    {
        
        public UIHorizontalScrollBar11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPanel1Window2 : WinWindow
    {
        
        public UIPanel1Window2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "panel1";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "5";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIPanel1MenuBar
        {
            get
            {
                if ((this.mUIPanel1MenuBar == null))
                {
                    this.mUIPanel1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanel1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIPanel1MenuBar;
            }
        }
        
        public WinTitleBar UIPanel1TitleBar
        {
            get
            {
                if ((this.mUIPanel1TitleBar == null))
                {
                    this.mUIPanel1TitleBar = new WinTitleBar(this);
                }
                return this.mUIPanel1TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIPanel1MenuBar1
        {
            get
            {
                if ((this.mUIPanel1MenuBar1 == null))
                {
                    this.mUIPanel1MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanel1MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIPanel1MenuBar1;
            }
        }
        
        public WinClient UIPanel1Client
        {
            get
            {
                if ((this.mUIPanel1Client == null))
                {
                    this.mUIPanel1Client = new WinClient(this);
                }
                return this.mUIPanel1Client;
            }
        }
        
        public WinWindow UIClicksWindow
        {
            get
            {
                if ((this.mUIClicksWindow == null))
                {
                    this.mUIClicksWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIClicksWindow.SearchProperties[WinWindow.PropertyNames.Name] = "Clicks";
                    this.mUIClicksWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIClicksWindow;
            }
        }
        
        public WinText UIClicksText
        {
            get
            {
                if ((this.mUIClicksText == null))
                {
                    this.mUIClicksText = new WinText(this);
                    #region Search Criteria
                    this.mUIClicksText.SearchProperties[WinText.PropertyNames.Name] = "Clicks";
                    #endregion
                }
                return this.mUIClicksText;
            }
        }
        
        public UIVerticalScrollBar12 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar12(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar12 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar12(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIPanel1Grip
        {
            get
            {
                if ((this.mUIPanel1Grip == null))
                {
                    this.mUIPanel1Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUIPanel1Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIPanel1Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIPanel1MenuBar;
        
        private WinTitleBar mUIPanel1TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIPanel1MenuBar1;
        
        private WinClient mUIPanel1Client;
        
        private WinWindow mUIClicksWindow;
        
        private WinText mUIClicksText;
        
        private UIVerticalScrollBar12 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar12 mUIHorizontalScrollBar;
        
        private WinControl mUIPanel1Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar12 : WinScrollBar
    {
        
        public UIVerticalScrollBar12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar12 : WinScrollBar
    {
        
        public UIHorizontalScrollBar12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIClicksWindow : WinWindow
    {
        
        public UIClicksWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "nameLabelControl";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UINameLabelControlMenuBar
        {
            get
            {
                if ((this.mUINameLabelControlMenuBar == null))
                {
                    this.mUINameLabelControlMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUINameLabelControlMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUINameLabelControlMenuBar;
            }
        }
        
        public WinTitleBar UIClicksTitleBar
        {
            get
            {
                if ((this.mUIClicksTitleBar == null))
                {
                    this.mUIClicksTitleBar = new WinTitleBar(this);
                }
                return this.mUIClicksTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UINameLabelControlMenuBar1
        {
            get
            {
                if ((this.mUINameLabelControlMenuBar1 == null))
                {
                    this.mUINameLabelControlMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUINameLabelControlMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUINameLabelControlMenuBar1;
            }
        }
        
        public UIClicksScrollBar UIClicksScrollBar
        {
            get
            {
                if ((this.mUIClicksScrollBar == null))
                {
                    this.mUIClicksScrollBar = new UIClicksScrollBar(this);
                }
                return this.mUIClicksScrollBar;
            }
        }
        
        public UIClicksScrollBar1 UIClicksScrollBar1
        {
            get
            {
                if ((this.mUIClicksScrollBar1 == null))
                {
                    this.mUIClicksScrollBar1 = new UIClicksScrollBar1(this);
                }
                return this.mUIClicksScrollBar1;
            }
        }
        
        public WinControl UIClicksGrip
        {
            get
            {
                if ((this.mUIClicksGrip == null))
                {
                    this.mUIClicksGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIClicksGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIClicksGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUINameLabelControlMenuBar;
        
        private WinTitleBar mUIClicksTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUINameLabelControlMenuBar1;
        
        private UIClicksScrollBar mUIClicksScrollBar;
        
        private UIClicksScrollBar1 mUIClicksScrollBar1;
        
        private WinControl mUIClicksGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIClicksScrollBar : WinScrollBar
    {
        
        public UIClicksScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIClicksScrollBar1 : WinScrollBar
    {
        
        public UIClicksScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UILegendGridControlWindow1 : WinWindow
    {
        
        public UILegendGridControlWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "legendGridControl";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UILegendGridControlMenuBar
        {
            get
            {
                if ((this.mUILegendGridControlMenuBar == null))
                {
                    this.mUILegendGridControlMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILegendGridControlMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUILegendGridControlMenuBar;
            }
        }
        
        public WinTitleBar UILegendGridControlTitleBar
        {
            get
            {
                if ((this.mUILegendGridControlTitleBar == null))
                {
                    this.mUILegendGridControlTitleBar = new WinTitleBar(this);
                }
                return this.mUILegendGridControlTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UILegendGridControlMenuBar1
        {
            get
            {
                if ((this.mUILegendGridControlMenuBar1 == null))
                {
                    this.mUILegendGridControlMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILegendGridControlMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUILegendGridControlMenuBar1;
            }
        }
        
        public UILegendGridControlTable1 UILegendGridControlTable
        {
            get
            {
                if ((this.mUILegendGridControlTable == null))
                {
                    this.mUILegendGridControlTable = new UILegendGridControlTable1(this);
                }
                return this.mUILegendGridControlTable;
            }
        }
        
        public WinClient UIHeaderPanelClient
        {
            get
            {
                if ((this.mUIHeaderPanelClient == null))
                {
                    this.mUIHeaderPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIHeaderPanelClient.SearchProperties[WinControl.PropertyNames.Name] = "Header Panel";
                    #endregion
                }
                return this.mUIHeaderPanelClient;
            }
        }
        
        public WinClient UIDataPanelClient
        {
            get
            {
                if ((this.mUIDataPanelClient == null))
                {
                    this.mUIDataPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIDataPanelClient.SearchProperties[WinControl.PropertyNames.Name] = "Data Panel";
                    #endregion
                }
                return this.mUIDataPanelClient;
            }
        }
        
        public UIRow1Row1 UIRow1Row
        {
            get
            {
                if ((this.mUIRow1Row == null))
                {
                    this.mUIRow1Row = new UIRow1Row1(this);
                }
                return this.mUIRow1Row;
            }
        }
        
        public UIRow2Row1 UIRow2Row
        {
            get
            {
                if ((this.mUIRow2Row == null))
                {
                    this.mUIRow2Row = new UIRow2Row1(this);
                }
                return this.mUIRow2Row;
            }
        }
        
        public UIRow3Row1 UIRow3Row
        {
            get
            {
                if ((this.mUIRow3Row == null))
                {
                    this.mUIRow3Row = new UIRow3Row1(this);
                }
                return this.mUIRow3Row;
            }
        }
        
        public UIVerticalScrollBar13 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar13(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar13 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar13(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UILegendGridControlGrip
        {
            get
            {
                if ((this.mUILegendGridControlGrip == null))
                {
                    this.mUILegendGridControlGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUILegendGridControlGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUILegendGridControlGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUILegendGridControlMenuBar;
        
        private WinTitleBar mUILegendGridControlTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUILegendGridControlMenuBar1;
        
        private UILegendGridControlTable1 mUILegendGridControlTable;
        
        private WinClient mUIHeaderPanelClient;
        
        private WinClient mUIDataPanelClient;
        
        private UIRow1Row1 mUIRow1Row;
        
        private UIRow2Row1 mUIRow2Row;
        
        private UIRow3Row1 mUIRow3Row;
        
        private UIVerticalScrollBar13 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar13 mUIHorizontalScrollBar;
        
        private WinControl mUILegendGridControlGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UILegendGridControlTable1 : WinTable
    {
        
        public UILegendGridControlTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public UIHeaderPanelClient1 UIHeaderPanelClient
        {
            get
            {
                if ((this.mUIHeaderPanelClient == null))
                {
                    this.mUIHeaderPanelClient = new UIHeaderPanelClient1(this);
                }
                return this.mUIHeaderPanelClient;
            }
        }
        
        public UIDataPanelClient1 UIDataPanelClient
        {
            get
            {
                if ((this.mUIDataPanelClient == null))
                {
                    this.mUIDataPanelClient = new UIDataPanelClient1(this);
                }
                return this.mUIDataPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UIHeaderPanelClient1 mUIHeaderPanelClient;
        
        private UIDataPanelClient1 mUIDataPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHeaderPanelClient1 : WinClient
    {
        
        public UIHeaderPanelClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinRowHeader UIItemRowHeader
        {
            get
            {
                if ((this.mUIItemRowHeader == null))
                {
                    this.mUIItemRowHeader = new WinRowHeader(this);
                }
                return this.mUIItemRowHeader;
            }
        }
        
        public WinRowHeader UIItemRowHeader1
        {
            get
            {
                if ((this.mUIItemRowHeader1 == null))
                {
                    this.mUIItemRowHeader1 = new WinRowHeader(this);
                }
                return this.mUIItemRowHeader1;
            }
        }
        
        public WinRowHeader UIItemRowHeader2
        {
            get
            {
                if ((this.mUIItemRowHeader2 == null))
                {
                    this.mUIItemRowHeader2 = new WinRowHeader(this);
                }
                return this.mUIItemRowHeader2;
            }
        }
        
        public WinRowHeader UIItemRowHeader3
        {
            get
            {
                if ((this.mUIItemRowHeader3 == null))
                {
                    this.mUIItemRowHeader3 = new WinRowHeader(this);
                }
                return this.mUIItemRowHeader3;
            }
        }
        #endregion
        
        #region Fields
        private WinRowHeader mUIItemRowHeader;
        
        private WinRowHeader mUIItemRowHeader1;
        
        private WinRowHeader mUIItemRowHeader2;
        
        private WinRowHeader mUIItemRowHeader3;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDataPanelClient1 : WinClient
    {
        
        public UIDataPanelClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Data Panel";
            #endregion
        }
        
        #region Properties
        public WinRow UIRow1Row
        {
            get
            {
                if ((this.mUIRow1Row == null))
                {
                    this.mUIRow1Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow1Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 1";
                    this.mUIRow1Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow1Row;
            }
        }
        
        public WinRow UIRow2Row
        {
            get
            {
                if ((this.mUIRow2Row == null))
                {
                    this.mUIRow2Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow2Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 2";
                    this.mUIRow2Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow2Row;
            }
        }
        
        public WinRow UIRow3Row
        {
            get
            {
                if ((this.mUIRow3Row == null))
                {
                    this.mUIRow3Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow3Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 3";
                    this.mUIRow3Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow3Row;
            }
        }
        #endregion
        
        #region Fields
        private WinRow mUIRow1Row;
        
        private WinRow mUIRow2Row;
        
        private WinRow mUIRow3Row;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow1Row1 : WinRow
    {
        
        public UIRow1Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Name] = "Row 1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIColorrow0Cell
        {
            get
            {
                if ((this.mUIColorrow0Cell == null))
                {
                    this.mUIColorrow0Cell = new WinCell(this);
                }
                return this.mUIColorrow0Cell;
            }
        }
        
        public WinCell UIFacebookCell
        {
            get
            {
                if ((this.mUIFacebookCell == null))
                {
                    this.mUIFacebookCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFacebookCell.SearchProperties[WinCell.PropertyNames.Value] = "Facebook";
                    #endregion
                }
                return this.mUIFacebookCell;
            }
        }
        
        public WinCell UIItem0Cell
        {
            get
            {
                if ((this.mUIItem0Cell == null))
                {
                    this.mUIItem0Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell.SearchProperties[WinCell.PropertyNames.Value] = "0";
                    #endregion
                }
                return this.mUIItem0Cell;
            }
        }
        
        public WinCell UIItem000Cell
        {
            get
            {
                if ((this.mUIItem000Cell == null))
                {
                    this.mUIItem000Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem000Cell.SearchProperties[WinCell.PropertyNames.Value] = "0.00 %";
                    #endregion
                }
                return this.mUIItem000Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIColorrow0Cell;
        
        private WinCell mUIFacebookCell;
        
        private WinCell mUIItem0Cell;
        
        private WinCell mUIItem000Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow2Row1 : WinRow
    {
        
        public UIRow2Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Name] = "Row 2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIColorrow1Cell
        {
            get
            {
                if ((this.mUIColorrow1Cell == null))
                {
                    this.mUIColorrow1Cell = new WinCell(this);
                }
                return this.mUIColorrow1Cell;
            }
        }
        
        public WinCell UIAdCenterCell
        {
            get
            {
                if ((this.mUIAdCenterCell == null))
                {
                    this.mUIAdCenterCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAdCenterCell.SearchProperties[WinCell.PropertyNames.Value] = "AdCenter";
                    #endregion
                }
                return this.mUIAdCenterCell;
            }
        }
        
        public WinCell UIItem0Cell
        {
            get
            {
                if ((this.mUIItem0Cell == null))
                {
                    this.mUIItem0Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell.SearchProperties[WinCell.PropertyNames.Value] = "0";
                    #endregion
                }
                return this.mUIItem0Cell;
            }
        }
        
        public WinCell UIItem000Cell
        {
            get
            {
                if ((this.mUIItem000Cell == null))
                {
                    this.mUIItem000Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem000Cell.SearchProperties[WinCell.PropertyNames.Value] = "0.00 %";
                    #endregion
                }
                return this.mUIItem000Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIColorrow1Cell;
        
        private WinCell mUIAdCenterCell;
        
        private WinCell mUIItem0Cell;
        
        private WinCell mUIItem000Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow3Row1 : WinRow
    {
        
        public UIRow3Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Name] = "Row 3";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIColorrow2Cell
        {
            get
            {
                if ((this.mUIColorrow2Cell == null))
                {
                    this.mUIColorrow2Cell = new WinCell(this);
                }
                return this.mUIColorrow2Cell;
            }
        }
        
        public WinCell UIGoogleCell
        {
            get
            {
                if ((this.mUIGoogleCell == null))
                {
                    this.mUIGoogleCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIGoogleCell.SearchProperties[WinCell.PropertyNames.Value] = "Google";
                    #endregion
                }
                return this.mUIGoogleCell;
            }
        }
        
        public WinCell UIItem0Cell
        {
            get
            {
                if ((this.mUIItem0Cell == null))
                {
                    this.mUIItem0Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell.SearchProperties[WinCell.PropertyNames.Value] = "0";
                    #endregion
                }
                return this.mUIItem0Cell;
            }
        }
        
        public WinCell UIItem000Cell
        {
            get
            {
                if ((this.mUIItem000Cell == null))
                {
                    this.mUIItem000Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem000Cell.SearchProperties[WinCell.PropertyNames.Value] = "0.00 %";
                    #endregion
                }
                return this.mUIItem000Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIColorrow2Cell;
        
        private WinCell mUIGoogleCell;
        
        private WinCell mUIItem0Cell;
        
        private WinCell mUIItem000Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar13 : WinScrollBar
    {
        
        public UIVerticalScrollBar13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar13 : WinScrollBar
    {
        
        public UIHorizontalScrollBar13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPieChartWindow1 : WinWindow
    {
        
        public UIPieChartWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "pieChart";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIPieChartMenuBar
        {
            get
            {
                if ((this.mUIPieChartMenuBar == null))
                {
                    this.mUIPieChartMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPieChartMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIPieChartMenuBar;
            }
        }
        
        public WinTitleBar UIPieChartTitleBar
        {
            get
            {
                if ((this.mUIPieChartTitleBar == null))
                {
                    this.mUIPieChartTitleBar = new WinTitleBar(this);
                }
                return this.mUIPieChartTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIPieChartMenuBar1
        {
            get
            {
                if ((this.mUIPieChartMenuBar1 == null))
                {
                    this.mUIPieChartMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPieChartMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIPieChartMenuBar1;
            }
        }
        
        public WinClient UIPieChartClient
        {
            get
            {
                if ((this.mUIPieChartClient == null))
                {
                    this.mUIPieChartClient = new WinClient(this);
                }
                return this.mUIPieChartClient;
            }
        }
        
        public UIVerticalScrollBar14 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar14(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar14 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar14(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIPieChartGrip
        {
            get
            {
                if ((this.mUIPieChartGrip == null))
                {
                    this.mUIPieChartGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIPieChartGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIPieChartGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIPieChartMenuBar;
        
        private WinTitleBar mUIPieChartTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIPieChartMenuBar1;
        
        private WinClient mUIPieChartClient;
        
        private UIVerticalScrollBar14 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar14 mUIHorizontalScrollBar;
        
        private WinControl mUIPieChartGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar14 : WinScrollBar
    {
        
        public UIVerticalScrollBar14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar14 : WinScrollBar
    {
        
        public UIHorizontalScrollBar14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIBasicIndicatorPieChaWindow2 : WinWindow
    {
        
        public UIBasicIndicatorPieChaWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "basicIndicatorPieChartControl3";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIBasicIndicatorPieChaMenuBar
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaMenuBar == null))
                {
                    this.mUIBasicIndicatorPieChaMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIBasicIndicatorPieChaMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIBasicIndicatorPieChaMenuBar;
            }
        }
        
        public WinTitleBar UIBasicIndicatorPieChaTitleBar
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaTitleBar == null))
                {
                    this.mUIBasicIndicatorPieChaTitleBar = new WinTitleBar(this);
                }
                return this.mUIBasicIndicatorPieChaTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIBasicIndicatorPieChaMenuBar1
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaMenuBar1 == null))
                {
                    this.mUIBasicIndicatorPieChaMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIBasicIndicatorPieChaMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIBasicIndicatorPieChaMenuBar1;
            }
        }
        
        public WinClient UIBasicIndicatorPieChaClient
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaClient == null))
                {
                    this.mUIBasicIndicatorPieChaClient = new WinClient(this);
                }
                return this.mUIBasicIndicatorPieChaClient;
            }
        }
        
        public WinWindow UILabel1Window
        {
            get
            {
                if ((this.mUILabel1Window == null))
                {
                    this.mUILabel1Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUILabel1Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUILabel1Window;
            }
        }
        
        public WinWindow UIPanel1Window
        {
            get
            {
                if ((this.mUIPanel1Window == null))
                {
                    this.mUIPanel1Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUIPanel1Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIPanel1Window.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
                    #endregion
                }
                return this.mUIPanel1Window;
            }
        }
        
        public WinWindow UILegendGridControlWindow
        {
            get
            {
                if ((this.mUILegendGridControlWindow == null))
                {
                    this.mUILegendGridControlWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUILegendGridControlWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUILegendGridControlWindow.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
                    #endregion
                }
                return this.mUILegendGridControlWindow;
            }
        }
        
        public WinWindow UIPieChartWindow
        {
            get
            {
                if ((this.mUIPieChartWindow == null))
                {
                    this.mUIPieChartWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIPieChartWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIPieChartWindow.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    #endregion
                }
                return this.mUIPieChartWindow;
            }
        }
        
        public UIVerticalScrollBar15 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar15(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar15 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar15(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIBasicIndicatorPieChaGrip
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaGrip == null))
                {
                    this.mUIBasicIndicatorPieChaGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIBasicIndicatorPieChaGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIBasicIndicatorPieChaGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIBasicIndicatorPieChaMenuBar;
        
        private WinTitleBar mUIBasicIndicatorPieChaTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIBasicIndicatorPieChaMenuBar1;
        
        private WinClient mUIBasicIndicatorPieChaClient;
        
        private WinWindow mUILabel1Window;
        
        private WinWindow mUIPanel1Window;
        
        private WinWindow mUILegendGridControlWindow;
        
        private WinWindow mUIPieChartWindow;
        
        private UIVerticalScrollBar15 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar15 mUIHorizontalScrollBar;
        
        private WinControl mUIBasicIndicatorPieChaGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar15 : WinScrollBar
    {
        
        public UIVerticalScrollBar15(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar15 : WinScrollBar
    {
        
        public UIHorizontalScrollBar15(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UILabel1Window2 : WinWindow
    {
        
        public UILabel1Window2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "label1";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UILabel1MenuBar
        {
            get
            {
                if ((this.mUILabel1MenuBar == null))
                {
                    this.mUILabel1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabel1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUILabel1MenuBar;
            }
        }
        
        public WinTitleBar UILabel1TitleBar
        {
            get
            {
                if ((this.mUILabel1TitleBar == null))
                {
                    this.mUILabel1TitleBar = new WinTitleBar(this);
                }
                return this.mUILabel1TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UILabel1MenuBar1
        {
            get
            {
                if ((this.mUILabel1MenuBar1 == null))
                {
                    this.mUILabel1MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabel1MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUILabel1MenuBar1;
            }
        }
        
        public WinText UILabel1Text
        {
            get
            {
                if ((this.mUILabel1Text == null))
                {
                    this.mUILabel1Text = new WinText(this);
                }
                return this.mUILabel1Text;
            }
        }
        
        public UIVerticalScrollBar16 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar16(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar16 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar16(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UILabel1Grip
        {
            get
            {
                if ((this.mUILabel1Grip == null))
                {
                    this.mUILabel1Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUILabel1Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUILabel1Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUILabel1MenuBar;
        
        private WinTitleBar mUILabel1TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUILabel1MenuBar1;
        
        private WinText mUILabel1Text;
        
        private UIVerticalScrollBar16 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar16 mUIHorizontalScrollBar;
        
        private WinControl mUILabel1Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar16 : WinScrollBar
    {
        
        public UIVerticalScrollBar16(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar16 : WinScrollBar
    {
        
        public UIHorizontalScrollBar16(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPanel1Window3 : WinWindow
    {
        
        public UIPanel1Window3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "panel1";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "4";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIPanel1MenuBar
        {
            get
            {
                if ((this.mUIPanel1MenuBar == null))
                {
                    this.mUIPanel1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanel1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIPanel1MenuBar;
            }
        }
        
        public WinTitleBar UIPanel1TitleBar
        {
            get
            {
                if ((this.mUIPanel1TitleBar == null))
                {
                    this.mUIPanel1TitleBar = new WinTitleBar(this);
                }
                return this.mUIPanel1TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIPanel1MenuBar1
        {
            get
            {
                if ((this.mUIPanel1MenuBar1 == null))
                {
                    this.mUIPanel1MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanel1MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIPanel1MenuBar1;
            }
        }
        
        public WinClient UIPanel1Client
        {
            get
            {
                if ((this.mUIPanel1Client == null))
                {
                    this.mUIPanel1Client = new WinClient(this);
                }
                return this.mUIPanel1Client;
            }
        }
        
        public WinWindow UIConversionsWindow
        {
            get
            {
                if ((this.mUIConversionsWindow == null))
                {
                    this.mUIConversionsWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIConversionsWindow.SearchProperties[WinWindow.PropertyNames.Name] = "Conversions";
                    this.mUIConversionsWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIConversionsWindow;
            }
        }
        
        public WinText UIConversionsText
        {
            get
            {
                if ((this.mUIConversionsText == null))
                {
                    this.mUIConversionsText = new WinText(this);
                    #region Search Criteria
                    this.mUIConversionsText.SearchProperties[WinText.PropertyNames.Name] = "Conversions";
                    #endregion
                }
                return this.mUIConversionsText;
            }
        }
        
        public UIVerticalScrollBar17 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar17(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar17 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar17(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIPanel1Grip
        {
            get
            {
                if ((this.mUIPanel1Grip == null))
                {
                    this.mUIPanel1Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUIPanel1Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIPanel1Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIPanel1MenuBar;
        
        private WinTitleBar mUIPanel1TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIPanel1MenuBar1;
        
        private WinClient mUIPanel1Client;
        
        private WinWindow mUIConversionsWindow;
        
        private WinText mUIConversionsText;
        
        private UIVerticalScrollBar17 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar17 mUIHorizontalScrollBar;
        
        private WinControl mUIPanel1Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar17 : WinScrollBar
    {
        
        public UIVerticalScrollBar17(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar17 : WinScrollBar
    {
        
        public UIHorizontalScrollBar17(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIConversionsWindow : WinWindow
    {
        
        public UIConversionsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "nameLabelControl";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UINameLabelControlMenuBar
        {
            get
            {
                if ((this.mUINameLabelControlMenuBar == null))
                {
                    this.mUINameLabelControlMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUINameLabelControlMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUINameLabelControlMenuBar;
            }
        }
        
        public WinTitleBar UIConversionsTitleBar
        {
            get
            {
                if ((this.mUIConversionsTitleBar == null))
                {
                    this.mUIConversionsTitleBar = new WinTitleBar(this);
                }
                return this.mUIConversionsTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UINameLabelControlMenuBar1
        {
            get
            {
                if ((this.mUINameLabelControlMenuBar1 == null))
                {
                    this.mUINameLabelControlMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUINameLabelControlMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUINameLabelControlMenuBar1;
            }
        }
        
        public UIConversionsScrollBar UIConversionsScrollBar
        {
            get
            {
                if ((this.mUIConversionsScrollBar == null))
                {
                    this.mUIConversionsScrollBar = new UIConversionsScrollBar(this);
                }
                return this.mUIConversionsScrollBar;
            }
        }
        
        public UIConversionsScrollBar1 UIConversionsScrollBar1
        {
            get
            {
                if ((this.mUIConversionsScrollBar1 == null))
                {
                    this.mUIConversionsScrollBar1 = new UIConversionsScrollBar1(this);
                }
                return this.mUIConversionsScrollBar1;
            }
        }
        
        public WinControl UIConversionsGrip
        {
            get
            {
                if ((this.mUIConversionsGrip == null))
                {
                    this.mUIConversionsGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIConversionsGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIConversionsGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUINameLabelControlMenuBar;
        
        private WinTitleBar mUIConversionsTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUINameLabelControlMenuBar1;
        
        private UIConversionsScrollBar mUIConversionsScrollBar;
        
        private UIConversionsScrollBar1 mUIConversionsScrollBar1;
        
        private WinControl mUIConversionsGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIConversionsScrollBar : WinScrollBar
    {
        
        public UIConversionsScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIConversionsScrollBar1 : WinScrollBar
    {
        
        public UIConversionsScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UILegendGridControlWindow2 : WinWindow
    {
        
        public UILegendGridControlWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "legendGridControl";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UILegendGridControlMenuBar
        {
            get
            {
                if ((this.mUILegendGridControlMenuBar == null))
                {
                    this.mUILegendGridControlMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILegendGridControlMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUILegendGridControlMenuBar;
            }
        }
        
        public WinTitleBar UILegendGridControlTitleBar
        {
            get
            {
                if ((this.mUILegendGridControlTitleBar == null))
                {
                    this.mUILegendGridControlTitleBar = new WinTitleBar(this);
                }
                return this.mUILegendGridControlTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UILegendGridControlMenuBar1
        {
            get
            {
                if ((this.mUILegendGridControlMenuBar1 == null))
                {
                    this.mUILegendGridControlMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILegendGridControlMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUILegendGridControlMenuBar1;
            }
        }
        
        public UILegendGridControlTable2 UILegendGridControlTable
        {
            get
            {
                if ((this.mUILegendGridControlTable == null))
                {
                    this.mUILegendGridControlTable = new UILegendGridControlTable2(this);
                }
                return this.mUILegendGridControlTable;
            }
        }
        
        public WinClient UIHeaderPanelClient
        {
            get
            {
                if ((this.mUIHeaderPanelClient == null))
                {
                    this.mUIHeaderPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIHeaderPanelClient.SearchProperties[WinControl.PropertyNames.Name] = "Header Panel";
                    #endregion
                }
                return this.mUIHeaderPanelClient;
            }
        }
        
        public WinClient UIDataPanelClient
        {
            get
            {
                if ((this.mUIDataPanelClient == null))
                {
                    this.mUIDataPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIDataPanelClient.SearchProperties[WinControl.PropertyNames.Name] = "Data Panel";
                    #endregion
                }
                return this.mUIDataPanelClient;
            }
        }
        
        public UIRow1Row2 UIRow1Row
        {
            get
            {
                if ((this.mUIRow1Row == null))
                {
                    this.mUIRow1Row = new UIRow1Row2(this);
                }
                return this.mUIRow1Row;
            }
        }
        
        public UIRow2Row2 UIRow2Row
        {
            get
            {
                if ((this.mUIRow2Row == null))
                {
                    this.mUIRow2Row = new UIRow2Row2(this);
                }
                return this.mUIRow2Row;
            }
        }
        
        public UIRow3Row2 UIRow3Row
        {
            get
            {
                if ((this.mUIRow3Row == null))
                {
                    this.mUIRow3Row = new UIRow3Row2(this);
                }
                return this.mUIRow3Row;
            }
        }
        
        public UIVerticalScrollBar18 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar18(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar18 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar18(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UILegendGridControlGrip
        {
            get
            {
                if ((this.mUILegendGridControlGrip == null))
                {
                    this.mUILegendGridControlGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUILegendGridControlGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUILegendGridControlGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUILegendGridControlMenuBar;
        
        private WinTitleBar mUILegendGridControlTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUILegendGridControlMenuBar1;
        
        private UILegendGridControlTable2 mUILegendGridControlTable;
        
        private WinClient mUIHeaderPanelClient;
        
        private WinClient mUIDataPanelClient;
        
        private UIRow1Row2 mUIRow1Row;
        
        private UIRow2Row2 mUIRow2Row;
        
        private UIRow3Row2 mUIRow3Row;
        
        private UIVerticalScrollBar18 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar18 mUIHorizontalScrollBar;
        
        private WinControl mUILegendGridControlGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UILegendGridControlTable2 : WinTable
    {
        
        public UILegendGridControlTable2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public UIHeaderPanelClient2 UIHeaderPanelClient
        {
            get
            {
                if ((this.mUIHeaderPanelClient == null))
                {
                    this.mUIHeaderPanelClient = new UIHeaderPanelClient2(this);
                }
                return this.mUIHeaderPanelClient;
            }
        }
        
        public UIDataPanelClient2 UIDataPanelClient
        {
            get
            {
                if ((this.mUIDataPanelClient == null))
                {
                    this.mUIDataPanelClient = new UIDataPanelClient2(this);
                }
                return this.mUIDataPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UIHeaderPanelClient2 mUIHeaderPanelClient;
        
        private UIDataPanelClient2 mUIDataPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHeaderPanelClient2 : WinClient
    {
        
        public UIHeaderPanelClient2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinRowHeader UIItemRowHeader
        {
            get
            {
                if ((this.mUIItemRowHeader == null))
                {
                    this.mUIItemRowHeader = new WinRowHeader(this);
                }
                return this.mUIItemRowHeader;
            }
        }
        
        public WinRowHeader UIItemRowHeader1
        {
            get
            {
                if ((this.mUIItemRowHeader1 == null))
                {
                    this.mUIItemRowHeader1 = new WinRowHeader(this);
                }
                return this.mUIItemRowHeader1;
            }
        }
        
        public WinRowHeader UIItemRowHeader2
        {
            get
            {
                if ((this.mUIItemRowHeader2 == null))
                {
                    this.mUIItemRowHeader2 = new WinRowHeader(this);
                }
                return this.mUIItemRowHeader2;
            }
        }
        
        public WinRowHeader UIItemRowHeader3
        {
            get
            {
                if ((this.mUIItemRowHeader3 == null))
                {
                    this.mUIItemRowHeader3 = new WinRowHeader(this);
                }
                return this.mUIItemRowHeader3;
            }
        }
        #endregion
        
        #region Fields
        private WinRowHeader mUIItemRowHeader;
        
        private WinRowHeader mUIItemRowHeader1;
        
        private WinRowHeader mUIItemRowHeader2;
        
        private WinRowHeader mUIItemRowHeader3;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDataPanelClient2 : WinClient
    {
        
        public UIDataPanelClient2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Data Panel";
            #endregion
        }
        
        #region Properties
        public WinRow UIRow1Row
        {
            get
            {
                if ((this.mUIRow1Row == null))
                {
                    this.mUIRow1Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow1Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 1";
                    this.mUIRow1Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow1Row;
            }
        }
        
        public WinRow UIRow2Row
        {
            get
            {
                if ((this.mUIRow2Row == null))
                {
                    this.mUIRow2Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow2Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 2";
                    this.mUIRow2Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow2Row;
            }
        }
        
        public WinRow UIRow3Row
        {
            get
            {
                if ((this.mUIRow3Row == null))
                {
                    this.mUIRow3Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow3Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 3";
                    this.mUIRow3Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow3Row;
            }
        }
        #endregion
        
        #region Fields
        private WinRow mUIRow1Row;
        
        private WinRow mUIRow2Row;
        
        private WinRow mUIRow3Row;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow1Row2 : WinRow
    {
        
        public UIRow1Row2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Name] = "Row 1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIColorrow0Cell
        {
            get
            {
                if ((this.mUIColorrow0Cell == null))
                {
                    this.mUIColorrow0Cell = new WinCell(this);
                }
                return this.mUIColorrow0Cell;
            }
        }
        
        public WinCell UIFacebookCell
        {
            get
            {
                if ((this.mUIFacebookCell == null))
                {
                    this.mUIFacebookCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFacebookCell.SearchProperties[WinCell.PropertyNames.Value] = "Facebook";
                    #endregion
                }
                return this.mUIFacebookCell;
            }
        }
        
        public WinCell UIItem0Cell
        {
            get
            {
                if ((this.mUIItem0Cell == null))
                {
                    this.mUIItem0Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell.SearchProperties[WinCell.PropertyNames.Value] = "0";
                    #endregion
                }
                return this.mUIItem0Cell;
            }
        }
        
        public WinCell UIItem000Cell
        {
            get
            {
                if ((this.mUIItem000Cell == null))
                {
                    this.mUIItem000Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem000Cell.SearchProperties[WinCell.PropertyNames.Value] = "0.00 %";
                    #endregion
                }
                return this.mUIItem000Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIColorrow0Cell;
        
        private WinCell mUIFacebookCell;
        
        private WinCell mUIItem0Cell;
        
        private WinCell mUIItem000Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow2Row2 : WinRow
    {
        
        public UIRow2Row2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Name] = "Row 2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIColorrow1Cell
        {
            get
            {
                if ((this.mUIColorrow1Cell == null))
                {
                    this.mUIColorrow1Cell = new WinCell(this);
                }
                return this.mUIColorrow1Cell;
            }
        }
        
        public WinCell UIAdCenterCell
        {
            get
            {
                if ((this.mUIAdCenterCell == null))
                {
                    this.mUIAdCenterCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAdCenterCell.SearchProperties[WinCell.PropertyNames.Value] = "AdCenter";
                    #endregion
                }
                return this.mUIAdCenterCell;
            }
        }
        
        public WinCell UIItem0Cell
        {
            get
            {
                if ((this.mUIItem0Cell == null))
                {
                    this.mUIItem0Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell.SearchProperties[WinCell.PropertyNames.Value] = "0";
                    #endregion
                }
                return this.mUIItem0Cell;
            }
        }
        
        public WinCell UIItem000Cell
        {
            get
            {
                if ((this.mUIItem000Cell == null))
                {
                    this.mUIItem000Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem000Cell.SearchProperties[WinCell.PropertyNames.Value] = "0.00 %";
                    #endregion
                }
                return this.mUIItem000Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIColorrow1Cell;
        
        private WinCell mUIAdCenterCell;
        
        private WinCell mUIItem0Cell;
        
        private WinCell mUIItem000Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow3Row2 : WinRow
    {
        
        public UIRow3Row2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Name] = "Row 3";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIColorrow2Cell
        {
            get
            {
                if ((this.mUIColorrow2Cell == null))
                {
                    this.mUIColorrow2Cell = new WinCell(this);
                }
                return this.mUIColorrow2Cell;
            }
        }
        
        public WinCell UIGoogleCell
        {
            get
            {
                if ((this.mUIGoogleCell == null))
                {
                    this.mUIGoogleCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIGoogleCell.SearchProperties[WinCell.PropertyNames.Value] = "Google";
                    #endregion
                }
                return this.mUIGoogleCell;
            }
        }
        
        public WinCell UIItem0Cell
        {
            get
            {
                if ((this.mUIItem0Cell == null))
                {
                    this.mUIItem0Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell.SearchProperties[WinCell.PropertyNames.Value] = "0";
                    #endregion
                }
                return this.mUIItem0Cell;
            }
        }
        
        public WinCell UIItem000Cell
        {
            get
            {
                if ((this.mUIItem000Cell == null))
                {
                    this.mUIItem000Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem000Cell.SearchProperties[WinCell.PropertyNames.Value] = "0.00 %";
                    #endregion
                }
                return this.mUIItem000Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIColorrow2Cell;
        
        private WinCell mUIGoogleCell;
        
        private WinCell mUIItem0Cell;
        
        private WinCell mUIItem000Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar18 : WinScrollBar
    {
        
        public UIVerticalScrollBar18(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar18 : WinScrollBar
    {
        
        public UIHorizontalScrollBar18(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPieChartWindow2 : WinWindow
    {
        
        public UIPieChartWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "pieChart";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIPieChartMenuBar
        {
            get
            {
                if ((this.mUIPieChartMenuBar == null))
                {
                    this.mUIPieChartMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPieChartMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIPieChartMenuBar;
            }
        }
        
        public WinTitleBar UIPieChartTitleBar
        {
            get
            {
                if ((this.mUIPieChartTitleBar == null))
                {
                    this.mUIPieChartTitleBar = new WinTitleBar(this);
                }
                return this.mUIPieChartTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIPieChartMenuBar1
        {
            get
            {
                if ((this.mUIPieChartMenuBar1 == null))
                {
                    this.mUIPieChartMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPieChartMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIPieChartMenuBar1;
            }
        }
        
        public WinClient UIPieChartClient
        {
            get
            {
                if ((this.mUIPieChartClient == null))
                {
                    this.mUIPieChartClient = new WinClient(this);
                }
                return this.mUIPieChartClient;
            }
        }
        
        public UIVerticalScrollBar19 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar19(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar19 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar19(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIPieChartGrip
        {
            get
            {
                if ((this.mUIPieChartGrip == null))
                {
                    this.mUIPieChartGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIPieChartGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIPieChartGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIPieChartMenuBar;
        
        private WinTitleBar mUIPieChartTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIPieChartMenuBar1;
        
        private WinClient mUIPieChartClient;
        
        private UIVerticalScrollBar19 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar19 mUIHorizontalScrollBar;
        
        private WinControl mUIPieChartGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar19 : WinScrollBar
    {
        
        public UIVerticalScrollBar19(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar19 : WinScrollBar
    {
        
        public UIHorizontalScrollBar19(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIBasicIndicatorPieChaWindow3 : WinWindow
    {
        
        public UIBasicIndicatorPieChaWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "basicIndicatorPieChartControl4";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIBasicIndicatorPieChaMenuBar
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaMenuBar == null))
                {
                    this.mUIBasicIndicatorPieChaMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIBasicIndicatorPieChaMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIBasicIndicatorPieChaMenuBar;
            }
        }
        
        public WinTitleBar UIBasicIndicatorPieChaTitleBar
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaTitleBar == null))
                {
                    this.mUIBasicIndicatorPieChaTitleBar = new WinTitleBar(this);
                }
                return this.mUIBasicIndicatorPieChaTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIBasicIndicatorPieChaMenuBar1
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaMenuBar1 == null))
                {
                    this.mUIBasicIndicatorPieChaMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIBasicIndicatorPieChaMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIBasicIndicatorPieChaMenuBar1;
            }
        }
        
        public WinClient UIBasicIndicatorPieChaClient
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaClient == null))
                {
                    this.mUIBasicIndicatorPieChaClient = new WinClient(this);
                }
                return this.mUIBasicIndicatorPieChaClient;
            }
        }
        
        public WinWindow UILabel1Window
        {
            get
            {
                if ((this.mUILabel1Window == null))
                {
                    this.mUILabel1Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUILabel1Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUILabel1Window;
            }
        }
        
        public WinWindow UIPanel1Window
        {
            get
            {
                if ((this.mUIPanel1Window == null))
                {
                    this.mUIPanel1Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUIPanel1Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIPanel1Window.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
                    #endregion
                }
                return this.mUIPanel1Window;
            }
        }
        
        public WinWindow UILegendGridControlWindow
        {
            get
            {
                if ((this.mUILegendGridControlWindow == null))
                {
                    this.mUILegendGridControlWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUILegendGridControlWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUILegendGridControlWindow.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
                    #endregion
                }
                return this.mUILegendGridControlWindow;
            }
        }
        
        public WinWindow UIPieChartWindow
        {
            get
            {
                if ((this.mUIPieChartWindow == null))
                {
                    this.mUIPieChartWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIPieChartWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIPieChartWindow.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    #endregion
                }
                return this.mUIPieChartWindow;
            }
        }
        
        public UIVerticalScrollBar20 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar20(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar20 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar20(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIBasicIndicatorPieChaGrip
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaGrip == null))
                {
                    this.mUIBasicIndicatorPieChaGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIBasicIndicatorPieChaGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIBasicIndicatorPieChaGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIBasicIndicatorPieChaMenuBar;
        
        private WinTitleBar mUIBasicIndicatorPieChaTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIBasicIndicatorPieChaMenuBar1;
        
        private WinClient mUIBasicIndicatorPieChaClient;
        
        private WinWindow mUILabel1Window;
        
        private WinWindow mUIPanel1Window;
        
        private WinWindow mUILegendGridControlWindow;
        
        private WinWindow mUIPieChartWindow;
        
        private UIVerticalScrollBar20 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar20 mUIHorizontalScrollBar;
        
        private WinControl mUIBasicIndicatorPieChaGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar20 : WinScrollBar
    {
        
        public UIVerticalScrollBar20(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar20 : WinScrollBar
    {
        
        public UIHorizontalScrollBar20(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UILabel1Window3 : WinWindow
    {
        
        public UILabel1Window3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "label1";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UILabel1MenuBar
        {
            get
            {
                if ((this.mUILabel1MenuBar == null))
                {
                    this.mUILabel1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabel1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUILabel1MenuBar;
            }
        }
        
        public WinTitleBar UILabel1TitleBar
        {
            get
            {
                if ((this.mUILabel1TitleBar == null))
                {
                    this.mUILabel1TitleBar = new WinTitleBar(this);
                }
                return this.mUILabel1TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UILabel1MenuBar1
        {
            get
            {
                if ((this.mUILabel1MenuBar1 == null))
                {
                    this.mUILabel1MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabel1MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUILabel1MenuBar1;
            }
        }
        
        public WinText UILabel1Text
        {
            get
            {
                if ((this.mUILabel1Text == null))
                {
                    this.mUILabel1Text = new WinText(this);
                }
                return this.mUILabel1Text;
            }
        }
        
        public UIVerticalScrollBar21 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar21(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar21 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar21(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UILabel1Grip
        {
            get
            {
                if ((this.mUILabel1Grip == null))
                {
                    this.mUILabel1Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUILabel1Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUILabel1Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUILabel1MenuBar;
        
        private WinTitleBar mUILabel1TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUILabel1MenuBar1;
        
        private WinText mUILabel1Text;
        
        private UIVerticalScrollBar21 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar21 mUIHorizontalScrollBar;
        
        private WinControl mUILabel1Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar21 : WinScrollBar
    {
        
        public UIVerticalScrollBar21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar21 : WinScrollBar
    {
        
        public UIHorizontalScrollBar21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPanel1Window4 : WinWindow
    {
        
        public UIPanel1Window4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "panel1";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIPanel1MenuBar
        {
            get
            {
                if ((this.mUIPanel1MenuBar == null))
                {
                    this.mUIPanel1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanel1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIPanel1MenuBar;
            }
        }
        
        public WinTitleBar UIPanel1TitleBar
        {
            get
            {
                if ((this.mUIPanel1TitleBar == null))
                {
                    this.mUIPanel1TitleBar = new WinTitleBar(this);
                }
                return this.mUIPanel1TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIPanel1MenuBar1
        {
            get
            {
                if ((this.mUIPanel1MenuBar1 == null))
                {
                    this.mUIPanel1MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanel1MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIPanel1MenuBar1;
            }
        }
        
        public WinClient UIPanel1Client
        {
            get
            {
                if ((this.mUIPanel1Client == null))
                {
                    this.mUIPanel1Client = new WinClient(this);
                }
                return this.mUIPanel1Client;
            }
        }
        
        public WinWindow UISpentWindow
        {
            get
            {
                if ((this.mUISpentWindow == null))
                {
                    this.mUISpentWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUISpentWindow.SearchProperties[WinWindow.PropertyNames.Name] = "Spent";
                    this.mUISpentWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUISpentWindow;
            }
        }
        
        public WinText UISpentText
        {
            get
            {
                if ((this.mUISpentText == null))
                {
                    this.mUISpentText = new WinText(this);
                    #region Search Criteria
                    this.mUISpentText.SearchProperties[WinText.PropertyNames.Name] = "Spent";
                    #endregion
                }
                return this.mUISpentText;
            }
        }
        
        public UIVerticalScrollBar22 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar22(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar22 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar22(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIPanel1Grip
        {
            get
            {
                if ((this.mUIPanel1Grip == null))
                {
                    this.mUIPanel1Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUIPanel1Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIPanel1Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIPanel1MenuBar;
        
        private WinTitleBar mUIPanel1TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIPanel1MenuBar1;
        
        private WinClient mUIPanel1Client;
        
        private WinWindow mUISpentWindow;
        
        private WinText mUISpentText;
        
        private UIVerticalScrollBar22 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar22 mUIHorizontalScrollBar;
        
        private WinControl mUIPanel1Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar22 : WinScrollBar
    {
        
        public UIVerticalScrollBar22(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar22 : WinScrollBar
    {
        
        public UIHorizontalScrollBar22(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISpentWindow : WinWindow
    {
        
        public UISpentWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "nameLabelControl";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UINameLabelControlMenuBar
        {
            get
            {
                if ((this.mUINameLabelControlMenuBar == null))
                {
                    this.mUINameLabelControlMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUINameLabelControlMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUINameLabelControlMenuBar;
            }
        }
        
        public WinTitleBar UISpentTitleBar
        {
            get
            {
                if ((this.mUISpentTitleBar == null))
                {
                    this.mUISpentTitleBar = new WinTitleBar(this);
                }
                return this.mUISpentTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UINameLabelControlMenuBar1
        {
            get
            {
                if ((this.mUINameLabelControlMenuBar1 == null))
                {
                    this.mUINameLabelControlMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUINameLabelControlMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUINameLabelControlMenuBar1;
            }
        }
        
        public UISpentScrollBar UISpentScrollBar
        {
            get
            {
                if ((this.mUISpentScrollBar == null))
                {
                    this.mUISpentScrollBar = new UISpentScrollBar(this);
                }
                return this.mUISpentScrollBar;
            }
        }
        
        public UISpentScrollBar1 UISpentScrollBar1
        {
            get
            {
                if ((this.mUISpentScrollBar1 == null))
                {
                    this.mUISpentScrollBar1 = new UISpentScrollBar1(this);
                }
                return this.mUISpentScrollBar1;
            }
        }
        
        public WinControl UISpentGrip
        {
            get
            {
                if ((this.mUISpentGrip == null))
                {
                    this.mUISpentGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUISpentGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUISpentGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUINameLabelControlMenuBar;
        
        private WinTitleBar mUISpentTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUINameLabelControlMenuBar1;
        
        private UISpentScrollBar mUISpentScrollBar;
        
        private UISpentScrollBar1 mUISpentScrollBar1;
        
        private WinControl mUISpentGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISpentScrollBar : WinScrollBar
    {
        
        public UISpentScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISpentScrollBar1 : WinScrollBar
    {
        
        public UISpentScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UILegendGridControlWindow3 : WinWindow
    {
        
        public UILegendGridControlWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "legendGridControl";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UILegendGridControlMenuBar
        {
            get
            {
                if ((this.mUILegendGridControlMenuBar == null))
                {
                    this.mUILegendGridControlMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILegendGridControlMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUILegendGridControlMenuBar;
            }
        }
        
        public WinTitleBar UILegendGridControlTitleBar
        {
            get
            {
                if ((this.mUILegendGridControlTitleBar == null))
                {
                    this.mUILegendGridControlTitleBar = new WinTitleBar(this);
                }
                return this.mUILegendGridControlTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UILegendGridControlMenuBar1
        {
            get
            {
                if ((this.mUILegendGridControlMenuBar1 == null))
                {
                    this.mUILegendGridControlMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILegendGridControlMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUILegendGridControlMenuBar1;
            }
        }
        
        public UILegendGridControlTable3 UILegendGridControlTable
        {
            get
            {
                if ((this.mUILegendGridControlTable == null))
                {
                    this.mUILegendGridControlTable = new UILegendGridControlTable3(this);
                }
                return this.mUILegendGridControlTable;
            }
        }
        
        public WinClient UIHeaderPanelClient
        {
            get
            {
                if ((this.mUIHeaderPanelClient == null))
                {
                    this.mUIHeaderPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIHeaderPanelClient.SearchProperties[WinControl.PropertyNames.Name] = "Header Panel";
                    #endregion
                }
                return this.mUIHeaderPanelClient;
            }
        }
        
        public WinClient UIDataPanelClient
        {
            get
            {
                if ((this.mUIDataPanelClient == null))
                {
                    this.mUIDataPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIDataPanelClient.SearchProperties[WinControl.PropertyNames.Name] = "Data Panel";
                    #endregion
                }
                return this.mUIDataPanelClient;
            }
        }
        
        public UIRow1Row3 UIRow1Row
        {
            get
            {
                if ((this.mUIRow1Row == null))
                {
                    this.mUIRow1Row = new UIRow1Row3(this);
                }
                return this.mUIRow1Row;
            }
        }
        
        public UIRow2Row3 UIRow2Row
        {
            get
            {
                if ((this.mUIRow2Row == null))
                {
                    this.mUIRow2Row = new UIRow2Row3(this);
                }
                return this.mUIRow2Row;
            }
        }
        
        public UIRow3Row3 UIRow3Row
        {
            get
            {
                if ((this.mUIRow3Row == null))
                {
                    this.mUIRow3Row = new UIRow3Row3(this);
                }
                return this.mUIRow3Row;
            }
        }
        
        public UIVerticalScrollBar23 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar23(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar23 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar23(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UILegendGridControlGrip
        {
            get
            {
                if ((this.mUILegendGridControlGrip == null))
                {
                    this.mUILegendGridControlGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUILegendGridControlGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUILegendGridControlGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUILegendGridControlMenuBar;
        
        private WinTitleBar mUILegendGridControlTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUILegendGridControlMenuBar1;
        
        private UILegendGridControlTable3 mUILegendGridControlTable;
        
        private WinClient mUIHeaderPanelClient;
        
        private WinClient mUIDataPanelClient;
        
        private UIRow1Row3 mUIRow1Row;
        
        private UIRow2Row3 mUIRow2Row;
        
        private UIRow3Row3 mUIRow3Row;
        
        private UIVerticalScrollBar23 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar23 mUIHorizontalScrollBar;
        
        private WinControl mUILegendGridControlGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UILegendGridControlTable3 : WinTable
    {
        
        public UILegendGridControlTable3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public UIHeaderPanelClient3 UIHeaderPanelClient
        {
            get
            {
                if ((this.mUIHeaderPanelClient == null))
                {
                    this.mUIHeaderPanelClient = new UIHeaderPanelClient3(this);
                }
                return this.mUIHeaderPanelClient;
            }
        }
        
        public UIDataPanelClient3 UIDataPanelClient
        {
            get
            {
                if ((this.mUIDataPanelClient == null))
                {
                    this.mUIDataPanelClient = new UIDataPanelClient3(this);
                }
                return this.mUIDataPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UIHeaderPanelClient3 mUIHeaderPanelClient;
        
        private UIDataPanelClient3 mUIDataPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHeaderPanelClient3 : WinClient
    {
        
        public UIHeaderPanelClient3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinRowHeader UIItemRowHeader
        {
            get
            {
                if ((this.mUIItemRowHeader == null))
                {
                    this.mUIItemRowHeader = new WinRowHeader(this);
                }
                return this.mUIItemRowHeader;
            }
        }
        
        public WinRowHeader UIItemRowHeader1
        {
            get
            {
                if ((this.mUIItemRowHeader1 == null))
                {
                    this.mUIItemRowHeader1 = new WinRowHeader(this);
                }
                return this.mUIItemRowHeader1;
            }
        }
        
        public WinRowHeader UIItemRowHeader2
        {
            get
            {
                if ((this.mUIItemRowHeader2 == null))
                {
                    this.mUIItemRowHeader2 = new WinRowHeader(this);
                }
                return this.mUIItemRowHeader2;
            }
        }
        
        public WinRowHeader UIItemRowHeader3
        {
            get
            {
                if ((this.mUIItemRowHeader3 == null))
                {
                    this.mUIItemRowHeader3 = new WinRowHeader(this);
                }
                return this.mUIItemRowHeader3;
            }
        }
        #endregion
        
        #region Fields
        private WinRowHeader mUIItemRowHeader;
        
        private WinRowHeader mUIItemRowHeader1;
        
        private WinRowHeader mUIItemRowHeader2;
        
        private WinRowHeader mUIItemRowHeader3;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDataPanelClient3 : WinClient
    {
        
        public UIDataPanelClient3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Data Panel";
            #endregion
        }
        
        #region Properties
        public WinRow UIRow1Row
        {
            get
            {
                if ((this.mUIRow1Row == null))
                {
                    this.mUIRow1Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow1Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 1";
                    this.mUIRow1Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow1Row;
            }
        }
        
        public WinRow UIRow2Row
        {
            get
            {
                if ((this.mUIRow2Row == null))
                {
                    this.mUIRow2Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow2Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 2";
                    this.mUIRow2Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow2Row;
            }
        }
        
        public WinRow UIRow3Row
        {
            get
            {
                if ((this.mUIRow3Row == null))
                {
                    this.mUIRow3Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow3Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 3";
                    this.mUIRow3Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow3Row;
            }
        }
        #endregion
        
        #region Fields
        private WinRow mUIRow1Row;
        
        private WinRow mUIRow2Row;
        
        private WinRow mUIRow3Row;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow1Row3 : WinRow
    {
        
        public UIRow1Row3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Name] = "Row 1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIColorrow0Cell
        {
            get
            {
                if ((this.mUIColorrow0Cell == null))
                {
                    this.mUIColorrow0Cell = new WinCell(this);
                }
                return this.mUIColorrow0Cell;
            }
        }
        
        public WinCell UIFacebookCell
        {
            get
            {
                if ((this.mUIFacebookCell == null))
                {
                    this.mUIFacebookCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFacebookCell.SearchProperties[WinCell.PropertyNames.Value] = "Facebook";
                    #endregion
                }
                return this.mUIFacebookCell;
            }
        }
        
        public WinCell UIItem000Cell
        {
            get
            {
                if ((this.mUIItem000Cell == null))
                {
                    this.mUIItem000Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem000Cell.SearchProperties[WinCell.PropertyNames.Value] = "0.00";
                    #endregion
                }
                return this.mUIItem000Cell;
            }
        }
        
        public WinCell UIItem000Cell1
        {
            get
            {
                if ((this.mUIItem000Cell1 == null))
                {
                    this.mUIItem000Cell1 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem000Cell1.SearchProperties[WinCell.PropertyNames.Value] = "0.00 %";
                    #endregion
                }
                return this.mUIItem000Cell1;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIColorrow0Cell;
        
        private WinCell mUIFacebookCell;
        
        private WinCell mUIItem000Cell;
        
        private WinCell mUIItem000Cell1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow2Row3 : WinRow
    {
        
        public UIRow2Row3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Name] = "Row 2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIColorrow1Cell
        {
            get
            {
                if ((this.mUIColorrow1Cell == null))
                {
                    this.mUIColorrow1Cell = new WinCell(this);
                }
                return this.mUIColorrow1Cell;
            }
        }
        
        public WinCell UIAdCenterCell
        {
            get
            {
                if ((this.mUIAdCenterCell == null))
                {
                    this.mUIAdCenterCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAdCenterCell.SearchProperties[WinCell.PropertyNames.Value] = "AdCenter";
                    #endregion
                }
                return this.mUIAdCenterCell;
            }
        }
        
        public WinCell UIItem000Cell
        {
            get
            {
                if ((this.mUIItem000Cell == null))
                {
                    this.mUIItem000Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem000Cell.SearchProperties[WinCell.PropertyNames.Value] = "0.00";
                    #endregion
                }
                return this.mUIItem000Cell;
            }
        }
        
        public WinCell UIItem000Cell1
        {
            get
            {
                if ((this.mUIItem000Cell1 == null))
                {
                    this.mUIItem000Cell1 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem000Cell1.SearchProperties[WinCell.PropertyNames.Value] = "0.00 %";
                    #endregion
                }
                return this.mUIItem000Cell1;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIColorrow1Cell;
        
        private WinCell mUIAdCenterCell;
        
        private WinCell mUIItem000Cell;
        
        private WinCell mUIItem000Cell1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow3Row3 : WinRow
    {
        
        public UIRow3Row3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Name] = "Row 3";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIColorrow2Cell
        {
            get
            {
                if ((this.mUIColorrow2Cell == null))
                {
                    this.mUIColorrow2Cell = new WinCell(this);
                }
                return this.mUIColorrow2Cell;
            }
        }
        
        public WinCell UIGoogleCell
        {
            get
            {
                if ((this.mUIGoogleCell == null))
                {
                    this.mUIGoogleCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIGoogleCell.SearchProperties[WinCell.PropertyNames.Value] = "Google";
                    #endregion
                }
                return this.mUIGoogleCell;
            }
        }
        
        public WinCell UIItem000Cell
        {
            get
            {
                if ((this.mUIItem000Cell == null))
                {
                    this.mUIItem000Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem000Cell.SearchProperties[WinCell.PropertyNames.Value] = "0.00";
                    #endregion
                }
                return this.mUIItem000Cell;
            }
        }
        
        public WinCell UIItem000Cell1
        {
            get
            {
                if ((this.mUIItem000Cell1 == null))
                {
                    this.mUIItem000Cell1 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem000Cell1.SearchProperties[WinCell.PropertyNames.Value] = "0.00 %";
                    #endregion
                }
                return this.mUIItem000Cell1;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIColorrow2Cell;
        
        private WinCell mUIGoogleCell;
        
        private WinCell mUIItem000Cell;
        
        private WinCell mUIItem000Cell1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar23 : WinScrollBar
    {
        
        public UIVerticalScrollBar23(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar23 : WinScrollBar
    {
        
        public UIHorizontalScrollBar23(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPieChartWindow3 : WinWindow
    {
        
        public UIPieChartWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "pieChart";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIPieChartMenuBar
        {
            get
            {
                if ((this.mUIPieChartMenuBar == null))
                {
                    this.mUIPieChartMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPieChartMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIPieChartMenuBar;
            }
        }
        
        public WinTitleBar UIPieChartTitleBar
        {
            get
            {
                if ((this.mUIPieChartTitleBar == null))
                {
                    this.mUIPieChartTitleBar = new WinTitleBar(this);
                }
                return this.mUIPieChartTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIPieChartMenuBar1
        {
            get
            {
                if ((this.mUIPieChartMenuBar1 == null))
                {
                    this.mUIPieChartMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPieChartMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIPieChartMenuBar1;
            }
        }
        
        public WinClient UIPieChartClient
        {
            get
            {
                if ((this.mUIPieChartClient == null))
                {
                    this.mUIPieChartClient = new WinClient(this);
                }
                return this.mUIPieChartClient;
            }
        }
        
        public UIVerticalScrollBar24 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar24(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar24 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar24(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIPieChartGrip
        {
            get
            {
                if ((this.mUIPieChartGrip == null))
                {
                    this.mUIPieChartGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIPieChartGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIPieChartGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIPieChartMenuBar;
        
        private WinTitleBar mUIPieChartTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIPieChartMenuBar1;
        
        private WinClient mUIPieChartClient;
        
        private UIVerticalScrollBar24 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar24 mUIHorizontalScrollBar;
        
        private WinControl mUIPieChartGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar24 : WinScrollBar
    {
        
        public UIVerticalScrollBar24(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar24 : WinScrollBar
    {
        
        public UIHorizontalScrollBar24(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPanel2Window : WinWindow
    {
        
        public UIPanel2Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "panel2";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIPanel2MenuBar
        {
            get
            {
                if ((this.mUIPanel2MenuBar == null))
                {
                    this.mUIPanel2MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanel2MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIPanel2MenuBar;
            }
        }
        
        public WinTitleBar UIPanel2TitleBar
        {
            get
            {
                if ((this.mUIPanel2TitleBar == null))
                {
                    this.mUIPanel2TitleBar = new WinTitleBar(this);
                }
                return this.mUIPanel2TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIPanel2MenuBar1
        {
            get
            {
                if ((this.mUIPanel2MenuBar1 == null))
                {
                    this.mUIPanel2MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanel2MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIPanel2MenuBar1;
            }
        }
        
        public WinClient UIPanel2Client
        {
            get
            {
                if ((this.mUIPanel2Client == null))
                {
                    this.mUIPanel2Client = new WinClient(this);
                }
                return this.mUIPanel2Client;
            }
        }
        
        public WinWindow UIPanel1Window
        {
            get
            {
                if ((this.mUIPanel1Window == null))
                {
                    this.mUIPanel1Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUIPanel1Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIPanel1Window.SearchProperties[WinWindow.PropertyNames.Instance] = "6";
                    #endregion
                }
                return this.mUIPanel1Window;
            }
        }
        
        public WinWindow UIGridControl1Window
        {
            get
            {
                if ((this.mUIGridControl1Window == null))
                {
                    this.mUIGridControl1Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUIGridControl1Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIGridControl1Window.SearchProperties[WinWindow.PropertyNames.Instance] = "5";
                    #endregion
                }
                return this.mUIGridControl1Window;
            }
        }
        
        public WinWindow UILabel3Window
        {
            get
            {
                if ((this.mUILabel3Window == null))
                {
                    this.mUILabel3Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUILabel3Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
                    this.mUILabel3Window.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
                    #endregion
                }
                return this.mUILabel3Window;
            }
        }
        
        public WinWindow UIPanel3Window
        {
            get
            {
                if ((this.mUIPanel3Window == null))
                {
                    this.mUIPanel3Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUIPanel3Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIPanel3Window.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
                    #endregion
                }
                return this.mUIPanel3Window;
            }
        }
        
        public WinWindow UITotalChartWindow
        {
            get
            {
                if ((this.mUITotalChartWindow == null))
                {
                    this.mUITotalChartWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUITotalChartWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUITotalChartWindow.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    #endregion
                }
                return this.mUITotalChartWindow;
            }
        }
        
        public UIVerticalScrollBar25 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar25(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar25 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar25(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIPanel2Grip
        {
            get
            {
                if ((this.mUIPanel2Grip == null))
                {
                    this.mUIPanel2Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUIPanel2Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIPanel2Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIPanel2MenuBar;
        
        private WinTitleBar mUIPanel2TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIPanel2MenuBar1;
        
        private WinClient mUIPanel2Client;
        
        private WinWindow mUIPanel1Window;
        
        private WinWindow mUIGridControl1Window;
        
        private WinWindow mUILabel3Window;
        
        private WinWindow mUIPanel3Window;
        
        private WinWindow mUITotalChartWindow;
        
        private UIVerticalScrollBar25 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar25 mUIHorizontalScrollBar;
        
        private WinControl mUIPanel2Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar25 : WinScrollBar
    {
        
        public UIVerticalScrollBar25(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar25 : WinScrollBar
    {
        
        public UIHorizontalScrollBar25(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPanel1Window5 : WinWindow
    {
        
        public UIPanel1Window5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "panel1";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIPanel1MenuBar
        {
            get
            {
                if ((this.mUIPanel1MenuBar == null))
                {
                    this.mUIPanel1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanel1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIPanel1MenuBar;
            }
        }
        
        public WinTitleBar UIPanel1TitleBar
        {
            get
            {
                if ((this.mUIPanel1TitleBar == null))
                {
                    this.mUIPanel1TitleBar = new WinTitleBar(this);
                }
                return this.mUIPanel1TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIPanel1MenuBar1
        {
            get
            {
                if ((this.mUIPanel1MenuBar1 == null))
                {
                    this.mUIPanel1MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanel1MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIPanel1MenuBar1;
            }
        }
        
        public WinClient UIPanel1Client
        {
            get
            {
                if ((this.mUIPanel1Client == null))
                {
                    this.mUIPanel1Client = new WinClient(this);
                }
                return this.mUIPanel1Client;
            }
        }
        
        public WinWindow UIComboBoxShowTypeWindow
        {
            get
            {
                if ((this.mUIComboBoxShowTypeWindow == null))
                {
                    this.mUIComboBoxShowTypeWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIComboBoxShowTypeWindow.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Media";
                    this.mUIComboBoxShowTypeWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIComboBoxShowTypeWindow;
            }
        }
        
        public UIMediaComboBox UIMediaComboBox
        {
            get
            {
                if ((this.mUIMediaComboBox == null))
                {
                    this.mUIMediaComboBox = new UIMediaComboBox(this);
                }
                return this.mUIMediaComboBox;
            }
        }
        
        public WinWindow UIPerformancebyWindow
        {
            get
            {
                if ((this.mUIPerformancebyWindow == null))
                {
                    this.mUIPerformancebyWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIPerformancebyWindow.SearchProperties[WinWindow.PropertyNames.Name] = "Performance by";
                    this.mUIPerformancebyWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIPerformancebyWindow;
            }
        }
        
        public WinText UIPerformancebyText
        {
            get
            {
                if ((this.mUIPerformancebyText == null))
                {
                    this.mUIPerformancebyText = new WinText(this);
                    #region Search Criteria
                    this.mUIPerformancebyText.SearchProperties[WinText.PropertyNames.Name] = "Performance by";
                    #endregion
                }
                return this.mUIPerformancebyText;
            }
        }
        
        public WinWindow UILabel1Window
        {
            get
            {
                if ((this.mUILabel1Window == null))
                {
                    this.mUILabel1Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUILabel1Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUILabel1Window;
            }
        }
        
        public UIVerticalScrollBar26 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar26(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar26 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar26(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIPanel1Grip
        {
            get
            {
                if ((this.mUIPanel1Grip == null))
                {
                    this.mUIPanel1Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUIPanel1Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIPanel1Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIPanel1MenuBar;
        
        private WinTitleBar mUIPanel1TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIPanel1MenuBar1;
        
        private WinClient mUIPanel1Client;
        
        private WinWindow mUIComboBoxShowTypeWindow;
        
        private UIMediaComboBox mUIMediaComboBox;
        
        private WinWindow mUIPerformancebyWindow;
        
        private WinText mUIPerformancebyText;
        
        private WinWindow mUILabel1Window;
        
        private UIVerticalScrollBar26 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar26 mUIHorizontalScrollBar;
        
        private WinControl mUIPanel1Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMediaComboBox : WinComboBox
    {
        
        public UIMediaComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinComboBox.PropertyNames.Name] = "Media";
            #endregion
        }
        
        #region Properties
        public WinText UIMediaText
        {
            get
            {
                if ((this.mUIMediaText == null))
                {
                    this.mUIMediaText = new WinText(this);
                    #region Search Criteria
                    this.mUIMediaText.SearchProperties[WinText.PropertyNames.Name] = "Media";
                    #endregion
                }
                return this.mUIMediaText;
            }
        }
        
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        
        public WinList UIComboBoxShowTypeList
        {
            get
            {
                if ((this.mUIComboBoxShowTypeList == null))
                {
                    this.mUIComboBoxShowTypeList = new WinList(this);
                    #region Search Criteria
                    this.mUIComboBoxShowTypeList.SearchProperties[WinList.PropertyNames.Name] = "Media";
                    #endregion
                }
                return this.mUIComboBoxShowTypeList;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIMediaText;
        
        private WinButton mUIOpenButton;
        
        private WinList mUIComboBoxShowTypeList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar26 : WinScrollBar
    {
        
        public UIVerticalScrollBar26(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar26 : WinScrollBar
    {
        
        public UIHorizontalScrollBar26(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIComboBoxShowTypeWindow : WinWindow
    {
        
        public UIComboBoxShowTypeWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "comboBoxShowType";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIComboBoxShowTypeMenuBar
        {
            get
            {
                if ((this.mUIComboBoxShowTypeMenuBar == null))
                {
                    this.mUIComboBoxShowTypeMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIComboBoxShowTypeMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIComboBoxShowTypeMenuBar;
            }
        }
        
        public WinTitleBar UIComboBoxShowTypeTitleBar
        {
            get
            {
                if ((this.mUIComboBoxShowTypeTitleBar == null))
                {
                    this.mUIComboBoxShowTypeTitleBar = new WinTitleBar(this);
                }
                return this.mUIComboBoxShowTypeTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIComboBoxShowTypeMenuBar1
        {
            get
            {
                if ((this.mUIComboBoxShowTypeMenuBar1 == null))
                {
                    this.mUIComboBoxShowTypeMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIComboBoxShowTypeMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIComboBoxShowTypeMenuBar1;
            }
        }
        
        public UIComboBoxShowTypeList UIComboBoxShowTypeList
        {
            get
            {
                if ((this.mUIComboBoxShowTypeList == null))
                {
                    this.mUIComboBoxShowTypeList = new UIComboBoxShowTypeList(this);
                }
                return this.mUIComboBoxShowTypeList;
            }
        }
        
        public UIVerticalScrollBar27 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar27(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar27 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar27(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIComboBoxShowTypeGrip
        {
            get
            {
                if ((this.mUIComboBoxShowTypeGrip == null))
                {
                    this.mUIComboBoxShowTypeGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIComboBoxShowTypeGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIComboBoxShowTypeGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIComboBoxShowTypeMenuBar;
        
        private WinTitleBar mUIComboBoxShowTypeTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIComboBoxShowTypeMenuBar1;
        
        private UIComboBoxShowTypeList mUIComboBoxShowTypeList;
        
        private UIVerticalScrollBar27 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar27 mUIHorizontalScrollBar;
        
        private WinControl mUIComboBoxShowTypeGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIComboBoxShowTypeList : WinList
    {
        
        public UIComboBoxShowTypeList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Media";
            #endregion
        }
        
        #region Properties
        public WinListItem UIMediaListItem
        {
            get
            {
                if ((this.mUIMediaListItem == null))
                {
                    this.mUIMediaListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIMediaListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Media";
                    #endregion
                }
                return this.mUIMediaListItem;
            }
        }
        
        public WinListItem UIAccountsListItem
        {
            get
            {
                if ((this.mUIAccountsListItem == null))
                {
                    this.mUIAccountsListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIAccountsListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Accounts";
                    #endregion
                }
                return this.mUIAccountsListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUIMediaListItem;
        
        private WinListItem mUIAccountsListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar27 : WinScrollBar
    {
        
        public UIVerticalScrollBar27(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar27 : WinScrollBar
    {
        
        public UIHorizontalScrollBar27(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPerformancebyWindow : WinWindow
    {
        
        public UIPerformancebyWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "labelControl1";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UILabelControl1MenuBar
        {
            get
            {
                if ((this.mUILabelControl1MenuBar == null))
                {
                    this.mUILabelControl1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabelControl1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUILabelControl1MenuBar;
            }
        }
        
        public WinTitleBar UIPerformancebyTitleBar
        {
            get
            {
                if ((this.mUIPerformancebyTitleBar == null))
                {
                    this.mUIPerformancebyTitleBar = new WinTitleBar(this);
                }
                return this.mUIPerformancebyTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UILabelControl1MenuBar1
        {
            get
            {
                if ((this.mUILabelControl1MenuBar1 == null))
                {
                    this.mUILabelControl1MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabelControl1MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUILabelControl1MenuBar1;
            }
        }
        
        public UIPerformancebyScrollBar UIPerformancebyScrollBar
        {
            get
            {
                if ((this.mUIPerformancebyScrollBar == null))
                {
                    this.mUIPerformancebyScrollBar = new UIPerformancebyScrollBar(this);
                }
                return this.mUIPerformancebyScrollBar;
            }
        }
        
        public UIPerformancebyScrollBar1 UIPerformancebyScrollBar1
        {
            get
            {
                if ((this.mUIPerformancebyScrollBar1 == null))
                {
                    this.mUIPerformancebyScrollBar1 = new UIPerformancebyScrollBar1(this);
                }
                return this.mUIPerformancebyScrollBar1;
            }
        }
        
        public WinControl UIPerformancebyGrip
        {
            get
            {
                if ((this.mUIPerformancebyGrip == null))
                {
                    this.mUIPerformancebyGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIPerformancebyGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIPerformancebyGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUILabelControl1MenuBar;
        
        private WinTitleBar mUIPerformancebyTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUILabelControl1MenuBar1;
        
        private UIPerformancebyScrollBar mUIPerformancebyScrollBar;
        
        private UIPerformancebyScrollBar1 mUIPerformancebyScrollBar1;
        
        private WinControl mUIPerformancebyGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPerformancebyScrollBar : WinScrollBar
    {
        
        public UIPerformancebyScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPerformancebyScrollBar1 : WinScrollBar
    {
        
        public UIPerformancebyScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UILabel1Window4 : WinWindow
    {
        
        public UILabel1Window4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "label1";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UILabel1MenuBar
        {
            get
            {
                if ((this.mUILabel1MenuBar == null))
                {
                    this.mUILabel1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabel1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUILabel1MenuBar;
            }
        }
        
        public WinTitleBar UILabel1TitleBar
        {
            get
            {
                if ((this.mUILabel1TitleBar == null))
                {
                    this.mUILabel1TitleBar = new WinTitleBar(this);
                }
                return this.mUILabel1TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UILabel1MenuBar1
        {
            get
            {
                if ((this.mUILabel1MenuBar1 == null))
                {
                    this.mUILabel1MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabel1MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUILabel1MenuBar1;
            }
        }
        
        public WinText UILabel1Text
        {
            get
            {
                if ((this.mUILabel1Text == null))
                {
                    this.mUILabel1Text = new WinText(this);
                }
                return this.mUILabel1Text;
            }
        }
        
        public UIVerticalScrollBar28 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar28(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar28 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar28(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UILabel1Grip
        {
            get
            {
                if ((this.mUILabel1Grip == null))
                {
                    this.mUILabel1Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUILabel1Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUILabel1Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUILabel1MenuBar;
        
        private WinTitleBar mUILabel1TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUILabel1MenuBar1;
        
        private WinText mUILabel1Text;
        
        private UIVerticalScrollBar28 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar28 mUIHorizontalScrollBar;
        
        private WinControl mUILabel1Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar28 : WinScrollBar
    {
        
        public UIVerticalScrollBar28(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar28 : WinScrollBar
    {
        
        public UIHorizontalScrollBar28(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIGridControl1Window : WinWindow
    {
        
        public UIGridControl1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "gridControl1";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIGridControl1MenuBar
        {
            get
            {
                if ((this.mUIGridControl1MenuBar == null))
                {
                    this.mUIGridControl1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIGridControl1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIGridControl1MenuBar;
            }
        }
        
        public WinTitleBar UIGridControl1TitleBar
        {
            get
            {
                if ((this.mUIGridControl1TitleBar == null))
                {
                    this.mUIGridControl1TitleBar = new WinTitleBar(this);
                }
                return this.mUIGridControl1TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIGridControl1MenuBar1
        {
            get
            {
                if ((this.mUIGridControl1MenuBar1 == null))
                {
                    this.mUIGridControl1MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIGridControl1MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIGridControl1MenuBar1;
            }
        }
        
        public UIGridControl1Table UIGridControl1Table
        {
            get
            {
                if ((this.mUIGridControl1Table == null))
                {
                    this.mUIGridControl1Table = new UIGridControl1Table(this);
                }
                return this.mUIGridControl1Table;
            }
        }
        
        public WinClient UIHeaderPanelClient
        {
            get
            {
                if ((this.mUIHeaderPanelClient == null))
                {
                    this.mUIHeaderPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIHeaderPanelClient.SearchProperties[WinControl.PropertyNames.Name] = "Header Panel";
                    #endregion
                }
                return this.mUIHeaderPanelClient;
            }
        }
        
        public WinClient UIDataPanelClient
        {
            get
            {
                if ((this.mUIDataPanelClient == null))
                {
                    this.mUIDataPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIDataPanelClient.SearchProperties[WinControl.PropertyNames.Name] = "Data Panel";
                    #endregion
                }
                return this.mUIDataPanelClient;
            }
        }
        
        public UIRow1Row4 UIRow1Row
        {
            get
            {
                if ((this.mUIRow1Row == null))
                {
                    this.mUIRow1Row = new UIRow1Row4(this);
                }
                return this.mUIRow1Row;
            }
        }
        
        public UIRow2Row4 UIRow2Row
        {
            get
            {
                if ((this.mUIRow2Row == null))
                {
                    this.mUIRow2Row = new UIRow2Row4(this);
                }
                return this.mUIRow2Row;
            }
        }
        
        public UIRow3Row4 UIRow3Row
        {
            get
            {
                if ((this.mUIRow3Row == null))
                {
                    this.mUIRow3Row = new UIRow3Row4(this);
                }
                return this.mUIRow3Row;
            }
        }
        
        public UIVerticalScrollBar29 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar29(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar29 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar29(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIGridControl1Grip
        {
            get
            {
                if ((this.mUIGridControl1Grip == null))
                {
                    this.mUIGridControl1Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUIGridControl1Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIGridControl1Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIGridControl1MenuBar;
        
        private WinTitleBar mUIGridControl1TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIGridControl1MenuBar1;
        
        private UIGridControl1Table mUIGridControl1Table;
        
        private WinClient mUIHeaderPanelClient;
        
        private WinClient mUIDataPanelClient;
        
        private UIRow1Row4 mUIRow1Row;
        
        private UIRow2Row4 mUIRow2Row;
        
        private UIRow3Row4 mUIRow3Row;
        
        private UIVerticalScrollBar29 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar29 mUIHorizontalScrollBar;
        
        private WinControl mUIGridControl1Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIGridControl1Table : WinTable
    {
        
        public UIGridControl1Table(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public UIHeaderPanelClient4 UIHeaderPanelClient
        {
            get
            {
                if ((this.mUIHeaderPanelClient == null))
                {
                    this.mUIHeaderPanelClient = new UIHeaderPanelClient4(this);
                }
                return this.mUIHeaderPanelClient;
            }
        }
        
        public UIDataPanelClient4 UIDataPanelClient
        {
            get
            {
                if ((this.mUIDataPanelClient == null))
                {
                    this.mUIDataPanelClient = new UIDataPanelClient4(this);
                }
                return this.mUIDataPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UIHeaderPanelClient4 mUIHeaderPanelClient;
        
        private UIDataPanelClient4 mUIDataPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHeaderPanelClient4 : WinClient
    {
        
        public UIHeaderPanelClient4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinRowHeader UIItemRowHeader
        {
            get
            {
                if ((this.mUIItemRowHeader == null))
                {
                    this.mUIItemRowHeader = new WinRowHeader(this);
                }
                return this.mUIItemRowHeader;
            }
        }
        
        public WinRowHeader UIItemRowHeader1
        {
            get
            {
                if ((this.mUIItemRowHeader1 == null))
                {
                    this.mUIItemRowHeader1 = new WinRowHeader(this);
                }
                return this.mUIItemRowHeader1;
            }
        }
        
        public WinRowHeader UIItemRowHeader2
        {
            get
            {
                if ((this.mUIItemRowHeader2 == null))
                {
                    this.mUIItemRowHeader2 = new WinRowHeader(this);
                }
                return this.mUIItemRowHeader2;
            }
        }
        
        public WinRowHeader UIItemRowHeader3
        {
            get
            {
                if ((this.mUIItemRowHeader3 == null))
                {
                    this.mUIItemRowHeader3 = new WinRowHeader(this);
                }
                return this.mUIItemRowHeader3;
            }
        }
        
        public WinRowHeader UIItemRowHeader4
        {
            get
            {
                if ((this.mUIItemRowHeader4 == null))
                {
                    this.mUIItemRowHeader4 = new WinRowHeader(this);
                }
                return this.mUIItemRowHeader4;
            }
        }
        
        public WinRowHeader UIItemRowHeader5
        {
            get
            {
                if ((this.mUIItemRowHeader5 == null))
                {
                    this.mUIItemRowHeader5 = new WinRowHeader(this);
                }
                return this.mUIItemRowHeader5;
            }
        }
        
        public WinRowHeader UIItemRowHeader6
        {
            get
            {
                if ((this.mUIItemRowHeader6 == null))
                {
                    this.mUIItemRowHeader6 = new WinRowHeader(this);
                }
                return this.mUIItemRowHeader6;
            }
        }
        
        public WinRowHeader UIItemRowHeader7
        {
            get
            {
                if ((this.mUIItemRowHeader7 == null))
                {
                    this.mUIItemRowHeader7 = new WinRowHeader(this);
                }
                return this.mUIItemRowHeader7;
            }
        }
        
        public WinRowHeader UIItemRowHeader8
        {
            get
            {
                if ((this.mUIItemRowHeader8 == null))
                {
                    this.mUIItemRowHeader8 = new WinRowHeader(this);
                }
                return this.mUIItemRowHeader8;
            }
        }
        #endregion
        
        #region Fields
        private WinRowHeader mUIItemRowHeader;
        
        private WinRowHeader mUIItemRowHeader1;
        
        private WinRowHeader mUIItemRowHeader2;
        
        private WinRowHeader mUIItemRowHeader3;
        
        private WinRowHeader mUIItemRowHeader4;
        
        private WinRowHeader mUIItemRowHeader5;
        
        private WinRowHeader mUIItemRowHeader6;
        
        private WinRowHeader mUIItemRowHeader7;
        
        private WinRowHeader mUIItemRowHeader8;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDataPanelClient4 : WinClient
    {
        
        public UIDataPanelClient4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Data Panel";
            #endregion
        }
        
        #region Properties
        public WinRow UIRow1Row
        {
            get
            {
                if ((this.mUIRow1Row == null))
                {
                    this.mUIRow1Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow1Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 1";
                    this.mUIRow1Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow1Row;
            }
        }
        
        public WinRow UIRow2Row
        {
            get
            {
                if ((this.mUIRow2Row == null))
                {
                    this.mUIRow2Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow2Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 2";
                    this.mUIRow2Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow2Row;
            }
        }
        
        public WinRow UIRow3Row
        {
            get
            {
                if ((this.mUIRow3Row == null))
                {
                    this.mUIRow3Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow3Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 3";
                    this.mUIRow3Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow3Row;
            }
        }
        #endregion
        
        #region Fields
        private WinRow mUIRow1Row;
        
        private WinRow mUIRow2Row;
        
        private WinRow mUIRow3Row;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow1Row4 : WinRow
    {
        
        public UIRow1Row4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Name] = "Row 1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIGoogleCell
        {
            get
            {
                if ((this.mUIGoogleCell == null))
                {
                    this.mUIGoogleCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIGoogleCell.SearchProperties[WinCell.PropertyNames.Value] = "Google";
                    #endregion
                }
                return this.mUIGoogleCell;
            }
        }
        
        public WinCell UIItem0Cell
        {
            get
            {
                if ((this.mUIItem0Cell == null))
                {
                    this.mUIItem0Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell.SearchProperties[WinCell.PropertyNames.Value] = "0";
                    #endregion
                }
                return this.mUIItem0Cell;
            }
        }
        
        public WinCell UIItem0Cell1
        {
            get
            {
                if ((this.mUIItem0Cell1 == null))
                {
                    this.mUIItem0Cell1 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell1.SearchProperties[WinCell.PropertyNames.Value] = "0";
                    #endregion
                }
                return this.mUIItem0Cell1;
            }
        }
        
        public WinCell UIItem0Cell2
        {
            get
            {
                if ((this.mUIItem0Cell2 == null))
                {
                    this.mUIItem0Cell2 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell2.SearchProperties[WinCell.PropertyNames.Value] = "0";
                    #endregion
                }
                return this.mUIItem0Cell2;
            }
        }
        
        public WinCell UIItem000Cell
        {
            get
            {
                if ((this.mUIItem000Cell == null))
                {
                    this.mUIItem000Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem000Cell.SearchProperties[WinCell.PropertyNames.Value] = "0.00";
                    #endregion
                }
                return this.mUIItem000Cell;
            }
        }
        
        public WinCell UIItem000Cell1
        {
            get
            {
                if ((this.mUIItem000Cell1 == null))
                {
                    this.mUIItem000Cell1 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem000Cell1.SearchProperties[WinCell.PropertyNames.Value] = "0.00";
                    #endregion
                }
                return this.mUIItem000Cell1;
            }
        }
        
        public WinCell UIItem000Cell2
        {
            get
            {
                if ((this.mUIItem000Cell2 == null))
                {
                    this.mUIItem000Cell2 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem000Cell2.SearchProperties[WinCell.PropertyNames.Value] = "0.00";
                    #endregion
                }
                return this.mUIItem000Cell2;
            }
        }
        
        public WinCell UIItem000Cell3
        {
            get
            {
                if ((this.mUIItem000Cell3 == null))
                {
                    this.mUIItem000Cell3 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem000Cell3.SearchProperties[WinCell.PropertyNames.Value] = "0.00 %";
                    #endregion
                }
                return this.mUIItem000Cell3;
            }
        }
        
        public WinCell UIItem000Cell4
        {
            get
            {
                if ((this.mUIItem000Cell4 == null))
                {
                    this.mUIItem000Cell4 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem000Cell4.SearchProperties[WinCell.PropertyNames.Value] = "0.00 %";
                    #endregion
                }
                return this.mUIItem000Cell4;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIGoogleCell;
        
        private WinCell mUIItem0Cell;
        
        private WinCell mUIItem0Cell1;
        
        private WinCell mUIItem0Cell2;
        
        private WinCell mUIItem000Cell;
        
        private WinCell mUIItem000Cell1;
        
        private WinCell mUIItem000Cell2;
        
        private WinCell mUIItem000Cell3;
        
        private WinCell mUIItem000Cell4;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow2Row4 : WinRow
    {
        
        public UIRow2Row4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Name] = "Row 2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIAdCenterCell
        {
            get
            {
                if ((this.mUIAdCenterCell == null))
                {
                    this.mUIAdCenterCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAdCenterCell.SearchProperties[WinCell.PropertyNames.Value] = "AdCenter";
                    #endregion
                }
                return this.mUIAdCenterCell;
            }
        }
        
        public WinCell UIItem0Cell
        {
            get
            {
                if ((this.mUIItem0Cell == null))
                {
                    this.mUIItem0Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell.SearchProperties[WinCell.PropertyNames.Value] = "0";
                    #endregion
                }
                return this.mUIItem0Cell;
            }
        }
        
        public WinCell UIItem0Cell1
        {
            get
            {
                if ((this.mUIItem0Cell1 == null))
                {
                    this.mUIItem0Cell1 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell1.SearchProperties[WinCell.PropertyNames.Value] = "0";
                    #endregion
                }
                return this.mUIItem0Cell1;
            }
        }
        
        public WinCell UIItem0Cell2
        {
            get
            {
                if ((this.mUIItem0Cell2 == null))
                {
                    this.mUIItem0Cell2 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell2.SearchProperties[WinCell.PropertyNames.Value] = "0";
                    #endregion
                }
                return this.mUIItem0Cell2;
            }
        }
        
        public WinCell UIItem000Cell
        {
            get
            {
                if ((this.mUIItem000Cell == null))
                {
                    this.mUIItem000Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem000Cell.SearchProperties[WinCell.PropertyNames.Value] = "0.00";
                    #endregion
                }
                return this.mUIItem000Cell;
            }
        }
        
        public WinCell UIItem000Cell1
        {
            get
            {
                if ((this.mUIItem000Cell1 == null))
                {
                    this.mUIItem000Cell1 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem000Cell1.SearchProperties[WinCell.PropertyNames.Value] = "0.00";
                    #endregion
                }
                return this.mUIItem000Cell1;
            }
        }
        
        public WinCell UIItem000Cell2
        {
            get
            {
                if ((this.mUIItem000Cell2 == null))
                {
                    this.mUIItem000Cell2 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem000Cell2.SearchProperties[WinCell.PropertyNames.Value] = "0.00";
                    #endregion
                }
                return this.mUIItem000Cell2;
            }
        }
        
        public WinCell UIItem000Cell3
        {
            get
            {
                if ((this.mUIItem000Cell3 == null))
                {
                    this.mUIItem000Cell3 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem000Cell3.SearchProperties[WinCell.PropertyNames.Value] = "0.00 %";
                    #endregion
                }
                return this.mUIItem000Cell3;
            }
        }
        
        public WinCell UIItem000Cell4
        {
            get
            {
                if ((this.mUIItem000Cell4 == null))
                {
                    this.mUIItem000Cell4 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem000Cell4.SearchProperties[WinCell.PropertyNames.Value] = "0.00 %";
                    #endregion
                }
                return this.mUIItem000Cell4;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIAdCenterCell;
        
        private WinCell mUIItem0Cell;
        
        private WinCell mUIItem0Cell1;
        
        private WinCell mUIItem0Cell2;
        
        private WinCell mUIItem000Cell;
        
        private WinCell mUIItem000Cell1;
        
        private WinCell mUIItem000Cell2;
        
        private WinCell mUIItem000Cell3;
        
        private WinCell mUIItem000Cell4;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow3Row4 : WinRow
    {
        
        public UIRow3Row4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Name] = "Row 3";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFacebookCell
        {
            get
            {
                if ((this.mUIFacebookCell == null))
                {
                    this.mUIFacebookCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFacebookCell.SearchProperties[WinCell.PropertyNames.Value] = "Facebook";
                    #endregion
                }
                return this.mUIFacebookCell;
            }
        }
        
        public WinCell UIItem0Cell
        {
            get
            {
                if ((this.mUIItem0Cell == null))
                {
                    this.mUIItem0Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell.SearchProperties[WinCell.PropertyNames.Value] = "0";
                    #endregion
                }
                return this.mUIItem0Cell;
            }
        }
        
        public WinCell UIItem0Cell1
        {
            get
            {
                if ((this.mUIItem0Cell1 == null))
                {
                    this.mUIItem0Cell1 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell1.SearchProperties[WinCell.PropertyNames.Value] = "0";
                    #endregion
                }
                return this.mUIItem0Cell1;
            }
        }
        
        public WinCell UIItem0Cell2
        {
            get
            {
                if ((this.mUIItem0Cell2 == null))
                {
                    this.mUIItem0Cell2 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell2.SearchProperties[WinCell.PropertyNames.Value] = "0";
                    #endregion
                }
                return this.mUIItem0Cell2;
            }
        }
        
        public WinCell UIItem000Cell
        {
            get
            {
                if ((this.mUIItem000Cell == null))
                {
                    this.mUIItem000Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem000Cell.SearchProperties[WinCell.PropertyNames.Value] = "0.00";
                    #endregion
                }
                return this.mUIItem000Cell;
            }
        }
        
        public WinCell UIItem000Cell1
        {
            get
            {
                if ((this.mUIItem000Cell1 == null))
                {
                    this.mUIItem000Cell1 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem000Cell1.SearchProperties[WinCell.PropertyNames.Value] = "0.00";
                    #endregion
                }
                return this.mUIItem000Cell1;
            }
        }
        
        public WinCell UIItem000Cell2
        {
            get
            {
                if ((this.mUIItem000Cell2 == null))
                {
                    this.mUIItem000Cell2 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem000Cell2.SearchProperties[WinCell.PropertyNames.Value] = "0.00";
                    #endregion
                }
                return this.mUIItem000Cell2;
            }
        }
        
        public WinCell UIItem000Cell3
        {
            get
            {
                if ((this.mUIItem000Cell3 == null))
                {
                    this.mUIItem000Cell3 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem000Cell3.SearchProperties[WinCell.PropertyNames.Value] = "0.00 %";
                    #endregion
                }
                return this.mUIItem000Cell3;
            }
        }
        
        public WinCell UIItem000Cell4
        {
            get
            {
                if ((this.mUIItem000Cell4 == null))
                {
                    this.mUIItem000Cell4 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem000Cell4.SearchProperties[WinCell.PropertyNames.Value] = "0.00 %";
                    #endregion
                }
                return this.mUIItem000Cell4;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFacebookCell;
        
        private WinCell mUIItem0Cell;
        
        private WinCell mUIItem0Cell1;
        
        private WinCell mUIItem0Cell2;
        
        private WinCell mUIItem000Cell;
        
        private WinCell mUIItem000Cell1;
        
        private WinCell mUIItem000Cell2;
        
        private WinCell mUIItem000Cell3;
        
        private WinCell mUIItem000Cell4;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar29 : WinScrollBar
    {
        
        public UIVerticalScrollBar29(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar29 : WinScrollBar
    {
        
        public UIHorizontalScrollBar29(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UILabel3Window : WinWindow
    {
        
        public UILabel3Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "label3";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UILabel3MenuBar
        {
            get
            {
                if ((this.mUILabel3MenuBar == null))
                {
                    this.mUILabel3MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabel3MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUILabel3MenuBar;
            }
        }
        
        public WinTitleBar UILabel3TitleBar
        {
            get
            {
                if ((this.mUILabel3TitleBar == null))
                {
                    this.mUILabel3TitleBar = new WinTitleBar(this);
                }
                return this.mUILabel3TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UILabel3MenuBar1
        {
            get
            {
                if ((this.mUILabel3MenuBar1 == null))
                {
                    this.mUILabel3MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabel3MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUILabel3MenuBar1;
            }
        }
        
        public WinText UILabel3Text
        {
            get
            {
                if ((this.mUILabel3Text == null))
                {
                    this.mUILabel3Text = new WinText(this);
                }
                return this.mUILabel3Text;
            }
        }
        
        public UIVerticalScrollBar30 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar30(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar30 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar30(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UILabel3Grip
        {
            get
            {
                if ((this.mUILabel3Grip == null))
                {
                    this.mUILabel3Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUILabel3Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUILabel3Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUILabel3MenuBar;
        
        private WinTitleBar mUILabel3TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUILabel3MenuBar1;
        
        private WinText mUILabel3Text;
        
        private UIVerticalScrollBar30 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar30 mUIHorizontalScrollBar;
        
        private WinControl mUILabel3Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar30 : WinScrollBar
    {
        
        public UIVerticalScrollBar30(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar30 : WinScrollBar
    {
        
        public UIHorizontalScrollBar30(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPanel3Window : WinWindow
    {
        
        public UIPanel3Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "panel3";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIPanel3MenuBar
        {
            get
            {
                if ((this.mUIPanel3MenuBar == null))
                {
                    this.mUIPanel3MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanel3MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIPanel3MenuBar;
            }
        }
        
        public WinTitleBar UIPanel3TitleBar
        {
            get
            {
                if ((this.mUIPanel3TitleBar == null))
                {
                    this.mUIPanel3TitleBar = new WinTitleBar(this);
                }
                return this.mUIPanel3TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIPanel3MenuBar1
        {
            get
            {
                if ((this.mUIPanel3MenuBar1 == null))
                {
                    this.mUIPanel3MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanel3MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIPanel3MenuBar1;
            }
        }
        
        public WinClient UIPanel3Client
        {
            get
            {
                if ((this.mUIPanel3Client == null))
                {
                    this.mUIPanel3Client = new WinClient(this);
                }
                return this.mUIPanel3Client;
            }
        }
        
        public WinWindow UIComboBoxShowItemWindow
        {
            get
            {
                if ((this.mUIComboBoxShowItemWindow == null))
                {
                    this.mUIComboBoxShowItemWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIComboBoxShowItemWindow.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Impressions";
                    this.mUIComboBoxShowItemWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIComboBoxShowItemWindow;
            }
        }
        
        public UIImpressionsComboBox UIImpressionsComboBox
        {
            get
            {
                if ((this.mUIImpressionsComboBox == null))
                {
                    this.mUIImpressionsComboBox = new UIImpressionsComboBox(this);
                }
                return this.mUIImpressionsComboBox;
            }
        }
        
        public WinWindow UITrendsofWindow
        {
            get
            {
                if ((this.mUITrendsofWindow == null))
                {
                    this.mUITrendsofWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUITrendsofWindow.SearchProperties[WinWindow.PropertyNames.Name] = "Trends of";
                    this.mUITrendsofWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUITrendsofWindow;
            }
        }
        
        public WinText UITrendsofText
        {
            get
            {
                if ((this.mUITrendsofText == null))
                {
                    this.mUITrendsofText = new WinText(this);
                    #region Search Criteria
                    this.mUITrendsofText.SearchProperties[WinText.PropertyNames.Name] = "Trends of";
                    #endregion
                }
                return this.mUITrendsofText;
            }
        }
        
        public WinWindow UILabel2Window
        {
            get
            {
                if ((this.mUILabel2Window == null))
                {
                    this.mUILabel2Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUILabel2Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUILabel2Window;
            }
        }
        
        public UIVerticalScrollBar31 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar31(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar31 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar31(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIPanel3Grip
        {
            get
            {
                if ((this.mUIPanel3Grip == null))
                {
                    this.mUIPanel3Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUIPanel3Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIPanel3Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIPanel3MenuBar;
        
        private WinTitleBar mUIPanel3TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIPanel3MenuBar1;
        
        private WinClient mUIPanel3Client;
        
        private WinWindow mUIComboBoxShowItemWindow;
        
        private UIImpressionsComboBox mUIImpressionsComboBox;
        
        private WinWindow mUITrendsofWindow;
        
        private WinText mUITrendsofText;
        
        private WinWindow mUILabel2Window;
        
        private UIVerticalScrollBar31 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar31 mUIHorizontalScrollBar;
        
        private WinControl mUIPanel3Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIImpressionsComboBox : WinComboBox
    {
        
        public UIImpressionsComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinComboBox.PropertyNames.Name] = "Impressions";
            #endregion
        }
        
        #region Properties
        public WinText UIImpressionsText
        {
            get
            {
                if ((this.mUIImpressionsText == null))
                {
                    this.mUIImpressionsText = new WinText(this);
                    #region Search Criteria
                    this.mUIImpressionsText.SearchProperties[WinText.PropertyNames.Name] = "Impressions";
                    #endregion
                }
                return this.mUIImpressionsText;
            }
        }
        
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        
        public WinList UIComboBoxShowItemList
        {
            get
            {
                if ((this.mUIComboBoxShowItemList == null))
                {
                    this.mUIComboBoxShowItemList = new WinList(this);
                    #region Search Criteria
                    this.mUIComboBoxShowItemList.SearchProperties[WinList.PropertyNames.Name] = "Impressions";
                    #endregion
                }
                return this.mUIComboBoxShowItemList;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIImpressionsText;
        
        private WinButton mUIOpenButton;
        
        private WinList mUIComboBoxShowItemList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar31 : WinScrollBar
    {
        
        public UIVerticalScrollBar31(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar31 : WinScrollBar
    {
        
        public UIHorizontalScrollBar31(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIComboBoxShowItemWindow : WinWindow
    {
        
        public UIComboBoxShowItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "comboBoxShowItem";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIComboBoxShowItemMenuBar
        {
            get
            {
                if ((this.mUIComboBoxShowItemMenuBar == null))
                {
                    this.mUIComboBoxShowItemMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIComboBoxShowItemMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIComboBoxShowItemMenuBar;
            }
        }
        
        public WinTitleBar UIComboBoxShowItemTitleBar
        {
            get
            {
                if ((this.mUIComboBoxShowItemTitleBar == null))
                {
                    this.mUIComboBoxShowItemTitleBar = new WinTitleBar(this);
                }
                return this.mUIComboBoxShowItemTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIComboBoxShowItemMenuBar1
        {
            get
            {
                if ((this.mUIComboBoxShowItemMenuBar1 == null))
                {
                    this.mUIComboBoxShowItemMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIComboBoxShowItemMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIComboBoxShowItemMenuBar1;
            }
        }
        
        public UIComboBoxShowItemList UIComboBoxShowItemList
        {
            get
            {
                if ((this.mUIComboBoxShowItemList == null))
                {
                    this.mUIComboBoxShowItemList = new UIComboBoxShowItemList(this);
                }
                return this.mUIComboBoxShowItemList;
            }
        }
        
        public UIVerticalScrollBar32 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar32(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar32 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar32(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIComboBoxShowItemGrip
        {
            get
            {
                if ((this.mUIComboBoxShowItemGrip == null))
                {
                    this.mUIComboBoxShowItemGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIComboBoxShowItemGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIComboBoxShowItemGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIComboBoxShowItemMenuBar;
        
        private WinTitleBar mUIComboBoxShowItemTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIComboBoxShowItemMenuBar1;
        
        private UIComboBoxShowItemList mUIComboBoxShowItemList;
        
        private UIVerticalScrollBar32 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar32 mUIHorizontalScrollBar;
        
        private WinControl mUIComboBoxShowItemGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIComboBoxShowItemList : WinList
    {
        
        public UIComboBoxShowItemList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Impressions";
            #endregion
        }
        
        #region Properties
        public WinListItem UIImpressionsListItem
        {
            get
            {
                if ((this.mUIImpressionsListItem == null))
                {
                    this.mUIImpressionsListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIImpressionsListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Impressions";
                    #endregion
                }
                return this.mUIImpressionsListItem;
            }
        }
        
        public WinListItem UIClicksListItem
        {
            get
            {
                if ((this.mUIClicksListItem == null))
                {
                    this.mUIClicksListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIClicksListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Clicks";
                    #endregion
                }
                return this.mUIClicksListItem;
            }
        }
        
        public WinListItem UIConversionsListItem
        {
            get
            {
                if ((this.mUIConversionsListItem == null))
                {
                    this.mUIConversionsListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIConversionsListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Conversions";
                    #endregion
                }
                return this.mUIConversionsListItem;
            }
        }
        
        public WinListItem UISpentListItem
        {
            get
            {
                if ((this.mUISpentListItem == null))
                {
                    this.mUISpentListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUISpentListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Spent";
                    #endregion
                }
                return this.mUISpentListItem;
            }
        }
        
        public WinListItem UIAvgCPCListItem
        {
            get
            {
                if ((this.mUIAvgCPCListItem == null))
                {
                    this.mUIAvgCPCListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIAvgCPCListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Avg.CPC";
                    #endregion
                }
                return this.mUIAvgCPCListItem;
            }
        }
        
        public WinListItem UICPAListItem
        {
            get
            {
                if ((this.mUICPAListItem == null))
                {
                    this.mUICPAListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUICPAListItem.SearchProperties[WinListItem.PropertyNames.Name] = "CPA";
                    #endregion
                }
                return this.mUICPAListItem;
            }
        }
        
        public WinListItem UICTRListItem
        {
            get
            {
                if ((this.mUICTRListItem == null))
                {
                    this.mUICTRListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUICTRListItem.SearchProperties[WinListItem.PropertyNames.Name] = "CTR";
                    #endregion
                }
                return this.mUICTRListItem;
            }
        }
        
        public WinListItem UIConvRateListItem
        {
            get
            {
                if ((this.mUIConvRateListItem == null))
                {
                    this.mUIConvRateListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIConvRateListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Conv.Rate";
                    #endregion
                }
                return this.mUIConvRateListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUIImpressionsListItem;
        
        private WinListItem mUIClicksListItem;
        
        private WinListItem mUIConversionsListItem;
        
        private WinListItem mUISpentListItem;
        
        private WinListItem mUIAvgCPCListItem;
        
        private WinListItem mUICPAListItem;
        
        private WinListItem mUICTRListItem;
        
        private WinListItem mUIConvRateListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar32 : WinScrollBar
    {
        
        public UIVerticalScrollBar32(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar32 : WinScrollBar
    {
        
        public UIHorizontalScrollBar32(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UITrendsofWindow : WinWindow
    {
        
        public UITrendsofWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "labelControl2";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UILabelControl2MenuBar
        {
            get
            {
                if ((this.mUILabelControl2MenuBar == null))
                {
                    this.mUILabelControl2MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabelControl2MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUILabelControl2MenuBar;
            }
        }
        
        public WinTitleBar UITrendsofTitleBar
        {
            get
            {
                if ((this.mUITrendsofTitleBar == null))
                {
                    this.mUITrendsofTitleBar = new WinTitleBar(this);
                }
                return this.mUITrendsofTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UILabelControl2MenuBar1
        {
            get
            {
                if ((this.mUILabelControl2MenuBar1 == null))
                {
                    this.mUILabelControl2MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabelControl2MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUILabelControl2MenuBar1;
            }
        }
        
        public UITrendsofScrollBar UITrendsofScrollBar
        {
            get
            {
                if ((this.mUITrendsofScrollBar == null))
                {
                    this.mUITrendsofScrollBar = new UITrendsofScrollBar(this);
                }
                return this.mUITrendsofScrollBar;
            }
        }
        
        public UITrendsofScrollBar1 UITrendsofScrollBar1
        {
            get
            {
                if ((this.mUITrendsofScrollBar1 == null))
                {
                    this.mUITrendsofScrollBar1 = new UITrendsofScrollBar1(this);
                }
                return this.mUITrendsofScrollBar1;
            }
        }
        
        public WinControl UITrendsofGrip
        {
            get
            {
                if ((this.mUITrendsofGrip == null))
                {
                    this.mUITrendsofGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUITrendsofGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUITrendsofGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUILabelControl2MenuBar;
        
        private WinTitleBar mUITrendsofTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUILabelControl2MenuBar1;
        
        private UITrendsofScrollBar mUITrendsofScrollBar;
        
        private UITrendsofScrollBar1 mUITrendsofScrollBar1;
        
        private WinControl mUITrendsofGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UITrendsofScrollBar : WinScrollBar
    {
        
        public UITrendsofScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UITrendsofScrollBar1 : WinScrollBar
    {
        
        public UITrendsofScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UILabel2Window : WinWindow
    {
        
        public UILabel2Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "label2";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UILabel2MenuBar
        {
            get
            {
                if ((this.mUILabel2MenuBar == null))
                {
                    this.mUILabel2MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabel2MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUILabel2MenuBar;
            }
        }
        
        public WinTitleBar UILabel2TitleBar
        {
            get
            {
                if ((this.mUILabel2TitleBar == null))
                {
                    this.mUILabel2TitleBar = new WinTitleBar(this);
                }
                return this.mUILabel2TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UILabel2MenuBar1
        {
            get
            {
                if ((this.mUILabel2MenuBar1 == null))
                {
                    this.mUILabel2MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabel2MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUILabel2MenuBar1;
            }
        }
        
        public WinText UILabel2Text
        {
            get
            {
                if ((this.mUILabel2Text == null))
                {
                    this.mUILabel2Text = new WinText(this);
                }
                return this.mUILabel2Text;
            }
        }
        
        public UIVerticalScrollBar33 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar33(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar33 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar33(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UILabel2Grip
        {
            get
            {
                if ((this.mUILabel2Grip == null))
                {
                    this.mUILabel2Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUILabel2Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUILabel2Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUILabel2MenuBar;
        
        private WinTitleBar mUILabel2TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUILabel2MenuBar1;
        
        private WinText mUILabel2Text;
        
        private UIVerticalScrollBar33 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar33 mUIHorizontalScrollBar;
        
        private WinControl mUILabel2Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar33 : WinScrollBar
    {
        
        public UIVerticalScrollBar33(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar33 : WinScrollBar
    {
        
        public UIHorizontalScrollBar33(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UITotalChartWindow : WinWindow
    {
        
        public UITotalChartWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "totalChart";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UITotalChartMenuBar
        {
            get
            {
                if ((this.mUITotalChartMenuBar == null))
                {
                    this.mUITotalChartMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUITotalChartMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUITotalChartMenuBar;
            }
        }
        
        public WinTitleBar UITotalChartTitleBar
        {
            get
            {
                if ((this.mUITotalChartTitleBar == null))
                {
                    this.mUITotalChartTitleBar = new WinTitleBar(this);
                }
                return this.mUITotalChartTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UITotalChartMenuBar1
        {
            get
            {
                if ((this.mUITotalChartMenuBar1 == null))
                {
                    this.mUITotalChartMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUITotalChartMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUITotalChartMenuBar1;
            }
        }
        
        public WinClient UITotalChartClient
        {
            get
            {
                if ((this.mUITotalChartClient == null))
                {
                    this.mUITotalChartClient = new WinClient(this);
                }
                return this.mUITotalChartClient;
            }
        }
        
        public UIVerticalScrollBar34 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar34(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar34 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar34(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UITotalChartGrip
        {
            get
            {
                if ((this.mUITotalChartGrip == null))
                {
                    this.mUITotalChartGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUITotalChartGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUITotalChartGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUITotalChartMenuBar;
        
        private WinTitleBar mUITotalChartTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUITotalChartMenuBar1;
        
        private WinClient mUITotalChartClient;
        
        private UIVerticalScrollBar34 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar34 mUIHorizontalScrollBar;
        
        private WinControl mUITotalChartGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar34 : WinScrollBar
    {
        
        public UIVerticalScrollBar34(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar34 : WinScrollBar
    {
        
        public UIHorizontalScrollBar34(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar35 : WinScrollBar
    {
        
        public UIVerticalScrollBar35(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar35 : WinScrollBar
    {
        
        public UIHorizontalScrollBar35(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISplitContainerControScrollBar : WinScrollBar
    {
        
        public UISplitContainerControScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISplitContainerControScrollBar1 : WinScrollBar
    {
        
        public UISplitContainerControScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRibbonStatusBarWindow : WinWindow
    {
        
        public UIRibbonStatusBarWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ribbonStatusBar";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIRibbonStatusBarMenuBar
        {
            get
            {
                if ((this.mUIRibbonStatusBarMenuBar == null))
                {
                    this.mUIRibbonStatusBarMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIRibbonStatusBarMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIRibbonStatusBarMenuBar;
            }
        }
        
        public WinTitleBar UIRibbonStatusBarTitleBar
        {
            get
            {
                if ((this.mUIRibbonStatusBarTitleBar == null))
                {
                    this.mUIRibbonStatusBarTitleBar = new WinTitleBar(this);
                }
                return this.mUIRibbonStatusBarTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIRibbonStatusBarMenuBar1
        {
            get
            {
                if ((this.mUIRibbonStatusBarMenuBar1 == null))
                {
                    this.mUIRibbonStatusBarMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIRibbonStatusBarMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIRibbonStatusBarMenuBar1;
            }
        }
        
        public WinScrollBar UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIVerticalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public WinScrollBar UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIHorizontalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIRibbonStatusBarGrip
        {
            get
            {
                if ((this.mUIRibbonStatusBarGrip == null))
                {
                    this.mUIRibbonStatusBarGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIRibbonStatusBarGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIRibbonStatusBarGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIRibbonStatusBarMenuBar;
        
        private WinTitleBar mUIRibbonStatusBarTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIRibbonStatusBarMenuBar1;
        
        private WinScrollBar mUIVerticalScrollBar;
        
        private WinScrollBar mUIHorizontalScrollBar;
        
        private WinControl mUIRibbonStatusBarGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIStatusBarPropertyPage : WinControl
    {
        
        public UIStatusBarPropertyPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Status Bar";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "PropertyPage";
            #endregion
        }
        
        #region Properties
        public WinText UIStaticText
        {
            get
            {
                if ((this.mUIStaticText == null))
                {
                    this.mUIStaticText = new WinText(this);
                    #region Search Criteria
                    this.mUIStaticText.SearchProperties[WinText.PropertyNames.Name] = "Static";
                    #endregion
                }
                return this.mUIStaticText;
            }
        }
        
        public WinText UIStaticText1
        {
            get
            {
                if ((this.mUIStaticText1 == null))
                {
                    this.mUIStaticText1 = new WinText(this);
                    #region Search Criteria
                    this.mUIStaticText1.SearchProperties[WinText.PropertyNames.Name] = "Static";
                    this.mUIStaticText1.SearchProperties[WinText.PropertyNames.Instance] = "2";
                    #endregion
                }
                return this.mUIStaticText1;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIStaticText;
        
        private WinText mUIStaticText1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar110 : WinScrollBar
    {
        
        public UIVerticalScrollBar110(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar110 : WinScrollBar
    {
        
        public UIHorizontalScrollBar110(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRibbonWindow : WinWindow
    {
        
        public UIRibbonWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ribbon";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIRibbonMenuBar
        {
            get
            {
                if ((this.mUIRibbonMenuBar == null))
                {
                    this.mUIRibbonMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIRibbonMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIRibbonMenuBar;
            }
        }
        
        public WinTitleBar UIRibbonTitleBar
        {
            get
            {
                if ((this.mUIRibbonTitleBar == null))
                {
                    this.mUIRibbonTitleBar = new WinTitleBar(this);
                }
                return this.mUIRibbonTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIRibbonMenuBar1
        {
            get
            {
                if ((this.mUIRibbonMenuBar1 == null))
                {
                    this.mUIRibbonMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIRibbonMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIRibbonMenuBar1;
            }
        }
        
        public WinScrollBar UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIVerticalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public WinScrollBar UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIHorizontalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIRibbonGrip
        {
            get
            {
                if ((this.mUIRibbonGrip == null))
                {
                    this.mUIRibbonGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIRibbonGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIRibbonGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIRibbonMenuBar;
        
        private WinTitleBar mUIRibbonTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIRibbonMenuBar1;
        
        private WinScrollBar mUIVerticalScrollBar;
        
        private WinScrollBar mUIHorizontalScrollBar;
        
        private WinControl mUIRibbonGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UITheRibbonPropertyPage : WinControl
    {
        
        public UITheRibbonPropertyPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "The Ribbon";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "PropertyPage";
            #endregion
        }
        
        #region Properties
        public WinControl UIItemDropDownGridButton
        {
            get
            {
                if ((this.mUIItemDropDownGridButton == null))
                {
                    this.mUIItemDropDownGridButton = new WinControl(this);
                    #region Search Criteria
                    this.mUIItemDropDownGridButton.SearchProperties[UITestControl.PropertyNames.ControlType] = "DropDownGridButton";
                    #endregion
                }
                return this.mUIItemDropDownGridButton;
            }
        }
        
        public WinToolBar UIRibbonToolBar
        {
            get
            {
                if ((this.mUIRibbonToolBar == null))
                {
                    this.mUIRibbonToolBar = new WinToolBar(this);
                    #region Search Criteria
                    this.mUIRibbonToolBar.SearchProperties[WinToolBar.PropertyNames.Name] = "Quick Access Toolbar";
                    #endregion
                }
                return this.mUIRibbonToolBar;
            }
        }
        
        public WinTabList UIRibbonTabsTabList
        {
            get
            {
                if ((this.mUIRibbonTabsTabList == null))
                {
                    this.mUIRibbonTabsTabList = new WinTabList(this);
                    #region Search Criteria
                    this.mUIRibbonTabsTabList.SearchProperties[WinTabList.PropertyNames.Name] = "Ribbon Tabs";
                    #endregion
                }
                return this.mUIRibbonTabsTabList;
            }
        }
        
        public WinPane UILowerRibbonPane
        {
            get
            {
                if ((this.mUILowerRibbonPane == null))
                {
                    this.mUILowerRibbonPane = new WinPane(this);
                    #region Search Criteria
                    this.mUILowerRibbonPane.SearchProperties[WinControl.PropertyNames.Name] = "Lower Ribbon";
                    #endregion
                }
                return this.mUILowerRibbonPane;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUIItemDropDownGridButton;
        
        private WinToolBar mUIRibbonToolBar;
        
        private WinTabList mUIRibbonTabsTabList;
        
        private WinPane mUILowerRibbonPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRibbonToolBar : WinToolBar
    {
        
        public UIRibbonToolBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "Quick Access Toolbar";
            #endregion
        }
        
        #region Properties
        public WinButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIItemButton.SearchProperties[WinButton.PropertyNames.Name] = "Item";
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItemButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRibbonTabsTabList : WinTabList
    {
        
        public UIRibbonTabsTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTabList.PropertyNames.Name] = "Ribbon Tabs";
            #endregion
        }
        
        #region Properties
        public WinTabPage UIHomeTabPage
        {
            get
            {
                if ((this.mUIHomeTabPage == null))
                {
                    this.mUIHomeTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUIHomeTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Home";
                    #endregion
                }
                return this.mUIHomeTabPage;
            }
        }
        #endregion
        
        #region Fields
        private WinTabPage mUIHomeTabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UILowerRibbonPane : WinPane
    {
        
        public UILowerRibbonPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Lower Ribbon";
            #endregion
        }
        
        #region Properties
        public WinControl UIHomePropertyPage
        {
            get
            {
                if ((this.mUIHomePropertyPage == null))
                {
                    this.mUIHomePropertyPage = new WinControl(this);
                    #region Search Criteria
                    this.mUIHomePropertyPage.SearchProperties[UITestControl.PropertyNames.Name] = "Home";
                    this.mUIHomePropertyPage.SearchProperties[UITestControl.PropertyNames.ControlType] = "PropertyPage";
                    #endregion
                }
                return this.mUIHomePropertyPage;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUIHomePropertyPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHomePropertyPage : WinControl
    {
        
        public UIHomePropertyPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Home";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "PropertyPage";
            #endregion
        }
        
        #region Properties
        public WinToolBar UIRibbonToolBar
        {
            get
            {
                if ((this.mUIRibbonToolBar == null))
                {
                    this.mUIRibbonToolBar = new WinToolBar(this);
                    #region Search Criteria
                    this.mUIRibbonToolBar.SearchProperties[WinToolBar.PropertyNames.Name] = "Synchronization";
                    #endregion
                }
                return this.mUIRibbonToolBar;
            }
        }
        
        public WinToolBar UIRibbonToolBar1
        {
            get
            {
                if ((this.mUIRibbonToolBar1 == null))
                {
                    this.mUIRibbonToolBar1 = new WinToolBar(this);
                    #region Search Criteria
                    this.mUIRibbonToolBar1.SearchProperties[WinToolBar.PropertyNames.Instance] = "2";
                    #endregion
                }
                return this.mUIRibbonToolBar1;
            }
        }
        
        public WinToolBar UIRibbonToolBar2
        {
            get
            {
                if ((this.mUIRibbonToolBar2 == null))
                {
                    this.mUIRibbonToolBar2 = new WinToolBar(this);
                    #region Search Criteria
                    this.mUIRibbonToolBar2.SearchProperties[WinToolBar.PropertyNames.Name] = "About";
                    #endregion
                }
                return this.mUIRibbonToolBar2;
            }
        }
        #endregion
        
        #region Fields
        private WinToolBar mUIRibbonToolBar;
        
        private WinToolBar mUIRibbonToolBar1;
        
        private WinToolBar mUIRibbonToolBar2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRibbonToolBar1 : WinToolBar
    {
        
        public UIRibbonToolBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "Synchronization";
            #endregion
        }
        
        #region Properties
        public WinButton UIDownloadAccountsButton
        {
            get
            {
                if ((this.mUIDownloadAccountsButton == null))
                {
                    this.mUIDownloadAccountsButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIDownloadAccountsButton.SearchProperties[WinButton.PropertyNames.Name] = "Download Accounts";
                    #endregion
                }
                return this.mUIDownloadAccountsButton;
            }
        }
        
        public WinButton UIUploadAccountsButton
        {
            get
            {
                if ((this.mUIUploadAccountsButton == null))
                {
                    this.mUIUploadAccountsButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIUploadAccountsButton.SearchProperties[WinButton.PropertyNames.Name] = "Upload Accounts";
                    #endregion
                }
                return this.mUIUploadAccountsButton;
            }
        }
        
        public WinButton UIDownloadPerformanceButton
        {
            get
            {
                if ((this.mUIDownloadPerformanceButton == null))
                {
                    this.mUIDownloadPerformanceButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIDownloadPerformanceButton.SearchProperties[WinButton.PropertyNames.Name] = "Download Performance";
                    #endregion
                }
                return this.mUIDownloadPerformanceButton;
            }
        }
        
        public WinControl UISynchronizationDropDownButton
        {
            get
            {
                if ((this.mUISynchronizationDropDownButton == null))
                {
                    this.mUISynchronizationDropDownButton = new WinControl(this);
                    #region Search Criteria
                    this.mUISynchronizationDropDownButton.SearchProperties[UITestControl.PropertyNames.Name] = "Synchronization";
                    this.mUISynchronizationDropDownButton.SearchProperties[UITestControl.PropertyNames.ControlType] = "DropDownButton";
                    #endregion
                }
                return this.mUISynchronizationDropDownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIDownloadAccountsButton;
        
        private WinButton mUIUploadAccountsButton;
        
        private WinButton mUIDownloadPerformanceButton;
        
        private WinControl mUISynchronizationDropDownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRibbonToolBar2 : WinToolBar
    {
        
        public UIRibbonToolBar2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinButton UIManageAccountsButton
        {
            get
            {
                if ((this.mUIManageAccountsButton == null))
                {
                    this.mUIManageAccountsButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIManageAccountsButton.SearchProperties.Add(new PropertyExpression(WinButton.PropertyNames.Name, "Manage Account", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIManageAccountsButton;
            }
        }
        
        public WinControl UIItemDropDownButton
        {
            get
            {
                if ((this.mUIItemDropDownButton == null))
                {
                    this.mUIItemDropDownButton = new WinControl(this);
                    #region Search Criteria
                    this.mUIItemDropDownButton.SearchProperties[UITestControl.PropertyNames.ControlType] = "DropDownButton";
                    #endregion
                }
                return this.mUIItemDropDownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIManageAccountsButton;
        
        private WinControl mUIItemDropDownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRibbonToolBar3 : WinToolBar
    {
        
        public UIRibbonToolBar3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "About";
            #endregion
        }
        
        #region Properties
        public WinButton UIAboutButton
        {
            get
            {
                if ((this.mUIAboutButton == null))
                {
                    this.mUIAboutButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIAboutButton.SearchProperties[WinButton.PropertyNames.Name] = "About";
                    #endregion
                }
                return this.mUIAboutButton;
            }
        }
        
        public WinButton UISuggestionsandFeedbaButton
        {
            get
            {
                if ((this.mUISuggestionsandFeedbaButton == null))
                {
                    this.mUISuggestionsandFeedbaButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISuggestionsandFeedbaButton.SearchProperties[WinButton.PropertyNames.Name] = "Suggestions and Feedbacks";
                    #endregion
                }
                return this.mUISuggestionsandFeedbaButton;
            }
        }
        
        public WinControl UIAboutDropDownButton
        {
            get
            {
                if ((this.mUIAboutDropDownButton == null))
                {
                    this.mUIAboutDropDownButton = new WinControl(this);
                    #region Search Criteria
                    this.mUIAboutDropDownButton.SearchProperties[UITestControl.PropertyNames.Name] = "About";
                    this.mUIAboutDropDownButton.SearchProperties[UITestControl.PropertyNames.ControlType] = "DropDownButton";
                    #endregion
                }
                return this.mUIAboutDropDownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIAboutButton;
        
        private WinButton mUISuggestionsandFeedbaButton;
        
        private WinControl mUIAboutDropDownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar210 : WinScrollBar
    {
        
        public UIVerticalScrollBar210(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar210 : WinScrollBar
    {
        
        public UIHorizontalScrollBar210(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAdSageforPerformanceScrollBar : WinScrollBar
    {
        
        public UIAdSageforPerformanceScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAdSageforPerformanceScrollBar1 : WinScrollBar
    {
        
        public UIAdSageforPerformanceScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRibbonToolBar4 : WinToolBar
    {
        
        public UIRibbonToolBar4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "Tools";
            this.WindowTitles.Add("adSage for Performance");
            #endregion
        }
        
        #region Properties
        public WinButton UIOptionsButton
        {
            get
            {
                if ((this.mUIOptionsButton == null))
                {
                    this.mUIOptionsButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOptionsButton.SearchProperties[WinButton.PropertyNames.Name] = "Options";
                    this.mUIOptionsButton.WindowTitles.Add("adSage for Performance");
                    #endregion
                }
                return this.mUIOptionsButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOptionsButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.SysTreeView32", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("adSage for Performance");
            #endregion
        }
        
        #region Properties
        public UIItemTree UIItemTree
        {
            get
            {
                if ((this.mUIItemTree == null))
                {
                    this.mUIItemTree = new UIItemTree(this);
                }
                return this.mUIItemTree;
            }
        }
        #endregion
        
        #region Fields
        private UIItemTree mUIItemTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemTree : WinTree
    {
        
        public UIItemTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("adSage for Performance");
            #endregion
        }
        
        #region Properties
        public UIYourAccounts1TreeItem1 UIYourAccounts1TreeItem
        {
            get
            {
                if ((this.mUIYourAccounts1TreeItem == null))
                {
                    this.mUIYourAccounts1TreeItem = new UIYourAccounts1TreeItem1(this);
                }
                return this.mUIYourAccounts1TreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIYourAccounts1TreeItem1 mUIYourAccounts1TreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIYourAccounts1TreeItem1 : WinTreeItem
    {
        
        public UIYourAccounts1TreeItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Your Accounts(1)";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("adSage for Performance");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIMicrosoftadlabsUSDTreeItem
        {
            get
            {
                if ((this.mUIMicrosoftadlabsUSDTreeItem == null))
                {
                    this.mUIMicrosoftadlabsUSDTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIMicrosoftadlabsUSDTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Microsoft adlabs(USD)";
                    this.mUIMicrosoftadlabsUSDTreeItem.SearchProperties["Value"] = "1";
                    this.mUIMicrosoftadlabsUSDTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIMicrosoftadlabsUSDTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIMicrosoftadlabsUSDTreeItem.WindowTitles.Add("adSage for Performance");
                    #endregion
                }
                return this.mUIMicrosoftadlabsUSDTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIMicrosoftadlabsUSDTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "DropDown";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIDropDownMenu UIDropDownMenu
        {
            get
            {
                if ((this.mUIDropDownMenu == null))
                {
                    this.mUIDropDownMenu = new UIDropDownMenu(this);
                }
                return this.mUIDropDownMenu;
            }
        }
        #endregion
        
        #region Fields
        private UIDropDownMenu mUIDropDownMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDropDownMenu : WinMenu
    {
        
        public UIDropDownMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "DropDown";
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIDownloadAccountMenuItem
        {
            get
            {
                if ((this.mUIDownloadAccountMenuItem == null))
                {
                    this.mUIDownloadAccountMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIDownloadAccountMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Download Account";
                    #endregion
                }
                return this.mUIDownloadAccountMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIDownloadAccountMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIWss_adsagetest163comWindow : WinWindow
    {
        
        public UIWss_adsagetest163comWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "wss_adsagetest@163.com(CNY) - adSage for Performance";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("wss_adsagetest@163.com(CNY) - adSage for Performance");
            #endregion
        }
        
        #region Properties
        public UIItemTabList1 UIItemTabList
        {
            get
            {
                if ((this.mUIItemTabList == null))
                {
                    this.mUIItemTabList = new UIItemTabList1(this);
                }
                return this.mUIItemTabList;
            }
        }
        
        public UIRibbonToolBar5 UIRibbonToolBar
        {
            get
            {
                if ((this.mUIRibbonToolBar == null))
                {
                    this.mUIRibbonToolBar = new UIRibbonToolBar5(this);
                }
                return this.mUIRibbonToolBar;
            }
        }
        #endregion
        
        #region Fields
        private UIItemTabList1 mUIItemTabList;
        
        private UIRibbonToolBar5 mUIRibbonToolBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemTabList1 : WinTabList
    {
        
        public UIItemTabList1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("wss_adsagetest@163.com(CNY) - adSage for Performance");
            #endregion
        }
        
        #region Properties
        public WinTabPage UICampaigns0TabPage
        {
            get
            {
                if ((this.mUICampaigns0TabPage == null))
                {
                    this.mUICampaigns0TabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUICampaigns0TabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Campaigns(0)";
                    this.mUICampaigns0TabPage.WindowTitles.Add("wss_adsagetest@163.com(CNY) - adSage for Performance");
                    #endregion
                }
                return this.mUICampaigns0TabPage;
            }
        }
        #endregion
        
        #region Fields
        private WinTabPage mUICampaigns0TabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRibbonToolBar5 : WinToolBar
    {
        
        public UIRibbonToolBar5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "AddCampaign";
            this.WindowTitles.Add("wss_adsagetest@163.com(CNY) - adSage for Performance");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIAddCampaignMenuItem
        {
            get
            {
                if ((this.mUIAddCampaignMenuItem == null))
                {
                    this.mUIAddCampaignMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIAddCampaignMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Add Campaign";
                    this.mUIAddCampaignMenuItem.WindowTitles.Add("wss_adsagetest@163.com(CNY) - adSage for Performance");
                    #endregion
                }
                return this.mUIAddCampaignMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIAddCampaignMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Desktop";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            #endregion
        }
        
        #region Properties
        public UIItemList UIItemList
        {
            get
            {
                if ((this.mUIItemList == null))
                {
                    this.mUIItemList = new UIItemList(this);
                }
                return this.mUIItemList;
            }
        }
        #endregion
        
        #region Fields
        private UIItemList mUIItemList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemList : WinList
    {
        
        public UIItemList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinButton UIAddCPMCampaignButton
        {
            get
            {
                if ((this.mUIAddCPMCampaignButton == null))
                {
                    this.mUIAddCPMCampaignButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIAddCPMCampaignButton.SearchProperties[WinButton.PropertyNames.Name] = "Add CPM Campaign";
                    #endregion
                }
                return this.mUIAddCPMCampaignButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIAddCPMCampaignButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMicrosoftadlabsUSDadWindow : WinWindow
    {
        
        public UIMicrosoftadlabsUSDadWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Microsoft adlabs(USD) - adSage for Performance";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Microsoft adlabs(USD) - adSage for Performance");
            #endregion
        }
        
        #region Properties
        public UIItemWindow3 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow3(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow3 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.SysTreeView32", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Microsoft adlabs(USD) - adSage for Performance");
            #endregion
        }
        
        #region Properties
        public UIItemTree1 UIItemTree
        {
            get
            {
                if ((this.mUIItemTree == null))
                {
                    this.mUIItemTree = new UIItemTree1(this);
                }
                return this.mUIItemTree;
            }
        }
        #endregion
        
        #region Fields
        private UIItemTree1 mUIItemTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemTree1 : WinTree
    {
        
        public UIItemTree1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Microsoft adlabs(USD) - adSage for Performance");
            #endregion
        }
        
        #region Properties
        public UIYourAccounts1TreeItem2 UIYourAccounts1TreeItem
        {
            get
            {
                if ((this.mUIYourAccounts1TreeItem == null))
                {
                    this.mUIYourAccounts1TreeItem = new UIYourAccounts1TreeItem2(this);
                }
                return this.mUIYourAccounts1TreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIYourAccounts1TreeItem2 mUIYourAccounts1TreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIYourAccounts1TreeItem2 : WinTreeItem
    {
        
        public UIYourAccounts1TreeItem2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Your Accounts(1)";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("Microsoft adlabs(USD) - adSage for Performance");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIMicrosoftadlabsUSDTreeItem
        {
            get
            {
                if ((this.mUIMicrosoftadlabsUSDTreeItem == null))
                {
                    this.mUIMicrosoftadlabsUSDTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIMicrosoftadlabsUSDTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Microsoft adlabs(USD)";
                    this.mUIMicrosoftadlabsUSDTreeItem.SearchProperties["Value"] = "1";
                    this.mUIMicrosoftadlabsUSDTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIMicrosoftadlabsUSDTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIMicrosoftadlabsUSDTreeItem.WindowTitles.Add("Microsoft adlabs(USD) - adSage for Performance");
                    #endregion
                }
                return this.mUIMicrosoftadlabsUSDTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIMicrosoftadlabsUSDTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAccount2348004880USDWindow : WinWindow
    {
        
        public UIAccount2348004880USDWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Account2 #348004880(USD) - adSage for Performance";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Account2 #348004880(USD) - adSage for Performance");
            #endregion
        }
        
        #region Properties
        public UIItemWindow4 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow4(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIDxTabPageContainerCoWindow1 UIDxTabPageContainerCoWindow
        {
            get
            {
                if ((this.mUIDxTabPageContainerCoWindow == null))
                {
                    this.mUIDxTabPageContainerCoWindow = new UIDxTabPageContainerCoWindow1(this);
                }
                return this.mUIDxTabPageContainerCoWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow4 mUIItemWindow;
        
        private UIDxTabPageContainerCoWindow1 mUIDxTabPageContainerCoWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemWindow4 : WinWindow
    {
        
        public UIItemWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.SysTreeView32", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Account2 #348004880(USD) - adSage for Performance");
            #endregion
        }
        
        #region Properties
        public UIItemTree2 UIItemTree
        {
            get
            {
                if ((this.mUIItemTree == null))
                {
                    this.mUIItemTree = new UIItemTree2(this);
                }
                return this.mUIItemTree;
            }
        }
        #endregion
        
        #region Fields
        private UIItemTree2 mUIItemTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemTree2 : WinTree
    {
        
        public UIItemTree2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Account2 #348004880(USD) - adSage for Performance");
            #endregion
        }
        
        #region Properties
        public UIYourAccounts1TreeItem3 UIYourAccounts1TreeItem
        {
            get
            {
                if ((this.mUIYourAccounts1TreeItem == null))
                {
                    this.mUIYourAccounts1TreeItem = new UIYourAccounts1TreeItem3(this);
                }
                return this.mUIYourAccounts1TreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIYourAccounts1TreeItem3 mUIYourAccounts1TreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIYourAccounts1TreeItem3 : WinTreeItem
    {
        
        public UIYourAccounts1TreeItem3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Your Accounts(1)";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("Account2 #348004880(USD) - adSage for Performance");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIAccount2348004880USDTreeItem
        {
            get
            {
                if ((this.mUIAccount2348004880USDTreeItem == null))
                {
                    this.mUIAccount2348004880USDTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIAccount2348004880USDTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Account2 #348004880(USD)";
                    this.mUIAccount2348004880USDTreeItem.SearchProperties["Value"] = "1";
                    this.mUIAccount2348004880USDTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIAccount2348004880USDTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIAccount2348004880USDTreeItem.WindowTitles.Add("Account2 #348004880(USD) - adSage for Performance");
                    #endregion
                }
                return this.mUIAccount2348004880USDTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIAccount2348004880USDTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDxTabPageContainerCoWindow1 : WinWindow
    {
        
        public UIDxTabPageContainerCoWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "dxTabPageContainerControl1";
            this.WindowTitles.Add("Account2 #348004880(USD) - adSage for Performance");
            #endregion
        }
        
        #region Properties
        public UIItemTabList2 UIItemTabList
        {
            get
            {
                if ((this.mUIItemTabList == null))
                {
                    this.mUIItemTabList = new UIItemTabList2(this);
                }
                return this.mUIItemTabList;
            }
        }
        #endregion
        
        #region Fields
        private UIItemTabList2 mUIItemTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemTabList2 : WinTabList
    {
        
        public UIItemTabList2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Account2 #348004880(USD) - adSage for Performance");
            #endregion
        }
        
        #region Properties
        public WinTabPage UICampaigns0TabPage
        {
            get
            {
                if ((this.mUICampaigns0TabPage == null))
                {
                    this.mUICampaigns0TabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUICampaigns0TabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Campaigns(0)";
                    this.mUICampaigns0TabPage.WindowTitles.Add("Account2 #348004880(USD) - adSage for Performance");
                    #endregion
                }
                return this.mUICampaigns0TabPage;
            }
        }
        #endregion
        
        #region Fields
        private WinTabPage mUICampaigns0TabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIWss_adsagetest163comWindow1 : WinWindow
    {
        
        public UIWss_adsagetest163comWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "wss_adsagetest@163.com(CNY) -  - adSage for Performance";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("wss_adsagetest@163.com(CNY) -  - adSage for Performance");
            #endregion
        }
        
        #region Properties
        public UIItemWindow5 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow5(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow5 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemWindow5 : WinWindow
    {
        
        public UIItemWindow5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.SysTreeView32", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("wss_adsagetest@163.com(CNY) -  - adSage for Performance");
            #endregion
        }
        
        #region Properties
        public UIItemTree3 UIItemTree
        {
            get
            {
                if ((this.mUIItemTree == null))
                {
                    this.mUIItemTree = new UIItemTree3(this);
                }
                return this.mUIItemTree;
            }
        }
        #endregion
        
        #region Fields
        private UIItemTree3 mUIItemTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemTree3 : WinTree
    {
        
        public UIItemTree3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("wss_adsagetest@163.com(CNY) -  - adSage for Performance");
            #endregion
        }
        
        #region Properties
        public UIYourAccounts1TreeItem4 UIYourAccounts1TreeItem
        {
            get
            {
                if ((this.mUIYourAccounts1TreeItem == null))
                {
                    this.mUIYourAccounts1TreeItem = new UIYourAccounts1TreeItem4(this);
                }
                return this.mUIYourAccounts1TreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIYourAccounts1TreeItem4 mUIYourAccounts1TreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIYourAccounts1TreeItem4 : WinTreeItem
    {
        
        public UIYourAccounts1TreeItem4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Your Accounts(1)";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("wss_adsagetest@163.com(CNY) -  - adSage for Performance");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIWss_adsagetest163comTreeItem
        {
            get
            {
                if ((this.mUIWss_adsagetest163comTreeItem == null))
                {
                    this.mUIWss_adsagetest163comTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIWss_adsagetest163comTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "wss_adsagetest@163.com(CNY)";
                    this.mUIWss_adsagetest163comTreeItem.SearchProperties["Value"] = "1";
                    this.mUIWss_adsagetest163comTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIWss_adsagetest163comTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIWss_adsagetest163comTreeItem.WindowTitles.Add("wss_adsagetest@163.com(CNY) -  - adSage for Performance");
                    #endregion
                }
                return this.mUIWss_adsagetest163comTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIWss_adsagetest163comTreeItem;
        #endregion
    }
}
