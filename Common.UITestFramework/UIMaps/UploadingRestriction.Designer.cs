// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Common.UITestFramework.UIMaps.UploadingRestrictionClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public partial class UploadingRestriction
    {
        
        /// <summary>
        /// ClickOkButton
        /// </summary>
        public void ClickOkButton()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIUploadingRestrictionWindow.UIOKWindow.UIOKButton;
            #endregion

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(52, 13));
        }
        
        #region Properties
        public UIUploadingRestrictionWindow UIUploadingRestrictionWindow
        {
            get
            {
                if ((this.mUIUploadingRestrictionWindow == null))
                {
                    this.mUIUploadingRestrictionWindow = new UIUploadingRestrictionWindow();
                }
                return this.mUIUploadingRestrictionWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIUploadingRestrictionWindow mUIUploadingRestrictionWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIUploadingRestrictionWindow : WinWindow
    {
        
        public UIUploadingRestrictionWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Uploading Restriction";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UILicenseRestrictionFoMenuBar UILicenseRestrictionFoMenuBar
        {
            get
            {
                if ((this.mUILicenseRestrictionFoMenuBar == null))
                {
                    this.mUILicenseRestrictionFoMenuBar = new UILicenseRestrictionFoMenuBar(this);
                }
                return this.mUILicenseRestrictionFoMenuBar;
            }
        }
        
        public UISystemMenuItem1 UISystemMenuItem
        {
            get
            {
                if ((this.mUISystemMenuItem == null))
                {
                    this.mUISystemMenuItem = new UISystemMenuItem1(this);
                }
                return this.mUISystemMenuItem;
            }
        }
        
        public UISystemMenu UISystemMenu
        {
            get
            {
                if ((this.mUISystemMenu == null))
                {
                    this.mUISystemMenu = new UISystemMenu(this);
                }
                return this.mUISystemMenu;
            }
        }
        
        public UIUploadingRestrictionTitleBar UIUploadingRestrictionTitleBar
        {
            get
            {
                if ((this.mUIUploadingRestrictionTitleBar == null))
                {
                    this.mUIUploadingRestrictionTitleBar = new UIUploadingRestrictionTitleBar(this);
                }
                return this.mUIUploadingRestrictionTitleBar;
            }
        }
        
        public WinMenuBar UILicenseRestrictionFoMenuBar1
        {
            get
            {
                if ((this.mUILicenseRestrictionFoMenuBar1 == null))
                {
                    this.mUILicenseRestrictionFoMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILicenseRestrictionFoMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUILicenseRestrictionFoMenuBar1;
            }
        }
        
        public UIUploadingRestrictionClient UIUploadingRestrictionClient
        {
            get
            {
                if ((this.mUIUploadingRestrictionClient == null))
                {
                    this.mUIUploadingRestrictionClient = new UIUploadingRestrictionClient(this);
                }
                return this.mUIUploadingRestrictionClient;
            }
        }
        
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow(this);
                }
                return this.mUIOKWindow;
            }
        }
        
        public UIOKScrollBar UIOKScrollBar
        {
            get
            {
                if ((this.mUIOKScrollBar == null))
                {
                    this.mUIOKScrollBar = new UIOKScrollBar(this);
                }
                return this.mUIOKScrollBar;
            }
        }
        
        public UIOKScrollBar1 UIOKScrollBar1
        {
            get
            {
                if ((this.mUIOKScrollBar1 == null))
                {
                    this.mUIOKScrollBar1 = new UIOKScrollBar1(this);
                }
                return this.mUIOKScrollBar1;
            }
        }
        
        public UIPanel2Window UIPanel2Window
        {
            get
            {
                if ((this.mUIPanel2Window == null))
                {
                    this.mUIPanel2Window = new UIPanel2Window(this);
                }
                return this.mUIPanel2Window;
            }
        }
        
        public UIColorgrayYouhaveaddaWindow UIColorgrayYouhaveaddaWindow
        {
            get
            {
                if ((this.mUIColorgrayYouhaveaddaWindow == null))
                {
                    this.mUIColorgrayYouhaveaddaWindow = new UIColorgrayYouhaveaddaWindow(this);
                }
                return this.mUIColorgrayYouhaveaddaWindow;
            }
        }
        
        public UIColorgrayYouhaveaddaScrollBar UIColorgrayYouhaveaddaScrollBar
        {
            get
            {
                if ((this.mUIColorgrayYouhaveaddaScrollBar == null))
                {
                    this.mUIColorgrayYouhaveaddaScrollBar = new UIColorgrayYouhaveaddaScrollBar(this);
                }
                return this.mUIColorgrayYouhaveaddaScrollBar;
            }
        }
        
        public UIColorgrayYouhaveaddaScrollBar1 UIColorgrayYouhaveaddaScrollBar1
        {
            get
            {
                if ((this.mUIColorgrayYouhaveaddaScrollBar1 == null))
                {
                    this.mUIColorgrayYouhaveaddaScrollBar1 = new UIColorgrayYouhaveaddaScrollBar1(this);
                }
                return this.mUIColorgrayYouhaveaddaScrollBar1;
            }
        }
        
        public UIToremovethelimitWindow UIToremovethelimitWindow
        {
            get
            {
                if ((this.mUIToremovethelimitWindow == null))
                {
                    this.mUIToremovethelimitWindow = new UIToremovethelimitWindow(this);
                }
                return this.mUIToremovethelimitWindow;
            }
        }
        
        public UIToremovethelimitScrollBar UIToremovethelimitScrollBar
        {
            get
            {
                if ((this.mUIToremovethelimitScrollBar == null))
                {
                    this.mUIToremovethelimitScrollBar = new UIToremovethelimitScrollBar(this);
                }
                return this.mUIToremovethelimitScrollBar;
            }
        }
        
        public UIToremovethelimitScrollBar1 UIToremovethelimitScrollBar1
        {
            get
            {
                if ((this.mUIToremovethelimitScrollBar1 == null))
                {
                    this.mUIToremovethelimitScrollBar1 = new UIToremovethelimitScrollBar1(this);
                }
                return this.mUIToremovethelimitScrollBar1;
            }
        }
        
        public UIUpgradeyourlicenseWindow UIUpgradeyourlicenseWindow
        {
            get
            {
                if ((this.mUIUpgradeyourlicenseWindow == null))
                {
                    this.mUIUpgradeyourlicenseWindow = new UIUpgradeyourlicenseWindow(this);
                }
                return this.mUIUpgradeyourlicenseWindow;
            }
        }
        
        public UIUpgradeyourlicenseText UIUpgradeyourlicenseText
        {
            get
            {
                if ((this.mUIUpgradeyourlicenseText == null))
                {
                    this.mUIUpgradeyourlicenseText = new UIUpgradeyourlicenseText(this);
                }
                return this.mUIUpgradeyourlicenseText;
            }
        }
        
        public UIUpgradeyourlicenseScrollBar UIUpgradeyourlicenseScrollBar
        {
            get
            {
                if ((this.mUIUpgradeyourlicenseScrollBar == null))
                {
                    this.mUIUpgradeyourlicenseScrollBar = new UIUpgradeyourlicenseScrollBar(this);
                }
                return this.mUIUpgradeyourlicenseScrollBar;
            }
        }
        
        public UIUpgradeyourlicenseScrollBar1 UIUpgradeyourlicenseScrollBar1
        {
            get
            {
                if ((this.mUIUpgradeyourlicenseScrollBar1 == null))
                {
                    this.mUIUpgradeyourlicenseScrollBar1 = new UIUpgradeyourlicenseScrollBar1(this);
                }
                return this.mUIUpgradeyourlicenseScrollBar1;
            }
        }
        
        public UIPictureBox1Window UIPictureBox1Window
        {
            get
            {
                if ((this.mUIPictureBox1Window == null))
                {
                    this.mUIPictureBox1Window = new UIPictureBox1Window(this);
                }
                return this.mUIPictureBox1Window;
            }
        }
        
        public UIVerticalScrollBar UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public UIUploadingFreeEditionWindow UIUploadingFreeEditionWindow
        {
            get
            {
                if ((this.mUIUploadingFreeEditionWindow == null))
                {
                    this.mUIUploadingFreeEditionWindow = new UIUploadingFreeEditionWindow(this);
                }
                return this.mUIUploadingFreeEditionWindow;
            }
        }
        
        public UIUploadingFreeEditionScrollBar UIUploadingFreeEditionScrollBar
        {
            get
            {
                if ((this.mUIUploadingFreeEditionScrollBar == null))
                {
                    this.mUIUploadingFreeEditionScrollBar = new UIUploadingFreeEditionScrollBar(this);
                }
                return this.mUIUploadingFreeEditionScrollBar;
            }
        }
        
        public UIUploadingFreeEditionScrollBar1 UIUploadingFreeEditionScrollBar1
        {
            get
            {
                if ((this.mUIUploadingFreeEditionScrollBar1 == null))
                {
                    this.mUIUploadingFreeEditionScrollBar1 = new UIUploadingFreeEditionScrollBar1(this);
                }
                return this.mUIUploadingFreeEditionScrollBar1;
            }
        }
        
        public UILabel2Window UILabel2Window
        {
            get
            {
                if ((this.mUILabel2Window == null))
                {
                    this.mUILabel2Window = new UILabel2Window(this);
                }
                return this.mUILabel2Window;
            }
        }
        
        public UILabel2ScrollBar UILabel2ScrollBar
        {
            get
            {
                if ((this.mUILabel2ScrollBar == null))
                {
                    this.mUILabel2ScrollBar = new UILabel2ScrollBar(this);
                }
                return this.mUILabel2ScrollBar;
            }
        }
        
        public UILabel2ScrollBar1 UILabel2ScrollBar1
        {
            get
            {
                if ((this.mUILabel2ScrollBar1 == null))
                {
                    this.mUILabel2ScrollBar1 = new UILabel2ScrollBar1(this);
                }
                return this.mUILabel2ScrollBar1;
            }
        }
        
        public UIVerticalScrollBar1 UIVerticalScrollBar1
        {
            get
            {
                if ((this.mUIVerticalScrollBar1 == null))
                {
                    this.mUIVerticalScrollBar1 = new UIVerticalScrollBar1(this);
                }
                return this.mUIVerticalScrollBar1;
            }
        }
        
        public UIHorizontalScrollBar1 UIHorizontalScrollBar1
        {
            get
            {
                if ((this.mUIHorizontalScrollBar1 == null))
                {
                    this.mUIHorizontalScrollBar1 = new UIHorizontalScrollBar1(this);
                }
                return this.mUIHorizontalScrollBar1;
            }
        }
        
        public UILabel1Window UILabel1Window
        {
            get
            {
                if ((this.mUILabel1Window == null))
                {
                    this.mUILabel1Window = new UILabel1Window(this);
                }
                return this.mUILabel1Window;
            }
        }
        
        public UIVerticalScrollBar2 UIVerticalScrollBar2
        {
            get
            {
                if ((this.mUIVerticalScrollBar2 == null))
                {
                    this.mUIVerticalScrollBar2 = new UIVerticalScrollBar2(this);
                }
                return this.mUIVerticalScrollBar2;
            }
        }
        
        public UIHorizontalScrollBar2 UIHorizontalScrollBar2
        {
            get
            {
                if ((this.mUIHorizontalScrollBar2 == null))
                {
                    this.mUIHorizontalScrollBar2 = new UIHorizontalScrollBar2(this);
                }
                return this.mUIHorizontalScrollBar2;
            }
        }
        
        public UIUploadingRestrictionScrollBar UIUploadingRestrictionScrollBar
        {
            get
            {
                if ((this.mUIUploadingRestrictionScrollBar == null))
                {
                    this.mUIUploadingRestrictionScrollBar = new UIUploadingRestrictionScrollBar(this);
                }
                return this.mUIUploadingRestrictionScrollBar;
            }
        }
        
        public UIUploadingRestrictionScrollBar1 UIUploadingRestrictionScrollBar1
        {
            get
            {
                if ((this.mUIUploadingRestrictionScrollBar1 == null))
                {
                    this.mUIUploadingRestrictionScrollBar1 = new UIUploadingRestrictionScrollBar1(this);
                }
                return this.mUIUploadingRestrictionScrollBar1;
            }
        }
        
        public WinControl UIUploadingRestrictionGrip
        {
            get
            {
                if ((this.mUIUploadingRestrictionGrip == null))
                {
                    this.mUIUploadingRestrictionGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIUploadingRestrictionGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIUploadingRestrictionGrip;
            }
        }
        #endregion
        
        #region Fields
        private UILicenseRestrictionFoMenuBar mUILicenseRestrictionFoMenuBar;
        
        private UISystemMenuItem1 mUISystemMenuItem;
        
        private UISystemMenu mUISystemMenu;
        
        private UIUploadingRestrictionTitleBar mUIUploadingRestrictionTitleBar;
        
        private WinMenuBar mUILicenseRestrictionFoMenuBar1;
        
        private UIUploadingRestrictionClient mUIUploadingRestrictionClient;
        
        private UIOKWindow mUIOKWindow;
        
        private UIOKScrollBar mUIOKScrollBar;
        
        private UIOKScrollBar1 mUIOKScrollBar1;
        
        private UIPanel2Window mUIPanel2Window;
        
        private UIColorgrayYouhaveaddaWindow mUIColorgrayYouhaveaddaWindow;
        
        private UIColorgrayYouhaveaddaScrollBar mUIColorgrayYouhaveaddaScrollBar;
        
        private UIColorgrayYouhaveaddaScrollBar1 mUIColorgrayYouhaveaddaScrollBar1;
        
        private UIToremovethelimitWindow mUIToremovethelimitWindow;
        
        private UIToremovethelimitScrollBar mUIToremovethelimitScrollBar;
        
        private UIToremovethelimitScrollBar1 mUIToremovethelimitScrollBar1;
        
        private UIUpgradeyourlicenseWindow mUIUpgradeyourlicenseWindow;
        
        private UIUpgradeyourlicenseText mUIUpgradeyourlicenseText;
        
        private UIUpgradeyourlicenseScrollBar mUIUpgradeyourlicenseScrollBar;
        
        private UIUpgradeyourlicenseScrollBar1 mUIUpgradeyourlicenseScrollBar1;
        
        private UIPictureBox1Window mUIPictureBox1Window;
        
        private UIVerticalScrollBar mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar mUIHorizontalScrollBar;
        
        private UIUploadingFreeEditionWindow mUIUploadingFreeEditionWindow;
        
        private UIUploadingFreeEditionScrollBar mUIUploadingFreeEditionScrollBar;
        
        private UIUploadingFreeEditionScrollBar1 mUIUploadingFreeEditionScrollBar1;
        
        private UILabel2Window mUILabel2Window;
        
        private UILabel2ScrollBar mUILabel2ScrollBar;
        
        private UILabel2ScrollBar1 mUILabel2ScrollBar1;
        
        private UIVerticalScrollBar1 mUIVerticalScrollBar1;
        
        private UIHorizontalScrollBar1 mUIHorizontalScrollBar1;
        
        private UILabel1Window mUILabel1Window;
        
        private UIVerticalScrollBar2 mUIVerticalScrollBar2;
        
        private UIHorizontalScrollBar2 mUIHorizontalScrollBar2;
        
        private UIUploadingRestrictionScrollBar mUIUploadingRestrictionScrollBar;
        
        private UIUploadingRestrictionScrollBar1 mUIUploadingRestrictionScrollBar1;
        
        private WinControl mUIUploadingRestrictionGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UILicenseRestrictionFoMenuBar : WinMenuBar
    {
        
        public UILicenseRestrictionFoMenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "System";
            #endregion
        }
        
        #region Properties
        public UISystemMenuItem UISystemMenuItem
        {
            get
            {
                if ((this.mUISystemMenuItem == null))
                {
                    this.mUISystemMenuItem = new UISystemMenuItem(this);
                }
                return this.mUISystemMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UISystemMenuItem mUISystemMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISystemMenuItem : WinMenuItem
    {
        
        public UISystemMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "System";
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIRestoreMenuItem
        {
            get
            {
                if ((this.mUIRestoreMenuItem == null))
                {
                    this.mUIRestoreMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIRestoreMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Restore";
                    this.mUIRestoreMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUIRestoreMenuItem;
            }
        }
        
        public WinMenuItem UIMoveMenuItem
        {
            get
            {
                if ((this.mUIMoveMenuItem == null))
                {
                    this.mUIMoveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIMoveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Move";
                    this.mUIMoveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUIMoveMenuItem;
            }
        }
        
        public WinMenuItem UISizeMenuItem
        {
            get
            {
                if ((this.mUISizeMenuItem == null))
                {
                    this.mUISizeMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISizeMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Size";
                    this.mUISizeMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUISizeMenuItem;
            }
        }
        
        public WinMenuItem UIMinimizeMenuItem
        {
            get
            {
                if ((this.mUIMinimizeMenuItem == null))
                {
                    this.mUIMinimizeMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIMinimizeMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Minimize";
                    this.mUIMinimizeMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUIMinimizeMenuItem;
            }
        }
        
        public WinMenuItem UIMaximizeMenuItem
        {
            get
            {
                if ((this.mUIMaximizeMenuItem == null))
                {
                    this.mUIMaximizeMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIMaximizeMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Maximize";
                    this.mUIMaximizeMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUIMaximizeMenuItem;
            }
        }
        
        public WinMenuItem UICloseAltF4MenuItem
        {
            get
            {
                if ((this.mUICloseAltF4MenuItem == null))
                {
                    this.mUICloseAltF4MenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseAltF4MenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close\tAlt+F4";
                    this.mUICloseAltF4MenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUICloseAltF4MenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIRestoreMenuItem;
        
        private WinMenuItem mUIMoveMenuItem;
        
        private WinMenuItem mUISizeMenuItem;
        
        private WinMenuItem mUIMinimizeMenuItem;
        
        private WinMenuItem mUIMaximizeMenuItem;
        
        private WinMenuItem mUICloseAltF4MenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISystemMenuItem1 : WinMenuItem
    {
        
        public UISystemMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "System";
            #endregion
        }
        
        #region Properties
        public WinMenu UISystemMenu
        {
            get
            {
                if ((this.mUISystemMenu == null))
                {
                    this.mUISystemMenu = new WinMenu(this);
                    #region Search Criteria
                    this.mUISystemMenu.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    this.mUISystemMenu.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISystemMenu.SearchConfigurations.Remove(SearchConfiguration.VisibleOnly);
                    #endregion
                }
                return this.mUISystemMenu;
            }
        }
        #endregion
        
        #region Fields
        private WinMenu mUISystemMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISystemMenu : WinMenu
    {
        
        public UISystemMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "System";
            this.SearchConfigurations.Remove(SearchConfiguration.VisibleOnly);
            #endregion
        }
        
        #region Properties
        public WinSeparator UIItemSeparator
        {
            get
            {
                if ((this.mUIItemSeparator == null))
                {
                    this.mUIItemSeparator = new WinSeparator(this);
                }
                return this.mUIItemSeparator;
            }
        }
        #endregion
        
        #region Fields
        private WinSeparator mUIItemSeparator;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIUploadingRestrictionTitleBar : WinTitleBar
    {
        
        public UIUploadingRestrictionTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIUploadingRestrictionClient : WinClient
    {
        
        public UIUploadingRestrictionClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Uploading Restriction";
            #endregion
        }
        
        #region Properties
        public WinWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIOKWindow.SearchProperties[WinWindow.PropertyNames.Name] = "OK";
                    this.mUIOKWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.BUTTON", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIOKWindow;
            }
        }
        
        public WinWindow UIPanel2Window
        {
            get
            {
                if ((this.mUIPanel2Window == null))
                {
                    this.mUIPanel2Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUIPanel2Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIPanel2Window;
            }
        }
        
        public WinWindow UILabel1Window
        {
            get
            {
                if ((this.mUILabel1Window == null))
                {
                    this.mUILabel1Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUILabel1Window.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "label2";
                    this.mUILabel1Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
                    this.mUILabel1Window.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
                    #endregion
                }
                return this.mUILabel1Window;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUIOKWindow;
        
        private WinWindow mUIPanel2Window;
        
        private WinWindow mUILabel1Window;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "sageButtonOK";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UISageButtonOKMenuBar
        {
            get
            {
                if ((this.mUISageButtonOKMenuBar == null))
                {
                    this.mUISageButtonOKMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISageButtonOKMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUISageButtonOKMenuBar;
            }
        }
        
        public WinTitleBar UIOKTitleBar
        {
            get
            {
                if ((this.mUIOKTitleBar == null))
                {
                    this.mUIOKTitleBar = new WinTitleBar(this);
                }
                return this.mUIOKTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UISageButtonOKMenuBar1
        {
            get
            {
                if ((this.mUISageButtonOKMenuBar1 == null))
                {
                    this.mUISageButtonOKMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISageButtonOKMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUISageButtonOKMenuBar1;
            }
        }
        
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        
        public WinScrollBar UIOKScrollBar
        {
            get
            {
                if ((this.mUIOKScrollBar == null))
                {
                    this.mUIOKScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIOKScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIOKScrollBar;
            }
        }
        
        public WinScrollBar UIOKScrollBar1
        {
            get
            {
                if ((this.mUIOKScrollBar1 == null))
                {
                    this.mUIOKScrollBar1 = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIOKScrollBar1.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIOKScrollBar1;
            }
        }
        
        public WinControl UIOKGrip
        {
            get
            {
                if ((this.mUIOKGrip == null))
                {
                    this.mUIOKGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIOKGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIOKGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUISageButtonOKMenuBar;
        
        private WinTitleBar mUIOKTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUISageButtonOKMenuBar1;
        
        private WinButton mUIOKButton;
        
        private WinScrollBar mUIOKScrollBar;
        
        private WinScrollBar mUIOKScrollBar1;
        
        private WinControl mUIOKGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIOKScrollBar : WinScrollBar
    {
        
        public UIOKScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIOKScrollBar1 : WinScrollBar
    {
        
        public UIOKScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPanel2Window : WinWindow
    {
        
        public UIPanel2Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "panel2";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIPanel2MenuBar
        {
            get
            {
                if ((this.mUIPanel2MenuBar == null))
                {
                    this.mUIPanel2MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanel2MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIPanel2MenuBar;
            }
        }
        
        public WinTitleBar UIPanel2TitleBar
        {
            get
            {
                if ((this.mUIPanel2TitleBar == null))
                {
                    this.mUIPanel2TitleBar = new WinTitleBar(this);
                }
                return this.mUIPanel2TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIPanel2MenuBar1
        {
            get
            {
                if ((this.mUIPanel2MenuBar1 == null))
                {
                    this.mUIPanel2MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanel2MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIPanel2MenuBar1;
            }
        }
        
        public WinClient UIPanel2Client
        {
            get
            {
                if ((this.mUIPanel2Client == null))
                {
                    this.mUIPanel2Client = new WinClient(this);
                }
                return this.mUIPanel2Client;
            }
        }
        
        public WinWindow UIColorgrayYouhaveaddaWindow
        {
            get
            {
                if ((this.mUIColorgrayYouhaveaddaWindow == null))
                {
                    this.mUIColorgrayYouhaveaddaWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIColorgrayYouhaveaddaWindow.SearchProperties[WinWindow.PropertyNames.Name] = "<color=gray>You have addad</color> <color=black><b>3</b></color> <color=gray>acco" +
                        "unts today.</color><br><br><color=gray>You can add</color> <color=red><b>0</b></" +
                        "color> <color=gray>more.</color>";
                    this.mUIColorgrayYouhaveaddaWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIColorgrayYouhaveaddaWindow;
            }
        }
        
        public WinText UIColorgrayYouhaveaddaText
        {
            get
            {
                if ((this.mUIColorgrayYouhaveaddaText == null))
                {
                    this.mUIColorgrayYouhaveaddaText = new WinText(this);
                    #region Search Criteria
                    this.mUIColorgrayYouhaveaddaText.SearchProperties[WinText.PropertyNames.Name] = "<color=gray>You have addad</color> <color=black><b>3</b></color> <color=gray>acco" +
                        "unts today.</color><br><br><color=gray>You can add</color> <color=red><b>0</b></" +
                        "color> <color=gray>more.</color>";
                    #endregion
                }
                return this.mUIColorgrayYouhaveaddaText;
            }
        }
        
        public WinWindow UIToremovethelimitWindow
        {
            get
            {
                if ((this.mUIToremovethelimitWindow == null))
                {
                    this.mUIToremovethelimitWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIToremovethelimitWindow.SearchProperties[WinWindow.PropertyNames.Name] = "to remove the limit.";
                    this.mUIToremovethelimitWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIToremovethelimitWindow;
            }
        }
        
        public WinText UIToremovethelimitText
        {
            get
            {
                if ((this.mUIToremovethelimitText == null))
                {
                    this.mUIToremovethelimitText = new WinText(this);
                    #region Search Criteria
                    this.mUIToremovethelimitText.SearchProperties[WinText.PropertyNames.Name] = "to remove the limit.";
                    #endregion
                }
                return this.mUIToremovethelimitText;
            }
        }
        
        public WinWindow UIUpgradeyourlicenseWindow
        {
            get
            {
                if ((this.mUIUpgradeyourlicenseWindow == null))
                {
                    this.mUIUpgradeyourlicenseWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIUpgradeyourlicenseWindow.SearchProperties[WinWindow.PropertyNames.Name] = "Upgrade your license";
                    this.mUIUpgradeyourlicenseWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIUpgradeyourlicenseWindow;
            }
        }
        
        public WinWindow UIPictureBox1Window
        {
            get
            {
                if ((this.mUIPictureBox1Window == null))
                {
                    this.mUIPictureBox1Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUIPictureBox1Window.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Upgrade your license";
                    this.mUIPictureBox1Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIPictureBox1Window;
            }
        }
        
        public WinWindow UIUploadingFreeEditionWindow
        {
            get
            {
                if ((this.mUIUploadingFreeEditionWindow == null))
                {
                    this.mUIUploadingFreeEditionWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIUploadingFreeEditionWindow.SearchProperties[WinWindow.PropertyNames.Name] = "Uploading [Free Edition]";
                    this.mUIUploadingFreeEditionWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIUploadingFreeEditionWindow;
            }
        }
        
        public WinText UIUploadingFreeEditionText
        {
            get
            {
                if ((this.mUIUploadingFreeEditionText == null))
                {
                    this.mUIUploadingFreeEditionText = new WinText(this);
                    #region Search Criteria
                    this.mUIUploadingFreeEditionText.SearchProperties[WinText.PropertyNames.Name] = "Uploading [Free Edition]";
                    #endregion
                }
                return this.mUIUploadingFreeEditionText;
            }
        }
        
        public WinWindow UILabel2Window
        {
            get
            {
                if ((this.mUILabel2Window == null))
                {
                    this.mUILabel2Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUILabel2Window.SearchProperties[WinWindow.PropertyNames.Name] = "label2";
                    this.mUILabel2Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUILabel2Window;
            }
        }
        
        public WinScrollBar UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIVerticalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public WinScrollBar UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIHorizontalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIPanel2Grip
        {
            get
            {
                if ((this.mUIPanel2Grip == null))
                {
                    this.mUIPanel2Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUIPanel2Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIPanel2Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIPanel2MenuBar;
        
        private WinTitleBar mUIPanel2TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIPanel2MenuBar1;
        
        private WinClient mUIPanel2Client;
        
        private WinWindow mUIColorgrayYouhaveaddaWindow;
        
        private WinText mUIColorgrayYouhaveaddaText;
        
        private WinWindow mUIToremovethelimitWindow;
        
        private WinText mUIToremovethelimitText;
        
        private WinWindow mUIUpgradeyourlicenseWindow;
        
        private WinWindow mUIPictureBox1Window;
        
        private WinWindow mUIUploadingFreeEditionWindow;
        
        private WinText mUIUploadingFreeEditionText;
        
        private WinWindow mUILabel2Window;
        
        private WinScrollBar mUIVerticalScrollBar;
        
        private WinScrollBar mUIHorizontalScrollBar;
        
        private WinControl mUIPanel2Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIColorgrayYouhaveaddaWindow : WinWindow
    {
        
        public UIColorgrayYouhaveaddaWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "labelControlText";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UILabelControlTextMenuBar
        {
            get
            {
                if ((this.mUILabelControlTextMenuBar == null))
                {
                    this.mUILabelControlTextMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabelControlTextMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUILabelControlTextMenuBar;
            }
        }
        
        public WinTitleBar UIColorgrayYouhaveaddaTitleBar
        {
            get
            {
                if ((this.mUIColorgrayYouhaveaddaTitleBar == null))
                {
                    this.mUIColorgrayYouhaveaddaTitleBar = new WinTitleBar(this);
                }
                return this.mUIColorgrayYouhaveaddaTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UILabelControlTextMenuBar1
        {
            get
            {
                if ((this.mUILabelControlTextMenuBar1 == null))
                {
                    this.mUILabelControlTextMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabelControlTextMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUILabelControlTextMenuBar1;
            }
        }
        
        public WinScrollBar UIColorgrayYouhaveaddaScrollBar
        {
            get
            {
                if ((this.mUIColorgrayYouhaveaddaScrollBar == null))
                {
                    this.mUIColorgrayYouhaveaddaScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIColorgrayYouhaveaddaScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIColorgrayYouhaveaddaScrollBar;
            }
        }
        
        public WinScrollBar UIColorgrayYouhaveaddaScrollBar1
        {
            get
            {
                if ((this.mUIColorgrayYouhaveaddaScrollBar1 == null))
                {
                    this.mUIColorgrayYouhaveaddaScrollBar1 = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIColorgrayYouhaveaddaScrollBar1.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIColorgrayYouhaveaddaScrollBar1;
            }
        }
        
        public WinControl UIColorgrayYouhaveaddaGrip
        {
            get
            {
                if ((this.mUIColorgrayYouhaveaddaGrip == null))
                {
                    this.mUIColorgrayYouhaveaddaGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIColorgrayYouhaveaddaGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIColorgrayYouhaveaddaGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUILabelControlTextMenuBar;
        
        private WinTitleBar mUIColorgrayYouhaveaddaTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUILabelControlTextMenuBar1;
        
        private WinScrollBar mUIColorgrayYouhaveaddaScrollBar;
        
        private WinScrollBar mUIColorgrayYouhaveaddaScrollBar1;
        
        private WinControl mUIColorgrayYouhaveaddaGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIColorgrayYouhaveaddaScrollBar : WinScrollBar
    {
        
        public UIColorgrayYouhaveaddaScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIColorgrayYouhaveaddaScrollBar1 : WinScrollBar
    {
        
        public UIColorgrayYouhaveaddaScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIToremovethelimitWindow : WinWindow
    {
        
        public UIToremovethelimitWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "labelControl1";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UILabelControl1MenuBar
        {
            get
            {
                if ((this.mUILabelControl1MenuBar == null))
                {
                    this.mUILabelControl1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabelControl1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUILabelControl1MenuBar;
            }
        }
        
        public WinTitleBar UIToremovethelimitTitleBar
        {
            get
            {
                if ((this.mUIToremovethelimitTitleBar == null))
                {
                    this.mUIToremovethelimitTitleBar = new WinTitleBar(this);
                }
                return this.mUIToremovethelimitTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UILabelControl1MenuBar1
        {
            get
            {
                if ((this.mUILabelControl1MenuBar1 == null))
                {
                    this.mUILabelControl1MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabelControl1MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUILabelControl1MenuBar1;
            }
        }
        
        public WinScrollBar UIToremovethelimitScrollBar
        {
            get
            {
                if ((this.mUIToremovethelimitScrollBar == null))
                {
                    this.mUIToremovethelimitScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIToremovethelimitScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIToremovethelimitScrollBar;
            }
        }
        
        public WinScrollBar UIToremovethelimitScrollBar1
        {
            get
            {
                if ((this.mUIToremovethelimitScrollBar1 == null))
                {
                    this.mUIToremovethelimitScrollBar1 = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIToremovethelimitScrollBar1.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIToremovethelimitScrollBar1;
            }
        }
        
        public WinControl UIToremovethelimitGrip
        {
            get
            {
                if ((this.mUIToremovethelimitGrip == null))
                {
                    this.mUIToremovethelimitGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIToremovethelimitGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIToremovethelimitGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUILabelControl1MenuBar;
        
        private WinTitleBar mUIToremovethelimitTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUILabelControl1MenuBar1;
        
        private WinScrollBar mUIToremovethelimitScrollBar;
        
        private WinScrollBar mUIToremovethelimitScrollBar1;
        
        private WinControl mUIToremovethelimitGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIToremovethelimitScrollBar : WinScrollBar
    {
        
        public UIToremovethelimitScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIToremovethelimitScrollBar1 : WinScrollBar
    {
        
        public UIToremovethelimitScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIUpgradeyourlicenseWindow : WinWindow
    {
        
        public UIUpgradeyourlicenseWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "linkLabelUpgrade";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UILinkLabelUpgradeMenuBar
        {
            get
            {
                if ((this.mUILinkLabelUpgradeMenuBar == null))
                {
                    this.mUILinkLabelUpgradeMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILinkLabelUpgradeMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUILinkLabelUpgradeMenuBar;
            }
        }
        
        public WinTitleBar UIUpgradeyourlicenseTitleBar
        {
            get
            {
                if ((this.mUIUpgradeyourlicenseTitleBar == null))
                {
                    this.mUIUpgradeyourlicenseTitleBar = new WinTitleBar(this);
                }
                return this.mUIUpgradeyourlicenseTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UILinkLabelUpgradeMenuBar1
        {
            get
            {
                if ((this.mUILinkLabelUpgradeMenuBar1 == null))
                {
                    this.mUILinkLabelUpgradeMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILinkLabelUpgradeMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUILinkLabelUpgradeMenuBar1;
            }
        }
        
        public WinText UIUpgradeyourlicenseText
        {
            get
            {
                if ((this.mUIUpgradeyourlicenseText == null))
                {
                    this.mUIUpgradeyourlicenseText = new WinText(this);
                    #region Search Criteria
                    this.mUIUpgradeyourlicenseText.SearchProperties[WinText.PropertyNames.Name] = "Upgrade your license";
                    #endregion
                }
                return this.mUIUpgradeyourlicenseText;
            }
        }
        
        public WinScrollBar UIUpgradeyourlicenseScrollBar
        {
            get
            {
                if ((this.mUIUpgradeyourlicenseScrollBar == null))
                {
                    this.mUIUpgradeyourlicenseScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIUpgradeyourlicenseScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIUpgradeyourlicenseScrollBar;
            }
        }
        
        public WinScrollBar UIUpgradeyourlicenseScrollBar1
        {
            get
            {
                if ((this.mUIUpgradeyourlicenseScrollBar1 == null))
                {
                    this.mUIUpgradeyourlicenseScrollBar1 = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIUpgradeyourlicenseScrollBar1.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIUpgradeyourlicenseScrollBar1;
            }
        }
        
        public WinControl UIUpgradeyourlicenseGrip
        {
            get
            {
                if ((this.mUIUpgradeyourlicenseGrip == null))
                {
                    this.mUIUpgradeyourlicenseGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIUpgradeyourlicenseGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIUpgradeyourlicenseGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUILinkLabelUpgradeMenuBar;
        
        private WinTitleBar mUIUpgradeyourlicenseTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUILinkLabelUpgradeMenuBar1;
        
        private WinText mUIUpgradeyourlicenseText;
        
        private WinScrollBar mUIUpgradeyourlicenseScrollBar;
        
        private WinScrollBar mUIUpgradeyourlicenseScrollBar1;
        
        private WinControl mUIUpgradeyourlicenseGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIUpgradeyourlicenseText : WinText
    {
        
        public UIUpgradeyourlicenseText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinText.PropertyNames.Name] = "Upgrade your license";
            #endregion
        }
        
        #region Properties
        public WinHyperlink UIUpgradeyourlicenseHyperlink
        {
            get
            {
                if ((this.mUIUpgradeyourlicenseHyperlink == null))
                {
                    this.mUIUpgradeyourlicenseHyperlink = new WinHyperlink(this);
                    #region Search Criteria
                    this.mUIUpgradeyourlicenseHyperlink.SearchProperties[WinHyperlink.PropertyNames.Name] = "Upgrade your license";
                    #endregion
                }
                return this.mUIUpgradeyourlicenseHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private WinHyperlink mUIUpgradeyourlicenseHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIUpgradeyourlicenseScrollBar : WinScrollBar
    {
        
        public UIUpgradeyourlicenseScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIUpgradeyourlicenseScrollBar1 : WinScrollBar
    {
        
        public UIUpgradeyourlicenseScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPictureBox1Window : WinWindow
    {
        
        public UIPictureBox1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "pictureBox1";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIPictureBox1MenuBar
        {
            get
            {
                if ((this.mUIPictureBox1MenuBar == null))
                {
                    this.mUIPictureBox1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPictureBox1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIPictureBox1MenuBar;
            }
        }
        
        public WinTitleBar UIPictureBox1TitleBar
        {
            get
            {
                if ((this.mUIPictureBox1TitleBar == null))
                {
                    this.mUIPictureBox1TitleBar = new WinTitleBar(this);
                }
                return this.mUIPictureBox1TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIPictureBox1MenuBar1
        {
            get
            {
                if ((this.mUIPictureBox1MenuBar1 == null))
                {
                    this.mUIPictureBox1MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPictureBox1MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIPictureBox1MenuBar1;
            }
        }
        
        public WinClient UIUpgradeyourlicenseClient
        {
            get
            {
                if ((this.mUIUpgradeyourlicenseClient == null))
                {
                    this.mUIUpgradeyourlicenseClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIUpgradeyourlicenseClient.SearchProperties[WinControl.PropertyNames.Name] = "Upgrade your license";
                    #endregion
                }
                return this.mUIUpgradeyourlicenseClient;
            }
        }
        
        public WinScrollBar UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIVerticalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public WinScrollBar UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIHorizontalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIPictureBox1Grip
        {
            get
            {
                if ((this.mUIPictureBox1Grip == null))
                {
                    this.mUIPictureBox1Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUIPictureBox1Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIPictureBox1Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIPictureBox1MenuBar;
        
        private WinTitleBar mUIPictureBox1TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIPictureBox1MenuBar1;
        
        private WinClient mUIUpgradeyourlicenseClient;
        
        private WinScrollBar mUIVerticalScrollBar;
        
        private WinScrollBar mUIHorizontalScrollBar;
        
        private WinControl mUIPictureBox1Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar : WinScrollBar
    {
        
        public UIVerticalScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar : WinScrollBar
    {
        
        public UIHorizontalScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIUploadingFreeEditionWindow : WinWindow
    {
        
        public UIUploadingFreeEditionWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "labelControlTitle";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UILabelControlTitleMenuBar
        {
            get
            {
                if ((this.mUILabelControlTitleMenuBar == null))
                {
                    this.mUILabelControlTitleMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabelControlTitleMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUILabelControlTitleMenuBar;
            }
        }
        
        public WinTitleBar UIUploadingFreeEditionTitleBar
        {
            get
            {
                if ((this.mUIUploadingFreeEditionTitleBar == null))
                {
                    this.mUIUploadingFreeEditionTitleBar = new WinTitleBar(this);
                }
                return this.mUIUploadingFreeEditionTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UILabelControlTitleMenuBar1
        {
            get
            {
                if ((this.mUILabelControlTitleMenuBar1 == null))
                {
                    this.mUILabelControlTitleMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabelControlTitleMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUILabelControlTitleMenuBar1;
            }
        }
        
        public WinScrollBar UIUploadingFreeEditionScrollBar
        {
            get
            {
                if ((this.mUIUploadingFreeEditionScrollBar == null))
                {
                    this.mUIUploadingFreeEditionScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIUploadingFreeEditionScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIUploadingFreeEditionScrollBar;
            }
        }
        
        public WinScrollBar UIUploadingFreeEditionScrollBar1
        {
            get
            {
                if ((this.mUIUploadingFreeEditionScrollBar1 == null))
                {
                    this.mUIUploadingFreeEditionScrollBar1 = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIUploadingFreeEditionScrollBar1.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIUploadingFreeEditionScrollBar1;
            }
        }
        
        public WinControl UIUploadingFreeEditionGrip
        {
            get
            {
                if ((this.mUIUploadingFreeEditionGrip == null))
                {
                    this.mUIUploadingFreeEditionGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIUploadingFreeEditionGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIUploadingFreeEditionGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUILabelControlTitleMenuBar;
        
        private WinTitleBar mUIUploadingFreeEditionTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUILabelControlTitleMenuBar1;
        
        private WinScrollBar mUIUploadingFreeEditionScrollBar;
        
        private WinScrollBar mUIUploadingFreeEditionScrollBar1;
        
        private WinControl mUIUploadingFreeEditionGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIUploadingFreeEditionScrollBar : WinScrollBar
    {
        
        public UIUploadingFreeEditionScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIUploadingFreeEditionScrollBar1 : WinScrollBar
    {
        
        public UIUploadingFreeEditionScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UILabel2Window : WinWindow
    {
        
        public UILabel2Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "label2";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UILabel2MenuBar
        {
            get
            {
                if ((this.mUILabel2MenuBar == null))
                {
                    this.mUILabel2MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabel2MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUILabel2MenuBar;
            }
        }
        
        public WinTitleBar UILabel2TitleBar
        {
            get
            {
                if ((this.mUILabel2TitleBar == null))
                {
                    this.mUILabel2TitleBar = new WinTitleBar(this);
                }
                return this.mUILabel2TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UILabel2MenuBar1
        {
            get
            {
                if ((this.mUILabel2MenuBar1 == null))
                {
                    this.mUILabel2MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabel2MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUILabel2MenuBar1;
            }
        }
        
        public WinText UILabel2Text
        {
            get
            {
                if ((this.mUILabel2Text == null))
                {
                    this.mUILabel2Text = new WinText(this);
                    #region Search Criteria
                    this.mUILabel2Text.SearchProperties[WinText.PropertyNames.Name] = "label2";
                    #endregion
                }
                return this.mUILabel2Text;
            }
        }
        
        public WinScrollBar UILabel2ScrollBar
        {
            get
            {
                if ((this.mUILabel2ScrollBar == null))
                {
                    this.mUILabel2ScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUILabel2ScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUILabel2ScrollBar;
            }
        }
        
        public WinScrollBar UILabel2ScrollBar1
        {
            get
            {
                if ((this.mUILabel2ScrollBar1 == null))
                {
                    this.mUILabel2ScrollBar1 = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUILabel2ScrollBar1.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUILabel2ScrollBar1;
            }
        }
        
        public WinControl UILabel2Grip
        {
            get
            {
                if ((this.mUILabel2Grip == null))
                {
                    this.mUILabel2Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUILabel2Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUILabel2Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUILabel2MenuBar;
        
        private WinTitleBar mUILabel2TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUILabel2MenuBar1;
        
        private WinText mUILabel2Text;
        
        private WinScrollBar mUILabel2ScrollBar;
        
        private WinScrollBar mUILabel2ScrollBar1;
        
        private WinControl mUILabel2Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UILabel2ScrollBar : WinScrollBar
    {
        
        public UILabel2ScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UILabel2ScrollBar1 : WinScrollBar
    {
        
        public UILabel2ScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar1 : WinScrollBar
    {
        
        public UIVerticalScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar1 : WinScrollBar
    {
        
        public UIHorizontalScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UILabel1Window : WinWindow
    {
        
        public UILabel1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "label1";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UILabel1MenuBar
        {
            get
            {
                if ((this.mUILabel1MenuBar == null))
                {
                    this.mUILabel1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabel1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUILabel1MenuBar;
            }
        }
        
        public WinTitleBar UILabel1TitleBar
        {
            get
            {
                if ((this.mUILabel1TitleBar == null))
                {
                    this.mUILabel1TitleBar = new WinTitleBar(this);
                }
                return this.mUILabel1TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UILabel1MenuBar1
        {
            get
            {
                if ((this.mUILabel1MenuBar1 == null))
                {
                    this.mUILabel1MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabel1MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUILabel1MenuBar1;
            }
        }
        
        public WinText UILabel2Text
        {
            get
            {
                if ((this.mUILabel2Text == null))
                {
                    this.mUILabel2Text = new WinText(this);
                    #region Search Criteria
                    this.mUILabel2Text.SearchProperties[WinText.PropertyNames.Name] = "label2";
                    #endregion
                }
                return this.mUILabel2Text;
            }
        }
        
        public WinScrollBar UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIVerticalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public WinScrollBar UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIHorizontalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UILabel1Grip
        {
            get
            {
                if ((this.mUILabel1Grip == null))
                {
                    this.mUILabel1Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUILabel1Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUILabel1Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUILabel1MenuBar;
        
        private WinTitleBar mUILabel1TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUILabel1MenuBar1;
        
        private WinText mUILabel2Text;
        
        private WinScrollBar mUIVerticalScrollBar;
        
        private WinScrollBar mUIHorizontalScrollBar;
        
        private WinControl mUILabel1Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar2 : WinScrollBar
    {
        
        public UIVerticalScrollBar2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar2 : WinScrollBar
    {
        
        public UIHorizontalScrollBar2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIUploadingRestrictionScrollBar : WinScrollBar
    {
        
        public UIUploadingRestrictionScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIUploadingRestrictionScrollBar1 : WinScrollBar
    {
        
        public UIUploadingRestrictionScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
}
