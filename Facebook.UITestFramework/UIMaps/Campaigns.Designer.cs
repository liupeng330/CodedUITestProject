// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Facebook.UITestFramework.UIMaps.CampaignsClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public partial class Campaigns
    {
        
        /// <summary>
        /// ClickDeleteButton
        /// </summary>
        public void ClickDeleteButton()
        {
            #region Variable Declarations
            WinButton uIDeleteButton = this.UIHaihadsagecom4684830Window.UIRibbonToolBar1.UIDeleteButton;
            #endregion

            // Click 'Delete' button
            Mouse.Click(uIDeleteButton, new Point(23, 43));
        }
        
        /// <summary>
        /// ClickRevertButton
        /// </summary>
        public void ClickRevertButton()
        {
            #region Variable Declarations
            WinButton uIRevertButton = this.UIHaihadsagecom4684830Window.UIRibbonToolBar2.UIRevertButton;
            #endregion

            // Click 'Revert' button
            Mouse.Click(uIRevertButton, new Point(21, 39));
        }
        
        /// <summary>
        /// ContextMenuDownloadAccount
        /// </summary>
        public void ContextMenuDownloadAccount()
        {
            #region Variable Declarations
            WinTreeItem uIHaihadsagecom4684830TreeItem = this.UIHaihadsagecom4684830Window.UIAccountTreeViewWindow.UIYourAccounts1TreeItem.UIHaihadsagecom4684830TreeItem;
            WinMenuItem uIDownloadAccountMenuItem = this.UIItemWindow1.UIDropDownMenu.UIDownloadAccountMenuItem;
            #endregion

            // Right-Click 'Your Accounts(1)' -> 'haih@ad-sage.com #46848300(USD)' tree item
            Mouse.Click(uIHaihadsagecom4684830TreeItem, MouseButtons.Right, ModifierKeys.None, new Point(14, 10));

            // Click 'Download Account' menu item
            Mouse.Click(uIDownloadAccountMenuItem, new Point(67, 8));
        }
        
        /// <summary>
        /// RightClickDownloadAccount
        /// </summary>
        public void RightClickDownloadAccount()
        {
            #region Variable Declarations
            WinTreeItem uIAccount2348004880USDTreeItem = this.UIAccount2348004880USDWindow.UIItemWindow.UIItemTree.UIYourAccounts1TreeItem.UIAccount2348004880USDTreeItem;
            WinMenuItem uIDownloadAccountMenuItem = this.UIItemWindow1.UIDropDownMenu.UIDownloadAccountMenuItem;
            #endregion

            // Right-Click 'Your Accounts(1)' -> 'Account2 #348004880(USD)' tree item
            Mouse.Click(uIAccount2348004880USDTreeItem, MouseButtons.Right, ModifierKeys.None, new Point(17, 10));

            // Click 'Download Account' menu item
            Mouse.Click(uIDownloadAccountMenuItem, new Point(58, 11));
        }
        
        #region Properties
        public UIAdSageforPerformanceWindow UIAdSageforPerformanceWindow
        {
            get
            {
                if ((this.mUIAdSageforPerformanceWindow == null))
                {
                    this.mUIAdSageforPerformanceWindow = new UIAdSageforPerformanceWindow();
                }
                return this.mUIAdSageforPerformanceWindow;
            }
        }
        
        public UIItemWindow5 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow5();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIHaihadsagecom4684830Window UIHaihadsagecom4684830Window
        {
            get
            {
                if ((this.mUIHaihadsagecom4684830Window == null))
                {
                    this.mUIHaihadsagecom4684830Window = new UIHaihadsagecom4684830Window();
                }
                return this.mUIHaihadsagecom4684830Window;
            }
        }
        
        public UIItemWindow14 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow14();
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIHaihadsagecom4684830Window1 UIHaihadsagecom4684830Window1
        {
            get
            {
                if ((this.mUIHaihadsagecom4684830Window1 == null))
                {
                    this.mUIHaihadsagecom4684830Window1 = new UIHaihadsagecom4684830Window1();
                }
                return this.mUIHaihadsagecom4684830Window1;
            }
        }
        
        public UIWss_adsagetest163comWindow UIWss_adsagetest163comWindow
        {
            get
            {
                if ((this.mUIWss_adsagetest163comWindow == null))
                {
                    this.mUIWss_adsagetest163comWindow = new UIWss_adsagetest163comWindow();
                }
                return this.mUIWss_adsagetest163comWindow;
            }
        }
        
        public UIHaihadsagecom4684830Window2 UIHaihadsagecom4684830Window2
        {
            get
            {
                if ((this.mUIHaihadsagecom4684830Window2 == null))
                {
                    this.mUIHaihadsagecom4684830Window2 = new UIHaihadsagecom4684830Window2();
                }
                return this.mUIHaihadsagecom4684830Window2;
            }
        }
        
        public UIHaihadsagecom4684830Window3 UIHaihadsagecom4684830Window3
        {
            get
            {
                if ((this.mUIHaihadsagecom4684830Window3 == null))
                {
                    this.mUIHaihadsagecom4684830Window3 = new UIHaihadsagecom4684830Window3();
                }
                return this.mUIHaihadsagecom4684830Window3;
            }
        }
        
        public UIHaihadsagecom4684830Window4 UIHaihadsagecom4684830Window4
        {
            get
            {
                if ((this.mUIHaihadsagecom4684830Window4 == null))
                {
                    this.mUIHaihadsagecom4684830Window4 = new UIHaihadsagecom4684830Window4();
                }
                return this.mUIHaihadsagecom4684830Window4;
            }
        }
        
        public UIAccount2348004880USDWindow UIAccount2348004880USDWindow
        {
            get
            {
                if ((this.mUIAccount2348004880USDWindow == null))
                {
                    this.mUIAccount2348004880USDWindow = new UIAccount2348004880USDWindow();
                }
                return this.mUIAccount2348004880USDWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIAdSageforPerformanceWindow mUIAdSageforPerformanceWindow;
        
        private UIItemWindow5 mUIItemWindow;
        
        private UIHaihadsagecom4684830Window mUIHaihadsagecom4684830Window;
        
        private UIItemWindow14 mUIItemWindow1;
        
        private UIHaihadsagecom4684830Window1 mUIHaihadsagecom4684830Window1;
        
        private UIWss_adsagetest163comWindow mUIWss_adsagetest163comWindow;
        
        private UIHaihadsagecom4684830Window2 mUIHaihadsagecom4684830Window2;
        
        private UIHaihadsagecom4684830Window3 mUIHaihadsagecom4684830Window3;
        
        private UIHaihadsagecom4684830Window4 mUIHaihadsagecom4684830Window4;
        
        private UIAccount2348004880USDWindow mUIAccount2348004880USDWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIAdSageforPerformanceWindow : WinWindow
    {
        
        public UIAdSageforPerformanceWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "haih@ad-sage.com #46848300(USD) - adSage for Performance";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("adSage for Performance");
            #endregion
        }
        
        #region Properties
        public UIRibbonFormMenuBar UIRibbonFormMenuBar
        {
            get
            {
                if ((this.mUIRibbonFormMenuBar == null))
                {
                    this.mUIRibbonFormMenuBar = new UIRibbonFormMenuBar(this);
                }
                return this.mUIRibbonFormMenuBar;
            }
        }
        
        public UISystemMenuItem1 UISystemMenuItem
        {
            get
            {
                if ((this.mUISystemMenuItem == null))
                {
                    this.mUISystemMenuItem = new UISystemMenuItem1(this);
                }
                return this.mUISystemMenuItem;
            }
        }
        
        public UISystemMenu UISystemMenu
        {
            get
            {
                if ((this.mUISystemMenu == null))
                {
                    this.mUISystemMenu = new UISystemMenu(this);
                }
                return this.mUISystemMenu;
            }
        }
        
        public UIAdSageforPerformanceTitleBar UIAdSageforPerformanceTitleBar
        {
            get
            {
                if ((this.mUIAdSageforPerformanceTitleBar == null))
                {
                    this.mUIAdSageforPerformanceTitleBar = new UIAdSageforPerformanceTitleBar(this);
                }
                return this.mUIAdSageforPerformanceTitleBar;
            }
        }
        
        public WinMenuBar UIRibbonFormMenuBar1
        {
            get
            {
                if ((this.mUIRibbonFormMenuBar1 == null))
                {
                    this.mUIRibbonFormMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIRibbonFormMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIRibbonFormMenuBar1;
            }
        }
        
        public UIAdSageforPerformanceClient UIAdSageforPerformanceClient
        {
            get
            {
                if ((this.mUIAdSageforPerformanceClient == null))
                {
                    this.mUIAdSageforPerformanceClient = new UIAdSageforPerformanceClient(this);
                }
                return this.mUIAdSageforPerformanceClient;
            }
        }
        
        public UISplitContainerControWindow UISplitContainerControWindow
        {
            get
            {
                if ((this.mUISplitContainerControWindow == null))
                {
                    this.mUISplitContainerControWindow = new UISplitContainerControWindow(this);
                }
                return this.mUISplitContainerControWindow;
            }
        }
        
        public UISplitContainerControPane UISplitContainerControPane
        {
            get
            {
                if ((this.mUISplitContainerControPane == null))
                {
                    this.mUISplitContainerControPane = new UISplitContainerControPane(this);
                }
                return this.mUISplitContainerControPane;
            }
        }
        
        public UIScrollbarScrollBar UIScrollbarScrollBar
        {
            get
            {
                if ((this.mUIScrollbarScrollBar == null))
                {
                    this.mUIScrollbarScrollBar = new UIScrollbarScrollBar(this);
                }
                return this.mUIScrollbarScrollBar;
            }
        }
        
        public UIPanel1Pane UIPanel1Pane
        {
            get
            {
                if ((this.mUIPanel1Pane == null))
                {
                    this.mUIPanel1Pane = new UIPanel1Pane(this);
                }
                return this.mUIPanel1Pane;
            }
        }
        
        public UIScrollbarScrollBar1 UIScrollbarScrollBar1
        {
            get
            {
                if ((this.mUIScrollbarScrollBar1 == null))
                {
                    this.mUIScrollbarScrollBar1 = new UIScrollbarScrollBar1(this);
                }
                return this.mUIScrollbarScrollBar1;
            }
        }
        
        public UINavBarControl1Window UINavBarControl1Window
        {
            get
            {
                if ((this.mUINavBarControl1Window == null))
                {
                    this.mUINavBarControl1Window = new UINavBarControl1Window(this);
                }
                return this.mUINavBarControl1Window;
            }
        }
        
        public UINavBarControl1Client UINavBarControl1Client
        {
            get
            {
                if ((this.mUINavBarControl1Client == null))
                {
                    this.mUINavBarControl1Client = new UINavBarControl1Client(this);
                }
                return this.mUINavBarControl1Client;
            }
        }
        
        public UINavBarGroupControlCoWindow UINavBarGroupControlCoWindow
        {
            get
            {
                if ((this.mUINavBarGroupControlCoWindow == null))
                {
                    this.mUINavBarGroupControlCoWindow = new UINavBarGroupControlCoWindow(this);
                }
                return this.mUINavBarGroupControlCoWindow;
            }
        }
        
        public UIAccountNavigatorContWindow UIAccountNavigatorContWindow
        {
            get
            {
                if ((this.mUIAccountNavigatorContWindow == null))
                {
                    this.mUIAccountNavigatorContWindow = new UIAccountNavigatorContWindow(this);
                }
                return this.mUIAccountNavigatorContWindow;
            }
        }
        
        public UIAccountTreeViewWindow UIAccountTreeViewWindow
        {
            get
            {
                if ((this.mUIAccountTreeViewWindow == null))
                {
                    this.mUIAccountTreeViewWindow = new UIAccountTreeViewWindow(this);
                }
                return this.mUIAccountTreeViewWindow;
            }
        }
        
        public UIPanel2Pane UIPanel2Pane
        {
            get
            {
                if ((this.mUIPanel2Pane == null))
                {
                    this.mUIPanel2Pane = new UIPanel2Pane(this);
                }
                return this.mUIPanel2Pane;
            }
        }
        
        public UIScrollbarScrollBar2 UIScrollbarScrollBar2
        {
            get
            {
                if ((this.mUIScrollbarScrollBar2 == null))
                {
                    this.mUIScrollbarScrollBar2 = new UIScrollbarScrollBar2(this);
                }
                return this.mUIScrollbarScrollBar2;
            }
        }
        
        public UIPanel1Window UIPanel1Window
        {
            get
            {
                if ((this.mUIPanel1Window == null))
                {
                    this.mUIPanel1Window = new UIPanel1Window(this);
                }
                return this.mUIPanel1Window;
            }
        }
        
        public UIDropdownNotifierHostWindow UIDropdownNotifierHostWindow
        {
            get
            {
                if ((this.mUIDropdownNotifierHostWindow == null))
                {
                    this.mUIDropdownNotifierHostWindow = new UIDropdownNotifierHostWindow(this);
                }
                return this.mUIDropdownNotifierHostWindow;
            }
        }
        
        public UIPanelControlWindow UIPanelControlWindow
        {
            get
            {
                if ((this.mUIPanelControlWindow == null))
                {
                    this.mUIPanelControlWindow = new UIPanelControlWindow(this);
                }
                return this.mUIPanelControlWindow;
            }
        }
        
        public UIPanelControlPane UIPanelControlPane
        {
            get
            {
                if ((this.mUIPanelControlPane == null))
                {
                    this.mUIPanelControlPane = new UIPanelControlPane(this);
                }
                return this.mUIPanelControlPane;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIMessageNotifierContrWindow UIMessageNotifierContrWindow
        {
            get
            {
                if ((this.mUIMessageNotifierContrWindow == null))
                {
                    this.mUIMessageNotifierContrWindow = new UIMessageNotifierContrWindow(this);
                }
                return this.mUIMessageNotifierContrWindow;
            }
        }
        
        public UIMissingsomeperformanWindow UIMissingsomeperformanWindow
        {
            get
            {
                if ((this.mUIMissingsomeperformanWindow == null))
                {
                    this.mUIMissingsomeperformanWindow = new UIMissingsomeperformanWindow(this);
                }
                return this.mUIMissingsomeperformanWindow;
            }
        }
        
        public UIDownloadNowWindow UIDownloadNowWindow
        {
            get
            {
                if ((this.mUIDownloadNowWindow == null))
                {
                    this.mUIDownloadNowWindow = new UIDownloadNowWindow(this);
                }
                return this.mUIDownloadNowWindow;
            }
        }
        
        public UIVerticalScrollBar3 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar3(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar3 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar3(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public UIDxTabPageContainerCoWindow UIDxTabPageContainerCoWindow
        {
            get
            {
                if ((this.mUIDxTabPageContainerCoWindow == null))
                {
                    this.mUIDxTabPageContainerCoWindow = new UIDxTabPageContainerCoWindow(this);
                }
                return this.mUIDxTabPageContainerCoWindow;
            }
        }
        
        public UITabPageContainerContClient UITabPageContainerContClient
        {
            get
            {
                if ((this.mUITabPageContainerContClient == null))
                {
                    this.mUITabPageContainerContClient = new UITabPageContainerContClient(this);
                }
                return this.mUITabPageContainerContClient;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemTabList UIItemTabList
        {
            get
            {
                if ((this.mUIItemTabList == null))
                {
                    this.mUIItemTabList = new UIItemTabList(this);
                }
                return this.mUIItemTabList;
            }
        }
        
        public UIGenericEditingControWindow UIGenericEditingControWindow
        {
            get
            {
                if ((this.mUIGenericEditingControWindow == null))
                {
                    this.mUIGenericEditingControWindow = new UIGenericEditingControWindow(this);
                }
                return this.mUIGenericEditingControWindow;
            }
        }
        
        public UIPanelEditingWindow UIPanelEditingWindow
        {
            get
            {
                if ((this.mUIPanelEditingWindow == null))
                {
                    this.mUIPanelEditingWindow = new UIPanelEditingWindow(this);
                }
                return this.mUIPanelEditingWindow;
            }
        }
        
        public UIItemWindow2 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow2(this);
                }
                return this.mUIItemWindow2;
            }
        }
        
        public UIItemWindow3 UIItemWindow3
        {
            get
            {
                if ((this.mUIItemWindow3 == null))
                {
                    this.mUIItemWindow3 = new UIItemWindow3(this);
                }
                return this.mUIItemWindow3;
            }
        }
        
        public UIItemWindow4 UIItemWindow4
        {
            get
            {
                if ((this.mUIItemWindow4 == null))
                {
                    this.mUIItemWindow4 = new UIItemWindow4(this);
                }
                return this.mUIItemWindow4;
            }
        }
        
        public UIFacebookObjectReportWindow UIFacebookObjectReportWindow
        {
            get
            {
                if ((this.mUIFacebookObjectReportWindow == null))
                {
                    this.mUIFacebookObjectReportWindow = new UIFacebookObjectReportWindow(this);
                }
                return this.mUIFacebookObjectReportWindow;
            }
        }
        
        public UIReportDateSelectContWindow UIReportDateSelectContWindow
        {
            get
            {
                if ((this.mUIReportDateSelectContWindow == null))
                {
                    this.mUIReportDateSelectContWindow = new UIReportDateSelectContWindow(this);
                }
                return this.mUIReportDateSelectContWindow;
            }
        }
        
        public UIDateRange07142011072Window UIDateRange07142011072Window
        {
            get
            {
                if ((this.mUIDateRange07142011072Window == null))
                {
                    this.mUIDateRange07142011072Window = new UIDateRange07142011072Window(this);
                }
                return this.mUIDateRange07142011072Window;
            }
        }
        
        public UILast7DaysWindow UILast7DaysWindow
        {
            get
            {
                if ((this.mUILast7DaysWindow == null))
                {
                    this.mUILast7DaysWindow = new UILast7DaysWindow(this);
                }
                return this.mUILast7DaysWindow;
            }
        }
        
        public UILast30DaysWindow UILast30DaysWindow
        {
            get
            {
                if ((this.mUILast30DaysWindow == null))
                {
                    this.mUILast30DaysWindow = new UILast30DaysWindow(this);
                }
                return this.mUILast30DaysWindow;
            }
        }
        
        public UIGridControl1Window UIGridControl1Window
        {
            get
            {
                if ((this.mUIGridControl1Window == null))
                {
                    this.mUIGridControl1Window = new UIGridControl1Window(this);
                }
                return this.mUIGridControl1Window;
            }
        }
        
        public UITableLayoutPanel1Window UITableLayoutPanel1Window
        {
            get
            {
                if ((this.mUITableLayoutPanel1Window == null))
                {
                    this.mUITableLayoutPanel1Window = new UITableLayoutPanel1Window(this);
                }
                return this.mUITableLayoutPanel1Window;
            }
        }
        
        public UIBasicIndicatorPieChaWindow UIBasicIndicatorPieChaWindow
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaWindow == null))
                {
                    this.mUIBasicIndicatorPieChaWindow = new UIBasicIndicatorPieChaWindow(this);
                }
                return this.mUIBasicIndicatorPieChaWindow;
            }
        }
        
        public UILabel1Window UILabel1Window
        {
            get
            {
                if ((this.mUILabel1Window == null))
                {
                    this.mUILabel1Window = new UILabel1Window(this);
                }
                return this.mUILabel1Window;
            }
        }
        
        public UIPanel1Window1 UIPanel1Window1
        {
            get
            {
                if ((this.mUIPanel1Window1 == null))
                {
                    this.mUIPanel1Window1 = new UIPanel1Window1(this);
                }
                return this.mUIPanel1Window1;
            }
        }
        
        public UIImpressionsWindow UIImpressionsWindow
        {
            get
            {
                if ((this.mUIImpressionsWindow == null))
                {
                    this.mUIImpressionsWindow = new UIImpressionsWindow(this);
                }
                return this.mUIImpressionsWindow;
            }
        }
        
        public UILegendGridControlWindow UILegendGridControlWindow
        {
            get
            {
                if ((this.mUILegendGridControlWindow == null))
                {
                    this.mUILegendGridControlWindow = new UILegendGridControlWindow(this);
                }
                return this.mUILegendGridControlWindow;
            }
        }
        
        public UIPieChartWindow UIPieChartWindow
        {
            get
            {
                if ((this.mUIPieChartWindow == null))
                {
                    this.mUIPieChartWindow = new UIPieChartWindow(this);
                }
                return this.mUIPieChartWindow;
            }
        }
        
        public UIBasicIndicatorPieChaWindow1 UIBasicIndicatorPieChaWindow1
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaWindow1 == null))
                {
                    this.mUIBasicIndicatorPieChaWindow1 = new UIBasicIndicatorPieChaWindow1(this);
                }
                return this.mUIBasicIndicatorPieChaWindow1;
            }
        }
        
        public UILabel1Window1 UILabel1Window1
        {
            get
            {
                if ((this.mUILabel1Window1 == null))
                {
                    this.mUILabel1Window1 = new UILabel1Window1(this);
                }
                return this.mUILabel1Window1;
            }
        }
        
        public UIPanel1Window2 UIPanel1Window2
        {
            get
            {
                if ((this.mUIPanel1Window2 == null))
                {
                    this.mUIPanel1Window2 = new UIPanel1Window2(this);
                }
                return this.mUIPanel1Window2;
            }
        }
        
        public UIClicksWindow UIClicksWindow
        {
            get
            {
                if ((this.mUIClicksWindow == null))
                {
                    this.mUIClicksWindow = new UIClicksWindow(this);
                }
                return this.mUIClicksWindow;
            }
        }
        
        public UILegendGridControlWindow1 UILegendGridControlWindow1
        {
            get
            {
                if ((this.mUILegendGridControlWindow1 == null))
                {
                    this.mUILegendGridControlWindow1 = new UILegendGridControlWindow1(this);
                }
                return this.mUILegendGridControlWindow1;
            }
        }
        
        public UIPieChartWindow1 UIPieChartWindow1
        {
            get
            {
                if ((this.mUIPieChartWindow1 == null))
                {
                    this.mUIPieChartWindow1 = new UIPieChartWindow1(this);
                }
                return this.mUIPieChartWindow1;
            }
        }
        
        public UIBasicIndicatorPieChaWindow2 UIBasicIndicatorPieChaWindow2
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaWindow2 == null))
                {
                    this.mUIBasicIndicatorPieChaWindow2 = new UIBasicIndicatorPieChaWindow2(this);
                }
                return this.mUIBasicIndicatorPieChaWindow2;
            }
        }
        
        public UILabel1Window2 UILabel1Window2
        {
            get
            {
                if ((this.mUILabel1Window2 == null))
                {
                    this.mUILabel1Window2 = new UILabel1Window2(this);
                }
                return this.mUILabel1Window2;
            }
        }
        
        public UIPanel1Window3 UIPanel1Window3
        {
            get
            {
                if ((this.mUIPanel1Window3 == null))
                {
                    this.mUIPanel1Window3 = new UIPanel1Window3(this);
                }
                return this.mUIPanel1Window3;
            }
        }
        
        public UIConnectionsWindow UIConnectionsWindow
        {
            get
            {
                if ((this.mUIConnectionsWindow == null))
                {
                    this.mUIConnectionsWindow = new UIConnectionsWindow(this);
                }
                return this.mUIConnectionsWindow;
            }
        }
        
        public UILegendGridControlWindow2 UILegendGridControlWindow2
        {
            get
            {
                if ((this.mUILegendGridControlWindow2 == null))
                {
                    this.mUILegendGridControlWindow2 = new UILegendGridControlWindow2(this);
                }
                return this.mUILegendGridControlWindow2;
            }
        }
        
        public UIPieChartWindow2 UIPieChartWindow2
        {
            get
            {
                if ((this.mUIPieChartWindow2 == null))
                {
                    this.mUIPieChartWindow2 = new UIPieChartWindow2(this);
                }
                return this.mUIPieChartWindow2;
            }
        }
        
        public UIBasicIndicatorPieChaWindow3 UIBasicIndicatorPieChaWindow3
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaWindow3 == null))
                {
                    this.mUIBasicIndicatorPieChaWindow3 = new UIBasicIndicatorPieChaWindow3(this);
                }
                return this.mUIBasicIndicatorPieChaWindow3;
            }
        }
        
        public UILabel1Window3 UILabel1Window3
        {
            get
            {
                if ((this.mUILabel1Window3 == null))
                {
                    this.mUILabel1Window3 = new UILabel1Window3(this);
                }
                return this.mUILabel1Window3;
            }
        }
        
        public UIPanel1Window4 UIPanel1Window4
        {
            get
            {
                if ((this.mUIPanel1Window4 == null))
                {
                    this.mUIPanel1Window4 = new UIPanel1Window4(this);
                }
                return this.mUIPanel1Window4;
            }
        }
        
        public UISpendWindow UISpendWindow
        {
            get
            {
                if ((this.mUISpendWindow == null))
                {
                    this.mUISpendWindow = new UISpendWindow(this);
                }
                return this.mUISpendWindow;
            }
        }
        
        public UILegendGridControlWindow3 UILegendGridControlWindow3
        {
            get
            {
                if ((this.mUILegendGridControlWindow3 == null))
                {
                    this.mUILegendGridControlWindow3 = new UILegendGridControlWindow3(this);
                }
                return this.mUILegendGridControlWindow3;
            }
        }
        
        public UIPieChartWindow3 UIPieChartWindow3
        {
            get
            {
                if ((this.mUIPieChartWindow3 == null))
                {
                    this.mUIPieChartWindow3 = new UIPieChartWindow3(this);
                }
                return this.mUIPieChartWindow3;
            }
        }
        
        public UILabel2Window UILabel2Window
        {
            get
            {
                if ((this.mUILabel2Window == null))
                {
                    this.mUILabel2Window = new UILabel2Window(this);
                }
                return this.mUILabel2Window;
            }
        }
        
        public UIPanel3Window UIPanel3Window
        {
            get
            {
                if ((this.mUIPanel3Window == null))
                {
                    this.mUIPanel3Window = new UIPanel3Window(this);
                }
                return this.mUIPanel3Window;
            }
        }
        
        public UIComboBoxShowItemWindow UIComboBoxShowItemWindow
        {
            get
            {
                if ((this.mUIComboBoxShowItemWindow == null))
                {
                    this.mUIComboBoxShowItemWindow = new UIComboBoxShowItemWindow(this);
                }
                return this.mUIComboBoxShowItemWindow;
            }
        }
        
        public UITrendsofWindow UITrendsofWindow
        {
            get
            {
                if ((this.mUITrendsofWindow == null))
                {
                    this.mUITrendsofWindow = new UITrendsofWindow(this);
                }
                return this.mUITrendsofWindow;
            }
        }
        
        public UILabel1Window4 UILabel1Window4
        {
            get
            {
                if ((this.mUILabel1Window4 == null))
                {
                    this.mUILabel1Window4 = new UILabel1Window4(this);
                }
                return this.mUILabel1Window4;
            }
        }
        
        public UITotalChartWindow UITotalChartWindow
        {
            get
            {
                if ((this.mUITotalChartWindow == null))
                {
                    this.mUITotalChartWindow = new UITotalChartWindow(this);
                }
                return this.mUITotalChartWindow;
            }
        }
        
        public UIErrorInfoViewWindow UIErrorInfoViewWindow
        {
            get
            {
                if ((this.mUIErrorInfoViewWindow == null))
                {
                    this.mUIErrorInfoViewWindow = new UIErrorInfoViewWindow(this);
                }
                return this.mUIErrorInfoViewWindow;
            }
        }
        
        public UIDGVErrorInfoWindow UIDGVErrorInfoWindow
        {
            get
            {
                if ((this.mUIDGVErrorInfoWindow == null))
                {
                    this.mUIDGVErrorInfoWindow = new UIDGVErrorInfoWindow(this);
                }
                return this.mUIDGVErrorInfoWindow;
            }
        }
        
        public UIPanelTopWindow UIPanelTopWindow
        {
            get
            {
                if ((this.mUIPanelTopWindow == null))
                {
                    this.mUIPanelTopWindow = new UIPanelTopWindow(this);
                }
                return this.mUIPanelTopWindow;
            }
        }
        
        public UIErrors1Window UIErrors1Window
        {
            get
            {
                if ((this.mUIErrors1Window == null))
                {
                    this.mUIErrors1Window = new UIErrors1Window(this);
                }
                return this.mUIErrors1Window;
            }
        }
        
        public UIPBDisplayWindow UIPBDisplayWindow
        {
            get
            {
                if ((this.mUIPBDisplayWindow == null))
                {
                    this.mUIPBDisplayWindow = new UIPBDisplayWindow(this);
                }
                return this.mUIPBDisplayWindow;
            }
        }
        
        public UIFacebookCampaignEditWindow UIFacebookCampaignEditWindow
        {
            get
            {
                if ((this.mUIFacebookCampaignEditWindow == null))
                {
                    this.mUIFacebookCampaignEditWindow = new UIFacebookCampaignEditWindow(this);
                }
                return this.mUIFacebookCampaignEditWindow;
            }
        }
        
        public UITxtCamNameWindow UITxtCamNameWindow
        {
            get
            {
                if ((this.mUITxtCamNameWindow == null))
                {
                    this.mUITxtCamNameWindow = new UITxtCamNameWindow(this);
                }
                return this.mUITxtCamNameWindow;
            }
        }
        
        public UICbBudgetTypeWindow UICbBudgetTypeWindow
        {
            get
            {
                if ((this.mUICbBudgetTypeWindow == null))
                {
                    this.mUICbBudgetTypeWindow = new UICbBudgetTypeWindow(this);
                }
                return this.mUICbBudgetTypeWindow;
            }
        }
        
        public UITxtBudgetWindow UITxtBudgetWindow
        {
            get
            {
                if ((this.mUITxtBudgetWindow == null))
                {
                    this.mUITxtBudgetWindow = new UITxtBudgetWindow(this);
                }
                return this.mUITxtBudgetWindow;
            }
        }
        
        public UICbStatusWindow UICbStatusWindow
        {
            get
            {
                if ((this.mUICbStatusWindow == null))
                {
                    this.mUICbStatusWindow = new UICbStatusWindow(this);
                }
                return this.mUICbStatusWindow;
            }
        }
        
        public UIRunmycampaigncontinuWindow UIRunmycampaigncontinuWindow
        {
            get
            {
                if ((this.mUIRunmycampaigncontinuWindow == null))
                {
                    this.mUIRunmycampaigncontinuWindow = new UIRunmycampaigncontinuWindow(this);
                }
                return this.mUIRunmycampaigncontinuWindow;
            }
        }
        
        public UIDtpFromWindow UIDtpFromWindow
        {
            get
            {
                if ((this.mUIDtpFromWindow == null))
                {
                    this.mUIDtpFromWindow = new UIDtpFromWindow(this);
                }
                return this.mUIDtpFromWindow;
            }
        }
        
        public UIDtpToWindow UIDtpToWindow
        {
            get
            {
                if ((this.mUIDtpToWindow == null))
                {
                    this.mUIDtpToWindow = new UIDtpToWindow(this);
                }
                return this.mUIDtpToWindow;
            }
        }
        
        public UICampaignNameWindow UICampaignNameWindow
        {
            get
            {
                if ((this.mUICampaignNameWindow == null))
                {
                    this.mUICampaignNameWindow = new UICampaignNameWindow(this);
                }
                return this.mUICampaignNameWindow;
            }
        }
        
        public UIBudgetUSDWindow UIBudgetUSDWindow
        {
            get
            {
                if ((this.mUIBudgetUSDWindow == null))
                {
                    this.mUIBudgetUSDWindow = new UIBudgetUSDWindow(this);
                }
                return this.mUIBudgetUSDWindow;
            }
        }
        
        public UIScheduleWindow UIScheduleWindow
        {
            get
            {
                if ((this.mUIScheduleWindow == null))
                {
                    this.mUIScheduleWindow = new UIScheduleWindow(this);
                }
                return this.mUIScheduleWindow;
            }
        }
        
        public UIFromWindow UIFromWindow
        {
            get
            {
                if ((this.mUIFromWindow == null))
                {
                    this.mUIFromWindow = new UIFromWindow(this);
                }
                return this.mUIFromWindow;
            }
        }
        
        public UITOWindow UITOWindow
        {
            get
            {
                if ((this.mUITOWindow == null))
                {
                    this.mUITOWindow = new UITOWindow(this);
                }
                return this.mUITOWindow;
            }
        }
        
        public UIRunStatusWindow UIRunStatusWindow
        {
            get
            {
                if ((this.mUIRunStatusWindow == null))
                {
                    this.mUIRunStatusWindow = new UIRunStatusWindow(this);
                }
                return this.mUIRunStatusWindow;
            }
        }
        
        public UIPacificTimeWindow UIPacificTimeWindow
        {
            get
            {
                if ((this.mUIPacificTimeWindow == null))
                {
                    this.mUIPacificTimeWindow = new UIPacificTimeWindow(this);
                }
                return this.mUIPacificTimeWindow;
            }
        }
        
        public UIPacificTimeWindow1 UIPacificTimeWindow1
        {
            get
            {
                if ((this.mUIPacificTimeWindow1 == null))
                {
                    this.mUIPacificTimeWindow1 = new UIPacificTimeWindow1(this);
                }
                return this.mUIPacificTimeWindow1;
            }
        }
        
        public UILabelSplitWindow UILabelSplitWindow
        {
            get
            {
                if ((this.mUILabelSplitWindow == null))
                {
                    this.mUILabelSplitWindow = new UILabelSplitWindow(this);
                }
                return this.mUILabelSplitWindow;
            }
        }
        
        public UISEMSearchPaneWindow UISEMSearchPaneWindow
        {
            get
            {
                if ((this.mUISEMSearchPaneWindow == null))
                {
                    this.mUISEMSearchPaneWindow = new UISEMSearchPaneWindow(this);
                }
                return this.mUISEMSearchPaneWindow;
            }
        }
        
        public UISearchPaneWindow UISearchPaneWindow
        {
            get
            {
                if ((this.mUISearchPaneWindow == null))
                {
                    this.mUISearchPaneWindow = new UISearchPaneWindow(this);
                }
                return this.mUISearchPaneWindow;
            }
        }
        
        public UITSSearchToolBar1 UITSSearchToolBar
        {
            get
            {
                if ((this.mUITSSearchToolBar == null))
                {
                    this.mUITSSearchToolBar = new UITSSearchToolBar1(this);
                }
                return this.mUITSSearchToolBar;
            }
        }
        
        public UIQuickSearchControlWindow UIQuickSearchControlWindow
        {
            get
            {
                if ((this.mUIQuickSearchControlWindow == null))
                {
                    this.mUIQuickSearchControlWindow = new UIQuickSearchControlWindow(this);
                }
                return this.mUIQuickSearchControlWindow;
            }
        }
        
        public UIPanel1Window5 UIPanel1Window5
        {
            get
            {
                if ((this.mUIPanel1Window5 == null))
                {
                    this.mUIPanel1Window5 = new UIPanel1Window5(this);
                }
                return this.mUIPanel1Window5;
            }
        }
        
        public UIBtnQueryWindow UIBtnQueryWindow
        {
            get
            {
                if ((this.mUIBtnQueryWindow == null))
                {
                    this.mUIBtnQueryWindow = new UIBtnQueryWindow(this);
                }
                return this.mUIBtnQueryWindow;
            }
        }
        
        public UISearchWithinCurrentVWindow UISearchWithinCurrentVWindow
        {
            get
            {
                if ((this.mUISearchWithinCurrentVWindow == null))
                {
                    this.mUISearchWithinCurrentVWindow = new UISearchWithinCurrentVWindow(this);
                }
                return this.mUISearchWithinCurrentVWindow;
            }
        }
        
        public UIVerticalScrollBar111 UIVerticalScrollBar1
        {
            get
            {
                if ((this.mUIVerticalScrollBar1 == null))
                {
                    this.mUIVerticalScrollBar1 = new UIVerticalScrollBar111(this);
                }
                return this.mUIVerticalScrollBar1;
            }
        }
        
        public UIHorizontalScrollBar111 UIHorizontalScrollBar1
        {
            get
            {
                if ((this.mUIHorizontalScrollBar1 == null))
                {
                    this.mUIHorizontalScrollBar1 = new UIHorizontalScrollBar111(this);
                }
                return this.mUIHorizontalScrollBar1;
            }
        }
        
        public UISplitContainerControScrollBar UISplitContainerControScrollBar
        {
            get
            {
                if ((this.mUISplitContainerControScrollBar == null))
                {
                    this.mUISplitContainerControScrollBar = new UISplitContainerControScrollBar(this);
                }
                return this.mUISplitContainerControScrollBar;
            }
        }
        
        public UISplitContainerControScrollBar1 UISplitContainerControScrollBar1
        {
            get
            {
                if ((this.mUISplitContainerControScrollBar1 == null))
                {
                    this.mUISplitContainerControScrollBar1 = new UISplitContainerControScrollBar1(this);
                }
                return this.mUISplitContainerControScrollBar1;
            }
        }
        
        public UIRibbonStatusBarWindow UIRibbonStatusBarWindow
        {
            get
            {
                if ((this.mUIRibbonStatusBarWindow == null))
                {
                    this.mUIRibbonStatusBarWindow = new UIRibbonStatusBarWindow(this);
                }
                return this.mUIRibbonStatusBarWindow;
            }
        }
        
        public UIStatusBarPropertyPage UIStatusBarPropertyPage
        {
            get
            {
                if ((this.mUIStatusBarPropertyPage == null))
                {
                    this.mUIStatusBarPropertyPage = new UIStatusBarPropertyPage(this);
                }
                return this.mUIStatusBarPropertyPage;
            }
        }
        
        public UIVerticalScrollBar210 UIVerticalScrollBar2
        {
            get
            {
                if ((this.mUIVerticalScrollBar2 == null))
                {
                    this.mUIVerticalScrollBar2 = new UIVerticalScrollBar210(this);
                }
                return this.mUIVerticalScrollBar2;
            }
        }
        
        public UIHorizontalScrollBar210 UIHorizontalScrollBar2
        {
            get
            {
                if ((this.mUIHorizontalScrollBar2 == null))
                {
                    this.mUIHorizontalScrollBar2 = new UIHorizontalScrollBar210(this);
                }
                return this.mUIHorizontalScrollBar2;
            }
        }
        
        public UIRibbonWindow UIRibbonWindow
        {
            get
            {
                if ((this.mUIRibbonWindow == null))
                {
                    this.mUIRibbonWindow = new UIRibbonWindow(this);
                }
                return this.mUIRibbonWindow;
            }
        }
        
        public UITheRibbonPropertyPage UITheRibbonPropertyPage
        {
            get
            {
                if ((this.mUITheRibbonPropertyPage == null))
                {
                    this.mUITheRibbonPropertyPage = new UITheRibbonPropertyPage(this);
                }
                return this.mUITheRibbonPropertyPage;
            }
        }
        
        public UIRibbonToolBar UIRibbonToolBar
        {
            get
            {
                if ((this.mUIRibbonToolBar == null))
                {
                    this.mUIRibbonToolBar = new UIRibbonToolBar(this);
                }
                return this.mUIRibbonToolBar;
            }
        }
        
        public UIRibbonTabsTabList UIRibbonTabsTabList
        {
            get
            {
                if ((this.mUIRibbonTabsTabList == null))
                {
                    this.mUIRibbonTabsTabList = new UIRibbonTabsTabList(this);
                }
                return this.mUIRibbonTabsTabList;
            }
        }
        
        public UILowerRibbonPane UILowerRibbonPane
        {
            get
            {
                if ((this.mUILowerRibbonPane == null))
                {
                    this.mUILowerRibbonPane = new UILowerRibbonPane(this);
                }
                return this.mUILowerRibbonPane;
            }
        }
        
        public UIFacebookCampaignsPropertyPage UIFacebookCampaignsPropertyPage
        {
            get
            {
                if ((this.mUIFacebookCampaignsPropertyPage == null))
                {
                    this.mUIFacebookCampaignsPropertyPage = new UIFacebookCampaignsPropertyPage(this);
                }
                return this.mUIFacebookCampaignsPropertyPage;
            }
        }
        
        public UIRibbonToolBar1 UIRibbonToolBar1
        {
            get
            {
                if ((this.mUIRibbonToolBar1 == null))
                {
                    this.mUIRibbonToolBar1 = new UIRibbonToolBar1(this);
                }
                return this.mUIRibbonToolBar1;
            }
        }
        
        public UIRibbonToolBar2 UIRibbonToolBar2
        {
            get
            {
                if ((this.mUIRibbonToolBar2 == null))
                {
                    this.mUIRibbonToolBar2 = new UIRibbonToolBar2(this);
                }
                return this.mUIRibbonToolBar2;
            }
        }
        
        public UIRibbonToolBar3 UIRibbonToolBar3
        {
            get
            {
                if ((this.mUIRibbonToolBar3 == null))
                {
                    this.mUIRibbonToolBar3 = new UIRibbonToolBar3(this);
                }
                return this.mUIRibbonToolBar3;
            }
        }
        
        public UIRibbonToolBar4 UIRibbonToolBar4
        {
            get
            {
                if ((this.mUIRibbonToolBar4 == null))
                {
                    this.mUIRibbonToolBar4 = new UIRibbonToolBar4(this);
                }
                return this.mUIRibbonToolBar4;
            }
        }
        
        public UIRibbonToolBar5 UIRibbonToolBar5
        {
            get
            {
                if ((this.mUIRibbonToolBar5 == null))
                {
                    this.mUIRibbonToolBar5 = new UIRibbonToolBar5(this);
                }
                return this.mUIRibbonToolBar5;
            }
        }
        
        public UIRibbonToolBar6 UIRibbonToolBar6
        {
            get
            {
                if ((this.mUIRibbonToolBar6 == null))
                {
                    this.mUIRibbonToolBar6 = new UIRibbonToolBar6(this);
                }
                return this.mUIRibbonToolBar6;
            }
        }
        
        public UIOptimizationMenuItem UIOptimizationMenuItem
        {
            get
            {
                if ((this.mUIOptimizationMenuItem == null))
                {
                    this.mUIOptimizationMenuItem = new UIOptimizationMenuItem(this);
                }
                return this.mUIOptimizationMenuItem;
            }
        }
        
        public UIRibbonToolBar7 UIRibbonToolBar7
        {
            get
            {
                if ((this.mUIRibbonToolBar7 == null))
                {
                    this.mUIRibbonToolBar7 = new UIRibbonToolBar7(this);
                }
                return this.mUIRibbonToolBar7;
            }
        }
        
        public UIVerticalScrollBar310 UIVerticalScrollBar3
        {
            get
            {
                if ((this.mUIVerticalScrollBar3 == null))
                {
                    this.mUIVerticalScrollBar3 = new UIVerticalScrollBar310(this);
                }
                return this.mUIVerticalScrollBar3;
            }
        }
        
        public UIHorizontalScrollBar310 UIHorizontalScrollBar3
        {
            get
            {
                if ((this.mUIHorizontalScrollBar3 == null))
                {
                    this.mUIHorizontalScrollBar3 = new UIHorizontalScrollBar310(this);
                }
                return this.mUIHorizontalScrollBar3;
            }
        }
        
        public UIAdSageforPerformanceScrollBar UIAdSageforPerformanceScrollBar
        {
            get
            {
                if ((this.mUIAdSageforPerformanceScrollBar == null))
                {
                    this.mUIAdSageforPerformanceScrollBar = new UIAdSageforPerformanceScrollBar(this);
                }
                return this.mUIAdSageforPerformanceScrollBar;
            }
        }
        
        public UIAdSageforPerformanceScrollBar1 UIAdSageforPerformanceScrollBar1
        {
            get
            {
                if ((this.mUIAdSageforPerformanceScrollBar1 == null))
                {
                    this.mUIAdSageforPerformanceScrollBar1 = new UIAdSageforPerformanceScrollBar1(this);
                }
                return this.mUIAdSageforPerformanceScrollBar1;
            }
        }
        
        public WinControl UIAdSageforPerformanceGrip
        {
            get
            {
                if ((this.mUIAdSageforPerformanceGrip == null))
                {
                    this.mUIAdSageforPerformanceGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIAdSageforPerformanceGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIAdSageforPerformanceGrip;
            }
        }
        #endregion
        
        #region Fields
        private UIRibbonFormMenuBar mUIRibbonFormMenuBar;
        
        private UISystemMenuItem1 mUISystemMenuItem;
        
        private UISystemMenu mUISystemMenu;
        
        private UIAdSageforPerformanceTitleBar mUIAdSageforPerformanceTitleBar;
        
        private WinMenuBar mUIRibbonFormMenuBar1;
        
        private UIAdSageforPerformanceClient mUIAdSageforPerformanceClient;
        
        private UISplitContainerControWindow mUISplitContainerControWindow;
        
        private UISplitContainerControPane mUISplitContainerControPane;
        
        private UIScrollbarScrollBar mUIScrollbarScrollBar;
        
        private UIPanel1Pane mUIPanel1Pane;
        
        private UIScrollbarScrollBar1 mUIScrollbarScrollBar1;
        
        private UINavBarControl1Window mUINavBarControl1Window;
        
        private UINavBarControl1Client mUINavBarControl1Client;
        
        private UINavBarGroupControlCoWindow mUINavBarGroupControlCoWindow;
        
        private UIAccountNavigatorContWindow mUIAccountNavigatorContWindow;
        
        private UIAccountTreeViewWindow mUIAccountTreeViewWindow;
        
        private UIPanel2Pane mUIPanel2Pane;
        
        private UIScrollbarScrollBar2 mUIScrollbarScrollBar2;
        
        private UIPanel1Window mUIPanel1Window;
        
        private UIDropdownNotifierHostWindow mUIDropdownNotifierHostWindow;
        
        private UIPanelControlWindow mUIPanelControlWindow;
        
        private UIPanelControlPane mUIPanelControlPane;
        
        private UIItemWindow mUIItemWindow;
        
        private UIMessageNotifierContrWindow mUIMessageNotifierContrWindow;
        
        private UIMissingsomeperformanWindow mUIMissingsomeperformanWindow;
        
        private UIDownloadNowWindow mUIDownloadNowWindow;
        
        private UIVerticalScrollBar3 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar3 mUIHorizontalScrollBar;
        
        private UIDxTabPageContainerCoWindow mUIDxTabPageContainerCoWindow;
        
        private UITabPageContainerContClient mUITabPageContainerContClient;
        
        private UIItemWindow1 mUIItemWindow1;
        
        private UIItemTabList mUIItemTabList;
        
        private UIGenericEditingControWindow mUIGenericEditingControWindow;
        
        private UIPanelEditingWindow mUIPanelEditingWindow;
        
        private UIItemWindow2 mUIItemWindow2;
        
        private UIItemWindow3 mUIItemWindow3;
        
        private UIItemWindow4 mUIItemWindow4;
        
        private UIFacebookObjectReportWindow mUIFacebookObjectReportWindow;
        
        private UIReportDateSelectContWindow mUIReportDateSelectContWindow;
        
        private UIDateRange07142011072Window mUIDateRange07142011072Window;
        
        private UILast7DaysWindow mUILast7DaysWindow;
        
        private UILast30DaysWindow mUILast30DaysWindow;
        
        private UIGridControl1Window mUIGridControl1Window;
        
        private UITableLayoutPanel1Window mUITableLayoutPanel1Window;
        
        private UIBasicIndicatorPieChaWindow mUIBasicIndicatorPieChaWindow;
        
        private UILabel1Window mUILabel1Window;
        
        private UIPanel1Window1 mUIPanel1Window1;
        
        private UIImpressionsWindow mUIImpressionsWindow;
        
        private UILegendGridControlWindow mUILegendGridControlWindow;
        
        private UIPieChartWindow mUIPieChartWindow;
        
        private UIBasicIndicatorPieChaWindow1 mUIBasicIndicatorPieChaWindow1;
        
        private UILabel1Window1 mUILabel1Window1;
        
        private UIPanel1Window2 mUIPanel1Window2;
        
        private UIClicksWindow mUIClicksWindow;
        
        private UILegendGridControlWindow1 mUILegendGridControlWindow1;
        
        private UIPieChartWindow1 mUIPieChartWindow1;
        
        private UIBasicIndicatorPieChaWindow2 mUIBasicIndicatorPieChaWindow2;
        
        private UILabel1Window2 mUILabel1Window2;
        
        private UIPanel1Window3 mUIPanel1Window3;
        
        private UIConnectionsWindow mUIConnectionsWindow;
        
        private UILegendGridControlWindow2 mUILegendGridControlWindow2;
        
        private UIPieChartWindow2 mUIPieChartWindow2;
        
        private UIBasicIndicatorPieChaWindow3 mUIBasicIndicatorPieChaWindow3;
        
        private UILabel1Window3 mUILabel1Window3;
        
        private UIPanel1Window4 mUIPanel1Window4;
        
        private UISpendWindow mUISpendWindow;
        
        private UILegendGridControlWindow3 mUILegendGridControlWindow3;
        
        private UIPieChartWindow3 mUIPieChartWindow3;
        
        private UILabel2Window mUILabel2Window;
        
        private UIPanel3Window mUIPanel3Window;
        
        private UIComboBoxShowItemWindow mUIComboBoxShowItemWindow;
        
        private UITrendsofWindow mUITrendsofWindow;
        
        private UILabel1Window4 mUILabel1Window4;
        
        private UITotalChartWindow mUITotalChartWindow;
        
        private UIErrorInfoViewWindow mUIErrorInfoViewWindow;
        
        private UIDGVErrorInfoWindow mUIDGVErrorInfoWindow;
        
        private UIPanelTopWindow mUIPanelTopWindow;
        
        private UIErrors1Window mUIErrors1Window;
        
        private UIPBDisplayWindow mUIPBDisplayWindow;
        
        private UIFacebookCampaignEditWindow mUIFacebookCampaignEditWindow;
        
        private UITxtCamNameWindow mUITxtCamNameWindow;
        
        private UICbBudgetTypeWindow mUICbBudgetTypeWindow;
        
        private UITxtBudgetWindow mUITxtBudgetWindow;
        
        private UICbStatusWindow mUICbStatusWindow;
        
        private UIRunmycampaigncontinuWindow mUIRunmycampaigncontinuWindow;
        
        private UIDtpFromWindow mUIDtpFromWindow;
        
        private UIDtpToWindow mUIDtpToWindow;
        
        private UICampaignNameWindow mUICampaignNameWindow;
        
        private UIBudgetUSDWindow mUIBudgetUSDWindow;
        
        private UIScheduleWindow mUIScheduleWindow;
        
        private UIFromWindow mUIFromWindow;
        
        private UITOWindow mUITOWindow;
        
        private UIRunStatusWindow mUIRunStatusWindow;
        
        private UIPacificTimeWindow mUIPacificTimeWindow;
        
        private UIPacificTimeWindow1 mUIPacificTimeWindow1;
        
        private UILabelSplitWindow mUILabelSplitWindow;
        
        private UISEMSearchPaneWindow mUISEMSearchPaneWindow;
        
        private UISearchPaneWindow mUISearchPaneWindow;
        
        private UITSSearchToolBar1 mUITSSearchToolBar;
        
        private UIQuickSearchControlWindow mUIQuickSearchControlWindow;
        
        private UIPanel1Window5 mUIPanel1Window5;
        
        private UIBtnQueryWindow mUIBtnQueryWindow;
        
        private UISearchWithinCurrentVWindow mUISearchWithinCurrentVWindow;
        
        private UIVerticalScrollBar111 mUIVerticalScrollBar1;
        
        private UIHorizontalScrollBar111 mUIHorizontalScrollBar1;
        
        private UISplitContainerControScrollBar mUISplitContainerControScrollBar;
        
        private UISplitContainerControScrollBar1 mUISplitContainerControScrollBar1;
        
        private UIRibbonStatusBarWindow mUIRibbonStatusBarWindow;
        
        private UIStatusBarPropertyPage mUIStatusBarPropertyPage;
        
        private UIVerticalScrollBar210 mUIVerticalScrollBar2;
        
        private UIHorizontalScrollBar210 mUIHorizontalScrollBar2;
        
        private UIRibbonWindow mUIRibbonWindow;
        
        private UITheRibbonPropertyPage mUITheRibbonPropertyPage;
        
        private UIRibbonToolBar mUIRibbonToolBar;
        
        private UIRibbonTabsTabList mUIRibbonTabsTabList;
        
        private UILowerRibbonPane mUILowerRibbonPane;
        
        private UIFacebookCampaignsPropertyPage mUIFacebookCampaignsPropertyPage;
        
        private UIRibbonToolBar1 mUIRibbonToolBar1;
        
        private UIRibbonToolBar2 mUIRibbonToolBar2;
        
        private UIRibbonToolBar3 mUIRibbonToolBar3;
        
        private UIRibbonToolBar4 mUIRibbonToolBar4;
        
        private UIRibbonToolBar5 mUIRibbonToolBar5;
        
        private UIRibbonToolBar6 mUIRibbonToolBar6;
        
        private UIOptimizationMenuItem mUIOptimizationMenuItem;
        
        private UIRibbonToolBar7 mUIRibbonToolBar7;
        
        private UIVerticalScrollBar310 mUIVerticalScrollBar3;
        
        private UIHorizontalScrollBar310 mUIHorizontalScrollBar3;
        
        private UIAdSageforPerformanceScrollBar mUIAdSageforPerformanceScrollBar;
        
        private UIAdSageforPerformanceScrollBar1 mUIAdSageforPerformanceScrollBar1;
        
        private WinControl mUIAdSageforPerformanceGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRibbonFormMenuBar : WinMenuBar
    {
        
        public UIRibbonFormMenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "System";
            #endregion
        }
        
        #region Properties
        public UISystemMenuItem UISystemMenuItem
        {
            get
            {
                if ((this.mUISystemMenuItem == null))
                {
                    this.mUISystemMenuItem = new UISystemMenuItem(this);
                }
                return this.mUISystemMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UISystemMenuItem mUISystemMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISystemMenuItem : WinMenuItem
    {
        
        public UISystemMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "System";
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIRestoreMenuItem
        {
            get
            {
                if ((this.mUIRestoreMenuItem == null))
                {
                    this.mUIRestoreMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIRestoreMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Restore";
                    this.mUIRestoreMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUIRestoreMenuItem;
            }
        }
        
        public WinMenuItem UIMoveMenuItem
        {
            get
            {
                if ((this.mUIMoveMenuItem == null))
                {
                    this.mUIMoveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIMoveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Move";
                    this.mUIMoveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUIMoveMenuItem;
            }
        }
        
        public WinMenuItem UISizeMenuItem
        {
            get
            {
                if ((this.mUISizeMenuItem == null))
                {
                    this.mUISizeMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISizeMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Size";
                    this.mUISizeMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUISizeMenuItem;
            }
        }
        
        public WinMenuItem UIMinimizeMenuItem
        {
            get
            {
                if ((this.mUIMinimizeMenuItem == null))
                {
                    this.mUIMinimizeMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIMinimizeMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Minimize";
                    this.mUIMinimizeMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUIMinimizeMenuItem;
            }
        }
        
        public WinMenuItem UIMaximizeMenuItem
        {
            get
            {
                if ((this.mUIMaximizeMenuItem == null))
                {
                    this.mUIMaximizeMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIMaximizeMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Maximize";
                    this.mUIMaximizeMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUIMaximizeMenuItem;
            }
        }
        
        public WinMenuItem UICloseAltF4MenuItem
        {
            get
            {
                if ((this.mUICloseAltF4MenuItem == null))
                {
                    this.mUICloseAltF4MenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseAltF4MenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close\tAlt+F4";
                    this.mUICloseAltF4MenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUICloseAltF4MenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIRestoreMenuItem;
        
        private WinMenuItem mUIMoveMenuItem;
        
        private WinMenuItem mUISizeMenuItem;
        
        private WinMenuItem mUIMinimizeMenuItem;
        
        private WinMenuItem mUIMaximizeMenuItem;
        
        private WinMenuItem mUICloseAltF4MenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISystemMenuItem1 : WinMenuItem
    {
        
        public UISystemMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "System";
            #endregion
        }
        
        #region Properties
        public WinMenu UISystemMenu
        {
            get
            {
                if ((this.mUISystemMenu == null))
                {
                    this.mUISystemMenu = new WinMenu(this);
                    #region Search Criteria
                    this.mUISystemMenu.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    this.mUISystemMenu.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISystemMenu.SearchConfigurations.Remove(SearchConfiguration.VisibleOnly);
                    #endregion
                }
                return this.mUISystemMenu;
            }
        }
        #endregion
        
        #region Fields
        private WinMenu mUISystemMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISystemMenu : WinMenu
    {
        
        public UISystemMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "System";
            this.SearchConfigurations.Remove(SearchConfiguration.VisibleOnly);
            #endregion
        }
        
        #region Properties
        public WinSeparator UIItemSeparator
        {
            get
            {
                if ((this.mUIItemSeparator == null))
                {
                    this.mUIItemSeparator = new WinSeparator(this);
                }
                return this.mUIItemSeparator;
            }
        }
        #endregion
        
        #region Fields
        private WinSeparator mUIItemSeparator;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIAdSageforPerformanceTitleBar : WinTitleBar
    {
        
        public UIAdSageforPerformanceTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIRestoreButton
        {
            get
            {
                if ((this.mUIRestoreButton == null))
                {
                    this.mUIRestoreButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIRestoreButton.SearchProperties[WinButton.PropertyNames.Name] = "Restore";
                    #endregion
                }
                return this.mUIRestoreButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIRestoreButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIAdSageforPerformanceClient : WinClient
    {
        
        public UIAdSageforPerformanceClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "adSage for Performance";
            #endregion
        }
        
        #region Properties
        public WinWindow UISplitContainerControWindow
        {
            get
            {
                if ((this.mUISplitContainerControWindow == null))
                {
                    this.mUISplitContainerControWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUISplitContainerControWindow.SearchProperties[WinWindow.PropertyNames.Name] = "splitContainerControl1";
                    this.mUISplitContainerControWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUISplitContainerControWindow;
            }
        }
        
        public WinPane UISplitContainerControPane
        {
            get
            {
                if ((this.mUISplitContainerControPane == null))
                {
                    this.mUISplitContainerControPane = new WinPane(this);
                    #region Search Criteria
                    this.mUISplitContainerControPane.SearchProperties[WinControl.PropertyNames.Name] = "splitContainerControl1";
                    #endregion
                }
                return this.mUISplitContainerControPane;
            }
        }
        
        public WinWindow UIRibbonStatusBarWindow
        {
            get
            {
                if ((this.mUIRibbonStatusBarWindow == null))
                {
                    this.mUIRibbonStatusBarWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIRibbonStatusBarWindow.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Status Bar";
                    this.mUIRibbonStatusBarWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIRibbonStatusBarWindow;
            }
        }
        
        public WinControl UIStatusBarPropertyPage
        {
            get
            {
                if ((this.mUIStatusBarPropertyPage == null))
                {
                    this.mUIStatusBarPropertyPage = new WinControl(this);
                    #region Search Criteria
                    this.mUIStatusBarPropertyPage.SearchProperties[UITestControl.PropertyNames.Name] = "Status Bar";
                    this.mUIStatusBarPropertyPage.SearchProperties[UITestControl.PropertyNames.ControlType] = "PropertyPage";
                    #endregion
                }
                return this.mUIStatusBarPropertyPage;
            }
        }
        
        public WinWindow UIRibbonWindow
        {
            get
            {
                if ((this.mUIRibbonWindow == null))
                {
                    this.mUIRibbonWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIRibbonWindow.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "The Ribbon";
                    this.mUIRibbonWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIRibbonWindow;
            }
        }
        
        public WinControl UITheRibbonPropertyPage
        {
            get
            {
                if ((this.mUITheRibbonPropertyPage == null))
                {
                    this.mUITheRibbonPropertyPage = new WinControl(this);
                    #region Search Criteria
                    this.mUITheRibbonPropertyPage.SearchProperties[UITestControl.PropertyNames.Name] = "The Ribbon";
                    this.mUITheRibbonPropertyPage.SearchProperties[UITestControl.PropertyNames.ControlType] = "PropertyPage";
                    #endregion
                }
                return this.mUITheRibbonPropertyPage;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUISplitContainerControWindow;
        
        private WinPane mUISplitContainerControPane;
        
        private WinWindow mUIRibbonStatusBarWindow;
        
        private WinControl mUIStatusBarPropertyPage;
        
        private WinWindow mUIRibbonWindow;
        
        private WinControl mUITheRibbonPropertyPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISplitContainerControWindow : WinWindow
    {
        
        public UISplitContainerControWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "splitContainerControl1";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UISplitContainerControMenuBar
        {
            get
            {
                if ((this.mUISplitContainerControMenuBar == null))
                {
                    this.mUISplitContainerControMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISplitContainerControMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUISplitContainerControMenuBar;
            }
        }
        
        public WinTitleBar UISplitContainerControTitleBar
        {
            get
            {
                if ((this.mUISplitContainerControTitleBar == null))
                {
                    this.mUISplitContainerControTitleBar = new WinTitleBar(this);
                }
                return this.mUISplitContainerControTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UISplitContainerControMenuBar1
        {
            get
            {
                if ((this.mUISplitContainerControMenuBar1 == null))
                {
                    this.mUISplitContainerControMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISplitContainerControMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUISplitContainerControMenuBar1;
            }
        }
        
        public WinScrollBar UISplitContainerControScrollBar
        {
            get
            {
                if ((this.mUISplitContainerControScrollBar == null))
                {
                    this.mUISplitContainerControScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUISplitContainerControScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUISplitContainerControScrollBar;
            }
        }
        
        public WinScrollBar UISplitContainerControScrollBar1
        {
            get
            {
                if ((this.mUISplitContainerControScrollBar1 == null))
                {
                    this.mUISplitContainerControScrollBar1 = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUISplitContainerControScrollBar1.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUISplitContainerControScrollBar1;
            }
        }
        
        public WinControl UISplitContainerControGrip
        {
            get
            {
                if ((this.mUISplitContainerControGrip == null))
                {
                    this.mUISplitContainerControGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUISplitContainerControGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUISplitContainerControGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUISplitContainerControMenuBar;
        
        private WinTitleBar mUISplitContainerControTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUISplitContainerControMenuBar1;
        
        private WinScrollBar mUISplitContainerControScrollBar;
        
        private WinScrollBar mUISplitContainerControScrollBar1;
        
        private WinControl mUISplitContainerControGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISplitContainerControPane : WinPane
    {
        
        public UISplitContainerControPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "splitContainerControl1";
            #endregion
        }
        
        #region Properties
        public WinScrollBar UIScrollbarScrollBar
        {
            get
            {
                if ((this.mUIScrollbarScrollBar == null))
                {
                    this.mUIScrollbarScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIScrollbarScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "scroll bar";
                    #endregion
                }
                return this.mUIScrollbarScrollBar;
            }
        }
        
        public WinPane UIPanel1Pane
        {
            get
            {
                if ((this.mUIPanel1Pane == null))
                {
                    this.mUIPanel1Pane = new WinPane(this);
                    #region Search Criteria
                    this.mUIPanel1Pane.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    #endregion
                }
                return this.mUIPanel1Pane;
            }
        }
        
        public WinPane UIPanel2Pane
        {
            get
            {
                if ((this.mUIPanel2Pane == null))
                {
                    this.mUIPanel2Pane = new WinPane(this);
                    #region Search Criteria
                    this.mUIPanel2Pane.SearchProperties[WinControl.PropertyNames.Instance] = "2";
                    #endregion
                }
                return this.mUIPanel2Pane;
            }
        }
        #endregion
        
        #region Fields
        private WinScrollBar mUIScrollbarScrollBar;
        
        private WinPane mUIPanel1Pane;
        
        private WinPane mUIPanel2Pane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIScrollbarScrollBar : WinScrollBar
    {
        
        public UIScrollbarScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "scroll bar";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnLeftButton
        {
            get
            {
                if ((this.mUIColumnLeftButton == null))
                {
                    this.mUIColumnLeftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnLeftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column Left";
                    #endregion
                }
                return this.mUIColumnLeftButton;
            }
        }
        
        public WinButton UIPageLeftButton
        {
            get
            {
                if ((this.mUIPageLeftButton == null))
                {
                    this.mUIPageLeftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageLeftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Left";
                    #endregion
                }
                return this.mUIPageLeftButton;
            }
        }
        
        public WinButton UIPositionButton
        {
            get
            {
                if ((this.mUIPositionButton == null))
                {
                    this.mUIPositionButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPositionButton.SearchProperties[WinButton.PropertyNames.Name] = "Position";
                    #endregion
                }
                return this.mUIPositionButton;
            }
        }
        
        public WinButton UIPageRightButton
        {
            get
            {
                if ((this.mUIPageRightButton == null))
                {
                    this.mUIPageRightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageRightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Right";
                    #endregion
                }
                return this.mUIPageRightButton;
            }
        }
        
        public WinButton UIColumnRightButton
        {
            get
            {
                if ((this.mUIColumnRightButton == null))
                {
                    this.mUIColumnRightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnRightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column Right";
                    #endregion
                }
                return this.mUIColumnRightButton;
            }
        }
        
        public WinButton UILineUpButton
        {
            get
            {
                if ((this.mUILineUpButton == null))
                {
                    this.mUILineUpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineUpButton.SearchProperties[WinButton.PropertyNames.Name] = "Line Up";
                    #endregion
                }
                return this.mUILineUpButton;
            }
        }
        
        public WinButton UIPageUpButton
        {
            get
            {
                if ((this.mUIPageUpButton == null))
                {
                    this.mUIPageUpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageUpButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Up";
                    #endregion
                }
                return this.mUIPageUpButton;
            }
        }
        
        public WinButton UIPageDownButton
        {
            get
            {
                if ((this.mUIPageDownButton == null))
                {
                    this.mUIPageDownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageDownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Down";
                    #endregion
                }
                return this.mUIPageDownButton;
            }
        }
        
        public WinButton UILineDownButton
        {
            get
            {
                if ((this.mUILineDownButton == null))
                {
                    this.mUILineDownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineDownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line Down";
                    #endregion
                }
                return this.mUILineDownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnLeftButton;
        
        private WinButton mUIPageLeftButton;
        
        private WinButton mUIPositionButton;
        
        private WinButton mUIPageRightButton;
        
        private WinButton mUIColumnRightButton;
        
        private WinButton mUILineUpButton;
        
        private WinButton mUIPageUpButton;
        
        private WinButton mUIPageDownButton;
        
        private WinButton mUILineDownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPanel1Pane : WinPane
    {
        
        public UIPanel1Pane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinScrollBar UIScrollbarScrollBar
        {
            get
            {
                if ((this.mUIScrollbarScrollBar == null))
                {
                    this.mUIScrollbarScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIScrollbarScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "scroll bar";
                    #endregion
                }
                return this.mUIScrollbarScrollBar;
            }
        }
        #endregion
        
        #region Fields
        private WinScrollBar mUIScrollbarScrollBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIScrollbarScrollBar1 : WinScrollBar
    {
        
        public UIScrollbarScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "scroll bar";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnLeftButton
        {
            get
            {
                if ((this.mUIColumnLeftButton == null))
                {
                    this.mUIColumnLeftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnLeftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column Left";
                    #endregion
                }
                return this.mUIColumnLeftButton;
            }
        }
        
        public WinButton UIPageLeftButton
        {
            get
            {
                if ((this.mUIPageLeftButton == null))
                {
                    this.mUIPageLeftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageLeftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Left";
                    #endregion
                }
                return this.mUIPageLeftButton;
            }
        }
        
        public WinButton UIPositionButton
        {
            get
            {
                if ((this.mUIPositionButton == null))
                {
                    this.mUIPositionButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPositionButton.SearchProperties[WinButton.PropertyNames.Name] = "Position";
                    #endregion
                }
                return this.mUIPositionButton;
            }
        }
        
        public WinButton UIPageRightButton
        {
            get
            {
                if ((this.mUIPageRightButton == null))
                {
                    this.mUIPageRightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageRightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Right";
                    #endregion
                }
                return this.mUIPageRightButton;
            }
        }
        
        public WinButton UIColumnRightButton
        {
            get
            {
                if ((this.mUIColumnRightButton == null))
                {
                    this.mUIColumnRightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnRightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column Right";
                    #endregion
                }
                return this.mUIColumnRightButton;
            }
        }
        
        public WinButton UILineUpButton
        {
            get
            {
                if ((this.mUILineUpButton == null))
                {
                    this.mUILineUpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineUpButton.SearchProperties[WinButton.PropertyNames.Name] = "Line Up";
                    #endregion
                }
                return this.mUILineUpButton;
            }
        }
        
        public WinButton UIPageUpButton
        {
            get
            {
                if ((this.mUIPageUpButton == null))
                {
                    this.mUIPageUpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageUpButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Up";
                    #endregion
                }
                return this.mUIPageUpButton;
            }
        }
        
        public WinButton UIPageDownButton
        {
            get
            {
                if ((this.mUIPageDownButton == null))
                {
                    this.mUIPageDownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageDownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Down";
                    #endregion
                }
                return this.mUIPageDownButton;
            }
        }
        
        public WinButton UILineDownButton
        {
            get
            {
                if ((this.mUILineDownButton == null))
                {
                    this.mUILineDownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineDownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line Down";
                    #endregion
                }
                return this.mUILineDownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnLeftButton;
        
        private WinButton mUIPageLeftButton;
        
        private WinButton mUIPositionButton;
        
        private WinButton mUIPageRightButton;
        
        private WinButton mUIColumnRightButton;
        
        private WinButton mUILineUpButton;
        
        private WinButton mUIPageUpButton;
        
        private WinButton mUIPageDownButton;
        
        private WinButton mUILineDownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UINavBarControl1Window : WinWindow
    {
        
        public UINavBarControl1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "navBarControl1";
            #endregion
        }
        
        #region Properties
        public WinClient UINavBarControl1Client
        {
            get
            {
                if ((this.mUINavBarControl1Client == null))
                {
                    this.mUINavBarControl1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUINavBarControl1Client.SearchProperties[WinControl.PropertyNames.Name] = "navBarControl1";
                    #endregion
                }
                return this.mUINavBarControl1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUINavBarControl1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UINavBarControl1Client : WinClient
    {
        
        public UINavBarControl1Client(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "navBarControl1";
            #endregion
        }
        
        #region Properties
        public WinGroup UIAccountsViewGroup
        {
            get
            {
                if ((this.mUIAccountsViewGroup == null))
                {
                    this.mUIAccountsViewGroup = new WinGroup(this);
                    #region Search Criteria
                    this.mUIAccountsViewGroup.SearchProperties[WinControl.PropertyNames.Name] = "Accounts View";
                    #endregion
                }
                return this.mUIAccountsViewGroup;
            }
        }
        #endregion
        
        #region Fields
        private WinGroup mUIAccountsViewGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UINavBarGroupControlCoWindow : WinWindow
    {
        
        public UINavBarGroupControlCoWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "navBarGroupControlContainer1";
            #endregion
        }
        
        #region Properties
        public WinClient UINavBarGroupControlCoClient
        {
            get
            {
                if ((this.mUINavBarGroupControlCoClient == null))
                {
                    this.mUINavBarGroupControlCoClient = new WinClient(this);
                }
                return this.mUINavBarGroupControlCoClient;
            }
        }
        
        public WinWindow UIAccountNavigatorContWindow
        {
            get
            {
                if ((this.mUIAccountNavigatorContWindow == null))
                {
                    this.mUIAccountNavigatorContWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIAccountNavigatorContWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIAccountNavigatorContWindow.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    #endregion
                }
                return this.mUIAccountNavigatorContWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUINavBarGroupControlCoClient;
        
        private WinWindow mUIAccountNavigatorContWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIAccountNavigatorContWindow : WinWindow
    {
        
        public UIAccountNavigatorContWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "AccountNavigatorControl";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIAccountNavigatorContMenuBar
        {
            get
            {
                if ((this.mUIAccountNavigatorContMenuBar == null))
                {
                    this.mUIAccountNavigatorContMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIAccountNavigatorContMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIAccountNavigatorContMenuBar;
            }
        }
        
        public WinTitleBar UIAccountNavigatorContTitleBar
        {
            get
            {
                if ((this.mUIAccountNavigatorContTitleBar == null))
                {
                    this.mUIAccountNavigatorContTitleBar = new WinTitleBar(this);
                }
                return this.mUIAccountNavigatorContTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIAccountNavigatorContMenuBar1
        {
            get
            {
                if ((this.mUIAccountNavigatorContMenuBar1 == null))
                {
                    this.mUIAccountNavigatorContMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIAccountNavigatorContMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIAccountNavigatorContMenuBar1;
            }
        }
        
        public WinClient UIAccountNavigatorContClient
        {
            get
            {
                if ((this.mUIAccountNavigatorContClient == null))
                {
                    this.mUIAccountNavigatorContClient = new WinClient(this);
                }
                return this.mUIAccountNavigatorContClient;
            }
        }
        
        public WinWindow UIAccountTreeViewWindow
        {
            get
            {
                if ((this.mUIAccountTreeViewWindow == null))
                {
                    this.mUIAccountTreeViewWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIAccountTreeViewWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.SysTreeView32", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIAccountTreeViewWindow;
            }
        }
        
        public UIVerticalScrollBar UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIAccountNavigatorContGrip
        {
            get
            {
                if ((this.mUIAccountNavigatorContGrip == null))
                {
                    this.mUIAccountNavigatorContGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIAccountNavigatorContGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIAccountNavigatorContGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIAccountNavigatorContMenuBar;
        
        private WinTitleBar mUIAccountNavigatorContTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIAccountNavigatorContMenuBar1;
        
        private WinClient mUIAccountNavigatorContClient;
        
        private WinWindow mUIAccountTreeViewWindow;
        
        private UIVerticalScrollBar mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar mUIHorizontalScrollBar;
        
        private WinControl mUIAccountNavigatorContGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar : WinScrollBar
    {
        
        public UIVerticalScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar : WinScrollBar
    {
        
        public UIHorizontalScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIAccountTreeViewWindow : WinWindow
    {
        
        public UIAccountTreeViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "accountTreeView";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIAccountTreeViewMenuBar
        {
            get
            {
                if ((this.mUIAccountTreeViewMenuBar == null))
                {
                    this.mUIAccountTreeViewMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIAccountTreeViewMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIAccountTreeViewMenuBar;
            }
        }
        
        public WinTitleBar UIAccountTreeViewTitleBar
        {
            get
            {
                if ((this.mUIAccountTreeViewTitleBar == null))
                {
                    this.mUIAccountTreeViewTitleBar = new WinTitleBar(this);
                }
                return this.mUIAccountTreeViewTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIAccountTreeViewMenuBar1
        {
            get
            {
                if ((this.mUIAccountTreeViewMenuBar1 == null))
                {
                    this.mUIAccountTreeViewMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIAccountTreeViewMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIAccountTreeViewMenuBar1;
            }
        }
        
        public WinTree UIAccountTreeViewTree
        {
            get
            {
                if ((this.mUIAccountTreeViewTree == null))
                {
                    this.mUIAccountTreeViewTree = new WinTree(this);
                }
                return this.mUIAccountTreeViewTree;
            }
        }
        
        public UIYourAccounts1TreeItem UIYourAccounts1TreeItem
        {
            get
            {
                if ((this.mUIYourAccounts1TreeItem == null))
                {
                    this.mUIYourAccounts1TreeItem = new UIYourAccounts1TreeItem(this);
                }
                return this.mUIYourAccounts1TreeItem;
            }
        }
        
        public UIVerticalScrollBar1 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar1(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar1 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar1(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIAccountTreeViewGrip
        {
            get
            {
                if ((this.mUIAccountTreeViewGrip == null))
                {
                    this.mUIAccountTreeViewGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIAccountTreeViewGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIAccountTreeViewGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIAccountTreeViewMenuBar;
        
        private WinTitleBar mUIAccountTreeViewTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIAccountTreeViewMenuBar1;
        
        private WinTree mUIAccountTreeViewTree;
        
        private UIYourAccounts1TreeItem mUIYourAccounts1TreeItem;
        
        private UIVerticalScrollBar1 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar1 mUIHorizontalScrollBar;
        
        private WinControl mUIAccountTreeViewGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIYourAccounts1TreeItem : WinTreeItem
    {
        
        public UIYourAccounts1TreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Your Accounts(1)";
            this.SearchProperties["Value"] = "0";
            #endregion
        }
        
        #region Properties
        public UIHaihadsagecom4684830TreeItem UIHaihadsagecom4684830TreeItem
        {
            get
            {
                if ((this.mUIHaihadsagecom4684830TreeItem == null))
                {
                    this.mUIHaihadsagecom4684830TreeItem = new UIHaihadsagecom4684830TreeItem(this);
                }
                return this.mUIHaihadsagecom4684830TreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIHaihadsagecom4684830TreeItem mUIHaihadsagecom4684830TreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHaihadsagecom4684830TreeItem : WinTreeItem
    {
        
        public UIHaihadsagecom4684830TreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "haih@ad-sage.com #46848300(USD)";
            this.SearchProperties["Value"] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            #endregion
        }
        
        #region Properties
        public WinTreeItem UICampaignTreeItem
        {
            get
            {
                if ((this.mUICampaignTreeItem == null))
                {
                    this.mUICampaignTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUICampaignTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Campaign ";
                    this.mUICampaignTreeItem.SearchProperties["Value"] = "2";
                    this.mUICampaignTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICampaignTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    #endregion
                }
                return this.mUICampaignTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUICampaignTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar1 : WinScrollBar
    {
        
        public UIVerticalScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar1 : WinScrollBar
    {
        
        public UIHorizontalScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPanel2Pane : WinPane
    {
        
        public UIPanel2Pane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinScrollBar UIScrollbarScrollBar
        {
            get
            {
                if ((this.mUIScrollbarScrollBar == null))
                {
                    this.mUIScrollbarScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIScrollbarScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "scroll bar";
                    #endregion
                }
                return this.mUIScrollbarScrollBar;
            }
        }
        #endregion
        
        #region Fields
        private WinScrollBar mUIScrollbarScrollBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIScrollbarScrollBar2 : WinScrollBar
    {
        
        public UIScrollbarScrollBar2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "scroll bar";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnLeftButton
        {
            get
            {
                if ((this.mUIColumnLeftButton == null))
                {
                    this.mUIColumnLeftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnLeftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column Left";
                    #endregion
                }
                return this.mUIColumnLeftButton;
            }
        }
        
        public WinButton UIPageLeftButton
        {
            get
            {
                if ((this.mUIPageLeftButton == null))
                {
                    this.mUIPageLeftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageLeftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Left";
                    #endregion
                }
                return this.mUIPageLeftButton;
            }
        }
        
        public WinButton UIPositionButton
        {
            get
            {
                if ((this.mUIPositionButton == null))
                {
                    this.mUIPositionButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPositionButton.SearchProperties[WinButton.PropertyNames.Name] = "Position";
                    #endregion
                }
                return this.mUIPositionButton;
            }
        }
        
        public WinButton UIPageRightButton
        {
            get
            {
                if ((this.mUIPageRightButton == null))
                {
                    this.mUIPageRightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageRightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Right";
                    #endregion
                }
                return this.mUIPageRightButton;
            }
        }
        
        public WinButton UIColumnRightButton
        {
            get
            {
                if ((this.mUIColumnRightButton == null))
                {
                    this.mUIColumnRightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnRightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column Right";
                    #endregion
                }
                return this.mUIColumnRightButton;
            }
        }
        
        public WinButton UILineUpButton
        {
            get
            {
                if ((this.mUILineUpButton == null))
                {
                    this.mUILineUpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineUpButton.SearchProperties[WinButton.PropertyNames.Name] = "Line Up";
                    #endregion
                }
                return this.mUILineUpButton;
            }
        }
        
        public WinButton UIPageUpButton
        {
            get
            {
                if ((this.mUIPageUpButton == null))
                {
                    this.mUIPageUpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageUpButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Up";
                    #endregion
                }
                return this.mUIPageUpButton;
            }
        }
        
        public WinButton UIPageDownButton
        {
            get
            {
                if ((this.mUIPageDownButton == null))
                {
                    this.mUIPageDownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageDownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Down";
                    #endregion
                }
                return this.mUIPageDownButton;
            }
        }
        
        public WinButton UILineDownButton
        {
            get
            {
                if ((this.mUILineDownButton == null))
                {
                    this.mUILineDownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineDownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line Down";
                    #endregion
                }
                return this.mUILineDownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnLeftButton;
        
        private WinButton mUIPageLeftButton;
        
        private WinButton mUIPositionButton;
        
        private WinButton mUIPageRightButton;
        
        private WinButton mUIColumnRightButton;
        
        private WinButton mUILineUpButton;
        
        private WinButton mUIPageUpButton;
        
        private WinButton mUIPageDownButton;
        
        private WinButton mUILineDownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPanel1Window : WinWindow
    {
        
        public UIPanel1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "panel1";
            #endregion
        }
        
        #region Properties
        public WinClient UIPanel1Client
        {
            get
            {
                if ((this.mUIPanel1Client == null))
                {
                    this.mUIPanel1Client = new WinClient(this);
                }
                return this.mUIPanel1Client;
            }
        }
        
        public WinWindow UIDropdownNotifierHostWindow
        {
            get
            {
                if ((this.mUIDropdownNotifierHostWindow == null))
                {
                    this.mUIDropdownNotifierHostWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIDropdownNotifierHostWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIDropdownNotifierHostWindow.SearchProperties[WinWindow.PropertyNames.Instance] = "52";
                    #endregion
                }
                return this.mUIDropdownNotifierHostWindow;
            }
        }
        
        public WinWindow UIDxTabPageContainerCoWindow
        {
            get
            {
                if ((this.mUIDxTabPageContainerCoWindow == null))
                {
                    this.mUIDxTabPageContainerCoWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIDxTabPageContainerCoWindow.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "TabPageContainerControl";
                    this.mUIDxTabPageContainerCoWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIDxTabPageContainerCoWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIPanel1Client;
        
        private WinWindow mUIDropdownNotifierHostWindow;
        
        private WinWindow mUIDxTabPageContainerCoWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDropdownNotifierHostWindow : WinWindow
    {
        
        public UIDropdownNotifierHostWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "dropdownNotifierHost1";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIDropdownNotifierHostMenuBar
        {
            get
            {
                if ((this.mUIDropdownNotifierHostMenuBar == null))
                {
                    this.mUIDropdownNotifierHostMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIDropdownNotifierHostMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIDropdownNotifierHostMenuBar;
            }
        }
        
        public WinTitleBar UIDropdownNotifierHostTitleBar
        {
            get
            {
                if ((this.mUIDropdownNotifierHostTitleBar == null))
                {
                    this.mUIDropdownNotifierHostTitleBar = new WinTitleBar(this);
                }
                return this.mUIDropdownNotifierHostTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIDropdownNotifierHostMenuBar1
        {
            get
            {
                if ((this.mUIDropdownNotifierHostMenuBar1 == null))
                {
                    this.mUIDropdownNotifierHostMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIDropdownNotifierHostMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIDropdownNotifierHostMenuBar1;
            }
        }
        
        public WinClient UIDropdownNotifierHostClient
        {
            get
            {
                if ((this.mUIDropdownNotifierHostClient == null))
                {
                    this.mUIDropdownNotifierHostClient = new WinClient(this);
                }
                return this.mUIDropdownNotifierHostClient;
            }
        }
        
        public WinWindow UIPanelControlWindow
        {
            get
            {
                if ((this.mUIPanelControlWindow == null))
                {
                    this.mUIPanelControlWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIPanelControlWindow.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "panelControl";
                    this.mUIPanelControlWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIPanelControlWindow;
            }
        }
        
        public WinPane UIPanelControlPane
        {
            get
            {
                if ((this.mUIPanelControlPane == null))
                {
                    this.mUIPanelControlPane = new WinPane(this);
                    #region Search Criteria
                    this.mUIPanelControlPane.SearchProperties[WinControl.PropertyNames.Name] = "panelControl";
                    #endregion
                }
                return this.mUIPanelControlPane;
            }
        }
        
        public WinScrollBar UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIVerticalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public WinScrollBar UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIHorizontalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIDropdownNotifierHostGrip
        {
            get
            {
                if ((this.mUIDropdownNotifierHostGrip == null))
                {
                    this.mUIDropdownNotifierHostGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIDropdownNotifierHostGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIDropdownNotifierHostGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIDropdownNotifierHostMenuBar;
        
        private WinTitleBar mUIDropdownNotifierHostTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIDropdownNotifierHostMenuBar1;
        
        private WinClient mUIDropdownNotifierHostClient;
        
        private WinWindow mUIPanelControlWindow;
        
        private WinPane mUIPanelControlPane;
        
        private WinScrollBar mUIVerticalScrollBar;
        
        private WinScrollBar mUIHorizontalScrollBar;
        
        private WinControl mUIDropdownNotifierHostGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPanelControlWindow : WinWindow
    {
        
        public UIPanelControlWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "panelControl";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIPanelControlMenuBar
        {
            get
            {
                if ((this.mUIPanelControlMenuBar == null))
                {
                    this.mUIPanelControlMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanelControlMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIPanelControlMenuBar;
            }
        }
        
        public WinTitleBar UIPanelControlTitleBar
        {
            get
            {
                if ((this.mUIPanelControlTitleBar == null))
                {
                    this.mUIPanelControlTitleBar = new WinTitleBar(this);
                }
                return this.mUIPanelControlTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIPanelControlMenuBar1
        {
            get
            {
                if ((this.mUIPanelControlMenuBar1 == null))
                {
                    this.mUIPanelControlMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanelControlMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIPanelControlMenuBar1;
            }
        }
        
        public UIScrollbarScrollBar3 UIScrollbarScrollBar
        {
            get
            {
                if ((this.mUIScrollbarScrollBar == null))
                {
                    this.mUIScrollbarScrollBar = new UIScrollbarScrollBar3(this);
                }
                return this.mUIScrollbarScrollBar;
            }
        }
        
        public UIItemPane UIItemPane
        {
            get
            {
                if ((this.mUIItemPane == null))
                {
                    this.mUIItemPane = new UIItemPane(this);
                }
                return this.mUIItemPane;
            }
        }
        
        public UIVerticalScrollBar2 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar2(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar2 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar2(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIPanelControlGrip
        {
            get
            {
                if ((this.mUIPanelControlGrip == null))
                {
                    this.mUIPanelControlGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIPanelControlGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIPanelControlGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIPanelControlMenuBar;
        
        private WinTitleBar mUIPanelControlTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIPanelControlMenuBar1;
        
        private UIScrollbarScrollBar3 mUIScrollbarScrollBar;
        
        private UIItemPane mUIItemPane;
        
        private UIVerticalScrollBar2 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar2 mUIHorizontalScrollBar;
        
        private WinControl mUIPanelControlGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIScrollbarScrollBar3 : WinScrollBar
    {
        
        public UIScrollbarScrollBar3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "scroll bar";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnLeftButton
        {
            get
            {
                if ((this.mUIColumnLeftButton == null))
                {
                    this.mUIColumnLeftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnLeftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column Left";
                    #endregion
                }
                return this.mUIColumnLeftButton;
            }
        }
        
        public WinButton UIPageLeftButton
        {
            get
            {
                if ((this.mUIPageLeftButton == null))
                {
                    this.mUIPageLeftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageLeftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Left";
                    #endregion
                }
                return this.mUIPageLeftButton;
            }
        }
        
        public WinButton UIPositionButton
        {
            get
            {
                if ((this.mUIPositionButton == null))
                {
                    this.mUIPositionButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPositionButton.SearchProperties[WinButton.PropertyNames.Name] = "Position";
                    #endregion
                }
                return this.mUIPositionButton;
            }
        }
        
        public WinButton UIPageRightButton
        {
            get
            {
                if ((this.mUIPageRightButton == null))
                {
                    this.mUIPageRightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageRightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Right";
                    #endregion
                }
                return this.mUIPageRightButton;
            }
        }
        
        public WinButton UIColumnRightButton
        {
            get
            {
                if ((this.mUIColumnRightButton == null))
                {
                    this.mUIColumnRightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnRightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column Right";
                    #endregion
                }
                return this.mUIColumnRightButton;
            }
        }
        
        public WinButton UILineUpButton
        {
            get
            {
                if ((this.mUILineUpButton == null))
                {
                    this.mUILineUpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineUpButton.SearchProperties[WinButton.PropertyNames.Name] = "Line Up";
                    #endregion
                }
                return this.mUILineUpButton;
            }
        }
        
        public WinButton UIPageUpButton
        {
            get
            {
                if ((this.mUIPageUpButton == null))
                {
                    this.mUIPageUpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageUpButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Up";
                    #endregion
                }
                return this.mUIPageUpButton;
            }
        }
        
        public WinButton UIPageDownButton
        {
            get
            {
                if ((this.mUIPageDownButton == null))
                {
                    this.mUIPageDownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageDownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Down";
                    #endregion
                }
                return this.mUIPageDownButton;
            }
        }
        
        public WinButton UILineDownButton
        {
            get
            {
                if ((this.mUILineDownButton == null))
                {
                    this.mUILineDownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineDownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line Down";
                    #endregion
                }
                return this.mUILineDownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnLeftButton;
        
        private WinButton mUIPageLeftButton;
        
        private WinButton mUIPositionButton;
        
        private WinButton mUIPageRightButton;
        
        private WinButton mUIColumnRightButton;
        
        private WinButton mUILineUpButton;
        
        private WinButton mUIPageUpButton;
        
        private WinButton mUIPageDownButton;
        
        private WinButton mUILineDownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemPane : WinPane
    {
        
        public UIItemPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinScrollBar UIScrollbarScrollBar
        {
            get
            {
                if ((this.mUIScrollbarScrollBar == null))
                {
                    this.mUIScrollbarScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIScrollbarScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "scroll bar";
                    #endregion
                }
                return this.mUIScrollbarScrollBar;
            }
        }
        #endregion
        
        #region Fields
        private WinScrollBar mUIScrollbarScrollBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar2 : WinScrollBar
    {
        
        public UIVerticalScrollBar2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar2 : WinScrollBar
    {
        
        public UIHorizontalScrollBar2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPanelControlPane : WinPane
    {
        
        public UIPanelControlPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "panelControl";
            #endregion
        }
        
        #region Properties
        public WinScrollBar UIScrollbarScrollBar
        {
            get
            {
                if ((this.mUIScrollbarScrollBar == null))
                {
                    this.mUIScrollbarScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIScrollbarScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "scroll bar";
                    #endregion
                }
                return this.mUIScrollbarScrollBar;
            }
        }
        
        public WinPane UIItemPane
        {
            get
            {
                if ((this.mUIItemPane == null))
                {
                    this.mUIItemPane = new WinPane(this);
                    #region Search Criteria
                    this.mUIItemPane.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    #endregion
                }
                return this.mUIItemPane;
            }
        }
        #endregion
        
        #region Fields
        private WinScrollBar mUIScrollbarScrollBar;
        
        private WinPane mUIItemPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "62";
            #endregion
        }
        
        #region Properties
        public UIScrollbarScrollBar4 UIScrollbarScrollBar
        {
            get
            {
                if ((this.mUIScrollbarScrollBar == null))
                {
                    this.mUIScrollbarScrollBar = new UIScrollbarScrollBar4(this);
                }
                return this.mUIScrollbarScrollBar;
            }
        }
        #endregion
        
        #region Fields
        private UIScrollbarScrollBar4 mUIScrollbarScrollBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIScrollbarScrollBar4 : WinScrollBar
    {
        
        public UIScrollbarScrollBar4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "scroll bar";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnLeftButton
        {
            get
            {
                if ((this.mUIColumnLeftButton == null))
                {
                    this.mUIColumnLeftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnLeftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column Left";
                    #endregion
                }
                return this.mUIColumnLeftButton;
            }
        }
        
        public WinButton UIPageLeftButton
        {
            get
            {
                if ((this.mUIPageLeftButton == null))
                {
                    this.mUIPageLeftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageLeftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Left";
                    #endregion
                }
                return this.mUIPageLeftButton;
            }
        }
        
        public WinButton UIPositionButton
        {
            get
            {
                if ((this.mUIPositionButton == null))
                {
                    this.mUIPositionButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPositionButton.SearchProperties[WinButton.PropertyNames.Name] = "Position";
                    #endregion
                }
                return this.mUIPositionButton;
            }
        }
        
        public WinButton UIPageRightButton
        {
            get
            {
                if ((this.mUIPageRightButton == null))
                {
                    this.mUIPageRightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageRightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Right";
                    #endregion
                }
                return this.mUIPageRightButton;
            }
        }
        
        public WinButton UIColumnRightButton
        {
            get
            {
                if ((this.mUIColumnRightButton == null))
                {
                    this.mUIColumnRightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnRightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column Right";
                    #endregion
                }
                return this.mUIColumnRightButton;
            }
        }
        
        public WinButton UILineUpButton
        {
            get
            {
                if ((this.mUILineUpButton == null))
                {
                    this.mUILineUpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineUpButton.SearchProperties[WinButton.PropertyNames.Name] = "Line Up";
                    #endregion
                }
                return this.mUILineUpButton;
            }
        }
        
        public WinButton UIPageUpButton
        {
            get
            {
                if ((this.mUIPageUpButton == null))
                {
                    this.mUIPageUpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageUpButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Up";
                    #endregion
                }
                return this.mUIPageUpButton;
            }
        }
        
        public WinButton UIPageDownButton
        {
            get
            {
                if ((this.mUIPageDownButton == null))
                {
                    this.mUIPageDownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageDownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Down";
                    #endregion
                }
                return this.mUIPageDownButton;
            }
        }
        
        public WinButton UILineDownButton
        {
            get
            {
                if ((this.mUILineDownButton == null))
                {
                    this.mUILineDownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineDownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line Down";
                    #endregion
                }
                return this.mUILineDownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnLeftButton;
        
        private WinButton mUIPageLeftButton;
        
        private WinButton mUIPositionButton;
        
        private WinButton mUIPageRightButton;
        
        private WinButton mUIColumnRightButton;
        
        private WinButton mUILineUpButton;
        
        private WinButton mUIPageUpButton;
        
        private WinButton mUIPageDownButton;
        
        private WinButton mUILineDownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMessageNotifierContrWindow : WinWindow
    {
        
        public UIMessageNotifierContrWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "MessageNotifierControl";
            #endregion
        }
        
        #region Properties
        public WinClient UIMessageNotifierContrClient
        {
            get
            {
                if ((this.mUIMessageNotifierContrClient == null))
                {
                    this.mUIMessageNotifierContrClient = new WinClient(this);
                }
                return this.mUIMessageNotifierContrClient;
            }
        }
        
        public WinWindow UIMissingsomeperformanWindow
        {
            get
            {
                if ((this.mUIMissingsomeperformanWindow == null))
                {
                    this.mUIMissingsomeperformanWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIMissingsomeperformanWindow.SearchProperties[WinWindow.PropertyNames.Name] = "Missing some performance data in the recent period,";
                    this.mUIMissingsomeperformanWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIMissingsomeperformanWindow;
            }
        }
        
        public WinText UIMissingsomeperformanText
        {
            get
            {
                if ((this.mUIMissingsomeperformanText == null))
                {
                    this.mUIMissingsomeperformanText = new WinText(this);
                    #region Search Criteria
                    this.mUIMissingsomeperformanText.SearchProperties[WinText.PropertyNames.Name] = "Missing some performance data in the recent period,";
                    #endregion
                }
                return this.mUIMissingsomeperformanText;
            }
        }
        
        public WinWindow UIDownloadNowWindow
        {
            get
            {
                if ((this.mUIDownloadNowWindow == null))
                {
                    this.mUIDownloadNowWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIDownloadNowWindow.SearchProperties[WinWindow.PropertyNames.Name] = "Download Now!";
                    this.mUIDownloadNowWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIDownloadNowWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIMessageNotifierContrClient;
        
        private WinWindow mUIMissingsomeperformanWindow;
        
        private WinText mUIMissingsomeperformanText;
        
        private WinWindow mUIDownloadNowWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMissingsomeperformanWindow : WinWindow
    {
        
        public UIMissingsomeperformanWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "labelMessage";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UILabelMessageMenuBar
        {
            get
            {
                if ((this.mUILabelMessageMenuBar == null))
                {
                    this.mUILabelMessageMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabelMessageMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUILabelMessageMenuBar;
            }
        }
        
        public WinTitleBar UIMissingsomeperformanTitleBar
        {
            get
            {
                if ((this.mUIMissingsomeperformanTitleBar == null))
                {
                    this.mUIMissingsomeperformanTitleBar = new WinTitleBar(this);
                }
                return this.mUIMissingsomeperformanTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UILabelMessageMenuBar1
        {
            get
            {
                if ((this.mUILabelMessageMenuBar1 == null))
                {
                    this.mUILabelMessageMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabelMessageMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUILabelMessageMenuBar1;
            }
        }
        
        public UIMissingsomeperformanScrollBar UIMissingsomeperformanScrollBar
        {
            get
            {
                if ((this.mUIMissingsomeperformanScrollBar == null))
                {
                    this.mUIMissingsomeperformanScrollBar = new UIMissingsomeperformanScrollBar(this);
                }
                return this.mUIMissingsomeperformanScrollBar;
            }
        }
        
        public UIMissingsomeperformanScrollBar1 UIMissingsomeperformanScrollBar1
        {
            get
            {
                if ((this.mUIMissingsomeperformanScrollBar1 == null))
                {
                    this.mUIMissingsomeperformanScrollBar1 = new UIMissingsomeperformanScrollBar1(this);
                }
                return this.mUIMissingsomeperformanScrollBar1;
            }
        }
        
        public WinControl UIMissingsomeperformanGrip
        {
            get
            {
                if ((this.mUIMissingsomeperformanGrip == null))
                {
                    this.mUIMissingsomeperformanGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIMissingsomeperformanGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIMissingsomeperformanGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUILabelMessageMenuBar;
        
        private WinTitleBar mUIMissingsomeperformanTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUILabelMessageMenuBar1;
        
        private UIMissingsomeperformanScrollBar mUIMissingsomeperformanScrollBar;
        
        private UIMissingsomeperformanScrollBar1 mUIMissingsomeperformanScrollBar1;
        
        private WinControl mUIMissingsomeperformanGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMissingsomeperformanScrollBar : WinScrollBar
    {
        
        public UIMissingsomeperformanScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMissingsomeperformanScrollBar1 : WinScrollBar
    {
        
        public UIMissingsomeperformanScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDownloadNowWindow : WinWindow
    {
        
        public UIDownloadNowWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "linkContent";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UILinkContentMenuBar
        {
            get
            {
                if ((this.mUILinkContentMenuBar == null))
                {
                    this.mUILinkContentMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILinkContentMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUILinkContentMenuBar;
            }
        }
        
        public WinTitleBar UIDownloadNowTitleBar
        {
            get
            {
                if ((this.mUIDownloadNowTitleBar == null))
                {
                    this.mUIDownloadNowTitleBar = new WinTitleBar(this);
                }
                return this.mUIDownloadNowTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UILinkContentMenuBar1
        {
            get
            {
                if ((this.mUILinkContentMenuBar1 == null))
                {
                    this.mUILinkContentMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILinkContentMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUILinkContentMenuBar1;
            }
        }
        
        public UIDownloadNowText UIDownloadNowText
        {
            get
            {
                if ((this.mUIDownloadNowText == null))
                {
                    this.mUIDownloadNowText = new UIDownloadNowText(this);
                }
                return this.mUIDownloadNowText;
            }
        }
        
        public UIDownloadNowScrollBar UIDownloadNowScrollBar
        {
            get
            {
                if ((this.mUIDownloadNowScrollBar == null))
                {
                    this.mUIDownloadNowScrollBar = new UIDownloadNowScrollBar(this);
                }
                return this.mUIDownloadNowScrollBar;
            }
        }
        
        public UIDownloadNowScrollBar1 UIDownloadNowScrollBar1
        {
            get
            {
                if ((this.mUIDownloadNowScrollBar1 == null))
                {
                    this.mUIDownloadNowScrollBar1 = new UIDownloadNowScrollBar1(this);
                }
                return this.mUIDownloadNowScrollBar1;
            }
        }
        
        public WinControl UIDownloadNowGrip
        {
            get
            {
                if ((this.mUIDownloadNowGrip == null))
                {
                    this.mUIDownloadNowGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIDownloadNowGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIDownloadNowGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUILinkContentMenuBar;
        
        private WinTitleBar mUIDownloadNowTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUILinkContentMenuBar1;
        
        private UIDownloadNowText mUIDownloadNowText;
        
        private UIDownloadNowScrollBar mUIDownloadNowScrollBar;
        
        private UIDownloadNowScrollBar1 mUIDownloadNowScrollBar1;
        
        private WinControl mUIDownloadNowGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDownloadNowText : WinText
    {
        
        public UIDownloadNowText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinText.PropertyNames.Name] = "Download Now!";
            #endregion
        }
        
        #region Properties
        public WinHyperlink UIDownloadNowHyperlink
        {
            get
            {
                if ((this.mUIDownloadNowHyperlink == null))
                {
                    this.mUIDownloadNowHyperlink = new WinHyperlink(this);
                    #region Search Criteria
                    this.mUIDownloadNowHyperlink.SearchProperties[WinHyperlink.PropertyNames.Name] = "Download Now!";
                    #endregion
                }
                return this.mUIDownloadNowHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private WinHyperlink mUIDownloadNowHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDownloadNowScrollBar : WinScrollBar
    {
        
        public UIDownloadNowScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDownloadNowScrollBar1 : WinScrollBar
    {
        
        public UIDownloadNowScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar3 : WinScrollBar
    {
        
        public UIVerticalScrollBar3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar3 : WinScrollBar
    {
        
        public UIHorizontalScrollBar3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDxTabPageContainerCoWindow : WinWindow
    {
        
        public UIDxTabPageContainerCoWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "dxTabPageContainerControl1";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIDxTabPageContainerCoMenuBar
        {
            get
            {
                if ((this.mUIDxTabPageContainerCoMenuBar == null))
                {
                    this.mUIDxTabPageContainerCoMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIDxTabPageContainerCoMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIDxTabPageContainerCoMenuBar;
            }
        }
        
        public WinTitleBar UIDxTabPageContainerCoTitleBar
        {
            get
            {
                if ((this.mUIDxTabPageContainerCoTitleBar == null))
                {
                    this.mUIDxTabPageContainerCoTitleBar = new WinTitleBar(this);
                }
                return this.mUIDxTabPageContainerCoTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIDxTabPageContainerCoMenuBar1
        {
            get
            {
                if ((this.mUIDxTabPageContainerCoMenuBar1 == null))
                {
                    this.mUIDxTabPageContainerCoMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIDxTabPageContainerCoMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIDxTabPageContainerCoMenuBar1;
            }
        }
        
        public WinClient UITabPageContainerContClient
        {
            get
            {
                if ((this.mUITabPageContainerContClient == null))
                {
                    this.mUITabPageContainerContClient = new WinClient(this);
                    #region Search Criteria
                    this.mUITabPageContainerContClient.SearchProperties[WinControl.PropertyNames.Name] = "TabPageContainerControl";
                    #endregion
                }
                return this.mUITabPageContainerContClient;
            }
        }
        
        public WinScrollBar UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIVerticalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public WinScrollBar UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIHorizontalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIDxTabPageContainerCoGrip
        {
            get
            {
                if ((this.mUIDxTabPageContainerCoGrip == null))
                {
                    this.mUIDxTabPageContainerCoGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIDxTabPageContainerCoGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIDxTabPageContainerCoGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIDxTabPageContainerCoMenuBar;
        
        private WinTitleBar mUIDxTabPageContainerCoTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIDxTabPageContainerCoMenuBar1;
        
        private WinClient mUITabPageContainerContClient;
        
        private WinScrollBar mUIVerticalScrollBar;
        
        private WinScrollBar mUIHorizontalScrollBar;
        
        private WinControl mUIDxTabPageContainerCoGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITabPageContainerContClient : WinClient
    {
        
        public UITabPageContainerContClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "TabPageContainerControl";
            #endregion
        }
        
        #region Properties
        public WinWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIItemWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIItemWindow;
            }
        }
        
        public WinMenuBar UISystemMenuBar
        {
            get
            {
                if ((this.mUISystemMenuBar == null))
                {
                    this.mUISystemMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISystemMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUISystemMenuBar;
            }
        }
        
        public WinMenuBar UIApplicationMenuBar
        {
            get
            {
                if ((this.mUIApplicationMenuBar == null))
                {
                    this.mUIApplicationMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIApplicationMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIApplicationMenuBar;
            }
        }
        
        public WinTabList UIItemTabList
        {
            get
            {
                if ((this.mUIItemTabList == null))
                {
                    this.mUIItemTabList = new WinTabList(this);
                }
                return this.mUIItemTabList;
            }
        }
        
        public WinScrollBar UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIVerticalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public WinScrollBar UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIHorizontalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUIItemWindow;
        
        private WinMenuBar mUISystemMenuBar;
        
        private WinMenuBar mUIApplicationMenuBar;
        
        private WinTabList mUIItemTabList;
        
        private WinScrollBar mUIVerticalScrollBar;
        
        private WinScrollBar mUIHorizontalScrollBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "10";
            #endregion
        }
        
        #region Properties
        public UIItemTitleBar UIItemTitleBar
        {
            get
            {
                if ((this.mUIItemTitleBar == null))
                {
                    this.mUIItemTitleBar = new UIItemTitleBar(this);
                }
                return this.mUIItemTitleBar;
            }
        }
        
        public UIVerticalScrollBar4 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar4(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar4 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar4(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIItemGrip
        {
            get
            {
                if ((this.mUIItemGrip == null))
                {
                    this.mUIItemGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIItemGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIItemGrip;
            }
        }
        #endregion
        
        #region Fields
        private UIItemTitleBar mUIItemTitleBar;
        
        private UIVerticalScrollBar4 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar4 mUIHorizontalScrollBar;
        
        private WinControl mUIItemGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemTitleBar : WinTitleBar
    {
        
        public UIItemTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar4 : WinScrollBar
    {
        
        public UIVerticalScrollBar4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar4 : WinScrollBar
    {
        
        public UIHorizontalScrollBar4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemTabList : WinTabList
    {
        
        public UIItemTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WinButton(this);
                }
                return this.mUIItemButton;
            }
        }
        
        public WinTabPage UIAccountSummaryTabPage
        {
            get
            {
                if ((this.mUIAccountSummaryTabPage == null))
                {
                    this.mUIAccountSummaryTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUIAccountSummaryTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Account Summary";
                    #endregion
                }
                return this.mUIAccountSummaryTabPage;
            }
        }
        
        public WinTabPage UICampaigns1TabPage
        {
            get
            {
                if ((this.mUICampaigns1TabPage == null))
                {
                    this.mUICampaigns1TabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUICampaigns1TabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Campaigns(1)";
                    #endregion
                }
                return this.mUICampaigns1TabPage;
            }
        }
        
        public WinTabPage UIAdsTabPage
        {
            get
            {
                if ((this.mUIAdsTabPage == null))
                {
                    this.mUIAdsTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUIAdsTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Ads(...)";
                    #endregion
                }
                return this.mUIAdsTabPage;
            }
        }
        
        public WinTabPage UICampaigns1TabPage1
        {
            get
            {
                if ((this.mUICampaigns1TabPage1 == null))
                {
                    this.mUICampaigns1TabPage1 = new WinTabPage(this);
                    #region Search Criteria
                    this.mUICampaigns1TabPage1.SearchProperties[WinTabPage.PropertyNames.Name] = "Campaigns(1)";
                    this.mUICampaigns1TabPage1.SearchProperties[WinTabPage.PropertyNames.Instance] = "2";
                    #endregion
                }
                return this.mUICampaigns1TabPage1;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItemButton;
        
        private WinTabPage mUIAccountSummaryTabPage;
        
        private WinTabPage mUICampaigns1TabPage;
        
        private WinTabPage mUIAdsTabPage;
        
        private WinTabPage mUICampaigns1TabPage1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIGenericEditingControWindow : WinWindow
    {
        
        public UIGenericEditingControWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "GenericEditingControlWrapper";
            #endregion
        }
        
        #region Properties
        public WinClient UIGenericEditingControClient
        {
            get
            {
                if ((this.mUIGenericEditingControClient == null))
                {
                    this.mUIGenericEditingControClient = new WinClient(this);
                }
                return this.mUIGenericEditingControClient;
            }
        }
        
        public WinWindow UIPanelEditingWindow
        {
            get
            {
                if ((this.mUIPanelEditingWindow == null))
                {
                    this.mUIPanelEditingWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIPanelEditingWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIPanelEditingWindow.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    #endregion
                }
                return this.mUIPanelEditingWindow;
            }
        }
        
        public WinWindow UISEMSearchPaneWindow
        {
            get
            {
                if ((this.mUISEMSearchPaneWindow == null))
                {
                    this.mUISEMSearchPaneWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUISEMSearchPaneWindow.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "SEMSearchPane";
                    this.mUISEMSearchPaneWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUISEMSearchPaneWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIGenericEditingControClient;
        
        private WinWindow mUIPanelEditingWindow;
        
        private WinWindow mUISEMSearchPaneWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPanelEditingWindow : WinWindow
    {
        
        public UIPanelEditingWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "panelEditing";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIPanelEditingMenuBar
        {
            get
            {
                if ((this.mUIPanelEditingMenuBar == null))
                {
                    this.mUIPanelEditingMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanelEditingMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIPanelEditingMenuBar;
            }
        }
        
        public WinTitleBar UIPanelEditingTitleBar
        {
            get
            {
                if ((this.mUIPanelEditingTitleBar == null))
                {
                    this.mUIPanelEditingTitleBar = new WinTitleBar(this);
                }
                return this.mUIPanelEditingTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIPanelEditingMenuBar1
        {
            get
            {
                if ((this.mUIPanelEditingMenuBar1 == null))
                {
                    this.mUIPanelEditingMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanelEditingMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIPanelEditingMenuBar1;
            }
        }
        
        public WinClient UIPanelEditingClient
        {
            get
            {
                if ((this.mUIPanelEditingClient == null))
                {
                    this.mUIPanelEditingClient = new WinClient(this);
                }
                return this.mUIPanelEditingClient;
            }
        }
        
        public WinWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIItemWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIItemWindow.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    #endregion
                }
                return this.mUIItemWindow;
            }
        }
        
        public WinMenuBar UISystemMenuBar
        {
            get
            {
                if ((this.mUISystemMenuBar == null))
                {
                    this.mUISystemMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISystemMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUISystemMenuBar;
            }
        }
        
        public WinMenuBar UIApplicationMenuBar
        {
            get
            {
                if ((this.mUIApplicationMenuBar == null))
                {
                    this.mUIApplicationMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIApplicationMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIApplicationMenuBar;
            }
        }
        
        public UIItemPane3 UIItemPane
        {
            get
            {
                if ((this.mUIItemPane == null))
                {
                    this.mUIItemPane = new UIItemPane3(this);
                }
                return this.mUIItemPane;
            }
        }
        
        public WinScrollBar UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIVerticalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public WinScrollBar UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIHorizontalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinWindow UIErrorInfoViewWindow
        {
            get
            {
                if ((this.mUIErrorInfoViewWindow == null))
                {
                    this.mUIErrorInfoViewWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIErrorInfoViewWindow.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "ErrorInfoView";
                    this.mUIErrorInfoViewWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIErrorInfoViewWindow;
            }
        }
        
        public WinWindow UIFacebookCampaignEditWindow
        {
            get
            {
                if ((this.mUIFacebookCampaignEditWindow == null))
                {
                    this.mUIFacebookCampaignEditWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIFacebookCampaignEditWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIFacebookCampaignEditWindow.SearchProperties[WinWindow.PropertyNames.Instance] = "38";
                    #endregion
                }
                return this.mUIFacebookCampaignEditWindow;
            }
        }
        
        public UIVerticalScrollBar11 UIVerticalScrollBar1
        {
            get
            {
                if ((this.mUIVerticalScrollBar1 == null))
                {
                    this.mUIVerticalScrollBar1 = new UIVerticalScrollBar11(this);
                }
                return this.mUIVerticalScrollBar1;
            }
        }
        
        public UIHorizontalScrollBar11 UIHorizontalScrollBar1
        {
            get
            {
                if ((this.mUIHorizontalScrollBar1 == null))
                {
                    this.mUIHorizontalScrollBar1 = new UIHorizontalScrollBar11(this);
                }
                return this.mUIHorizontalScrollBar1;
            }
        }
        
        public WinControl UIPanelEditingGrip
        {
            get
            {
                if ((this.mUIPanelEditingGrip == null))
                {
                    this.mUIPanelEditingGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIPanelEditingGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIPanelEditingGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIPanelEditingMenuBar;
        
        private WinTitleBar mUIPanelEditingTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIPanelEditingMenuBar1;
        
        private WinClient mUIPanelEditingClient;
        
        private WinWindow mUIItemWindow;
        
        private WinMenuBar mUISystemMenuBar;
        
        private WinMenuBar mUIApplicationMenuBar;
        
        private UIItemPane3 mUIItemPane;
        
        private WinScrollBar mUIVerticalScrollBar;
        
        private WinScrollBar mUIHorizontalScrollBar;
        
        private WinWindow mUIErrorInfoViewWindow;
        
        private WinWindow mUIFacebookCampaignEditWindow;
        
        private UIVerticalScrollBar11 mUIVerticalScrollBar1;
        
        private UIHorizontalScrollBar11 mUIHorizontalScrollBar1;
        
        private WinControl mUIPanelEditingGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemPane3 : WinPane
    {
        
        public UIItemPane3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinScrollBar UIScrollbarScrollBar
        {
            get
            {
                if ((this.mUIScrollbarScrollBar == null))
                {
                    this.mUIScrollbarScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIScrollbarScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "scroll bar";
                    #endregion
                }
                return this.mUIScrollbarScrollBar;
            }
        }
        
        public WinPane UIItemPane2
        {
            get
            {
                if ((this.mUIItemPane2 == null))
                {
                    this.mUIItemPane2 = new WinPane(this);
                    #region Search Criteria
                    this.mUIItemPane2.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    #endregion
                }
                return this.mUIItemPane2;
            }
        }
        
        public WinPane UIItemPane1
        {
            get
            {
                if ((this.mUIItemPane1 == null))
                {
                    this.mUIItemPane1 = new WinPane(this);
                    #region Search Criteria
                    this.mUIItemPane1.SearchProperties[WinControl.PropertyNames.Instance] = "2";
                    #endregion
                }
                return this.mUIItemPane1;
            }
        }
        #endregion
        
        #region Fields
        private WinScrollBar mUIScrollbarScrollBar;
        
        private WinPane mUIItemPane2;
        
        private WinPane mUIItemPane1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar11 : WinScrollBar
    {
        
        public UIVerticalScrollBar11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar11 : WinScrollBar
    {
        
        public UIHorizontalScrollBar11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "14";
            #endregion
        }
        
        #region Properties
        public UIItemTitleBar1 UIItemTitleBar
        {
            get
            {
                if ((this.mUIItemTitleBar == null))
                {
                    this.mUIItemTitleBar = new UIItemTitleBar1(this);
                }
                return this.mUIItemTitleBar;
            }
        }
        
        public UIScrollbarScrollBar5 UIScrollbarScrollBar
        {
            get
            {
                if ((this.mUIScrollbarScrollBar == null))
                {
                    this.mUIScrollbarScrollBar = new UIScrollbarScrollBar5(this);
                }
                return this.mUIScrollbarScrollBar;
            }
        }
        
        public UIItemPane1 UIItemPane
        {
            get
            {
                if ((this.mUIItemPane == null))
                {
                    this.mUIItemPane = new UIItemPane1(this);
                }
                return this.mUIItemPane;
            }
        }
        
        public UIItemPane11 UIItemPane1
        {
            get
            {
                if ((this.mUIItemPane1 == null))
                {
                    this.mUIItemPane1 = new UIItemPane11(this);
                }
                return this.mUIItemPane1;
            }
        }
        
        public UIVerticalScrollBar5 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar5(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar5 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar5(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIItemGrip
        {
            get
            {
                if ((this.mUIItemGrip == null))
                {
                    this.mUIItemGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIItemGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIItemGrip;
            }
        }
        #endregion
        
        #region Fields
        private UIItemTitleBar1 mUIItemTitleBar;
        
        private UIScrollbarScrollBar5 mUIScrollbarScrollBar;
        
        private UIItemPane1 mUIItemPane;
        
        private UIItemPane11 mUIItemPane1;
        
        private UIVerticalScrollBar5 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar5 mUIHorizontalScrollBar;
        
        private WinControl mUIItemGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemTitleBar1 : WinTitleBar
    {
        
        public UIItemTitleBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIScrollbarScrollBar5 : WinScrollBar
    {
        
        public UIScrollbarScrollBar5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "scroll bar";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnLeftButton
        {
            get
            {
                if ((this.mUIColumnLeftButton == null))
                {
                    this.mUIColumnLeftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnLeftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column Left";
                    #endregion
                }
                return this.mUIColumnLeftButton;
            }
        }
        
        public WinButton UIPageLeftButton
        {
            get
            {
                if ((this.mUIPageLeftButton == null))
                {
                    this.mUIPageLeftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageLeftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Left";
                    #endregion
                }
                return this.mUIPageLeftButton;
            }
        }
        
        public WinButton UIPositionButton
        {
            get
            {
                if ((this.mUIPositionButton == null))
                {
                    this.mUIPositionButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPositionButton.SearchProperties[WinButton.PropertyNames.Name] = "Position";
                    #endregion
                }
                return this.mUIPositionButton;
            }
        }
        
        public WinButton UIPageRightButton
        {
            get
            {
                if ((this.mUIPageRightButton == null))
                {
                    this.mUIPageRightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageRightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Right";
                    #endregion
                }
                return this.mUIPageRightButton;
            }
        }
        
        public WinButton UIColumnRightButton
        {
            get
            {
                if ((this.mUIColumnRightButton == null))
                {
                    this.mUIColumnRightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnRightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column Right";
                    #endregion
                }
                return this.mUIColumnRightButton;
            }
        }
        
        public WinButton UILineUpButton
        {
            get
            {
                if ((this.mUILineUpButton == null))
                {
                    this.mUILineUpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineUpButton.SearchProperties[WinButton.PropertyNames.Name] = "Line Up";
                    #endregion
                }
                return this.mUILineUpButton;
            }
        }
        
        public WinButton UIPageUpButton
        {
            get
            {
                if ((this.mUIPageUpButton == null))
                {
                    this.mUIPageUpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageUpButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Up";
                    #endregion
                }
                return this.mUIPageUpButton;
            }
        }
        
        public WinButton UIPageDownButton
        {
            get
            {
                if ((this.mUIPageDownButton == null))
                {
                    this.mUIPageDownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageDownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Down";
                    #endregion
                }
                return this.mUIPageDownButton;
            }
        }
        
        public WinButton UILineDownButton
        {
            get
            {
                if ((this.mUILineDownButton == null))
                {
                    this.mUILineDownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineDownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line Down";
                    #endregion
                }
                return this.mUILineDownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnLeftButton;
        
        private WinButton mUIPageLeftButton;
        
        private WinButton mUIPositionButton;
        
        private WinButton mUIPageRightButton;
        
        private WinButton mUIColumnRightButton;
        
        private WinButton mUILineUpButton;
        
        private WinButton mUIPageUpButton;
        
        private WinButton mUIPageDownButton;
        
        private WinButton mUILineDownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemPane1 : WinPane
    {
        
        public UIItemPane1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinScrollBar UIScrollbarScrollBar
        {
            get
            {
                if ((this.mUIScrollbarScrollBar == null))
                {
                    this.mUIScrollbarScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIScrollbarScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "scroll bar";
                    #endregion
                }
                return this.mUIScrollbarScrollBar;
            }
        }
        #endregion
        
        #region Fields
        private WinScrollBar mUIScrollbarScrollBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemPane11 : WinPane
    {
        
        public UIItemPane11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinScrollBar UIScrollbarScrollBar
        {
            get
            {
                if ((this.mUIScrollbarScrollBar == null))
                {
                    this.mUIScrollbarScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIScrollbarScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "scroll bar";
                    #endregion
                }
                return this.mUIScrollbarScrollBar;
            }
        }
        #endregion
        
        #region Fields
        private WinScrollBar mUIScrollbarScrollBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar5 : WinScrollBar
    {
        
        public UIVerticalScrollBar5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar5 : WinScrollBar
    {
        
        public UIHorizontalScrollBar5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "15";
            #endregion
        }
        
        #region Properties
        public UIScrollbarScrollBar6 UIScrollbarScrollBar
        {
            get
            {
                if ((this.mUIScrollbarScrollBar == null))
                {
                    this.mUIScrollbarScrollBar = new UIScrollbarScrollBar6(this);
                }
                return this.mUIScrollbarScrollBar;
            }
        }
        #endregion
        
        #region Fields
        private UIScrollbarScrollBar6 mUIScrollbarScrollBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIScrollbarScrollBar6 : WinScrollBar
    {
        
        public UIScrollbarScrollBar6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "scroll bar";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnLeftButton
        {
            get
            {
                if ((this.mUIColumnLeftButton == null))
                {
                    this.mUIColumnLeftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnLeftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column Left";
                    #endregion
                }
                return this.mUIColumnLeftButton;
            }
        }
        
        public WinButton UIPageLeftButton
        {
            get
            {
                if ((this.mUIPageLeftButton == null))
                {
                    this.mUIPageLeftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageLeftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Left";
                    #endregion
                }
                return this.mUIPageLeftButton;
            }
        }
        
        public WinButton UIPositionButton
        {
            get
            {
                if ((this.mUIPositionButton == null))
                {
                    this.mUIPositionButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPositionButton.SearchProperties[WinButton.PropertyNames.Name] = "Position";
                    #endregion
                }
                return this.mUIPositionButton;
            }
        }
        
        public WinButton UIPageRightButton
        {
            get
            {
                if ((this.mUIPageRightButton == null))
                {
                    this.mUIPageRightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageRightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Right";
                    #endregion
                }
                return this.mUIPageRightButton;
            }
        }
        
        public WinButton UIColumnRightButton
        {
            get
            {
                if ((this.mUIColumnRightButton == null))
                {
                    this.mUIColumnRightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnRightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column Right";
                    #endregion
                }
                return this.mUIColumnRightButton;
            }
        }
        
        public WinButton UILineUpButton
        {
            get
            {
                if ((this.mUILineUpButton == null))
                {
                    this.mUILineUpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineUpButton.SearchProperties[WinButton.PropertyNames.Name] = "Line Up";
                    #endregion
                }
                return this.mUILineUpButton;
            }
        }
        
        public WinButton UIPageUpButton
        {
            get
            {
                if ((this.mUIPageUpButton == null))
                {
                    this.mUIPageUpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageUpButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Up";
                    #endregion
                }
                return this.mUIPageUpButton;
            }
        }
        
        public WinButton UIPageDownButton
        {
            get
            {
                if ((this.mUIPageDownButton == null))
                {
                    this.mUIPageDownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageDownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Down";
                    #endregion
                }
                return this.mUIPageDownButton;
            }
        }
        
        public WinButton UILineDownButton
        {
            get
            {
                if ((this.mUILineDownButton == null))
                {
                    this.mUILineDownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineDownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line Down";
                    #endregion
                }
                return this.mUILineDownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnLeftButton;
        
        private WinButton mUIPageLeftButton;
        
        private WinButton mUIPositionButton;
        
        private WinButton mUIPageRightButton;
        
        private WinButton mUIColumnRightButton;
        
        private WinButton mUILineUpButton;
        
        private WinButton mUIPageUpButton;
        
        private WinButton mUIPageDownButton;
        
        private WinButton mUILineDownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow4 : WinWindow
    {
        
        public UIItemWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "17";
            #endregion
        }
        
        #region Properties
        public UIScrollbarScrollBar7 UIScrollbarScrollBar
        {
            get
            {
                if ((this.mUIScrollbarScrollBar == null))
                {
                    this.mUIScrollbarScrollBar = new UIScrollbarScrollBar7(this);
                }
                return this.mUIScrollbarScrollBar;
            }
        }
        #endregion
        
        #region Fields
        private UIScrollbarScrollBar7 mUIScrollbarScrollBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIScrollbarScrollBar7 : WinScrollBar
    {
        
        public UIScrollbarScrollBar7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "scroll bar";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnLeftButton
        {
            get
            {
                if ((this.mUIColumnLeftButton == null))
                {
                    this.mUIColumnLeftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnLeftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column Left";
                    #endregion
                }
                return this.mUIColumnLeftButton;
            }
        }
        
        public WinButton UIPageLeftButton
        {
            get
            {
                if ((this.mUIPageLeftButton == null))
                {
                    this.mUIPageLeftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageLeftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Left";
                    #endregion
                }
                return this.mUIPageLeftButton;
            }
        }
        
        public WinButton UIPositionButton
        {
            get
            {
                if ((this.mUIPositionButton == null))
                {
                    this.mUIPositionButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPositionButton.SearchProperties[WinButton.PropertyNames.Name] = "Position";
                    #endregion
                }
                return this.mUIPositionButton;
            }
        }
        
        public WinButton UIPageRightButton
        {
            get
            {
                if ((this.mUIPageRightButton == null))
                {
                    this.mUIPageRightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageRightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Right";
                    #endregion
                }
                return this.mUIPageRightButton;
            }
        }
        
        public WinButton UIColumnRightButton
        {
            get
            {
                if ((this.mUIColumnRightButton == null))
                {
                    this.mUIColumnRightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnRightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column Right";
                    #endregion
                }
                return this.mUIColumnRightButton;
            }
        }
        
        public WinButton UILineUpButton
        {
            get
            {
                if ((this.mUILineUpButton == null))
                {
                    this.mUILineUpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineUpButton.SearchProperties[WinButton.PropertyNames.Name] = "Line Up";
                    #endregion
                }
                return this.mUILineUpButton;
            }
        }
        
        public WinButton UIPageUpButton
        {
            get
            {
                if ((this.mUIPageUpButton == null))
                {
                    this.mUIPageUpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageUpButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Up";
                    #endregion
                }
                return this.mUIPageUpButton;
            }
        }
        
        public WinButton UIPageDownButton
        {
            get
            {
                if ((this.mUIPageDownButton == null))
                {
                    this.mUIPageDownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageDownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Down";
                    #endregion
                }
                return this.mUIPageDownButton;
            }
        }
        
        public WinButton UILineDownButton
        {
            get
            {
                if ((this.mUILineDownButton == null))
                {
                    this.mUILineDownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineDownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line Down";
                    #endregion
                }
                return this.mUILineDownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnLeftButton;
        
        private WinButton mUIPageLeftButton;
        
        private WinButton mUIPositionButton;
        
        private WinButton mUIPageRightButton;
        
        private WinButton mUIColumnRightButton;
        
        private WinButton mUILineUpButton;
        
        private WinButton mUIPageUpButton;
        
        private WinButton mUIPageDownButton;
        
        private WinButton mUILineDownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFacebookObjectReportWindow : WinWindow
    {
        
        public UIFacebookObjectReportWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "FacebookObjectReportControl";
            #endregion
        }
        
        #region Properties
        public WinClient UIFacebookObjectReportClient
        {
            get
            {
                if ((this.mUIFacebookObjectReportClient == null))
                {
                    this.mUIFacebookObjectReportClient = new WinClient(this);
                }
                return this.mUIFacebookObjectReportClient;
            }
        }
        
        public WinWindow UIReportDateSelectContWindow
        {
            get
            {
                if ((this.mUIReportDateSelectContWindow == null))
                {
                    this.mUIReportDateSelectContWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIReportDateSelectContWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIReportDateSelectContWindow.SearchProperties[WinWindow.PropertyNames.Instance] = "27";
                    #endregion
                }
                return this.mUIReportDateSelectContWindow;
            }
        }
        
        public WinWindow UIGridControl1Window
        {
            get
            {
                if ((this.mUIGridControl1Window == null))
                {
                    this.mUIGridControl1Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUIGridControl1Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIGridControl1Window.SearchProperties[WinWindow.PropertyNames.Instance] = "26";
                    #endregion
                }
                return this.mUIGridControl1Window;
            }
        }
        
        public WinWindow UITableLayoutPanel1Window
        {
            get
            {
                if ((this.mUITableLayoutPanel1Window == null))
                {
                    this.mUITableLayoutPanel1Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUITableLayoutPanel1Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUITableLayoutPanel1Window.SearchProperties[WinWindow.PropertyNames.Instance] = "5";
                    #endregion
                }
                return this.mUITableLayoutPanel1Window;
            }
        }
        
        public WinWindow UILabel2Window
        {
            get
            {
                if ((this.mUILabel2Window == null))
                {
                    this.mUILabel2Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUILabel2Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
                    this.mUILabel2Window.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
                    #endregion
                }
                return this.mUILabel2Window;
            }
        }
        
        public WinWindow UIPanel3Window
        {
            get
            {
                if ((this.mUIPanel3Window == null))
                {
                    this.mUIPanel3Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUIPanel3Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIPanel3Window.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
                    #endregion
                }
                return this.mUIPanel3Window;
            }
        }
        
        public WinWindow UITotalChartWindow
        {
            get
            {
                if ((this.mUITotalChartWindow == null))
                {
                    this.mUITotalChartWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUITotalChartWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUITotalChartWindow.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    #endregion
                }
                return this.mUITotalChartWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIFacebookObjectReportClient;
        
        private WinWindow mUIReportDateSelectContWindow;
        
        private WinWindow mUIGridControl1Window;
        
        private WinWindow mUITableLayoutPanel1Window;
        
        private WinWindow mUILabel2Window;
        
        private WinWindow mUIPanel3Window;
        
        private WinWindow mUITotalChartWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIReportDateSelectContWindow : WinWindow
    {
        
        public UIReportDateSelectContWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "reportDateSelectControl";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIReportDateSelectContMenuBar
        {
            get
            {
                if ((this.mUIReportDateSelectContMenuBar == null))
                {
                    this.mUIReportDateSelectContMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIReportDateSelectContMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIReportDateSelectContMenuBar;
            }
        }
        
        public WinTitleBar UIReportDateSelectContTitleBar
        {
            get
            {
                if ((this.mUIReportDateSelectContTitleBar == null))
                {
                    this.mUIReportDateSelectContTitleBar = new WinTitleBar(this);
                }
                return this.mUIReportDateSelectContTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIReportDateSelectContMenuBar1
        {
            get
            {
                if ((this.mUIReportDateSelectContMenuBar1 == null))
                {
                    this.mUIReportDateSelectContMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIReportDateSelectContMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIReportDateSelectContMenuBar1;
            }
        }
        
        public WinClient UIReportDateSelectContClient
        {
            get
            {
                if ((this.mUIReportDateSelectContClient == null))
                {
                    this.mUIReportDateSelectContClient = new WinClient(this);
                }
                return this.mUIReportDateSelectContClient;
            }
        }
        
        public WinWindow UIDateRange07142011072Window
        {
            get
            {
                if ((this.mUIDateRange07142011072Window == null))
                {
                    this.mUIDateRange07142011072Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUIDateRange07142011072Window.SearchProperties[WinWindow.PropertyNames.Name] = "Date Range: 07/14/2011 - 07/20/2011";
                    this.mUIDateRange07142011072Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIDateRange07142011072Window;
            }
        }
        
        public WinText UIDateRange07142011072Text
        {
            get
            {
                if ((this.mUIDateRange07142011072Text == null))
                {
                    this.mUIDateRange07142011072Text = new WinText(this);
                    #region Search Criteria
                    this.mUIDateRange07142011072Text.SearchProperties[WinText.PropertyNames.Name] = "Date Range: 07/14/2011 - 07/20/2011";
                    #endregion
                }
                return this.mUIDateRange07142011072Text;
            }
        }
        
        public WinWindow UILast7DaysWindow
        {
            get
            {
                if ((this.mUILast7DaysWindow == null))
                {
                    this.mUILast7DaysWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUILast7DaysWindow.SearchProperties[WinWindow.PropertyNames.Name] = "Last 7 Days";
                    this.mUILast7DaysWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.BUTTON", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUILast7DaysWindow;
            }
        }
        
        public WinWindow UILast30DaysWindow
        {
            get
            {
                if ((this.mUILast30DaysWindow == null))
                {
                    this.mUILast30DaysWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUILast30DaysWindow.SearchProperties[WinWindow.PropertyNames.Name] = "Last 30 Days";
                    this.mUILast30DaysWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.BUTTON", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUILast30DaysWindow;
            }
        }
        
        public UIVerticalScrollBar6 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar6(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar6 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar6(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIReportDateSelectContGrip
        {
            get
            {
                if ((this.mUIReportDateSelectContGrip == null))
                {
                    this.mUIReportDateSelectContGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIReportDateSelectContGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIReportDateSelectContGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIReportDateSelectContMenuBar;
        
        private WinTitleBar mUIReportDateSelectContTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIReportDateSelectContMenuBar1;
        
        private WinClient mUIReportDateSelectContClient;
        
        private WinWindow mUIDateRange07142011072Window;
        
        private WinText mUIDateRange07142011072Text;
        
        private WinWindow mUILast7DaysWindow;
        
        private WinWindow mUILast30DaysWindow;
        
        private UIVerticalScrollBar6 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar6 mUIHorizontalScrollBar;
        
        private WinControl mUIReportDateSelectContGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar6 : WinScrollBar
    {
        
        public UIVerticalScrollBar6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar6 : WinScrollBar
    {
        
        public UIHorizontalScrollBar6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDateRange07142011072Window : WinWindow
    {
        
        public UIDateRange07142011072Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "labelControl";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UILabelControlMenuBar
        {
            get
            {
                if ((this.mUILabelControlMenuBar == null))
                {
                    this.mUILabelControlMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabelControlMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUILabelControlMenuBar;
            }
        }
        
        public WinTitleBar UIDateRange07142011072TitleBar
        {
            get
            {
                if ((this.mUIDateRange07142011072TitleBar == null))
                {
                    this.mUIDateRange07142011072TitleBar = new WinTitleBar(this);
                }
                return this.mUIDateRange07142011072TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UILabelControlMenuBar1
        {
            get
            {
                if ((this.mUILabelControlMenuBar1 == null))
                {
                    this.mUILabelControlMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabelControlMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUILabelControlMenuBar1;
            }
        }
        
        public UIDateRange07142011072ScrollBar UIDateRange07142011072ScrollBar
        {
            get
            {
                if ((this.mUIDateRange07142011072ScrollBar == null))
                {
                    this.mUIDateRange07142011072ScrollBar = new UIDateRange07142011072ScrollBar(this);
                }
                return this.mUIDateRange07142011072ScrollBar;
            }
        }
        
        public UIDateRange07142011072ScrollBar1 UIDateRange07142011072ScrollBar1
        {
            get
            {
                if ((this.mUIDateRange07142011072ScrollBar1 == null))
                {
                    this.mUIDateRange07142011072ScrollBar1 = new UIDateRange07142011072ScrollBar1(this);
                }
                return this.mUIDateRange07142011072ScrollBar1;
            }
        }
        
        public WinControl UIDateRange07142011072Grip
        {
            get
            {
                if ((this.mUIDateRange07142011072Grip == null))
                {
                    this.mUIDateRange07142011072Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUIDateRange07142011072Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIDateRange07142011072Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUILabelControlMenuBar;
        
        private WinTitleBar mUIDateRange07142011072TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUILabelControlMenuBar1;
        
        private UIDateRange07142011072ScrollBar mUIDateRange07142011072ScrollBar;
        
        private UIDateRange07142011072ScrollBar1 mUIDateRange07142011072ScrollBar1;
        
        private WinControl mUIDateRange07142011072Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDateRange07142011072ScrollBar : WinScrollBar
    {
        
        public UIDateRange07142011072ScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDateRange07142011072ScrollBar1 : WinScrollBar
    {
        
        public UIDateRange07142011072ScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UILast7DaysWindow : WinWindow
    {
        
        public UILast7DaysWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "sageButton7Days";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UISageButton7DaysMenuBar
        {
            get
            {
                if ((this.mUISageButton7DaysMenuBar == null))
                {
                    this.mUISageButton7DaysMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISageButton7DaysMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUISageButton7DaysMenuBar;
            }
        }
        
        public WinTitleBar UILast7DaysTitleBar
        {
            get
            {
                if ((this.mUILast7DaysTitleBar == null))
                {
                    this.mUILast7DaysTitleBar = new WinTitleBar(this);
                }
                return this.mUILast7DaysTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UISageButton7DaysMenuBar1
        {
            get
            {
                if ((this.mUISageButton7DaysMenuBar1 == null))
                {
                    this.mUISageButton7DaysMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISageButton7DaysMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUISageButton7DaysMenuBar1;
            }
        }
        
        public WinButton UILast7DaysButton
        {
            get
            {
                if ((this.mUILast7DaysButton == null))
                {
                    this.mUILast7DaysButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILast7DaysButton.SearchProperties[WinButton.PropertyNames.Name] = "Last 7 Days";
                    #endregion
                }
                return this.mUILast7DaysButton;
            }
        }
        
        public UILast7DaysScrollBar UILast7DaysScrollBar
        {
            get
            {
                if ((this.mUILast7DaysScrollBar == null))
                {
                    this.mUILast7DaysScrollBar = new UILast7DaysScrollBar(this);
                }
                return this.mUILast7DaysScrollBar;
            }
        }
        
        public UILast7DaysScrollBar1 UILast7DaysScrollBar1
        {
            get
            {
                if ((this.mUILast7DaysScrollBar1 == null))
                {
                    this.mUILast7DaysScrollBar1 = new UILast7DaysScrollBar1(this);
                }
                return this.mUILast7DaysScrollBar1;
            }
        }
        
        public WinControl UILast7DaysGrip
        {
            get
            {
                if ((this.mUILast7DaysGrip == null))
                {
                    this.mUILast7DaysGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUILast7DaysGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUILast7DaysGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUISageButton7DaysMenuBar;
        
        private WinTitleBar mUILast7DaysTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUISageButton7DaysMenuBar1;
        
        private WinButton mUILast7DaysButton;
        
        private UILast7DaysScrollBar mUILast7DaysScrollBar;
        
        private UILast7DaysScrollBar1 mUILast7DaysScrollBar1;
        
        private WinControl mUILast7DaysGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UILast7DaysScrollBar : WinScrollBar
    {
        
        public UILast7DaysScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UILast7DaysScrollBar1 : WinScrollBar
    {
        
        public UILast7DaysScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UILast30DaysWindow : WinWindow
    {
        
        public UILast30DaysWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "sageButton30Days";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UISageButton30DaysMenuBar
        {
            get
            {
                if ((this.mUISageButton30DaysMenuBar == null))
                {
                    this.mUISageButton30DaysMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISageButton30DaysMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUISageButton30DaysMenuBar;
            }
        }
        
        public WinTitleBar UILast30DaysTitleBar
        {
            get
            {
                if ((this.mUILast30DaysTitleBar == null))
                {
                    this.mUILast30DaysTitleBar = new WinTitleBar(this);
                }
                return this.mUILast30DaysTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UISageButton30DaysMenuBar1
        {
            get
            {
                if ((this.mUISageButton30DaysMenuBar1 == null))
                {
                    this.mUISageButton30DaysMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISageButton30DaysMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUISageButton30DaysMenuBar1;
            }
        }
        
        public WinButton UILast30DaysButton
        {
            get
            {
                if ((this.mUILast30DaysButton == null))
                {
                    this.mUILast30DaysButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILast30DaysButton.SearchProperties[WinButton.PropertyNames.Name] = "Last 30 Days";
                    #endregion
                }
                return this.mUILast30DaysButton;
            }
        }
        
        public UILast30DaysScrollBar UILast30DaysScrollBar
        {
            get
            {
                if ((this.mUILast30DaysScrollBar == null))
                {
                    this.mUILast30DaysScrollBar = new UILast30DaysScrollBar(this);
                }
                return this.mUILast30DaysScrollBar;
            }
        }
        
        public UILast30DaysScrollBar1 UILast30DaysScrollBar1
        {
            get
            {
                if ((this.mUILast30DaysScrollBar1 == null))
                {
                    this.mUILast30DaysScrollBar1 = new UILast30DaysScrollBar1(this);
                }
                return this.mUILast30DaysScrollBar1;
            }
        }
        
        public WinControl UILast30DaysGrip
        {
            get
            {
                if ((this.mUILast30DaysGrip == null))
                {
                    this.mUILast30DaysGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUILast30DaysGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUILast30DaysGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUISageButton30DaysMenuBar;
        
        private WinTitleBar mUILast30DaysTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUISageButton30DaysMenuBar1;
        
        private WinButton mUILast30DaysButton;
        
        private UILast30DaysScrollBar mUILast30DaysScrollBar;
        
        private UILast30DaysScrollBar1 mUILast30DaysScrollBar1;
        
        private WinControl mUILast30DaysGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UILast30DaysScrollBar : WinScrollBar
    {
        
        public UILast30DaysScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UILast30DaysScrollBar1 : WinScrollBar
    {
        
        public UILast30DaysScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIGridControl1Window : WinWindow
    {
        
        public UIGridControl1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "gridControl1";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIGridControl1MenuBar
        {
            get
            {
                if ((this.mUIGridControl1MenuBar == null))
                {
                    this.mUIGridControl1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIGridControl1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIGridControl1MenuBar;
            }
        }
        
        public WinTitleBar UIGridControl1TitleBar
        {
            get
            {
                if ((this.mUIGridControl1TitleBar == null))
                {
                    this.mUIGridControl1TitleBar = new WinTitleBar(this);
                }
                return this.mUIGridControl1TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIGridControl1MenuBar1
        {
            get
            {
                if ((this.mUIGridControl1MenuBar1 == null))
                {
                    this.mUIGridControl1MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIGridControl1MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIGridControl1MenuBar1;
            }
        }
        
        public UIGridControl1Table UIGridControl1Table
        {
            get
            {
                if ((this.mUIGridControl1Table == null))
                {
                    this.mUIGridControl1Table = new UIGridControl1Table(this);
                }
                return this.mUIGridControl1Table;
            }
        }
        
        public WinClient UIHeaderPanelClient
        {
            get
            {
                if ((this.mUIHeaderPanelClient == null))
                {
                    this.mUIHeaderPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIHeaderPanelClient.SearchProperties[WinControl.PropertyNames.Name] = "Header Panel";
                    #endregion
                }
                return this.mUIHeaderPanelClient;
            }
        }
        
        public WinClient UIDataPanelClient
        {
            get
            {
                if ((this.mUIDataPanelClient == null))
                {
                    this.mUIDataPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIDataPanelClient.SearchProperties[WinControl.PropertyNames.Name] = "Data Panel";
                    #endregion
                }
                return this.mUIDataPanelClient;
            }
        }
        
        public UIRow1Row UIRow1Row
        {
            get
            {
                if ((this.mUIRow1Row == null))
                {
                    this.mUIRow1Row = new UIRow1Row(this);
                }
                return this.mUIRow1Row;
            }
        }
        
        public UIVerticalScrollBar7 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar7(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar7 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar7(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIGridControl1Grip
        {
            get
            {
                if ((this.mUIGridControl1Grip == null))
                {
                    this.mUIGridControl1Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUIGridControl1Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIGridControl1Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIGridControl1MenuBar;
        
        private WinTitleBar mUIGridControl1TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIGridControl1MenuBar1;
        
        private UIGridControl1Table mUIGridControl1Table;
        
        private WinClient mUIHeaderPanelClient;
        
        private WinClient mUIDataPanelClient;
        
        private UIRow1Row mUIRow1Row;
        
        private UIVerticalScrollBar7 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar7 mUIHorizontalScrollBar;
        
        private WinControl mUIGridControl1Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIGridControl1Table : WinTable
    {
        
        public UIGridControl1Table(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public UIHeaderPanelClient UIHeaderPanelClient
        {
            get
            {
                if ((this.mUIHeaderPanelClient == null))
                {
                    this.mUIHeaderPanelClient = new UIHeaderPanelClient(this);
                }
                return this.mUIHeaderPanelClient;
            }
        }
        
        public UIDataPanelClient UIDataPanelClient
        {
            get
            {
                if ((this.mUIDataPanelClient == null))
                {
                    this.mUIDataPanelClient = new UIDataPanelClient(this);
                }
                return this.mUIDataPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UIHeaderPanelClient mUIHeaderPanelClient;
        
        private UIDataPanelClient mUIDataPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHeaderPanelClient : WinClient
    {
        
        public UIHeaderPanelClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinRowHeader UIItemRowHeader
        {
            get
            {
                if ((this.mUIItemRowHeader == null))
                {
                    this.mUIItemRowHeader = new WinRowHeader(this);
                }
                return this.mUIItemRowHeader;
            }
        }
        
        public WinRowHeader UIItemRowHeader1
        {
            get
            {
                if ((this.mUIItemRowHeader1 == null))
                {
                    this.mUIItemRowHeader1 = new WinRowHeader(this);
                }
                return this.mUIItemRowHeader1;
            }
        }
        
        public WinRowHeader UIItemRowHeader2
        {
            get
            {
                if ((this.mUIItemRowHeader2 == null))
                {
                    this.mUIItemRowHeader2 = new WinRowHeader(this);
                }
                return this.mUIItemRowHeader2;
            }
        }
        
        public WinRowHeader UIItemRowHeader3
        {
            get
            {
                if ((this.mUIItemRowHeader3 == null))
                {
                    this.mUIItemRowHeader3 = new WinRowHeader(this);
                }
                return this.mUIItemRowHeader3;
            }
        }
        
        public WinRowHeader UIItemRowHeader4
        {
            get
            {
                if ((this.mUIItemRowHeader4 == null))
                {
                    this.mUIItemRowHeader4 = new WinRowHeader(this);
                }
                return this.mUIItemRowHeader4;
            }
        }
        
        public WinRowHeader UIItemRowHeader5
        {
            get
            {
                if ((this.mUIItemRowHeader5 == null))
                {
                    this.mUIItemRowHeader5 = new WinRowHeader(this);
                }
                return this.mUIItemRowHeader5;
            }
        }
        
        public WinRowHeader UIItemRowHeader6
        {
            get
            {
                if ((this.mUIItemRowHeader6 == null))
                {
                    this.mUIItemRowHeader6 = new WinRowHeader(this);
                }
                return this.mUIItemRowHeader6;
            }
        }
        
        public WinRowHeader UIItemRowHeader7
        {
            get
            {
                if ((this.mUIItemRowHeader7 == null))
                {
                    this.mUIItemRowHeader7 = new WinRowHeader(this);
                }
                return this.mUIItemRowHeader7;
            }
        }
        
        public WinRowHeader UIItemRowHeader8
        {
            get
            {
                if ((this.mUIItemRowHeader8 == null))
                {
                    this.mUIItemRowHeader8 = new WinRowHeader(this);
                }
                return this.mUIItemRowHeader8;
            }
        }
        
        public WinRowHeader UIItemRowHeader9
        {
            get
            {
                if ((this.mUIItemRowHeader9 == null))
                {
                    this.mUIItemRowHeader9 = new WinRowHeader(this);
                }
                return this.mUIItemRowHeader9;
            }
        }
        #endregion
        
        #region Fields
        private WinRowHeader mUIItemRowHeader;
        
        private WinRowHeader mUIItemRowHeader1;
        
        private WinRowHeader mUIItemRowHeader2;
        
        private WinRowHeader mUIItemRowHeader3;
        
        private WinRowHeader mUIItemRowHeader4;
        
        private WinRowHeader mUIItemRowHeader5;
        
        private WinRowHeader mUIItemRowHeader6;
        
        private WinRowHeader mUIItemRowHeader7;
        
        private WinRowHeader mUIItemRowHeader8;
        
        private WinRowHeader mUIItemRowHeader9;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDataPanelClient : WinClient
    {
        
        public UIDataPanelClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Data Panel";
            #endregion
        }
        
        #region Properties
        public WinRow UIRow1Row
        {
            get
            {
                if ((this.mUIRow1Row == null))
                {
                    this.mUIRow1Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow1Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 1";
                    this.mUIRow1Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow1Row;
            }
        }
        #endregion
        
        #region Fields
        private WinRow mUIRow1Row;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRow1Row : WinRow
    {
        
        public UIRow1Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Name] = "Row 1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UICampaignCell
        {
            get
            {
                if ((this.mUICampaignCell == null))
                {
                    this.mUICampaignCell = new WinCell(this);
                    #region Search Criteria
                    this.mUICampaignCell.SearchProperties[WinCell.PropertyNames.Value] = "Campaign";
                    #endregion
                }
                return this.mUICampaignCell;
            }
        }
        
        public WinCell UIItem0Cell
        {
            get
            {
                if ((this.mUIItem0Cell == null))
                {
                    this.mUIItem0Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell.SearchProperties[WinCell.PropertyNames.Value] = "0";
                    #endregion
                }
                return this.mUIItem0Cell;
            }
        }
        
        public WinCell UIItem0Cell1
        {
            get
            {
                if ((this.mUIItem0Cell1 == null))
                {
                    this.mUIItem0Cell1 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell1.SearchProperties[WinCell.PropertyNames.Value] = "0";
                    #endregion
                }
                return this.mUIItem0Cell1;
            }
        }
        
        public WinCell UIItem0Cell2
        {
            get
            {
                if ((this.mUIItem0Cell2 == null))
                {
                    this.mUIItem0Cell2 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell2.SearchProperties[WinCell.PropertyNames.Value] = "0";
                    #endregion
                }
                return this.mUIItem0Cell2;
            }
        }
        
        public WinCell UIItem0Cell3
        {
            get
            {
                if ((this.mUIItem0Cell3 == null))
                {
                    this.mUIItem0Cell3 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell3.SearchProperties[WinCell.PropertyNames.Value] = "0";
                    #endregion
                }
                return this.mUIItem0Cell3;
            }
        }
        
        public WinCell UIItem0Cell4
        {
            get
            {
                if ((this.mUIItem0Cell4 == null))
                {
                    this.mUIItem0Cell4 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell4.SearchProperties[WinCell.PropertyNames.Value] = "0";
                    #endregion
                }
                return this.mUIItem0Cell4;
            }
        }
        
        public WinCell UIItem0Cell5
        {
            get
            {
                if ((this.mUIItem0Cell5 == null))
                {
                    this.mUIItem0Cell5 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell5.SearchProperties[WinCell.PropertyNames.Value] = "0";
                    #endregion
                }
                return this.mUIItem0Cell5;
            }
        }
        
        public WinCell UIItem0Cell6
        {
            get
            {
                if ((this.mUIItem0Cell6 == null))
                {
                    this.mUIItem0Cell6 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell6.SearchProperties[WinCell.PropertyNames.Value] = "0";
                    #endregion
                }
                return this.mUIItem0Cell6;
            }
        }
        
        public WinCell UIItem000Cell
        {
            get
            {
                if ((this.mUIItem000Cell == null))
                {
                    this.mUIItem000Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem000Cell.SearchProperties[WinCell.PropertyNames.Value] = "$0.00";
                    #endregion
                }
                return this.mUIItem000Cell;
            }
        }
        
        public WinCell UIItem000Cell1
        {
            get
            {
                if ((this.mUIItem000Cell1 == null))
                {
                    this.mUIItem000Cell1 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem000Cell1.SearchProperties[WinCell.PropertyNames.Value] = "0.00 %";
                    #endregion
                }
                return this.mUIItem000Cell1;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUICampaignCell;
        
        private WinCell mUIItem0Cell;
        
        private WinCell mUIItem0Cell1;
        
        private WinCell mUIItem0Cell2;
        
        private WinCell mUIItem0Cell3;
        
        private WinCell mUIItem0Cell4;
        
        private WinCell mUIItem0Cell5;
        
        private WinCell mUIItem0Cell6;
        
        private WinCell mUIItem000Cell;
        
        private WinCell mUIItem000Cell1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar7 : WinScrollBar
    {
        
        public UIVerticalScrollBar7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar7 : WinScrollBar
    {
        
        public UIHorizontalScrollBar7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITableLayoutPanel1Window : WinWindow
    {
        
        public UITableLayoutPanel1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "tableLayoutPanel1";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UITableLayoutPanel1MenuBar
        {
            get
            {
                if ((this.mUITableLayoutPanel1MenuBar == null))
                {
                    this.mUITableLayoutPanel1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUITableLayoutPanel1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUITableLayoutPanel1MenuBar;
            }
        }
        
        public WinTitleBar UITableLayoutPanel1TitleBar
        {
            get
            {
                if ((this.mUITableLayoutPanel1TitleBar == null))
                {
                    this.mUITableLayoutPanel1TitleBar = new WinTitleBar(this);
                }
                return this.mUITableLayoutPanel1TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UITableLayoutPanel1MenuBar1
        {
            get
            {
                if ((this.mUITableLayoutPanel1MenuBar1 == null))
                {
                    this.mUITableLayoutPanel1MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUITableLayoutPanel1MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUITableLayoutPanel1MenuBar1;
            }
        }
        
        public WinClient UITableLayoutPanel1Client
        {
            get
            {
                if ((this.mUITableLayoutPanel1Client == null))
                {
                    this.mUITableLayoutPanel1Client = new WinClient(this);
                }
                return this.mUITableLayoutPanel1Client;
            }
        }
        
        public WinWindow UIBasicIndicatorPieChaWindow
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaWindow == null))
                {
                    this.mUIBasicIndicatorPieChaWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIBasicIndicatorPieChaWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIBasicIndicatorPieChaWindow.SearchProperties[WinWindow.PropertyNames.Instance] = "16";
                    #endregion
                }
                return this.mUIBasicIndicatorPieChaWindow;
            }
        }
        
        public WinWindow UIBasicIndicatorPieChaWindow1
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaWindow1 == null))
                {
                    this.mUIBasicIndicatorPieChaWindow1 = new WinWindow(this);
                    #region Search Criteria
                    this.mUIBasicIndicatorPieChaWindow1.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIBasicIndicatorPieChaWindow1.SearchProperties[WinWindow.PropertyNames.Instance] = "11";
                    #endregion
                }
                return this.mUIBasicIndicatorPieChaWindow1;
            }
        }
        
        public WinWindow UIBasicIndicatorPieChaWindow2
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaWindow2 == null))
                {
                    this.mUIBasicIndicatorPieChaWindow2 = new WinWindow(this);
                    #region Search Criteria
                    this.mUIBasicIndicatorPieChaWindow2.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIBasicIndicatorPieChaWindow2.SearchProperties[WinWindow.PropertyNames.Instance] = "6";
                    #endregion
                }
                return this.mUIBasicIndicatorPieChaWindow2;
            }
        }
        
        public WinWindow UIBasicIndicatorPieChaWindow3
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaWindow3 == null))
                {
                    this.mUIBasicIndicatorPieChaWindow3 = new WinWindow(this);
                    #region Search Criteria
                    this.mUIBasicIndicatorPieChaWindow3.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIBasicIndicatorPieChaWindow3.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    #endregion
                }
                return this.mUIBasicIndicatorPieChaWindow3;
            }
        }
        
        public UIVerticalScrollBar8 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar8(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar8 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar8(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UITableLayoutPanel1Grip
        {
            get
            {
                if ((this.mUITableLayoutPanel1Grip == null))
                {
                    this.mUITableLayoutPanel1Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUITableLayoutPanel1Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUITableLayoutPanel1Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUITableLayoutPanel1MenuBar;
        
        private WinTitleBar mUITableLayoutPanel1TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUITableLayoutPanel1MenuBar1;
        
        private WinClient mUITableLayoutPanel1Client;
        
        private WinWindow mUIBasicIndicatorPieChaWindow;
        
        private WinWindow mUIBasicIndicatorPieChaWindow1;
        
        private WinWindow mUIBasicIndicatorPieChaWindow2;
        
        private WinWindow mUIBasicIndicatorPieChaWindow3;
        
        private UIVerticalScrollBar8 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar8 mUIHorizontalScrollBar;
        
        private WinControl mUITableLayoutPanel1Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar8 : WinScrollBar
    {
        
        public UIVerticalScrollBar8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar8 : WinScrollBar
    {
        
        public UIHorizontalScrollBar8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIBasicIndicatorPieChaWindow : WinWindow
    {
        
        public UIBasicIndicatorPieChaWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "basicIndicatorPieChartControl1";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIBasicIndicatorPieChaMenuBar
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaMenuBar == null))
                {
                    this.mUIBasicIndicatorPieChaMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIBasicIndicatorPieChaMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIBasicIndicatorPieChaMenuBar;
            }
        }
        
        public WinTitleBar UIBasicIndicatorPieChaTitleBar
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaTitleBar == null))
                {
                    this.mUIBasicIndicatorPieChaTitleBar = new WinTitleBar(this);
                }
                return this.mUIBasicIndicatorPieChaTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIBasicIndicatorPieChaMenuBar1
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaMenuBar1 == null))
                {
                    this.mUIBasicIndicatorPieChaMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIBasicIndicatorPieChaMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIBasicIndicatorPieChaMenuBar1;
            }
        }
        
        public WinClient UIBasicIndicatorPieChaClient
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaClient == null))
                {
                    this.mUIBasicIndicatorPieChaClient = new WinClient(this);
                }
                return this.mUIBasicIndicatorPieChaClient;
            }
        }
        
        public WinWindow UILabel1Window
        {
            get
            {
                if ((this.mUILabel1Window == null))
                {
                    this.mUILabel1Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUILabel1Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUILabel1Window;
            }
        }
        
        public WinWindow UIPanel1Window
        {
            get
            {
                if ((this.mUIPanel1Window == null))
                {
                    this.mUIPanel1Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUIPanel1Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIPanel1Window.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
                    #endregion
                }
                return this.mUIPanel1Window;
            }
        }
        
        public WinWindow UILegendGridControlWindow
        {
            get
            {
                if ((this.mUILegendGridControlWindow == null))
                {
                    this.mUILegendGridControlWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUILegendGridControlWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUILegendGridControlWindow.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
                    #endregion
                }
                return this.mUILegendGridControlWindow;
            }
        }
        
        public WinWindow UIPieChartWindow
        {
            get
            {
                if ((this.mUIPieChartWindow == null))
                {
                    this.mUIPieChartWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIPieChartWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIPieChartWindow.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    #endregion
                }
                return this.mUIPieChartWindow;
            }
        }
        
        public UIVerticalScrollBar9 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar9(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar9 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar9(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIBasicIndicatorPieChaGrip
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaGrip == null))
                {
                    this.mUIBasicIndicatorPieChaGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIBasicIndicatorPieChaGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIBasicIndicatorPieChaGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIBasicIndicatorPieChaMenuBar;
        
        private WinTitleBar mUIBasicIndicatorPieChaTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIBasicIndicatorPieChaMenuBar1;
        
        private WinClient mUIBasicIndicatorPieChaClient;
        
        private WinWindow mUILabel1Window;
        
        private WinWindow mUIPanel1Window;
        
        private WinWindow mUILegendGridControlWindow;
        
        private WinWindow mUIPieChartWindow;
        
        private UIVerticalScrollBar9 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar9 mUIHorizontalScrollBar;
        
        private WinControl mUIBasicIndicatorPieChaGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar9 : WinScrollBar
    {
        
        public UIVerticalScrollBar9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar9 : WinScrollBar
    {
        
        public UIHorizontalScrollBar9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UILabel1Window : WinWindow
    {
        
        public UILabel1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "label1";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "5";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UILabel1MenuBar
        {
            get
            {
                if ((this.mUILabel1MenuBar == null))
                {
                    this.mUILabel1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabel1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUILabel1MenuBar;
            }
        }
        
        public WinTitleBar UILabel1TitleBar
        {
            get
            {
                if ((this.mUILabel1TitleBar == null))
                {
                    this.mUILabel1TitleBar = new WinTitleBar(this);
                }
                return this.mUILabel1TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UILabel1MenuBar1
        {
            get
            {
                if ((this.mUILabel1MenuBar1 == null))
                {
                    this.mUILabel1MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabel1MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUILabel1MenuBar1;
            }
        }
        
        public WinText UILabel1Text
        {
            get
            {
                if ((this.mUILabel1Text == null))
                {
                    this.mUILabel1Text = new WinText(this);
                }
                return this.mUILabel1Text;
            }
        }
        
        public UIVerticalScrollBar10 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar10(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar10 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar10(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UILabel1Grip
        {
            get
            {
                if ((this.mUILabel1Grip == null))
                {
                    this.mUILabel1Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUILabel1Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUILabel1Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUILabel1MenuBar;
        
        private WinTitleBar mUILabel1TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUILabel1MenuBar1;
        
        private WinText mUILabel1Text;
        
        private UIVerticalScrollBar10 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar10 mUIHorizontalScrollBar;
        
        private WinControl mUILabel1Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar10 : WinScrollBar
    {
        
        public UIVerticalScrollBar10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar10 : WinScrollBar
    {
        
        public UIHorizontalScrollBar10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPanel1Window1 : WinWindow
    {
        
        public UIPanel1Window1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "panel1";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "5";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIPanel1MenuBar
        {
            get
            {
                if ((this.mUIPanel1MenuBar == null))
                {
                    this.mUIPanel1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanel1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIPanel1MenuBar;
            }
        }
        
        public WinTitleBar UIPanel1TitleBar
        {
            get
            {
                if ((this.mUIPanel1TitleBar == null))
                {
                    this.mUIPanel1TitleBar = new WinTitleBar(this);
                }
                return this.mUIPanel1TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIPanel1MenuBar1
        {
            get
            {
                if ((this.mUIPanel1MenuBar1 == null))
                {
                    this.mUIPanel1MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanel1MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIPanel1MenuBar1;
            }
        }
        
        public WinClient UIPanel1Client
        {
            get
            {
                if ((this.mUIPanel1Client == null))
                {
                    this.mUIPanel1Client = new WinClient(this);
                }
                return this.mUIPanel1Client;
            }
        }
        
        public WinWindow UIImpressionsWindow
        {
            get
            {
                if ((this.mUIImpressionsWindow == null))
                {
                    this.mUIImpressionsWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIImpressionsWindow.SearchProperties[WinWindow.PropertyNames.Name] = "Impressions";
                    this.mUIImpressionsWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIImpressionsWindow;
            }
        }
        
        public WinText UIImpressionsText
        {
            get
            {
                if ((this.mUIImpressionsText == null))
                {
                    this.mUIImpressionsText = new WinText(this);
                    #region Search Criteria
                    this.mUIImpressionsText.SearchProperties[WinText.PropertyNames.Name] = "Impressions";
                    #endregion
                }
                return this.mUIImpressionsText;
            }
        }
        
        public UIVerticalScrollBar12 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar12(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar12 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar12(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIPanel1Grip
        {
            get
            {
                if ((this.mUIPanel1Grip == null))
                {
                    this.mUIPanel1Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUIPanel1Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIPanel1Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIPanel1MenuBar;
        
        private WinTitleBar mUIPanel1TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIPanel1MenuBar1;
        
        private WinClient mUIPanel1Client;
        
        private WinWindow mUIImpressionsWindow;
        
        private WinText mUIImpressionsText;
        
        private UIVerticalScrollBar12 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar12 mUIHorizontalScrollBar;
        
        private WinControl mUIPanel1Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar12 : WinScrollBar
    {
        
        public UIVerticalScrollBar12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar12 : WinScrollBar
    {
        
        public UIHorizontalScrollBar12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIImpressionsWindow : WinWindow
    {
        
        public UIImpressionsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "nameLabelControl";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "4";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UINameLabelControlMenuBar
        {
            get
            {
                if ((this.mUINameLabelControlMenuBar == null))
                {
                    this.mUINameLabelControlMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUINameLabelControlMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUINameLabelControlMenuBar;
            }
        }
        
        public WinTitleBar UIImpressionsTitleBar
        {
            get
            {
                if ((this.mUIImpressionsTitleBar == null))
                {
                    this.mUIImpressionsTitleBar = new WinTitleBar(this);
                }
                return this.mUIImpressionsTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UINameLabelControlMenuBar1
        {
            get
            {
                if ((this.mUINameLabelControlMenuBar1 == null))
                {
                    this.mUINameLabelControlMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUINameLabelControlMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUINameLabelControlMenuBar1;
            }
        }
        
        public UIImpressionsScrollBar UIImpressionsScrollBar
        {
            get
            {
                if ((this.mUIImpressionsScrollBar == null))
                {
                    this.mUIImpressionsScrollBar = new UIImpressionsScrollBar(this);
                }
                return this.mUIImpressionsScrollBar;
            }
        }
        
        public UIImpressionsScrollBar1 UIImpressionsScrollBar1
        {
            get
            {
                if ((this.mUIImpressionsScrollBar1 == null))
                {
                    this.mUIImpressionsScrollBar1 = new UIImpressionsScrollBar1(this);
                }
                return this.mUIImpressionsScrollBar1;
            }
        }
        
        public WinControl UIImpressionsGrip
        {
            get
            {
                if ((this.mUIImpressionsGrip == null))
                {
                    this.mUIImpressionsGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIImpressionsGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIImpressionsGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUINameLabelControlMenuBar;
        
        private WinTitleBar mUIImpressionsTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUINameLabelControlMenuBar1;
        
        private UIImpressionsScrollBar mUIImpressionsScrollBar;
        
        private UIImpressionsScrollBar1 mUIImpressionsScrollBar1;
        
        private WinControl mUIImpressionsGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIImpressionsScrollBar : WinScrollBar
    {
        
        public UIImpressionsScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIImpressionsScrollBar1 : WinScrollBar
    {
        
        public UIImpressionsScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UILegendGridControlWindow : WinWindow
    {
        
        public UILegendGridControlWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "legendGridControl";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "4";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UILegendGridControlMenuBar
        {
            get
            {
                if ((this.mUILegendGridControlMenuBar == null))
                {
                    this.mUILegendGridControlMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILegendGridControlMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUILegendGridControlMenuBar;
            }
        }
        
        public WinTitleBar UILegendGridControlTitleBar
        {
            get
            {
                if ((this.mUILegendGridControlTitleBar == null))
                {
                    this.mUILegendGridControlTitleBar = new WinTitleBar(this);
                }
                return this.mUILegendGridControlTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UILegendGridControlMenuBar1
        {
            get
            {
                if ((this.mUILegendGridControlMenuBar1 == null))
                {
                    this.mUILegendGridControlMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILegendGridControlMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUILegendGridControlMenuBar1;
            }
        }
        
        public UILegendGridControlTable UILegendGridControlTable
        {
            get
            {
                if ((this.mUILegendGridControlTable == null))
                {
                    this.mUILegendGridControlTable = new UILegendGridControlTable(this);
                }
                return this.mUILegendGridControlTable;
            }
        }
        
        public WinClient UIHeaderPanelClient
        {
            get
            {
                if ((this.mUIHeaderPanelClient == null))
                {
                    this.mUIHeaderPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIHeaderPanelClient.SearchProperties[WinControl.PropertyNames.Name] = "Header Panel";
                    #endregion
                }
                return this.mUIHeaderPanelClient;
            }
        }
        
        public WinClient UIDataPanelClient
        {
            get
            {
                if ((this.mUIDataPanelClient == null))
                {
                    this.mUIDataPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIDataPanelClient.SearchProperties[WinControl.PropertyNames.Name] = "Data Panel";
                    #endregion
                }
                return this.mUIDataPanelClient;
            }
        }
        
        public UIRow1Row1 UIRow1Row
        {
            get
            {
                if ((this.mUIRow1Row == null))
                {
                    this.mUIRow1Row = new UIRow1Row1(this);
                }
                return this.mUIRow1Row;
            }
        }
        
        public UIVerticalScrollBar13 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar13(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar13 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar13(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UILegendGridControlGrip
        {
            get
            {
                if ((this.mUILegendGridControlGrip == null))
                {
                    this.mUILegendGridControlGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUILegendGridControlGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUILegendGridControlGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUILegendGridControlMenuBar;
        
        private WinTitleBar mUILegendGridControlTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUILegendGridControlMenuBar1;
        
        private UILegendGridControlTable mUILegendGridControlTable;
        
        private WinClient mUIHeaderPanelClient;
        
        private WinClient mUIDataPanelClient;
        
        private UIRow1Row1 mUIRow1Row;
        
        private UIVerticalScrollBar13 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar13 mUIHorizontalScrollBar;
        
        private WinControl mUILegendGridControlGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UILegendGridControlTable : WinTable
    {
        
        public UILegendGridControlTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public UIHeaderPanelClient1 UIHeaderPanelClient
        {
            get
            {
                if ((this.mUIHeaderPanelClient == null))
                {
                    this.mUIHeaderPanelClient = new UIHeaderPanelClient1(this);
                }
                return this.mUIHeaderPanelClient;
            }
        }
        
        public UIDataPanelClient1 UIDataPanelClient
        {
            get
            {
                if ((this.mUIDataPanelClient == null))
                {
                    this.mUIDataPanelClient = new UIDataPanelClient1(this);
                }
                return this.mUIDataPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UIHeaderPanelClient1 mUIHeaderPanelClient;
        
        private UIDataPanelClient1 mUIDataPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHeaderPanelClient1 : WinClient
    {
        
        public UIHeaderPanelClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinRowHeader UIItemRowHeader
        {
            get
            {
                if ((this.mUIItemRowHeader == null))
                {
                    this.mUIItemRowHeader = new WinRowHeader(this);
                }
                return this.mUIItemRowHeader;
            }
        }
        
        public WinRowHeader UIItemRowHeader1
        {
            get
            {
                if ((this.mUIItemRowHeader1 == null))
                {
                    this.mUIItemRowHeader1 = new WinRowHeader(this);
                }
                return this.mUIItemRowHeader1;
            }
        }
        
        public WinRowHeader UIItemRowHeader2
        {
            get
            {
                if ((this.mUIItemRowHeader2 == null))
                {
                    this.mUIItemRowHeader2 = new WinRowHeader(this);
                }
                return this.mUIItemRowHeader2;
            }
        }
        
        public WinRowHeader UIItemRowHeader3
        {
            get
            {
                if ((this.mUIItemRowHeader3 == null))
                {
                    this.mUIItemRowHeader3 = new WinRowHeader(this);
                }
                return this.mUIItemRowHeader3;
            }
        }
        #endregion
        
        #region Fields
        private WinRowHeader mUIItemRowHeader;
        
        private WinRowHeader mUIItemRowHeader1;
        
        private WinRowHeader mUIItemRowHeader2;
        
        private WinRowHeader mUIItemRowHeader3;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDataPanelClient1 : WinClient
    {
        
        public UIDataPanelClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Data Panel";
            #endregion
        }
        
        #region Properties
        public WinRow UIRow1Row
        {
            get
            {
                if ((this.mUIRow1Row == null))
                {
                    this.mUIRow1Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow1Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 1";
                    this.mUIRow1Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow1Row;
            }
        }
        #endregion
        
        #region Fields
        private WinRow mUIRow1Row;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRow1Row1 : WinRow
    {
        
        public UIRow1Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Name] = "Row 1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIColorrow0Cell
        {
            get
            {
                if ((this.mUIColorrow0Cell == null))
                {
                    this.mUIColorrow0Cell = new WinCell(this);
                }
                return this.mUIColorrow0Cell;
            }
        }
        
        public WinCell UICampaignCell
        {
            get
            {
                if ((this.mUICampaignCell == null))
                {
                    this.mUICampaignCell = new WinCell(this);
                    #region Search Criteria
                    this.mUICampaignCell.SearchProperties[WinCell.PropertyNames.Value] = "Campaign";
                    #endregion
                }
                return this.mUICampaignCell;
            }
        }
        
        public WinCell UIItem0Cell
        {
            get
            {
                if ((this.mUIItem0Cell == null))
                {
                    this.mUIItem0Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell.SearchProperties[WinCell.PropertyNames.Value] = "0";
                    #endregion
                }
                return this.mUIItem0Cell;
            }
        }
        
        public WinCell UIItem000Cell
        {
            get
            {
                if ((this.mUIItem000Cell == null))
                {
                    this.mUIItem000Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem000Cell.SearchProperties[WinCell.PropertyNames.Value] = "0.00 %";
                    #endregion
                }
                return this.mUIItem000Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIColorrow0Cell;
        
        private WinCell mUICampaignCell;
        
        private WinCell mUIItem0Cell;
        
        private WinCell mUIItem000Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar13 : WinScrollBar
    {
        
        public UIVerticalScrollBar13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar13 : WinScrollBar
    {
        
        public UIHorizontalScrollBar13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPieChartWindow : WinWindow
    {
        
        public UIPieChartWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "pieChart";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "4";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIPieChartMenuBar
        {
            get
            {
                if ((this.mUIPieChartMenuBar == null))
                {
                    this.mUIPieChartMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPieChartMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIPieChartMenuBar;
            }
        }
        
        public WinTitleBar UIPieChartTitleBar
        {
            get
            {
                if ((this.mUIPieChartTitleBar == null))
                {
                    this.mUIPieChartTitleBar = new WinTitleBar(this);
                }
                return this.mUIPieChartTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIPieChartMenuBar1
        {
            get
            {
                if ((this.mUIPieChartMenuBar1 == null))
                {
                    this.mUIPieChartMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPieChartMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIPieChartMenuBar1;
            }
        }
        
        public WinClient UIPieChartClient
        {
            get
            {
                if ((this.mUIPieChartClient == null))
                {
                    this.mUIPieChartClient = new WinClient(this);
                }
                return this.mUIPieChartClient;
            }
        }
        
        public UIVerticalScrollBar14 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar14(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar14 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar14(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIPieChartGrip
        {
            get
            {
                if ((this.mUIPieChartGrip == null))
                {
                    this.mUIPieChartGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIPieChartGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIPieChartGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIPieChartMenuBar;
        
        private WinTitleBar mUIPieChartTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIPieChartMenuBar1;
        
        private WinClient mUIPieChartClient;
        
        private UIVerticalScrollBar14 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar14 mUIHorizontalScrollBar;
        
        private WinControl mUIPieChartGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar14 : WinScrollBar
    {
        
        public UIVerticalScrollBar14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar14 : WinScrollBar
    {
        
        public UIHorizontalScrollBar14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIBasicIndicatorPieChaWindow1 : WinWindow
    {
        
        public UIBasicIndicatorPieChaWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "basicIndicatorPieChartControl2";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIBasicIndicatorPieChaMenuBar
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaMenuBar == null))
                {
                    this.mUIBasicIndicatorPieChaMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIBasicIndicatorPieChaMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIBasicIndicatorPieChaMenuBar;
            }
        }
        
        public WinTitleBar UIBasicIndicatorPieChaTitleBar
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaTitleBar == null))
                {
                    this.mUIBasicIndicatorPieChaTitleBar = new WinTitleBar(this);
                }
                return this.mUIBasicIndicatorPieChaTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIBasicIndicatorPieChaMenuBar1
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaMenuBar1 == null))
                {
                    this.mUIBasicIndicatorPieChaMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIBasicIndicatorPieChaMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIBasicIndicatorPieChaMenuBar1;
            }
        }
        
        public WinClient UIBasicIndicatorPieChaClient
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaClient == null))
                {
                    this.mUIBasicIndicatorPieChaClient = new WinClient(this);
                }
                return this.mUIBasicIndicatorPieChaClient;
            }
        }
        
        public WinWindow UILabel1Window
        {
            get
            {
                if ((this.mUILabel1Window == null))
                {
                    this.mUILabel1Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUILabel1Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUILabel1Window;
            }
        }
        
        public WinWindow UIPanel1Window
        {
            get
            {
                if ((this.mUIPanel1Window == null))
                {
                    this.mUIPanel1Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUIPanel1Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIPanel1Window.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
                    #endregion
                }
                return this.mUIPanel1Window;
            }
        }
        
        public WinWindow UILegendGridControlWindow
        {
            get
            {
                if ((this.mUILegendGridControlWindow == null))
                {
                    this.mUILegendGridControlWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUILegendGridControlWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUILegendGridControlWindow.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
                    #endregion
                }
                return this.mUILegendGridControlWindow;
            }
        }
        
        public WinWindow UIPieChartWindow
        {
            get
            {
                if ((this.mUIPieChartWindow == null))
                {
                    this.mUIPieChartWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIPieChartWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIPieChartWindow.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    #endregion
                }
                return this.mUIPieChartWindow;
            }
        }
        
        public UIVerticalScrollBar15 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar15(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar15 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar15(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIBasicIndicatorPieChaGrip
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaGrip == null))
                {
                    this.mUIBasicIndicatorPieChaGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIBasicIndicatorPieChaGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIBasicIndicatorPieChaGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIBasicIndicatorPieChaMenuBar;
        
        private WinTitleBar mUIBasicIndicatorPieChaTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIBasicIndicatorPieChaMenuBar1;
        
        private WinClient mUIBasicIndicatorPieChaClient;
        
        private WinWindow mUILabel1Window;
        
        private WinWindow mUIPanel1Window;
        
        private WinWindow mUILegendGridControlWindow;
        
        private WinWindow mUIPieChartWindow;
        
        private UIVerticalScrollBar15 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar15 mUIHorizontalScrollBar;
        
        private WinControl mUIBasicIndicatorPieChaGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar15 : WinScrollBar
    {
        
        public UIVerticalScrollBar15(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar15 : WinScrollBar
    {
        
        public UIHorizontalScrollBar15(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UILabel1Window1 : WinWindow
    {
        
        public UILabel1Window1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "label1";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "4";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UILabel1MenuBar
        {
            get
            {
                if ((this.mUILabel1MenuBar == null))
                {
                    this.mUILabel1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabel1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUILabel1MenuBar;
            }
        }
        
        public WinTitleBar UILabel1TitleBar
        {
            get
            {
                if ((this.mUILabel1TitleBar == null))
                {
                    this.mUILabel1TitleBar = new WinTitleBar(this);
                }
                return this.mUILabel1TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UILabel1MenuBar1
        {
            get
            {
                if ((this.mUILabel1MenuBar1 == null))
                {
                    this.mUILabel1MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabel1MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUILabel1MenuBar1;
            }
        }
        
        public WinText UILabel1Text
        {
            get
            {
                if ((this.mUILabel1Text == null))
                {
                    this.mUILabel1Text = new WinText(this);
                }
                return this.mUILabel1Text;
            }
        }
        
        public UIVerticalScrollBar16 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar16(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar16 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar16(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UILabel1Grip
        {
            get
            {
                if ((this.mUILabel1Grip == null))
                {
                    this.mUILabel1Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUILabel1Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUILabel1Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUILabel1MenuBar;
        
        private WinTitleBar mUILabel1TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUILabel1MenuBar1;
        
        private WinText mUILabel1Text;
        
        private UIVerticalScrollBar16 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar16 mUIHorizontalScrollBar;
        
        private WinControl mUILabel1Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar16 : WinScrollBar
    {
        
        public UIVerticalScrollBar16(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar16 : WinScrollBar
    {
        
        public UIHorizontalScrollBar16(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPanel1Window2 : WinWindow
    {
        
        public UIPanel1Window2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "panel1";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "4";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIPanel1MenuBar
        {
            get
            {
                if ((this.mUIPanel1MenuBar == null))
                {
                    this.mUIPanel1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanel1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIPanel1MenuBar;
            }
        }
        
        public WinTitleBar UIPanel1TitleBar
        {
            get
            {
                if ((this.mUIPanel1TitleBar == null))
                {
                    this.mUIPanel1TitleBar = new WinTitleBar(this);
                }
                return this.mUIPanel1TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIPanel1MenuBar1
        {
            get
            {
                if ((this.mUIPanel1MenuBar1 == null))
                {
                    this.mUIPanel1MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanel1MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIPanel1MenuBar1;
            }
        }
        
        public WinClient UIPanel1Client
        {
            get
            {
                if ((this.mUIPanel1Client == null))
                {
                    this.mUIPanel1Client = new WinClient(this);
                }
                return this.mUIPanel1Client;
            }
        }
        
        public WinWindow UIClicksWindow
        {
            get
            {
                if ((this.mUIClicksWindow == null))
                {
                    this.mUIClicksWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIClicksWindow.SearchProperties[WinWindow.PropertyNames.Name] = "Clicks";
                    this.mUIClicksWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIClicksWindow;
            }
        }
        
        public WinText UIClicksText
        {
            get
            {
                if ((this.mUIClicksText == null))
                {
                    this.mUIClicksText = new WinText(this);
                    #region Search Criteria
                    this.mUIClicksText.SearchProperties[WinText.PropertyNames.Name] = "Clicks";
                    #endregion
                }
                return this.mUIClicksText;
            }
        }
        
        public UIVerticalScrollBar17 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar17(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar17 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar17(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIPanel1Grip
        {
            get
            {
                if ((this.mUIPanel1Grip == null))
                {
                    this.mUIPanel1Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUIPanel1Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIPanel1Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIPanel1MenuBar;
        
        private WinTitleBar mUIPanel1TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIPanel1MenuBar1;
        
        private WinClient mUIPanel1Client;
        
        private WinWindow mUIClicksWindow;
        
        private WinText mUIClicksText;
        
        private UIVerticalScrollBar17 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar17 mUIHorizontalScrollBar;
        
        private WinControl mUIPanel1Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar17 : WinScrollBar
    {
        
        public UIVerticalScrollBar17(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar17 : WinScrollBar
    {
        
        public UIHorizontalScrollBar17(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIClicksWindow : WinWindow
    {
        
        public UIClicksWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "nameLabelControl";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UINameLabelControlMenuBar
        {
            get
            {
                if ((this.mUINameLabelControlMenuBar == null))
                {
                    this.mUINameLabelControlMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUINameLabelControlMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUINameLabelControlMenuBar;
            }
        }
        
        public WinTitleBar UIClicksTitleBar
        {
            get
            {
                if ((this.mUIClicksTitleBar == null))
                {
                    this.mUIClicksTitleBar = new WinTitleBar(this);
                }
                return this.mUIClicksTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UINameLabelControlMenuBar1
        {
            get
            {
                if ((this.mUINameLabelControlMenuBar1 == null))
                {
                    this.mUINameLabelControlMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUINameLabelControlMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUINameLabelControlMenuBar1;
            }
        }
        
        public UIClicksScrollBar UIClicksScrollBar
        {
            get
            {
                if ((this.mUIClicksScrollBar == null))
                {
                    this.mUIClicksScrollBar = new UIClicksScrollBar(this);
                }
                return this.mUIClicksScrollBar;
            }
        }
        
        public UIClicksScrollBar1 UIClicksScrollBar1
        {
            get
            {
                if ((this.mUIClicksScrollBar1 == null))
                {
                    this.mUIClicksScrollBar1 = new UIClicksScrollBar1(this);
                }
                return this.mUIClicksScrollBar1;
            }
        }
        
        public WinControl UIClicksGrip
        {
            get
            {
                if ((this.mUIClicksGrip == null))
                {
                    this.mUIClicksGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIClicksGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIClicksGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUINameLabelControlMenuBar;
        
        private WinTitleBar mUIClicksTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUINameLabelControlMenuBar1;
        
        private UIClicksScrollBar mUIClicksScrollBar;
        
        private UIClicksScrollBar1 mUIClicksScrollBar1;
        
        private WinControl mUIClicksGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIClicksScrollBar : WinScrollBar
    {
        
        public UIClicksScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIClicksScrollBar1 : WinScrollBar
    {
        
        public UIClicksScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UILegendGridControlWindow1 : WinWindow
    {
        
        public UILegendGridControlWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "legendGridControl";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UILegendGridControlMenuBar
        {
            get
            {
                if ((this.mUILegendGridControlMenuBar == null))
                {
                    this.mUILegendGridControlMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILegendGridControlMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUILegendGridControlMenuBar;
            }
        }
        
        public WinTitleBar UILegendGridControlTitleBar
        {
            get
            {
                if ((this.mUILegendGridControlTitleBar == null))
                {
                    this.mUILegendGridControlTitleBar = new WinTitleBar(this);
                }
                return this.mUILegendGridControlTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UILegendGridControlMenuBar1
        {
            get
            {
                if ((this.mUILegendGridControlMenuBar1 == null))
                {
                    this.mUILegendGridControlMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILegendGridControlMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUILegendGridControlMenuBar1;
            }
        }
        
        public UILegendGridControlTable1 UILegendGridControlTable
        {
            get
            {
                if ((this.mUILegendGridControlTable == null))
                {
                    this.mUILegendGridControlTable = new UILegendGridControlTable1(this);
                }
                return this.mUILegendGridControlTable;
            }
        }
        
        public WinClient UIHeaderPanelClient
        {
            get
            {
                if ((this.mUIHeaderPanelClient == null))
                {
                    this.mUIHeaderPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIHeaderPanelClient.SearchProperties[WinControl.PropertyNames.Name] = "Header Panel";
                    #endregion
                }
                return this.mUIHeaderPanelClient;
            }
        }
        
        public WinClient UIDataPanelClient
        {
            get
            {
                if ((this.mUIDataPanelClient == null))
                {
                    this.mUIDataPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIDataPanelClient.SearchProperties[WinControl.PropertyNames.Name] = "Data Panel";
                    #endregion
                }
                return this.mUIDataPanelClient;
            }
        }
        
        public UIRow1Row2 UIRow1Row
        {
            get
            {
                if ((this.mUIRow1Row == null))
                {
                    this.mUIRow1Row = new UIRow1Row2(this);
                }
                return this.mUIRow1Row;
            }
        }
        
        public UIVerticalScrollBar18 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar18(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar18 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar18(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UILegendGridControlGrip
        {
            get
            {
                if ((this.mUILegendGridControlGrip == null))
                {
                    this.mUILegendGridControlGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUILegendGridControlGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUILegendGridControlGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUILegendGridControlMenuBar;
        
        private WinTitleBar mUILegendGridControlTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUILegendGridControlMenuBar1;
        
        private UILegendGridControlTable1 mUILegendGridControlTable;
        
        private WinClient mUIHeaderPanelClient;
        
        private WinClient mUIDataPanelClient;
        
        private UIRow1Row2 mUIRow1Row;
        
        private UIVerticalScrollBar18 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar18 mUIHorizontalScrollBar;
        
        private WinControl mUILegendGridControlGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UILegendGridControlTable1 : WinTable
    {
        
        public UILegendGridControlTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public UIHeaderPanelClient2 UIHeaderPanelClient
        {
            get
            {
                if ((this.mUIHeaderPanelClient == null))
                {
                    this.mUIHeaderPanelClient = new UIHeaderPanelClient2(this);
                }
                return this.mUIHeaderPanelClient;
            }
        }
        
        public UIDataPanelClient2 UIDataPanelClient
        {
            get
            {
                if ((this.mUIDataPanelClient == null))
                {
                    this.mUIDataPanelClient = new UIDataPanelClient2(this);
                }
                return this.mUIDataPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UIHeaderPanelClient2 mUIHeaderPanelClient;
        
        private UIDataPanelClient2 mUIDataPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHeaderPanelClient2 : WinClient
    {
        
        public UIHeaderPanelClient2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinRowHeader UIItemRowHeader
        {
            get
            {
                if ((this.mUIItemRowHeader == null))
                {
                    this.mUIItemRowHeader = new WinRowHeader(this);
                }
                return this.mUIItemRowHeader;
            }
        }
        
        public WinRowHeader UIItemRowHeader1
        {
            get
            {
                if ((this.mUIItemRowHeader1 == null))
                {
                    this.mUIItemRowHeader1 = new WinRowHeader(this);
                }
                return this.mUIItemRowHeader1;
            }
        }
        
        public WinRowHeader UIItemRowHeader2
        {
            get
            {
                if ((this.mUIItemRowHeader2 == null))
                {
                    this.mUIItemRowHeader2 = new WinRowHeader(this);
                }
                return this.mUIItemRowHeader2;
            }
        }
        
        public WinRowHeader UIItemRowHeader3
        {
            get
            {
                if ((this.mUIItemRowHeader3 == null))
                {
                    this.mUIItemRowHeader3 = new WinRowHeader(this);
                }
                return this.mUIItemRowHeader3;
            }
        }
        #endregion
        
        #region Fields
        private WinRowHeader mUIItemRowHeader;
        
        private WinRowHeader mUIItemRowHeader1;
        
        private WinRowHeader mUIItemRowHeader2;
        
        private WinRowHeader mUIItemRowHeader3;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDataPanelClient2 : WinClient
    {
        
        public UIDataPanelClient2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Data Panel";
            #endregion
        }
        
        #region Properties
        public WinRow UIRow1Row
        {
            get
            {
                if ((this.mUIRow1Row == null))
                {
                    this.mUIRow1Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow1Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 1";
                    this.mUIRow1Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow1Row;
            }
        }
        #endregion
        
        #region Fields
        private WinRow mUIRow1Row;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRow1Row2 : WinRow
    {
        
        public UIRow1Row2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Name] = "Row 1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIColorrow0Cell
        {
            get
            {
                if ((this.mUIColorrow0Cell == null))
                {
                    this.mUIColorrow0Cell = new WinCell(this);
                }
                return this.mUIColorrow0Cell;
            }
        }
        
        public WinCell UICampaignCell
        {
            get
            {
                if ((this.mUICampaignCell == null))
                {
                    this.mUICampaignCell = new WinCell(this);
                    #region Search Criteria
                    this.mUICampaignCell.SearchProperties[WinCell.PropertyNames.Value] = "Campaign";
                    #endregion
                }
                return this.mUICampaignCell;
            }
        }
        
        public WinCell UIItem0Cell
        {
            get
            {
                if ((this.mUIItem0Cell == null))
                {
                    this.mUIItem0Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell.SearchProperties[WinCell.PropertyNames.Value] = "0";
                    #endregion
                }
                return this.mUIItem0Cell;
            }
        }
        
        public WinCell UIItem000Cell
        {
            get
            {
                if ((this.mUIItem000Cell == null))
                {
                    this.mUIItem000Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem000Cell.SearchProperties[WinCell.PropertyNames.Value] = "0.00 %";
                    #endregion
                }
                return this.mUIItem000Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIColorrow0Cell;
        
        private WinCell mUICampaignCell;
        
        private WinCell mUIItem0Cell;
        
        private WinCell mUIItem000Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar18 : WinScrollBar
    {
        
        public UIVerticalScrollBar18(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar18 : WinScrollBar
    {
        
        public UIHorizontalScrollBar18(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPieChartWindow1 : WinWindow
    {
        
        public UIPieChartWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "pieChart";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIPieChartMenuBar
        {
            get
            {
                if ((this.mUIPieChartMenuBar == null))
                {
                    this.mUIPieChartMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPieChartMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIPieChartMenuBar;
            }
        }
        
        public WinTitleBar UIPieChartTitleBar
        {
            get
            {
                if ((this.mUIPieChartTitleBar == null))
                {
                    this.mUIPieChartTitleBar = new WinTitleBar(this);
                }
                return this.mUIPieChartTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIPieChartMenuBar1
        {
            get
            {
                if ((this.mUIPieChartMenuBar1 == null))
                {
                    this.mUIPieChartMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPieChartMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIPieChartMenuBar1;
            }
        }
        
        public WinClient UIPieChartClient
        {
            get
            {
                if ((this.mUIPieChartClient == null))
                {
                    this.mUIPieChartClient = new WinClient(this);
                }
                return this.mUIPieChartClient;
            }
        }
        
        public UIVerticalScrollBar19 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar19(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar19 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar19(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIPieChartGrip
        {
            get
            {
                if ((this.mUIPieChartGrip == null))
                {
                    this.mUIPieChartGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIPieChartGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIPieChartGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIPieChartMenuBar;
        
        private WinTitleBar mUIPieChartTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIPieChartMenuBar1;
        
        private WinClient mUIPieChartClient;
        
        private UIVerticalScrollBar19 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar19 mUIHorizontalScrollBar;
        
        private WinControl mUIPieChartGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar19 : WinScrollBar
    {
        
        public UIVerticalScrollBar19(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar19 : WinScrollBar
    {
        
        public UIHorizontalScrollBar19(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIBasicIndicatorPieChaWindow2 : WinWindow
    {
        
        public UIBasicIndicatorPieChaWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "basicIndicatorPieChartControl3";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIBasicIndicatorPieChaMenuBar
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaMenuBar == null))
                {
                    this.mUIBasicIndicatorPieChaMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIBasicIndicatorPieChaMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIBasicIndicatorPieChaMenuBar;
            }
        }
        
        public WinTitleBar UIBasicIndicatorPieChaTitleBar
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaTitleBar == null))
                {
                    this.mUIBasicIndicatorPieChaTitleBar = new WinTitleBar(this);
                }
                return this.mUIBasicIndicatorPieChaTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIBasicIndicatorPieChaMenuBar1
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaMenuBar1 == null))
                {
                    this.mUIBasicIndicatorPieChaMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIBasicIndicatorPieChaMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIBasicIndicatorPieChaMenuBar1;
            }
        }
        
        public WinClient UIBasicIndicatorPieChaClient
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaClient == null))
                {
                    this.mUIBasicIndicatorPieChaClient = new WinClient(this);
                }
                return this.mUIBasicIndicatorPieChaClient;
            }
        }
        
        public WinWindow UILabel1Window
        {
            get
            {
                if ((this.mUILabel1Window == null))
                {
                    this.mUILabel1Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUILabel1Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUILabel1Window;
            }
        }
        
        public WinWindow UIPanel1Window
        {
            get
            {
                if ((this.mUIPanel1Window == null))
                {
                    this.mUIPanel1Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUIPanel1Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIPanel1Window.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
                    #endregion
                }
                return this.mUIPanel1Window;
            }
        }
        
        public WinWindow UILegendGridControlWindow
        {
            get
            {
                if ((this.mUILegendGridControlWindow == null))
                {
                    this.mUILegendGridControlWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUILegendGridControlWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUILegendGridControlWindow.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
                    #endregion
                }
                return this.mUILegendGridControlWindow;
            }
        }
        
        public WinWindow UIPieChartWindow
        {
            get
            {
                if ((this.mUIPieChartWindow == null))
                {
                    this.mUIPieChartWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIPieChartWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIPieChartWindow.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    #endregion
                }
                return this.mUIPieChartWindow;
            }
        }
        
        public UIVerticalScrollBar20 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar20(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar20 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar20(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIBasicIndicatorPieChaGrip
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaGrip == null))
                {
                    this.mUIBasicIndicatorPieChaGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIBasicIndicatorPieChaGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIBasicIndicatorPieChaGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIBasicIndicatorPieChaMenuBar;
        
        private WinTitleBar mUIBasicIndicatorPieChaTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIBasicIndicatorPieChaMenuBar1;
        
        private WinClient mUIBasicIndicatorPieChaClient;
        
        private WinWindow mUILabel1Window;
        
        private WinWindow mUIPanel1Window;
        
        private WinWindow mUILegendGridControlWindow;
        
        private WinWindow mUIPieChartWindow;
        
        private UIVerticalScrollBar20 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar20 mUIHorizontalScrollBar;
        
        private WinControl mUIBasicIndicatorPieChaGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar20 : WinScrollBar
    {
        
        public UIVerticalScrollBar20(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar20 : WinScrollBar
    {
        
        public UIHorizontalScrollBar20(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UILabel1Window2 : WinWindow
    {
        
        public UILabel1Window2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "label1";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UILabel1MenuBar
        {
            get
            {
                if ((this.mUILabel1MenuBar == null))
                {
                    this.mUILabel1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabel1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUILabel1MenuBar;
            }
        }
        
        public WinTitleBar UILabel1TitleBar
        {
            get
            {
                if ((this.mUILabel1TitleBar == null))
                {
                    this.mUILabel1TitleBar = new WinTitleBar(this);
                }
                return this.mUILabel1TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UILabel1MenuBar1
        {
            get
            {
                if ((this.mUILabel1MenuBar1 == null))
                {
                    this.mUILabel1MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabel1MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUILabel1MenuBar1;
            }
        }
        
        public WinText UILabel1Text
        {
            get
            {
                if ((this.mUILabel1Text == null))
                {
                    this.mUILabel1Text = new WinText(this);
                }
                return this.mUILabel1Text;
            }
        }
        
        public UIVerticalScrollBar21 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar21(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar21 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar21(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UILabel1Grip
        {
            get
            {
                if ((this.mUILabel1Grip == null))
                {
                    this.mUILabel1Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUILabel1Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUILabel1Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUILabel1MenuBar;
        
        private WinTitleBar mUILabel1TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUILabel1MenuBar1;
        
        private WinText mUILabel1Text;
        
        private UIVerticalScrollBar21 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar21 mUIHorizontalScrollBar;
        
        private WinControl mUILabel1Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar21 : WinScrollBar
    {
        
        public UIVerticalScrollBar21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar21 : WinScrollBar
    {
        
        public UIHorizontalScrollBar21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPanel1Window3 : WinWindow
    {
        
        public UIPanel1Window3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "panel1";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIPanel1MenuBar
        {
            get
            {
                if ((this.mUIPanel1MenuBar == null))
                {
                    this.mUIPanel1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanel1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIPanel1MenuBar;
            }
        }
        
        public WinTitleBar UIPanel1TitleBar
        {
            get
            {
                if ((this.mUIPanel1TitleBar == null))
                {
                    this.mUIPanel1TitleBar = new WinTitleBar(this);
                }
                return this.mUIPanel1TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIPanel1MenuBar1
        {
            get
            {
                if ((this.mUIPanel1MenuBar1 == null))
                {
                    this.mUIPanel1MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanel1MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIPanel1MenuBar1;
            }
        }
        
        public WinClient UIPanel1Client
        {
            get
            {
                if ((this.mUIPanel1Client == null))
                {
                    this.mUIPanel1Client = new WinClient(this);
                }
                return this.mUIPanel1Client;
            }
        }
        
        public WinWindow UIConnectionsWindow
        {
            get
            {
                if ((this.mUIConnectionsWindow == null))
                {
                    this.mUIConnectionsWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIConnectionsWindow.SearchProperties[WinWindow.PropertyNames.Name] = "Connections";
                    this.mUIConnectionsWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIConnectionsWindow;
            }
        }
        
        public WinText UIConnectionsText
        {
            get
            {
                if ((this.mUIConnectionsText == null))
                {
                    this.mUIConnectionsText = new WinText(this);
                    #region Search Criteria
                    this.mUIConnectionsText.SearchProperties[WinText.PropertyNames.Name] = "Connections";
                    #endregion
                }
                return this.mUIConnectionsText;
            }
        }
        
        public UIVerticalScrollBar22 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar22(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar22 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar22(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIPanel1Grip
        {
            get
            {
                if ((this.mUIPanel1Grip == null))
                {
                    this.mUIPanel1Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUIPanel1Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIPanel1Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIPanel1MenuBar;
        
        private WinTitleBar mUIPanel1TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIPanel1MenuBar1;
        
        private WinClient mUIPanel1Client;
        
        private WinWindow mUIConnectionsWindow;
        
        private WinText mUIConnectionsText;
        
        private UIVerticalScrollBar22 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar22 mUIHorizontalScrollBar;
        
        private WinControl mUIPanel1Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar22 : WinScrollBar
    {
        
        public UIVerticalScrollBar22(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar22 : WinScrollBar
    {
        
        public UIHorizontalScrollBar22(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIConnectionsWindow : WinWindow
    {
        
        public UIConnectionsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "nameLabelControl";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UINameLabelControlMenuBar
        {
            get
            {
                if ((this.mUINameLabelControlMenuBar == null))
                {
                    this.mUINameLabelControlMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUINameLabelControlMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUINameLabelControlMenuBar;
            }
        }
        
        public WinTitleBar UIConnectionsTitleBar
        {
            get
            {
                if ((this.mUIConnectionsTitleBar == null))
                {
                    this.mUIConnectionsTitleBar = new WinTitleBar(this);
                }
                return this.mUIConnectionsTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UINameLabelControlMenuBar1
        {
            get
            {
                if ((this.mUINameLabelControlMenuBar1 == null))
                {
                    this.mUINameLabelControlMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUINameLabelControlMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUINameLabelControlMenuBar1;
            }
        }
        
        public UIConnectionsScrollBar UIConnectionsScrollBar
        {
            get
            {
                if ((this.mUIConnectionsScrollBar == null))
                {
                    this.mUIConnectionsScrollBar = new UIConnectionsScrollBar(this);
                }
                return this.mUIConnectionsScrollBar;
            }
        }
        
        public UIConnectionsScrollBar1 UIConnectionsScrollBar1
        {
            get
            {
                if ((this.mUIConnectionsScrollBar1 == null))
                {
                    this.mUIConnectionsScrollBar1 = new UIConnectionsScrollBar1(this);
                }
                return this.mUIConnectionsScrollBar1;
            }
        }
        
        public WinControl UIConnectionsGrip
        {
            get
            {
                if ((this.mUIConnectionsGrip == null))
                {
                    this.mUIConnectionsGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIConnectionsGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIConnectionsGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUINameLabelControlMenuBar;
        
        private WinTitleBar mUIConnectionsTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUINameLabelControlMenuBar1;
        
        private UIConnectionsScrollBar mUIConnectionsScrollBar;
        
        private UIConnectionsScrollBar1 mUIConnectionsScrollBar1;
        
        private WinControl mUIConnectionsGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIConnectionsScrollBar : WinScrollBar
    {
        
        public UIConnectionsScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIConnectionsScrollBar1 : WinScrollBar
    {
        
        public UIConnectionsScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UILegendGridControlWindow2 : WinWindow
    {
        
        public UILegendGridControlWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "legendGridControl";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UILegendGridControlMenuBar
        {
            get
            {
                if ((this.mUILegendGridControlMenuBar == null))
                {
                    this.mUILegendGridControlMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILegendGridControlMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUILegendGridControlMenuBar;
            }
        }
        
        public WinTitleBar UILegendGridControlTitleBar
        {
            get
            {
                if ((this.mUILegendGridControlTitleBar == null))
                {
                    this.mUILegendGridControlTitleBar = new WinTitleBar(this);
                }
                return this.mUILegendGridControlTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UILegendGridControlMenuBar1
        {
            get
            {
                if ((this.mUILegendGridControlMenuBar1 == null))
                {
                    this.mUILegendGridControlMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILegendGridControlMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUILegendGridControlMenuBar1;
            }
        }
        
        public UILegendGridControlTable2 UILegendGridControlTable
        {
            get
            {
                if ((this.mUILegendGridControlTable == null))
                {
                    this.mUILegendGridControlTable = new UILegendGridControlTable2(this);
                }
                return this.mUILegendGridControlTable;
            }
        }
        
        public WinClient UIHeaderPanelClient
        {
            get
            {
                if ((this.mUIHeaderPanelClient == null))
                {
                    this.mUIHeaderPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIHeaderPanelClient.SearchProperties[WinControl.PropertyNames.Name] = "Header Panel";
                    #endregion
                }
                return this.mUIHeaderPanelClient;
            }
        }
        
        public WinClient UIDataPanelClient
        {
            get
            {
                if ((this.mUIDataPanelClient == null))
                {
                    this.mUIDataPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIDataPanelClient.SearchProperties[WinControl.PropertyNames.Name] = "Data Panel";
                    #endregion
                }
                return this.mUIDataPanelClient;
            }
        }
        
        public UIRow1Row3 UIRow1Row
        {
            get
            {
                if ((this.mUIRow1Row == null))
                {
                    this.mUIRow1Row = new UIRow1Row3(this);
                }
                return this.mUIRow1Row;
            }
        }
        
        public UIVerticalScrollBar23 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar23(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar23 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar23(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UILegendGridControlGrip
        {
            get
            {
                if ((this.mUILegendGridControlGrip == null))
                {
                    this.mUILegendGridControlGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUILegendGridControlGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUILegendGridControlGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUILegendGridControlMenuBar;
        
        private WinTitleBar mUILegendGridControlTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUILegendGridControlMenuBar1;
        
        private UILegendGridControlTable2 mUILegendGridControlTable;
        
        private WinClient mUIHeaderPanelClient;
        
        private WinClient mUIDataPanelClient;
        
        private UIRow1Row3 mUIRow1Row;
        
        private UIVerticalScrollBar23 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar23 mUIHorizontalScrollBar;
        
        private WinControl mUILegendGridControlGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UILegendGridControlTable2 : WinTable
    {
        
        public UILegendGridControlTable2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public UIHeaderPanelClient3 UIHeaderPanelClient
        {
            get
            {
                if ((this.mUIHeaderPanelClient == null))
                {
                    this.mUIHeaderPanelClient = new UIHeaderPanelClient3(this);
                }
                return this.mUIHeaderPanelClient;
            }
        }
        
        public UIDataPanelClient3 UIDataPanelClient
        {
            get
            {
                if ((this.mUIDataPanelClient == null))
                {
                    this.mUIDataPanelClient = new UIDataPanelClient3(this);
                }
                return this.mUIDataPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UIHeaderPanelClient3 mUIHeaderPanelClient;
        
        private UIDataPanelClient3 mUIDataPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHeaderPanelClient3 : WinClient
    {
        
        public UIHeaderPanelClient3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinRowHeader UIItemRowHeader
        {
            get
            {
                if ((this.mUIItemRowHeader == null))
                {
                    this.mUIItemRowHeader = new WinRowHeader(this);
                }
                return this.mUIItemRowHeader;
            }
        }
        
        public WinRowHeader UIItemRowHeader1
        {
            get
            {
                if ((this.mUIItemRowHeader1 == null))
                {
                    this.mUIItemRowHeader1 = new WinRowHeader(this);
                }
                return this.mUIItemRowHeader1;
            }
        }
        
        public WinRowHeader UIItemRowHeader2
        {
            get
            {
                if ((this.mUIItemRowHeader2 == null))
                {
                    this.mUIItemRowHeader2 = new WinRowHeader(this);
                }
                return this.mUIItemRowHeader2;
            }
        }
        
        public WinRowHeader UIItemRowHeader3
        {
            get
            {
                if ((this.mUIItemRowHeader3 == null))
                {
                    this.mUIItemRowHeader3 = new WinRowHeader(this);
                }
                return this.mUIItemRowHeader3;
            }
        }
        #endregion
        
        #region Fields
        private WinRowHeader mUIItemRowHeader;
        
        private WinRowHeader mUIItemRowHeader1;
        
        private WinRowHeader mUIItemRowHeader2;
        
        private WinRowHeader mUIItemRowHeader3;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDataPanelClient3 : WinClient
    {
        
        public UIDataPanelClient3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Data Panel";
            #endregion
        }
        
        #region Properties
        public WinRow UIRow1Row
        {
            get
            {
                if ((this.mUIRow1Row == null))
                {
                    this.mUIRow1Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow1Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 1";
                    this.mUIRow1Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow1Row;
            }
        }
        #endregion
        
        #region Fields
        private WinRow mUIRow1Row;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRow1Row3 : WinRow
    {
        
        public UIRow1Row3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Name] = "Row 1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIColorrow0Cell
        {
            get
            {
                if ((this.mUIColorrow0Cell == null))
                {
                    this.mUIColorrow0Cell = new WinCell(this);
                }
                return this.mUIColorrow0Cell;
            }
        }
        
        public WinCell UICampaignCell
        {
            get
            {
                if ((this.mUICampaignCell == null))
                {
                    this.mUICampaignCell = new WinCell(this);
                    #region Search Criteria
                    this.mUICampaignCell.SearchProperties[WinCell.PropertyNames.Value] = "Campaign";
                    #endregion
                }
                return this.mUICampaignCell;
            }
        }
        
        public WinCell UIItem0Cell
        {
            get
            {
                if ((this.mUIItem0Cell == null))
                {
                    this.mUIItem0Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell.SearchProperties[WinCell.PropertyNames.Value] = "0";
                    #endregion
                }
                return this.mUIItem0Cell;
            }
        }
        
        public WinCell UIItem000Cell
        {
            get
            {
                if ((this.mUIItem000Cell == null))
                {
                    this.mUIItem000Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem000Cell.SearchProperties[WinCell.PropertyNames.Value] = "0.00 %";
                    #endregion
                }
                return this.mUIItem000Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIColorrow0Cell;
        
        private WinCell mUICampaignCell;
        
        private WinCell mUIItem0Cell;
        
        private WinCell mUIItem000Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar23 : WinScrollBar
    {
        
        public UIVerticalScrollBar23(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar23 : WinScrollBar
    {
        
        public UIHorizontalScrollBar23(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPieChartWindow2 : WinWindow
    {
        
        public UIPieChartWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "pieChart";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIPieChartMenuBar
        {
            get
            {
                if ((this.mUIPieChartMenuBar == null))
                {
                    this.mUIPieChartMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPieChartMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIPieChartMenuBar;
            }
        }
        
        public WinTitleBar UIPieChartTitleBar
        {
            get
            {
                if ((this.mUIPieChartTitleBar == null))
                {
                    this.mUIPieChartTitleBar = new WinTitleBar(this);
                }
                return this.mUIPieChartTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIPieChartMenuBar1
        {
            get
            {
                if ((this.mUIPieChartMenuBar1 == null))
                {
                    this.mUIPieChartMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPieChartMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIPieChartMenuBar1;
            }
        }
        
        public WinClient UIPieChartClient
        {
            get
            {
                if ((this.mUIPieChartClient == null))
                {
                    this.mUIPieChartClient = new WinClient(this);
                }
                return this.mUIPieChartClient;
            }
        }
        
        public UIVerticalScrollBar24 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar24(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar24 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar24(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIPieChartGrip
        {
            get
            {
                if ((this.mUIPieChartGrip == null))
                {
                    this.mUIPieChartGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIPieChartGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIPieChartGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIPieChartMenuBar;
        
        private WinTitleBar mUIPieChartTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIPieChartMenuBar1;
        
        private WinClient mUIPieChartClient;
        
        private UIVerticalScrollBar24 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar24 mUIHorizontalScrollBar;
        
        private WinControl mUIPieChartGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar24 : WinScrollBar
    {
        
        public UIVerticalScrollBar24(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar24 : WinScrollBar
    {
        
        public UIHorizontalScrollBar24(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIBasicIndicatorPieChaWindow3 : WinWindow
    {
        
        public UIBasicIndicatorPieChaWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "basicIndicatorPieChartControl4";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIBasicIndicatorPieChaMenuBar
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaMenuBar == null))
                {
                    this.mUIBasicIndicatorPieChaMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIBasicIndicatorPieChaMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIBasicIndicatorPieChaMenuBar;
            }
        }
        
        public WinTitleBar UIBasicIndicatorPieChaTitleBar
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaTitleBar == null))
                {
                    this.mUIBasicIndicatorPieChaTitleBar = new WinTitleBar(this);
                }
                return this.mUIBasicIndicatorPieChaTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIBasicIndicatorPieChaMenuBar1
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaMenuBar1 == null))
                {
                    this.mUIBasicIndicatorPieChaMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIBasicIndicatorPieChaMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIBasicIndicatorPieChaMenuBar1;
            }
        }
        
        public WinClient UIBasicIndicatorPieChaClient
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaClient == null))
                {
                    this.mUIBasicIndicatorPieChaClient = new WinClient(this);
                }
                return this.mUIBasicIndicatorPieChaClient;
            }
        }
        
        public WinWindow UILabel1Window
        {
            get
            {
                if ((this.mUILabel1Window == null))
                {
                    this.mUILabel1Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUILabel1Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUILabel1Window;
            }
        }
        
        public WinWindow UIPanel1Window
        {
            get
            {
                if ((this.mUIPanel1Window == null))
                {
                    this.mUIPanel1Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUIPanel1Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIPanel1Window.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
                    #endregion
                }
                return this.mUIPanel1Window;
            }
        }
        
        public WinWindow UILegendGridControlWindow
        {
            get
            {
                if ((this.mUILegendGridControlWindow == null))
                {
                    this.mUILegendGridControlWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUILegendGridControlWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUILegendGridControlWindow.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
                    #endregion
                }
                return this.mUILegendGridControlWindow;
            }
        }
        
        public WinWindow UIPieChartWindow
        {
            get
            {
                if ((this.mUIPieChartWindow == null))
                {
                    this.mUIPieChartWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIPieChartWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIPieChartWindow.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    #endregion
                }
                return this.mUIPieChartWindow;
            }
        }
        
        public UIVerticalScrollBar25 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar25(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar25 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar25(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIBasicIndicatorPieChaGrip
        {
            get
            {
                if ((this.mUIBasicIndicatorPieChaGrip == null))
                {
                    this.mUIBasicIndicatorPieChaGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIBasicIndicatorPieChaGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIBasicIndicatorPieChaGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIBasicIndicatorPieChaMenuBar;
        
        private WinTitleBar mUIBasicIndicatorPieChaTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIBasicIndicatorPieChaMenuBar1;
        
        private WinClient mUIBasicIndicatorPieChaClient;
        
        private WinWindow mUILabel1Window;
        
        private WinWindow mUIPanel1Window;
        
        private WinWindow mUILegendGridControlWindow;
        
        private WinWindow mUIPieChartWindow;
        
        private UIVerticalScrollBar25 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar25 mUIHorizontalScrollBar;
        
        private WinControl mUIBasicIndicatorPieChaGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar25 : WinScrollBar
    {
        
        public UIVerticalScrollBar25(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar25 : WinScrollBar
    {
        
        public UIHorizontalScrollBar25(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UILabel1Window3 : WinWindow
    {
        
        public UILabel1Window3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "label1";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UILabel1MenuBar
        {
            get
            {
                if ((this.mUILabel1MenuBar == null))
                {
                    this.mUILabel1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabel1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUILabel1MenuBar;
            }
        }
        
        public WinTitleBar UILabel1TitleBar
        {
            get
            {
                if ((this.mUILabel1TitleBar == null))
                {
                    this.mUILabel1TitleBar = new WinTitleBar(this);
                }
                return this.mUILabel1TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UILabel1MenuBar1
        {
            get
            {
                if ((this.mUILabel1MenuBar1 == null))
                {
                    this.mUILabel1MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabel1MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUILabel1MenuBar1;
            }
        }
        
        public WinText UILabel1Text
        {
            get
            {
                if ((this.mUILabel1Text == null))
                {
                    this.mUILabel1Text = new WinText(this);
                }
                return this.mUILabel1Text;
            }
        }
        
        public UIVerticalScrollBar26 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar26(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar26 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar26(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UILabel1Grip
        {
            get
            {
                if ((this.mUILabel1Grip == null))
                {
                    this.mUILabel1Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUILabel1Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUILabel1Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUILabel1MenuBar;
        
        private WinTitleBar mUILabel1TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUILabel1MenuBar1;
        
        private WinText mUILabel1Text;
        
        private UIVerticalScrollBar26 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar26 mUIHorizontalScrollBar;
        
        private WinControl mUILabel1Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar26 : WinScrollBar
    {
        
        public UIVerticalScrollBar26(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar26 : WinScrollBar
    {
        
        public UIHorizontalScrollBar26(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPanel1Window4 : WinWindow
    {
        
        public UIPanel1Window4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "panel1";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIPanel1MenuBar
        {
            get
            {
                if ((this.mUIPanel1MenuBar == null))
                {
                    this.mUIPanel1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanel1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIPanel1MenuBar;
            }
        }
        
        public WinTitleBar UIPanel1TitleBar
        {
            get
            {
                if ((this.mUIPanel1TitleBar == null))
                {
                    this.mUIPanel1TitleBar = new WinTitleBar(this);
                }
                return this.mUIPanel1TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIPanel1MenuBar1
        {
            get
            {
                if ((this.mUIPanel1MenuBar1 == null))
                {
                    this.mUIPanel1MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanel1MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIPanel1MenuBar1;
            }
        }
        
        public WinClient UIPanel1Client
        {
            get
            {
                if ((this.mUIPanel1Client == null))
                {
                    this.mUIPanel1Client = new WinClient(this);
                }
                return this.mUIPanel1Client;
            }
        }
        
        public WinWindow UISpendWindow
        {
            get
            {
                if ((this.mUISpendWindow == null))
                {
                    this.mUISpendWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUISpendWindow.SearchProperties[WinWindow.PropertyNames.Name] = "Spend";
                    this.mUISpendWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUISpendWindow;
            }
        }
        
        public WinText UISpendText
        {
            get
            {
                if ((this.mUISpendText == null))
                {
                    this.mUISpendText = new WinText(this);
                    #region Search Criteria
                    this.mUISpendText.SearchProperties[WinText.PropertyNames.Name] = "Spend";
                    #endregion
                }
                return this.mUISpendText;
            }
        }
        
        public UIVerticalScrollBar27 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar27(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar27 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar27(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIPanel1Grip
        {
            get
            {
                if ((this.mUIPanel1Grip == null))
                {
                    this.mUIPanel1Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUIPanel1Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIPanel1Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIPanel1MenuBar;
        
        private WinTitleBar mUIPanel1TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIPanel1MenuBar1;
        
        private WinClient mUIPanel1Client;
        
        private WinWindow mUISpendWindow;
        
        private WinText mUISpendText;
        
        private UIVerticalScrollBar27 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar27 mUIHorizontalScrollBar;
        
        private WinControl mUIPanel1Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar27 : WinScrollBar
    {
        
        public UIVerticalScrollBar27(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar27 : WinScrollBar
    {
        
        public UIHorizontalScrollBar27(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISpendWindow : WinWindow
    {
        
        public UISpendWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "nameLabelControl";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UINameLabelControlMenuBar
        {
            get
            {
                if ((this.mUINameLabelControlMenuBar == null))
                {
                    this.mUINameLabelControlMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUINameLabelControlMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUINameLabelControlMenuBar;
            }
        }
        
        public WinTitleBar UISpendTitleBar
        {
            get
            {
                if ((this.mUISpendTitleBar == null))
                {
                    this.mUISpendTitleBar = new WinTitleBar(this);
                }
                return this.mUISpendTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UINameLabelControlMenuBar1
        {
            get
            {
                if ((this.mUINameLabelControlMenuBar1 == null))
                {
                    this.mUINameLabelControlMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUINameLabelControlMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUINameLabelControlMenuBar1;
            }
        }
        
        public UISpendScrollBar UISpendScrollBar
        {
            get
            {
                if ((this.mUISpendScrollBar == null))
                {
                    this.mUISpendScrollBar = new UISpendScrollBar(this);
                }
                return this.mUISpendScrollBar;
            }
        }
        
        public UISpendScrollBar1 UISpendScrollBar1
        {
            get
            {
                if ((this.mUISpendScrollBar1 == null))
                {
                    this.mUISpendScrollBar1 = new UISpendScrollBar1(this);
                }
                return this.mUISpendScrollBar1;
            }
        }
        
        public WinControl UISpendGrip
        {
            get
            {
                if ((this.mUISpendGrip == null))
                {
                    this.mUISpendGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUISpendGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUISpendGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUINameLabelControlMenuBar;
        
        private WinTitleBar mUISpendTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUINameLabelControlMenuBar1;
        
        private UISpendScrollBar mUISpendScrollBar;
        
        private UISpendScrollBar1 mUISpendScrollBar1;
        
        private WinControl mUISpendGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISpendScrollBar : WinScrollBar
    {
        
        public UISpendScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISpendScrollBar1 : WinScrollBar
    {
        
        public UISpendScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UILegendGridControlWindow3 : WinWindow
    {
        
        public UILegendGridControlWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "legendGridControl";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UILegendGridControlMenuBar
        {
            get
            {
                if ((this.mUILegendGridControlMenuBar == null))
                {
                    this.mUILegendGridControlMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILegendGridControlMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUILegendGridControlMenuBar;
            }
        }
        
        public WinTitleBar UILegendGridControlTitleBar
        {
            get
            {
                if ((this.mUILegendGridControlTitleBar == null))
                {
                    this.mUILegendGridControlTitleBar = new WinTitleBar(this);
                }
                return this.mUILegendGridControlTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UILegendGridControlMenuBar1
        {
            get
            {
                if ((this.mUILegendGridControlMenuBar1 == null))
                {
                    this.mUILegendGridControlMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILegendGridControlMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUILegendGridControlMenuBar1;
            }
        }
        
        public UILegendGridControlTable3 UILegendGridControlTable
        {
            get
            {
                if ((this.mUILegendGridControlTable == null))
                {
                    this.mUILegendGridControlTable = new UILegendGridControlTable3(this);
                }
                return this.mUILegendGridControlTable;
            }
        }
        
        public WinClient UIHeaderPanelClient
        {
            get
            {
                if ((this.mUIHeaderPanelClient == null))
                {
                    this.mUIHeaderPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIHeaderPanelClient.SearchProperties[WinControl.PropertyNames.Name] = "Header Panel";
                    #endregion
                }
                return this.mUIHeaderPanelClient;
            }
        }
        
        public WinClient UIDataPanelClient
        {
            get
            {
                if ((this.mUIDataPanelClient == null))
                {
                    this.mUIDataPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIDataPanelClient.SearchProperties[WinControl.PropertyNames.Name] = "Data Panel";
                    #endregion
                }
                return this.mUIDataPanelClient;
            }
        }
        
        public UIRow1Row4 UIRow1Row
        {
            get
            {
                if ((this.mUIRow1Row == null))
                {
                    this.mUIRow1Row = new UIRow1Row4(this);
                }
                return this.mUIRow1Row;
            }
        }
        
        public UIVerticalScrollBar28 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar28(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar28 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar28(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UILegendGridControlGrip
        {
            get
            {
                if ((this.mUILegendGridControlGrip == null))
                {
                    this.mUILegendGridControlGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUILegendGridControlGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUILegendGridControlGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUILegendGridControlMenuBar;
        
        private WinTitleBar mUILegendGridControlTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUILegendGridControlMenuBar1;
        
        private UILegendGridControlTable3 mUILegendGridControlTable;
        
        private WinClient mUIHeaderPanelClient;
        
        private WinClient mUIDataPanelClient;
        
        private UIRow1Row4 mUIRow1Row;
        
        private UIVerticalScrollBar28 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar28 mUIHorizontalScrollBar;
        
        private WinControl mUILegendGridControlGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UILegendGridControlTable3 : WinTable
    {
        
        public UILegendGridControlTable3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public UIHeaderPanelClient4 UIHeaderPanelClient
        {
            get
            {
                if ((this.mUIHeaderPanelClient == null))
                {
                    this.mUIHeaderPanelClient = new UIHeaderPanelClient4(this);
                }
                return this.mUIHeaderPanelClient;
            }
        }
        
        public UIDataPanelClient4 UIDataPanelClient
        {
            get
            {
                if ((this.mUIDataPanelClient == null))
                {
                    this.mUIDataPanelClient = new UIDataPanelClient4(this);
                }
                return this.mUIDataPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UIHeaderPanelClient4 mUIHeaderPanelClient;
        
        private UIDataPanelClient4 mUIDataPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHeaderPanelClient4 : WinClient
    {
        
        public UIHeaderPanelClient4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinRowHeader UIItemRowHeader
        {
            get
            {
                if ((this.mUIItemRowHeader == null))
                {
                    this.mUIItemRowHeader = new WinRowHeader(this);
                }
                return this.mUIItemRowHeader;
            }
        }
        
        public WinRowHeader UIItemRowHeader1
        {
            get
            {
                if ((this.mUIItemRowHeader1 == null))
                {
                    this.mUIItemRowHeader1 = new WinRowHeader(this);
                }
                return this.mUIItemRowHeader1;
            }
        }
        
        public WinRowHeader UIItemRowHeader2
        {
            get
            {
                if ((this.mUIItemRowHeader2 == null))
                {
                    this.mUIItemRowHeader2 = new WinRowHeader(this);
                }
                return this.mUIItemRowHeader2;
            }
        }
        
        public WinRowHeader UIItemRowHeader3
        {
            get
            {
                if ((this.mUIItemRowHeader3 == null))
                {
                    this.mUIItemRowHeader3 = new WinRowHeader(this);
                }
                return this.mUIItemRowHeader3;
            }
        }
        #endregion
        
        #region Fields
        private WinRowHeader mUIItemRowHeader;
        
        private WinRowHeader mUIItemRowHeader1;
        
        private WinRowHeader mUIItemRowHeader2;
        
        private WinRowHeader mUIItemRowHeader3;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDataPanelClient4 : WinClient
    {
        
        public UIDataPanelClient4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Data Panel";
            #endregion
        }
        
        #region Properties
        public WinRow UIRow1Row
        {
            get
            {
                if ((this.mUIRow1Row == null))
                {
                    this.mUIRow1Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow1Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 1";
                    this.mUIRow1Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow1Row;
            }
        }
        #endregion
        
        #region Fields
        private WinRow mUIRow1Row;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRow1Row4 : WinRow
    {
        
        public UIRow1Row4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Name] = "Row 1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIColorrow0Cell
        {
            get
            {
                if ((this.mUIColorrow0Cell == null))
                {
                    this.mUIColorrow0Cell = new WinCell(this);
                }
                return this.mUIColorrow0Cell;
            }
        }
        
        public WinCell UICampaignCell
        {
            get
            {
                if ((this.mUICampaignCell == null))
                {
                    this.mUICampaignCell = new WinCell(this);
                    #region Search Criteria
                    this.mUICampaignCell.SearchProperties[WinCell.PropertyNames.Value] = "Campaign";
                    #endregion
                }
                return this.mUICampaignCell;
            }
        }
        
        public WinCell UIItem000Cell
        {
            get
            {
                if ((this.mUIItem000Cell == null))
                {
                    this.mUIItem000Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem000Cell.SearchProperties[WinCell.PropertyNames.Value] = "0.00";
                    #endregion
                }
                return this.mUIItem000Cell;
            }
        }
        
        public WinCell UIItem000Cell1
        {
            get
            {
                if ((this.mUIItem000Cell1 == null))
                {
                    this.mUIItem000Cell1 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem000Cell1.SearchProperties[WinCell.PropertyNames.Value] = "0.00 %";
                    #endregion
                }
                return this.mUIItem000Cell1;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIColorrow0Cell;
        
        private WinCell mUICampaignCell;
        
        private WinCell mUIItem000Cell;
        
        private WinCell mUIItem000Cell1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar28 : WinScrollBar
    {
        
        public UIVerticalScrollBar28(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar28 : WinScrollBar
    {
        
        public UIHorizontalScrollBar28(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPieChartWindow3 : WinWindow
    {
        
        public UIPieChartWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "pieChart";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIPieChartMenuBar
        {
            get
            {
                if ((this.mUIPieChartMenuBar == null))
                {
                    this.mUIPieChartMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPieChartMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIPieChartMenuBar;
            }
        }
        
        public WinTitleBar UIPieChartTitleBar
        {
            get
            {
                if ((this.mUIPieChartTitleBar == null))
                {
                    this.mUIPieChartTitleBar = new WinTitleBar(this);
                }
                return this.mUIPieChartTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIPieChartMenuBar1
        {
            get
            {
                if ((this.mUIPieChartMenuBar1 == null))
                {
                    this.mUIPieChartMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPieChartMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIPieChartMenuBar1;
            }
        }
        
        public WinClient UIPieChartClient
        {
            get
            {
                if ((this.mUIPieChartClient == null))
                {
                    this.mUIPieChartClient = new WinClient(this);
                }
                return this.mUIPieChartClient;
            }
        }
        
        public UIVerticalScrollBar29 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar29(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar29 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar29(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIPieChartGrip
        {
            get
            {
                if ((this.mUIPieChartGrip == null))
                {
                    this.mUIPieChartGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIPieChartGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIPieChartGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIPieChartMenuBar;
        
        private WinTitleBar mUIPieChartTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIPieChartMenuBar1;
        
        private WinClient mUIPieChartClient;
        
        private UIVerticalScrollBar29 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar29 mUIHorizontalScrollBar;
        
        private WinControl mUIPieChartGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar29 : WinScrollBar
    {
        
        public UIVerticalScrollBar29(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar29 : WinScrollBar
    {
        
        public UIHorizontalScrollBar29(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UILabel2Window : WinWindow
    {
        
        public UILabel2Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "label2";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UILabel2MenuBar
        {
            get
            {
                if ((this.mUILabel2MenuBar == null))
                {
                    this.mUILabel2MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabel2MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUILabel2MenuBar;
            }
        }
        
        public WinTitleBar UILabel2TitleBar
        {
            get
            {
                if ((this.mUILabel2TitleBar == null))
                {
                    this.mUILabel2TitleBar = new WinTitleBar(this);
                }
                return this.mUILabel2TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UILabel2MenuBar1
        {
            get
            {
                if ((this.mUILabel2MenuBar1 == null))
                {
                    this.mUILabel2MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabel2MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUILabel2MenuBar1;
            }
        }
        
        public WinText UILabel2Text
        {
            get
            {
                if ((this.mUILabel2Text == null))
                {
                    this.mUILabel2Text = new WinText(this);
                }
                return this.mUILabel2Text;
            }
        }
        
        public UIVerticalScrollBar30 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar30(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar30 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar30(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UILabel2Grip
        {
            get
            {
                if ((this.mUILabel2Grip == null))
                {
                    this.mUILabel2Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUILabel2Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUILabel2Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUILabel2MenuBar;
        
        private WinTitleBar mUILabel2TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUILabel2MenuBar1;
        
        private WinText mUILabel2Text;
        
        private UIVerticalScrollBar30 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar30 mUIHorizontalScrollBar;
        
        private WinControl mUILabel2Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar30 : WinScrollBar
    {
        
        public UIVerticalScrollBar30(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar30 : WinScrollBar
    {
        
        public UIHorizontalScrollBar30(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPanel3Window : WinWindow
    {
        
        public UIPanel3Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "panel3";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIPanel3MenuBar
        {
            get
            {
                if ((this.mUIPanel3MenuBar == null))
                {
                    this.mUIPanel3MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanel3MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIPanel3MenuBar;
            }
        }
        
        public WinTitleBar UIPanel3TitleBar
        {
            get
            {
                if ((this.mUIPanel3TitleBar == null))
                {
                    this.mUIPanel3TitleBar = new WinTitleBar(this);
                }
                return this.mUIPanel3TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIPanel3MenuBar1
        {
            get
            {
                if ((this.mUIPanel3MenuBar1 == null))
                {
                    this.mUIPanel3MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanel3MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIPanel3MenuBar1;
            }
        }
        
        public WinClient UIPanel3Client
        {
            get
            {
                if ((this.mUIPanel3Client == null))
                {
                    this.mUIPanel3Client = new WinClient(this);
                }
                return this.mUIPanel3Client;
            }
        }
        
        public WinWindow UIComboBoxShowItemWindow
        {
            get
            {
                if ((this.mUIComboBoxShowItemWindow == null))
                {
                    this.mUIComboBoxShowItemWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIComboBoxShowItemWindow.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Impressions";
                    this.mUIComboBoxShowItemWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIComboBoxShowItemWindow;
            }
        }
        
        public UIImpressionsComboBox UIImpressionsComboBox
        {
            get
            {
                if ((this.mUIImpressionsComboBox == null))
                {
                    this.mUIImpressionsComboBox = new UIImpressionsComboBox(this);
                }
                return this.mUIImpressionsComboBox;
            }
        }
        
        public WinWindow UITrendsofWindow
        {
            get
            {
                if ((this.mUITrendsofWindow == null))
                {
                    this.mUITrendsofWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUITrendsofWindow.SearchProperties[WinWindow.PropertyNames.Name] = "Trends of";
                    this.mUITrendsofWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUITrendsofWindow;
            }
        }
        
        public WinText UITrendsofText
        {
            get
            {
                if ((this.mUITrendsofText == null))
                {
                    this.mUITrendsofText = new WinText(this);
                    #region Search Criteria
                    this.mUITrendsofText.SearchProperties[WinText.PropertyNames.Name] = "Trends of";
                    #endregion
                }
                return this.mUITrendsofText;
            }
        }
        
        public WinWindow UILabel1Window
        {
            get
            {
                if ((this.mUILabel1Window == null))
                {
                    this.mUILabel1Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUILabel1Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUILabel1Window;
            }
        }
        
        public UIVerticalScrollBar31 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar31(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar31 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar31(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIPanel3Grip
        {
            get
            {
                if ((this.mUIPanel3Grip == null))
                {
                    this.mUIPanel3Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUIPanel3Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIPanel3Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIPanel3MenuBar;
        
        private WinTitleBar mUIPanel3TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIPanel3MenuBar1;
        
        private WinClient mUIPanel3Client;
        
        private WinWindow mUIComboBoxShowItemWindow;
        
        private UIImpressionsComboBox mUIImpressionsComboBox;
        
        private WinWindow mUITrendsofWindow;
        
        private WinText mUITrendsofText;
        
        private WinWindow mUILabel1Window;
        
        private UIVerticalScrollBar31 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar31 mUIHorizontalScrollBar;
        
        private WinControl mUIPanel3Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIImpressionsComboBox : WinComboBox
    {
        
        public UIImpressionsComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinComboBox.PropertyNames.Name] = "Impressions";
            #endregion
        }
        
        #region Properties
        public WinText UIImpressionsText
        {
            get
            {
                if ((this.mUIImpressionsText == null))
                {
                    this.mUIImpressionsText = new WinText(this);
                    #region Search Criteria
                    this.mUIImpressionsText.SearchProperties[WinText.PropertyNames.Name] = "Impressions";
                    #endregion
                }
                return this.mUIImpressionsText;
            }
        }
        
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        
        public WinList UIComboBoxShowItemList
        {
            get
            {
                if ((this.mUIComboBoxShowItemList == null))
                {
                    this.mUIComboBoxShowItemList = new WinList(this);
                    #region Search Criteria
                    this.mUIComboBoxShowItemList.SearchProperties[WinList.PropertyNames.Name] = "Impressions";
                    #endregion
                }
                return this.mUIComboBoxShowItemList;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIImpressionsText;
        
        private WinButton mUIOpenButton;
        
        private WinList mUIComboBoxShowItemList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar31 : WinScrollBar
    {
        
        public UIVerticalScrollBar31(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar31 : WinScrollBar
    {
        
        public UIHorizontalScrollBar31(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIComboBoxShowItemWindow : WinWindow
    {
        
        public UIComboBoxShowItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "comboBoxShowItem";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIComboBoxShowItemMenuBar
        {
            get
            {
                if ((this.mUIComboBoxShowItemMenuBar == null))
                {
                    this.mUIComboBoxShowItemMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIComboBoxShowItemMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIComboBoxShowItemMenuBar;
            }
        }
        
        public WinTitleBar UIComboBoxShowItemTitleBar
        {
            get
            {
                if ((this.mUIComboBoxShowItemTitleBar == null))
                {
                    this.mUIComboBoxShowItemTitleBar = new WinTitleBar(this);
                }
                return this.mUIComboBoxShowItemTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIComboBoxShowItemMenuBar1
        {
            get
            {
                if ((this.mUIComboBoxShowItemMenuBar1 == null))
                {
                    this.mUIComboBoxShowItemMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIComboBoxShowItemMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIComboBoxShowItemMenuBar1;
            }
        }
        
        public UIComboBoxShowItemList UIComboBoxShowItemList
        {
            get
            {
                if ((this.mUIComboBoxShowItemList == null))
                {
                    this.mUIComboBoxShowItemList = new UIComboBoxShowItemList(this);
                }
                return this.mUIComboBoxShowItemList;
            }
        }
        
        public UIVerticalScrollBar32 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar32(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar32 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar32(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIComboBoxShowItemGrip
        {
            get
            {
                if ((this.mUIComboBoxShowItemGrip == null))
                {
                    this.mUIComboBoxShowItemGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIComboBoxShowItemGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIComboBoxShowItemGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIComboBoxShowItemMenuBar;
        
        private WinTitleBar mUIComboBoxShowItemTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIComboBoxShowItemMenuBar1;
        
        private UIComboBoxShowItemList mUIComboBoxShowItemList;
        
        private UIVerticalScrollBar32 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar32 mUIHorizontalScrollBar;
        
        private WinControl mUIComboBoxShowItemGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIComboBoxShowItemList : WinList
    {
        
        public UIComboBoxShowItemList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Impressions";
            #endregion
        }
        
        #region Properties
        public WinListItem UIImpressionsListItem
        {
            get
            {
                if ((this.mUIImpressionsListItem == null))
                {
                    this.mUIImpressionsListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIImpressionsListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Impressions";
                    #endregion
                }
                return this.mUIImpressionsListItem;
            }
        }
        
        public WinListItem UISocialImpressionsListItem
        {
            get
            {
                if ((this.mUISocialImpressionsListItem == null))
                {
                    this.mUISocialImpressionsListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUISocialImpressionsListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Social Impressions";
                    #endregion
                }
                return this.mUISocialImpressionsListItem;
            }
        }
        
        public WinListItem UIUniqueImpressionsListItem
        {
            get
            {
                if ((this.mUIUniqueImpressionsListItem == null))
                {
                    this.mUIUniqueImpressionsListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIUniqueImpressionsListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Unique Impressions";
                    #endregion
                }
                return this.mUIUniqueImpressionsListItem;
            }
        }
        
        public WinListItem UIClicksListItem
        {
            get
            {
                if ((this.mUIClicksListItem == null))
                {
                    this.mUIClicksListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIClicksListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Clicks";
                    #endregion
                }
                return this.mUIClicksListItem;
            }
        }
        
        public WinListItem UISocialClicksListItem
        {
            get
            {
                if ((this.mUISocialClicksListItem == null))
                {
                    this.mUISocialClicksListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUISocialClicksListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Social Clicks";
                    #endregion
                }
                return this.mUISocialClicksListItem;
            }
        }
        
        public WinListItem UIUniqueClicksListItem
        {
            get
            {
                if ((this.mUIUniqueClicksListItem == null))
                {
                    this.mUIUniqueClicksListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIUniqueClicksListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Unique Clicks";
                    #endregion
                }
                return this.mUIUniqueClicksListItem;
            }
        }
        
        public WinListItem UIConnectionsListItem
        {
            get
            {
                if ((this.mUIConnectionsListItem == null))
                {
                    this.mUIConnectionsListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIConnectionsListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Connections";
                    #endregion
                }
                return this.mUIConnectionsListItem;
            }
        }
        
        public WinListItem UISpendListItem
        {
            get
            {
                if ((this.mUISpendListItem == null))
                {
                    this.mUISpendListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUISpendListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Spend";
                    #endregion
                }
                return this.mUISpendListItem;
            }
        }
        
        public WinListItem UIFrequencyListItem
        {
            get
            {
                if ((this.mUIFrequencyListItem == null))
                {
                    this.mUIFrequencyListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIFrequencyListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Frequency";
                    #endregion
                }
                return this.mUIFrequencyListItem;
            }
        }
        
        public WinListItem UICTRListItem
        {
            get
            {
                if ((this.mUICTRListItem == null))
                {
                    this.mUICTRListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUICTRListItem.SearchProperties[WinListItem.PropertyNames.Name] = "CTR";
                    #endregion
                }
                return this.mUICTRListItem;
            }
        }
        
        public WinListItem UISocialCTRListItem
        {
            get
            {
                if ((this.mUISocialCTRListItem == null))
                {
                    this.mUISocialCTRListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUISocialCTRListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Social CTR";
                    #endregion
                }
                return this.mUISocialCTRListItem;
            }
        }
        
        public WinListItem UIUniqueCTRListItem
        {
            get
            {
                if ((this.mUIUniqueCTRListItem == null))
                {
                    this.mUIUniqueCTRListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIUniqueCTRListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Unique CTR";
                    #endregion
                }
                return this.mUIUniqueCTRListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUIImpressionsListItem;
        
        private WinListItem mUISocialImpressionsListItem;
        
        private WinListItem mUIUniqueImpressionsListItem;
        
        private WinListItem mUIClicksListItem;
        
        private WinListItem mUISocialClicksListItem;
        
        private WinListItem mUIUniqueClicksListItem;
        
        private WinListItem mUIConnectionsListItem;
        
        private WinListItem mUISpendListItem;
        
        private WinListItem mUIFrequencyListItem;
        
        private WinListItem mUICTRListItem;
        
        private WinListItem mUISocialCTRListItem;
        
        private WinListItem mUIUniqueCTRListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar32 : WinScrollBar
    {
        
        public UIVerticalScrollBar32(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar32 : WinScrollBar
    {
        
        public UIHorizontalScrollBar32(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITrendsofWindow : WinWindow
    {
        
        public UITrendsofWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "labelControl2";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UILabelControl2MenuBar
        {
            get
            {
                if ((this.mUILabelControl2MenuBar == null))
                {
                    this.mUILabelControl2MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabelControl2MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUILabelControl2MenuBar;
            }
        }
        
        public WinTitleBar UITrendsofTitleBar
        {
            get
            {
                if ((this.mUITrendsofTitleBar == null))
                {
                    this.mUITrendsofTitleBar = new WinTitleBar(this);
                }
                return this.mUITrendsofTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UILabelControl2MenuBar1
        {
            get
            {
                if ((this.mUILabelControl2MenuBar1 == null))
                {
                    this.mUILabelControl2MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabelControl2MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUILabelControl2MenuBar1;
            }
        }
        
        public UITrendsofScrollBar UITrendsofScrollBar
        {
            get
            {
                if ((this.mUITrendsofScrollBar == null))
                {
                    this.mUITrendsofScrollBar = new UITrendsofScrollBar(this);
                }
                return this.mUITrendsofScrollBar;
            }
        }
        
        public UITrendsofScrollBar1 UITrendsofScrollBar1
        {
            get
            {
                if ((this.mUITrendsofScrollBar1 == null))
                {
                    this.mUITrendsofScrollBar1 = new UITrendsofScrollBar1(this);
                }
                return this.mUITrendsofScrollBar1;
            }
        }
        
        public WinControl UITrendsofGrip
        {
            get
            {
                if ((this.mUITrendsofGrip == null))
                {
                    this.mUITrendsofGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUITrendsofGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUITrendsofGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUILabelControl2MenuBar;
        
        private WinTitleBar mUITrendsofTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUILabelControl2MenuBar1;
        
        private UITrendsofScrollBar mUITrendsofScrollBar;
        
        private UITrendsofScrollBar1 mUITrendsofScrollBar1;
        
        private WinControl mUITrendsofGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITrendsofScrollBar : WinScrollBar
    {
        
        public UITrendsofScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITrendsofScrollBar1 : WinScrollBar
    {
        
        public UITrendsofScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UILabel1Window4 : WinWindow
    {
        
        public UILabel1Window4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "label1";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UILabel1MenuBar
        {
            get
            {
                if ((this.mUILabel1MenuBar == null))
                {
                    this.mUILabel1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabel1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUILabel1MenuBar;
            }
        }
        
        public WinTitleBar UILabel1TitleBar
        {
            get
            {
                if ((this.mUILabel1TitleBar == null))
                {
                    this.mUILabel1TitleBar = new WinTitleBar(this);
                }
                return this.mUILabel1TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UILabel1MenuBar1
        {
            get
            {
                if ((this.mUILabel1MenuBar1 == null))
                {
                    this.mUILabel1MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabel1MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUILabel1MenuBar1;
            }
        }
        
        public WinText UILabel1Text
        {
            get
            {
                if ((this.mUILabel1Text == null))
                {
                    this.mUILabel1Text = new WinText(this);
                }
                return this.mUILabel1Text;
            }
        }
        
        public UIVerticalScrollBar33 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar33(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar33 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar33(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UILabel1Grip
        {
            get
            {
                if ((this.mUILabel1Grip == null))
                {
                    this.mUILabel1Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUILabel1Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUILabel1Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUILabel1MenuBar;
        
        private WinTitleBar mUILabel1TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUILabel1MenuBar1;
        
        private WinText mUILabel1Text;
        
        private UIVerticalScrollBar33 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar33 mUIHorizontalScrollBar;
        
        private WinControl mUILabel1Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar33 : WinScrollBar
    {
        
        public UIVerticalScrollBar33(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar33 : WinScrollBar
    {
        
        public UIHorizontalScrollBar33(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITotalChartWindow : WinWindow
    {
        
        public UITotalChartWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "totalChart";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UITotalChartMenuBar
        {
            get
            {
                if ((this.mUITotalChartMenuBar == null))
                {
                    this.mUITotalChartMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUITotalChartMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUITotalChartMenuBar;
            }
        }
        
        public WinTitleBar UITotalChartTitleBar
        {
            get
            {
                if ((this.mUITotalChartTitleBar == null))
                {
                    this.mUITotalChartTitleBar = new WinTitleBar(this);
                }
                return this.mUITotalChartTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UITotalChartMenuBar1
        {
            get
            {
                if ((this.mUITotalChartMenuBar1 == null))
                {
                    this.mUITotalChartMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUITotalChartMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUITotalChartMenuBar1;
            }
        }
        
        public WinClient UITotalChartClient
        {
            get
            {
                if ((this.mUITotalChartClient == null))
                {
                    this.mUITotalChartClient = new WinClient(this);
                }
                return this.mUITotalChartClient;
            }
        }
        
        public UIVerticalScrollBar34 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar34(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar34 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar34(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UITotalChartGrip
        {
            get
            {
                if ((this.mUITotalChartGrip == null))
                {
                    this.mUITotalChartGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUITotalChartGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUITotalChartGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUITotalChartMenuBar;
        
        private WinTitleBar mUITotalChartTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUITotalChartMenuBar1;
        
        private WinClient mUITotalChartClient;
        
        private UIVerticalScrollBar34 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar34 mUIHorizontalScrollBar;
        
        private WinControl mUITotalChartGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar34 : WinScrollBar
    {
        
        public UIVerticalScrollBar34(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar34 : WinScrollBar
    {
        
        public UIHorizontalScrollBar34(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIErrorInfoViewWindow : WinWindow
    {
        
        public UIErrorInfoViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ErrorInfoView";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIErrorInfoViewMenuBar
        {
            get
            {
                if ((this.mUIErrorInfoViewMenuBar == null))
                {
                    this.mUIErrorInfoViewMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIErrorInfoViewMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIErrorInfoViewMenuBar;
            }
        }
        
        public WinTitleBar UIErrorInfoViewTitleBar
        {
            get
            {
                if ((this.mUIErrorInfoViewTitleBar == null))
                {
                    this.mUIErrorInfoViewTitleBar = new WinTitleBar(this);
                }
                return this.mUIErrorInfoViewTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIErrorInfoViewMenuBar1
        {
            get
            {
                if ((this.mUIErrorInfoViewMenuBar1 == null))
                {
                    this.mUIErrorInfoViewMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIErrorInfoViewMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIErrorInfoViewMenuBar1;
            }
        }
        
        public UIErrorInfoViewClient UIErrorInfoViewClient
        {
            get
            {
                if ((this.mUIErrorInfoViewClient == null))
                {
                    this.mUIErrorInfoViewClient = new UIErrorInfoViewClient(this);
                }
                return this.mUIErrorInfoViewClient;
            }
        }
        
        public UIVerticalScrollBar35 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar35(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar35 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar35(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIErrorInfoViewGrip
        {
            get
            {
                if ((this.mUIErrorInfoViewGrip == null))
                {
                    this.mUIErrorInfoViewGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIErrorInfoViewGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIErrorInfoViewGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIErrorInfoViewMenuBar;
        
        private WinTitleBar mUIErrorInfoViewTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIErrorInfoViewMenuBar1;
        
        private UIErrorInfoViewClient mUIErrorInfoViewClient;
        
        private UIVerticalScrollBar35 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar35 mUIHorizontalScrollBar;
        
        private WinControl mUIErrorInfoViewGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIErrorInfoViewClient : WinClient
    {
        
        public UIErrorInfoViewClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "ErrorInfoView";
            #endregion
        }
        
        #region Properties
        public WinWindow UIDGVErrorInfoWindow
        {
            get
            {
                if ((this.mUIDGVErrorInfoWindow == null))
                {
                    this.mUIDGVErrorInfoWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIDGVErrorInfoWindow.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "DGVErrorInfo";
                    this.mUIDGVErrorInfoWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIDGVErrorInfoWindow;
            }
        }
        
        public WinWindow UIPanelTopWindow
        {
            get
            {
                if ((this.mUIPanelTopWindow == null))
                {
                    this.mUIPanelTopWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIPanelTopWindow.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "panelTop";
                    this.mUIPanelTopWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIPanelTopWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUIDGVErrorInfoWindow;
        
        private WinWindow mUIPanelTopWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar35 : WinScrollBar
    {
        
        public UIVerticalScrollBar35(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar35 : WinScrollBar
    {
        
        public UIHorizontalScrollBar35(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDGVErrorInfoWindow : WinWindow
    {
        
        public UIDGVErrorInfoWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "DGVErrorInfo";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIDGVErrorInfoMenuBar
        {
            get
            {
                if ((this.mUIDGVErrorInfoMenuBar == null))
                {
                    this.mUIDGVErrorInfoMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIDGVErrorInfoMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIDGVErrorInfoMenuBar;
            }
        }
        
        public WinTitleBar UIDGVErrorInfoTitleBar
        {
            get
            {
                if ((this.mUIDGVErrorInfoTitleBar == null))
                {
                    this.mUIDGVErrorInfoTitleBar = new WinTitleBar(this);
                }
                return this.mUIDGVErrorInfoTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIDGVErrorInfoMenuBar1
        {
            get
            {
                if ((this.mUIDGVErrorInfoMenuBar1 == null))
                {
                    this.mUIDGVErrorInfoMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIDGVErrorInfoMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIDGVErrorInfoMenuBar1;
            }
        }
        
        public UIDGVErrorInfoTable UIDGVErrorInfoTable
        {
            get
            {
                if ((this.mUIDGVErrorInfoTable == null))
                {
                    this.mUIDGVErrorInfoTable = new UIDGVErrorInfoTable(this);
                }
                return this.mUIDGVErrorInfoTable;
            }
        }
        
        public UIVerticalScrollBar36 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar36(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar36 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar36(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIDGVErrorInfoGrip
        {
            get
            {
                if ((this.mUIDGVErrorInfoGrip == null))
                {
                    this.mUIDGVErrorInfoGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIDGVErrorInfoGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIDGVErrorInfoGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIDGVErrorInfoMenuBar;
        
        private WinTitleBar mUIDGVErrorInfoTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIDGVErrorInfoMenuBar1;
        
        private UIDGVErrorInfoTable mUIDGVErrorInfoTable;
        
        private UIVerticalScrollBar36 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar36 mUIHorizontalScrollBar;
        
        private WinControl mUIDGVErrorInfoGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDGVErrorInfoTable : WinTable
    {
        
        public UIDGVErrorInfoTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTable.PropertyNames.Name] = "DGVErrorInfo";
            #endregion
        }
        
        #region Properties
        public WinRow UIRow0Row
        {
            get
            {
                if ((this.mUIRow0Row == null))
                {
                    this.mUIRow0Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow0Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 0";
                    this.mUIRow0Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow0Row;
            }
        }
        
        public UIRow0Row1 UIRow0Row1
        {
            get
            {
                if ((this.mUIRow0Row1 == null))
                {
                    this.mUIRow0Row1 = new UIRow0Row1(this);
                }
                return this.mUIRow0Row1;
            }
        }
        #endregion
        
        #region Fields
        private WinRow mUIRow0Row;
        
        private UIRow0Row1 mUIRow0Row1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRow0Row1 : WinRow
    {
        
        public UIRow0Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "System.Drawing.Bitmap;The budget is required, and the value should be no less tha" +
                "n $1.";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UISystemDrawingBitmapCell
        {
            get
            {
                if ((this.mUISystemDrawingBitmapCell == null))
                {
                    this.mUISystemDrawingBitmapCell = new WinCell(this);
                    #region Search Criteria
                    this.mUISystemDrawingBitmapCell.SearchProperties[WinCell.PropertyNames.Value] = "System.Drawing.Bitmap";
                    #endregion
                }
                return this.mUISystemDrawingBitmapCell;
            }
        }
        
        public WinCell UIThebudgetisrequiredaCell
        {
            get
            {
                if ((this.mUIThebudgetisrequiredaCell == null))
                {
                    this.mUIThebudgetisrequiredaCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIThebudgetisrequiredaCell.SearchProperties[WinCell.PropertyNames.Value] = "The budget is required, and the value should be no less than $1.";
                    #endregion
                }
                return this.mUIThebudgetisrequiredaCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUISystemDrawingBitmapCell;
        
        private WinCell mUIThebudgetisrequiredaCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar36 : WinScrollBar
    {
        
        public UIVerticalScrollBar36(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar36 : WinScrollBar
    {
        
        public UIHorizontalScrollBar36(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPanelTopWindow : WinWindow
    {
        
        public UIPanelTopWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "panelTop";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIPanelTopMenuBar
        {
            get
            {
                if ((this.mUIPanelTopMenuBar == null))
                {
                    this.mUIPanelTopMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanelTopMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIPanelTopMenuBar;
            }
        }
        
        public WinTitleBar UIPanelTopTitleBar
        {
            get
            {
                if ((this.mUIPanelTopTitleBar == null))
                {
                    this.mUIPanelTopTitleBar = new WinTitleBar(this);
                }
                return this.mUIPanelTopTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIPanelTopMenuBar1
        {
            get
            {
                if ((this.mUIPanelTopMenuBar1 == null))
                {
                    this.mUIPanelTopMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanelTopMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIPanelTopMenuBar1;
            }
        }
        
        public UIPanelTopClient UIPanelTopClient
        {
            get
            {
                if ((this.mUIPanelTopClient == null))
                {
                    this.mUIPanelTopClient = new UIPanelTopClient(this);
                }
                return this.mUIPanelTopClient;
            }
        }
        
        public UIVerticalScrollBar37 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar37(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar37 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar37(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIPanelTopGrip
        {
            get
            {
                if ((this.mUIPanelTopGrip == null))
                {
                    this.mUIPanelTopGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIPanelTopGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIPanelTopGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIPanelTopMenuBar;
        
        private WinTitleBar mUIPanelTopTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIPanelTopMenuBar1;
        
        private UIPanelTopClient mUIPanelTopClient;
        
        private UIVerticalScrollBar37 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar37 mUIHorizontalScrollBar;
        
        private WinControl mUIPanelTopGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPanelTopClient : WinClient
    {
        
        public UIPanelTopClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "panelTop";
            #endregion
        }
        
        #region Properties
        public WinWindow UIErrors1Window
        {
            get
            {
                if ((this.mUIErrors1Window == null))
                {
                    this.mUIErrors1Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUIErrors1Window.SearchProperties[WinWindow.PropertyNames.Name] = "Errors: 1";
                    this.mUIErrors1Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIErrors1Window;
            }
        }
        
        public WinWindow UIPBDisplayWindow
        {
            get
            {
                if ((this.mUIPBDisplayWindow == null))
                {
                    this.mUIPBDisplayWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIPBDisplayWindow.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "PBDisplay";
                    this.mUIPBDisplayWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIPBDisplayWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUIErrors1Window;
        
        private WinWindow mUIPBDisplayWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar37 : WinScrollBar
    {
        
        public UIVerticalScrollBar37(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar37 : WinScrollBar
    {
        
        public UIHorizontalScrollBar37(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIErrors1Window : WinWindow
    {
        
        public UIErrors1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "LBErrorCaption";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UILBErrorCaptionMenuBar
        {
            get
            {
                if ((this.mUILBErrorCaptionMenuBar == null))
                {
                    this.mUILBErrorCaptionMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILBErrorCaptionMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUILBErrorCaptionMenuBar;
            }
        }
        
        public WinTitleBar UIErrors1TitleBar
        {
            get
            {
                if ((this.mUIErrors1TitleBar == null))
                {
                    this.mUIErrors1TitleBar = new WinTitleBar(this);
                }
                return this.mUIErrors1TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UILBErrorCaptionMenuBar1
        {
            get
            {
                if ((this.mUILBErrorCaptionMenuBar1 == null))
                {
                    this.mUILBErrorCaptionMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILBErrorCaptionMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUILBErrorCaptionMenuBar1;
            }
        }
        
        public WinText UIErrors1Text
        {
            get
            {
                if ((this.mUIErrors1Text == null))
                {
                    this.mUIErrors1Text = new WinText(this);
                    #region Search Criteria
                    this.mUIErrors1Text.SearchProperties[WinText.PropertyNames.Name] = "ErrorCaption";
                    #endregion
                }
                return this.mUIErrors1Text;
            }
        }
        
        public UIErrors1ScrollBar UIErrors1ScrollBar
        {
            get
            {
                if ((this.mUIErrors1ScrollBar == null))
                {
                    this.mUIErrors1ScrollBar = new UIErrors1ScrollBar(this);
                }
                return this.mUIErrors1ScrollBar;
            }
        }
        
        public UIErrors1ScrollBar1 UIErrors1ScrollBar1
        {
            get
            {
                if ((this.mUIErrors1ScrollBar1 == null))
                {
                    this.mUIErrors1ScrollBar1 = new UIErrors1ScrollBar1(this);
                }
                return this.mUIErrors1ScrollBar1;
            }
        }
        
        public WinControl UIErrors1Grip
        {
            get
            {
                if ((this.mUIErrors1Grip == null))
                {
                    this.mUIErrors1Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUIErrors1Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIErrors1Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUILBErrorCaptionMenuBar;
        
        private WinTitleBar mUIErrors1TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUILBErrorCaptionMenuBar1;
        
        private WinText mUIErrors1Text;
        
        private UIErrors1ScrollBar mUIErrors1ScrollBar;
        
        private UIErrors1ScrollBar1 mUIErrors1ScrollBar1;
        
        private WinControl mUIErrors1Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIErrors1ScrollBar : WinScrollBar
    {
        
        public UIErrors1ScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIErrors1ScrollBar1 : WinScrollBar
    {
        
        public UIErrors1ScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPBDisplayWindow : WinWindow
    {
        
        public UIPBDisplayWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "PBDisplay";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIPBDisplayMenuBar
        {
            get
            {
                if ((this.mUIPBDisplayMenuBar == null))
                {
                    this.mUIPBDisplayMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPBDisplayMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIPBDisplayMenuBar;
            }
        }
        
        public WinTitleBar UIPBDisplayTitleBar
        {
            get
            {
                if ((this.mUIPBDisplayTitleBar == null))
                {
                    this.mUIPBDisplayTitleBar = new WinTitleBar(this);
                }
                return this.mUIPBDisplayTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIPBDisplayMenuBar1
        {
            get
            {
                if ((this.mUIPBDisplayMenuBar1 == null))
                {
                    this.mUIPBDisplayMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPBDisplayMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIPBDisplayMenuBar1;
            }
        }
        
        public WinClient UIPBDisplayClient
        {
            get
            {
                if ((this.mUIPBDisplayClient == null))
                {
                    this.mUIPBDisplayClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIPBDisplayClient.SearchProperties[WinControl.PropertyNames.Name] = "PBDisplay";
                    #endregion
                }
                return this.mUIPBDisplayClient;
            }
        }
        
        public UIVerticalScrollBar38 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar38(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar38 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar38(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIPBDisplayGrip
        {
            get
            {
                if ((this.mUIPBDisplayGrip == null))
                {
                    this.mUIPBDisplayGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIPBDisplayGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIPBDisplayGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIPBDisplayMenuBar;
        
        private WinTitleBar mUIPBDisplayTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIPBDisplayMenuBar1;
        
        private WinClient mUIPBDisplayClient;
        
        private UIVerticalScrollBar38 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar38 mUIHorizontalScrollBar;
        
        private WinControl mUIPBDisplayGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar38 : WinScrollBar
    {
        
        public UIVerticalScrollBar38(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar38 : WinScrollBar
    {
        
        public UIHorizontalScrollBar38(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFacebookCampaignEditWindow : WinWindow
    {
        
        public UIFacebookCampaignEditWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "FacebookCampaignEditor";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIFacebookCampaignEditMenuBar
        {
            get
            {
                if ((this.mUIFacebookCampaignEditMenuBar == null))
                {
                    this.mUIFacebookCampaignEditMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIFacebookCampaignEditMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIFacebookCampaignEditMenuBar;
            }
        }
        
        public WinTitleBar UIFacebookCampaignEditTitleBar
        {
            get
            {
                if ((this.mUIFacebookCampaignEditTitleBar == null))
                {
                    this.mUIFacebookCampaignEditTitleBar = new WinTitleBar(this);
                }
                return this.mUIFacebookCampaignEditTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIFacebookCampaignEditMenuBar1
        {
            get
            {
                if ((this.mUIFacebookCampaignEditMenuBar1 == null))
                {
                    this.mUIFacebookCampaignEditMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIFacebookCampaignEditMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIFacebookCampaignEditMenuBar1;
            }
        }
        
        public WinClient UIFacebookCampaignEditClient
        {
            get
            {
                if ((this.mUIFacebookCampaignEditClient == null))
                {
                    this.mUIFacebookCampaignEditClient = new WinClient(this);
                }
                return this.mUIFacebookCampaignEditClient;
            }
        }
        
        public WinWindow UITxtCamNameWindow
        {
            get
            {
                if ((this.mUITxtCamNameWindow == null))
                {
                    this.mUITxtCamNameWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUITxtCamNameWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
                    this.mUITxtCamNameWindow.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
                    #endregion
                }
                return this.mUITxtCamNameWindow;
            }
        }
        
        public WinWindow UICbBudgetTypeWindow
        {
            get
            {
                if ((this.mUICbBudgetTypeWindow == null))
                {
                    this.mUICbBudgetTypeWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUICbBudgetTypeWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.COMBOBOX", PropertyExpressionOperator.Contains));
                    this.mUICbBudgetTypeWindow.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
                    #endregion
                }
                return this.mUICbBudgetTypeWindow;
            }
        }
        
        public WinWindow UITxtBudgetWindow
        {
            get
            {
                if ((this.mUITxtBudgetWindow == null))
                {
                    this.mUITxtBudgetWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUITxtBudgetWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUITxtBudgetWindow;
            }
        }
        
        public WinWindow UICbStatusWindow
        {
            get
            {
                if ((this.mUICbStatusWindow == null))
                {
                    this.mUICbStatusWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUICbStatusWindow.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "cbStatus";
                    this.mUICbStatusWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.COMBOBOX", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUICbStatusWindow;
            }
        }
        
        public WinWindow UIRunmycampaigncontinuWindow
        {
            get
            {
                if ((this.mUIRunmycampaigncontinuWindow == null))
                {
                    this.mUIRunmycampaigncontinuWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIRunmycampaigncontinuWindow.SearchProperties[WinWindow.PropertyNames.Name] = "Run my campaign continuously starting today";
                    this.mUIRunmycampaigncontinuWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.BUTTON", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIRunmycampaigncontinuWindow;
            }
        }
        
        public WinWindow UIDtpFromWindow
        {
            get
            {
                if ((this.mUIDtpFromWindow == null))
                {
                    this.mUIDtpFromWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIDtpFromWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.SysDateTimePick32", PropertyExpressionOperator.Contains));
                    this.mUIDtpFromWindow.SearchProperties[WinWindow.PropertyNames.ControlName] = "dtpFrom";
                    this.mUIDtpFromWindow.SearchProperties[WinWindow.PropertyNames.ControlId] = "4788762";
                    #endregion
                }
                return this.mUIDtpFromWindow;
            }
        }
        
        public WinWindow UIDtpToWindow
        {
            get
            {
                if ((this.mUIDtpToWindow == null))
                {
                    this.mUIDtpToWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIDtpToWindow.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "01/01/2100 00:00";
                    this.mUIDtpToWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.SysDateTimePick32", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIDtpToWindow;
            }
        }
        
        public WinWindow UICampaignNameWindow
        {
            get
            {
                if ((this.mUICampaignNameWindow == null))
                {
                    this.mUICampaignNameWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUICampaignNameWindow.SearchProperties[WinWindow.PropertyNames.Name] = "Campaign Name";
                    this.mUICampaignNameWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUICampaignNameWindow;
            }
        }
        
        public WinWindow UIBudgetUSDWindow
        {
            get
            {
                if ((this.mUIBudgetUSDWindow == null))
                {
                    this.mUIBudgetUSDWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIBudgetUSDWindow.SearchProperties[WinWindow.PropertyNames.Name] = "Budget (USD)";
                    this.mUIBudgetUSDWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIBudgetUSDWindow;
            }
        }
        
        public WinWindow UIScheduleWindow
        {
            get
            {
                if ((this.mUIScheduleWindow == null))
                {
                    this.mUIScheduleWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIScheduleWindow.SearchProperties[WinWindow.PropertyNames.Name] = "Schedule";
                    this.mUIScheduleWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIScheduleWindow;
            }
        }
        
        public WinWindow UIFromWindow
        {
            get
            {
                if ((this.mUIFromWindow == null))
                {
                    this.mUIFromWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIFromWindow.SearchProperties[WinWindow.PropertyNames.Name] = "From";
                    this.mUIFromWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIFromWindow;
            }
        }
        
        public WinWindow UITOWindow
        {
            get
            {
                if ((this.mUITOWindow == null))
                {
                    this.mUITOWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUITOWindow.SearchProperties[WinWindow.PropertyNames.Name] = "To";
                    this.mUITOWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUITOWindow;
            }
        }
        
        public WinWindow UIRunStatusWindow
        {
            get
            {
                if ((this.mUIRunStatusWindow == null))
                {
                    this.mUIRunStatusWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIRunStatusWindow.SearchProperties[WinWindow.PropertyNames.Name] = "Run Status";
                    this.mUIRunStatusWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIRunStatusWindow;
            }
        }
        
        public WinWindow UIPacificTimeWindow
        {
            get
            {
                if ((this.mUIPacificTimeWindow == null))
                {
                    this.mUIPacificTimeWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIPacificTimeWindow.SearchProperties[WinWindow.PropertyNames.Name] = "Pacific Time";
                    this.mUIPacificTimeWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIPacificTimeWindow;
            }
        }
        
        public WinWindow UIPacificTimeWindow1
        {
            get
            {
                if ((this.mUIPacificTimeWindow1 == null))
                {
                    this.mUIPacificTimeWindow1 = new WinWindow(this);
                    #region Search Criteria
                    this.mUIPacificTimeWindow1.SearchProperties[WinWindow.PropertyNames.Name] = "Pacific Time";
                    this.mUIPacificTimeWindow1.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
                    this.mUIPacificTimeWindow1.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
                    #endregion
                }
                return this.mUIPacificTimeWindow1;
            }
        }
        
        public WinWindow UILabelSplitWindow
        {
            get
            {
                if ((this.mUILabelSplitWindow == null))
                {
                    this.mUILabelSplitWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUILabelSplitWindow.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Pacific Time";
                    this.mUILabelSplitWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUILabelSplitWindow;
            }
        }
        
        public UIVerticalScrollBar39 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar39(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar39 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar39(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIFacebookCampaignEditGrip
        {
            get
            {
                if ((this.mUIFacebookCampaignEditGrip == null))
                {
                    this.mUIFacebookCampaignEditGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIFacebookCampaignEditGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIFacebookCampaignEditGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIFacebookCampaignEditMenuBar;
        
        private WinTitleBar mUIFacebookCampaignEditTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIFacebookCampaignEditMenuBar1;
        
        private WinClient mUIFacebookCampaignEditClient;
        
        private WinWindow mUITxtCamNameWindow;
        
        private WinWindow mUICbBudgetTypeWindow;
        
        private WinWindow mUITxtBudgetWindow;
        
        private WinWindow mUICbStatusWindow;
        
        private WinWindow mUIRunmycampaigncontinuWindow;
        
        private WinWindow mUIDtpFromWindow;
        
        private WinWindow mUIDtpToWindow;
        
        private WinWindow mUICampaignNameWindow;
        
        private WinWindow mUIBudgetUSDWindow;
        
        private WinWindow mUIScheduleWindow;
        
        private WinWindow mUIFromWindow;
        
        private WinWindow mUITOWindow;
        
        private WinWindow mUIRunStatusWindow;
        
        private WinWindow mUIPacificTimeWindow;
        
        private WinWindow mUIPacificTimeWindow1;
        
        private WinWindow mUILabelSplitWindow;
        
        private UIVerticalScrollBar39 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar39 mUIHorizontalScrollBar;
        
        private WinControl mUIFacebookCampaignEditGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar39 : WinScrollBar
    {
        
        public UIVerticalScrollBar39(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar39 : WinScrollBar
    {
        
        public UIHorizontalScrollBar39(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITxtCamNameWindow : WinWindow
    {
        
        public UITxtCamNameWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtCamName";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UITxtCamNameMenuBar
        {
            get
            {
                if ((this.mUITxtCamNameMenuBar == null))
                {
                    this.mUITxtCamNameMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUITxtCamNameMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUITxtCamNameMenuBar;
            }
        }
        
        public WinTitleBar UITxtCamNameTitleBar
        {
            get
            {
                if ((this.mUITxtCamNameTitleBar == null))
                {
                    this.mUITxtCamNameTitleBar = new WinTitleBar(this);
                }
                return this.mUITxtCamNameTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UITxtCamNameMenuBar1
        {
            get
            {
                if ((this.mUITxtCamNameMenuBar1 == null))
                {
                    this.mUITxtCamNameMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUITxtCamNameMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUITxtCamNameMenuBar1;
            }
        }
        
        public WinEdit UITxtCamNameEdit
        {
            get
            {
                if ((this.mUITxtCamNameEdit == null))
                {
                    this.mUITxtCamNameEdit = new WinEdit(this);
                }
                return this.mUITxtCamNameEdit;
            }
        }
        
        public UIVerticalScrollBar40 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar40(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar40 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar40(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UITxtCamNameGrip
        {
            get
            {
                if ((this.mUITxtCamNameGrip == null))
                {
                    this.mUITxtCamNameGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUITxtCamNameGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUITxtCamNameGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUITxtCamNameMenuBar;
        
        private WinTitleBar mUITxtCamNameTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUITxtCamNameMenuBar1;
        
        private WinEdit mUITxtCamNameEdit;
        
        private UIVerticalScrollBar40 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar40 mUIHorizontalScrollBar;
        
        private WinControl mUITxtCamNameGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar40 : WinScrollBar
    {
        
        public UIVerticalScrollBar40(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar40 : WinScrollBar
    {
        
        public UIHorizontalScrollBar40(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICbBudgetTypeWindow : WinWindow
    {
        
        public UICbBudgetTypeWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cbBudgetType";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UICbBudgetTypeMenuBar
        {
            get
            {
                if ((this.mUICbBudgetTypeMenuBar == null))
                {
                    this.mUICbBudgetTypeMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUICbBudgetTypeMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUICbBudgetTypeMenuBar;
            }
        }
        
        public WinTitleBar UICbBudgetTypeTitleBar
        {
            get
            {
                if ((this.mUICbBudgetTypeTitleBar == null))
                {
                    this.mUICbBudgetTypeTitleBar = new WinTitleBar(this);
                }
                return this.mUICbBudgetTypeTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UICbBudgetTypeMenuBar1
        {
            get
            {
                if ((this.mUICbBudgetTypeMenuBar1 == null))
                {
                    this.mUICbBudgetTypeMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUICbBudgetTypeMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUICbBudgetTypeMenuBar1;
            }
        }
        
        public WinComboBox UICbBudgetTypeComboBox
        {
            get
            {
                if ((this.mUICbBudgetTypeComboBox == null))
                {
                    this.mUICbBudgetTypeComboBox = new WinComboBox(this);
                }
                return this.mUICbBudgetTypeComboBox;
            }
        }
        
        public WinText UIItemText
        {
            get
            {
                if ((this.mUIItemText == null))
                {
                    this.mUIItemText = new WinText(this);
                }
                return this.mUIItemText;
            }
        }
        
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        
        public WinWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIItemWindow.SearchProperties[WinWindow.PropertyNames.ClassName] = "ComboLBox";
                    #endregion
                }
                return this.mUIItemWindow;
            }
        }
        
        public WinMenuBar UISystemMenuBar
        {
            get
            {
                if ((this.mUISystemMenuBar == null))
                {
                    this.mUISystemMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISystemMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUISystemMenuBar;
            }
        }
        
        public WinMenuBar UIApplicationMenuBar
        {
            get
            {
                if ((this.mUIApplicationMenuBar == null))
                {
                    this.mUIApplicationMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIApplicationMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIApplicationMenuBar;
            }
        }
        
        public WinScrollBar UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIVerticalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public WinScrollBar UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIHorizontalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public UIVerticalScrollBar110 UIVerticalScrollBar1
        {
            get
            {
                if ((this.mUIVerticalScrollBar1 == null))
                {
                    this.mUIVerticalScrollBar1 = new UIVerticalScrollBar110(this);
                }
                return this.mUIVerticalScrollBar1;
            }
        }
        
        public UIHorizontalScrollBar110 UIHorizontalScrollBar1
        {
            get
            {
                if ((this.mUIHorizontalScrollBar1 == null))
                {
                    this.mUIHorizontalScrollBar1 = new UIHorizontalScrollBar110(this);
                }
                return this.mUIHorizontalScrollBar1;
            }
        }
        
        public WinControl UICbBudgetTypeGrip
        {
            get
            {
                if ((this.mUICbBudgetTypeGrip == null))
                {
                    this.mUICbBudgetTypeGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUICbBudgetTypeGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUICbBudgetTypeGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUICbBudgetTypeMenuBar;
        
        private WinTitleBar mUICbBudgetTypeTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUICbBudgetTypeMenuBar1;
        
        private WinComboBox mUICbBudgetTypeComboBox;
        
        private WinText mUIItemText;
        
        private WinButton mUIOpenButton;
        
        private WinWindow mUIItemWindow;
        
        private WinMenuBar mUISystemMenuBar;
        
        private WinMenuBar mUIApplicationMenuBar;
        
        private WinScrollBar mUIVerticalScrollBar;
        
        private WinScrollBar mUIHorizontalScrollBar;
        
        private UIVerticalScrollBar110 mUIVerticalScrollBar1;
        
        private UIHorizontalScrollBar110 mUIHorizontalScrollBar1;
        
        private WinControl mUICbBudgetTypeGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar110 : WinScrollBar
    {
        
        public UIVerticalScrollBar110(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar110 : WinScrollBar
    {
        
        public UIHorizontalScrollBar110(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITxtBudgetWindow : WinWindow
    {
        
        public UITxtBudgetWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtBudget";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UITxtBudgetMenuBar
        {
            get
            {
                if ((this.mUITxtBudgetMenuBar == null))
                {
                    this.mUITxtBudgetMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUITxtBudgetMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUITxtBudgetMenuBar;
            }
        }
        
        public WinTitleBar UITxtBudgetTitleBar
        {
            get
            {
                if ((this.mUITxtBudgetTitleBar == null))
                {
                    this.mUITxtBudgetTitleBar = new WinTitleBar(this);
                }
                return this.mUITxtBudgetTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UITxtBudgetMenuBar1
        {
            get
            {
                if ((this.mUITxtBudgetMenuBar1 == null))
                {
                    this.mUITxtBudgetMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUITxtBudgetMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUITxtBudgetMenuBar1;
            }
        }
        
        public WinEdit UITxtBudgetEdit
        {
            get
            {
                if ((this.mUITxtBudgetEdit == null))
                {
                    this.mUITxtBudgetEdit = new WinEdit(this);
                }
                return this.mUITxtBudgetEdit;
            }
        }
        
        public UIVerticalScrollBar41 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar41(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar41 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar41(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UITxtBudgetGrip
        {
            get
            {
                if ((this.mUITxtBudgetGrip == null))
                {
                    this.mUITxtBudgetGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUITxtBudgetGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUITxtBudgetGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUITxtBudgetMenuBar;
        
        private WinTitleBar mUITxtBudgetTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUITxtBudgetMenuBar1;
        
        private WinEdit mUITxtBudgetEdit;
        
        private UIVerticalScrollBar41 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar41 mUIHorizontalScrollBar;
        
        private WinControl mUITxtBudgetGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar41 : WinScrollBar
    {
        
        public UIVerticalScrollBar41(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar41 : WinScrollBar
    {
        
        public UIHorizontalScrollBar41(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICbStatusWindow : WinWindow
    {
        
        public UICbStatusWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cbStatus";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UICbStatusMenuBar
        {
            get
            {
                if ((this.mUICbStatusMenuBar == null))
                {
                    this.mUICbStatusMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUICbStatusMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUICbStatusMenuBar;
            }
        }
        
        public WinTitleBar UICbStatusTitleBar
        {
            get
            {
                if ((this.mUICbStatusTitleBar == null))
                {
                    this.mUICbStatusTitleBar = new WinTitleBar(this);
                }
                return this.mUICbStatusTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UICbStatusMenuBar1
        {
            get
            {
                if ((this.mUICbStatusMenuBar1 == null))
                {
                    this.mUICbStatusMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUICbStatusMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUICbStatusMenuBar1;
            }
        }
        
        public UICbStatusComboBox UICbStatusComboBox
        {
            get
            {
                if ((this.mUICbStatusComboBox == null))
                {
                    this.mUICbStatusComboBox = new UICbStatusComboBox(this);
                }
                return this.mUICbStatusComboBox;
            }
        }
        
        public UIVerticalScrollBar42 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar42(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar42 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar42(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UICbStatusGrip
        {
            get
            {
                if ((this.mUICbStatusGrip == null))
                {
                    this.mUICbStatusGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUICbStatusGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUICbStatusGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUICbStatusMenuBar;
        
        private WinTitleBar mUICbStatusTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUICbStatusMenuBar1;
        
        private UICbStatusComboBox mUICbStatusComboBox;
        
        private UIVerticalScrollBar42 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar42 mUIHorizontalScrollBar;
        
        private WinControl mUICbStatusGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICbStatusComboBox : WinComboBox
    {
        
        public UICbStatusComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinComboBox.PropertyNames.Name] = "cbStatus";
            #endregion
        }
        
        #region Properties
        public WinText UICbStatusText
        {
            get
            {
                if ((this.mUICbStatusText == null))
                {
                    this.mUICbStatusText = new WinText(this);
                    #region Search Criteria
                    this.mUICbStatusText.SearchProperties[WinText.PropertyNames.Name] = "cbStatus";
                    #endregion
                }
                return this.mUICbStatusText;
            }
        }
        
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        
        public WinWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIItemWindow.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "cbStatus";
                    this.mUIItemWindow.SearchProperties[WinWindow.PropertyNames.ClassName] = "ComboLBox";
                    #endregion
                }
                return this.mUIItemWindow;
            }
        }
        
        public WinMenuBar UISystemMenuBar
        {
            get
            {
                if ((this.mUISystemMenuBar == null))
                {
                    this.mUISystemMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISystemMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUISystemMenuBar;
            }
        }
        
        public WinMenuBar UIApplicationMenuBar
        {
            get
            {
                if ((this.mUIApplicationMenuBar == null))
                {
                    this.mUIApplicationMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIApplicationMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIApplicationMenuBar;
            }
        }
        
        public WinList UICbStatusList
        {
            get
            {
                if ((this.mUICbStatusList == null))
                {
                    this.mUICbStatusList = new WinList(this);
                    #region Search Criteria
                    this.mUICbStatusList.SearchProperties[WinList.PropertyNames.Name] = "cbStatus";
                    #endregion
                }
                return this.mUICbStatusList;
            }
        }
        
        public WinScrollBar UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIVerticalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public WinScrollBar UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIHorizontalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUICbStatusText;
        
        private WinButton mUIOpenButton;
        
        private WinWindow mUIItemWindow;
        
        private WinMenuBar mUISystemMenuBar;
        
        private WinMenuBar mUIApplicationMenuBar;
        
        private WinList mUICbStatusList;
        
        private WinScrollBar mUIVerticalScrollBar;
        
        private WinScrollBar mUIHorizontalScrollBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar42 : WinScrollBar
    {
        
        public UIVerticalScrollBar42(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar42 : WinScrollBar
    {
        
        public UIHorizontalScrollBar42(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRunmycampaigncontinuWindow : WinWindow
    {
        
        public UIRunmycampaigncontinuWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cbContinuously";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UICbContinuouslyMenuBar
        {
            get
            {
                if ((this.mUICbContinuouslyMenuBar == null))
                {
                    this.mUICbContinuouslyMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUICbContinuouslyMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUICbContinuouslyMenuBar;
            }
        }
        
        public WinTitleBar UIRunmycampaigncontinuTitleBar
        {
            get
            {
                if ((this.mUIRunmycampaigncontinuTitleBar == null))
                {
                    this.mUIRunmycampaigncontinuTitleBar = new WinTitleBar(this);
                }
                return this.mUIRunmycampaigncontinuTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UICbContinuouslyMenuBar1
        {
            get
            {
                if ((this.mUICbContinuouslyMenuBar1 == null))
                {
                    this.mUICbContinuouslyMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUICbContinuouslyMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUICbContinuouslyMenuBar1;
            }
        }
        
        public WinCheckBox UIRunmycampaigncontinuCheckBox
        {
            get
            {
                if ((this.mUIRunmycampaigncontinuCheckBox == null))
                {
                    this.mUIRunmycampaigncontinuCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIRunmycampaigncontinuCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Run my campaign continuously starting today";
                    #endregion
                }
                return this.mUIRunmycampaigncontinuCheckBox;
            }
        }
        
        public UIRunmycampaigncontinuScrollBar UIRunmycampaigncontinuScrollBar
        {
            get
            {
                if ((this.mUIRunmycampaigncontinuScrollBar == null))
                {
                    this.mUIRunmycampaigncontinuScrollBar = new UIRunmycampaigncontinuScrollBar(this);
                }
                return this.mUIRunmycampaigncontinuScrollBar;
            }
        }
        
        public UIRunmycampaigncontinuScrollBar1 UIRunmycampaigncontinuScrollBar1
        {
            get
            {
                if ((this.mUIRunmycampaigncontinuScrollBar1 == null))
                {
                    this.mUIRunmycampaigncontinuScrollBar1 = new UIRunmycampaigncontinuScrollBar1(this);
                }
                return this.mUIRunmycampaigncontinuScrollBar1;
            }
        }
        
        public WinControl UIRunmycampaigncontinuGrip
        {
            get
            {
                if ((this.mUIRunmycampaigncontinuGrip == null))
                {
                    this.mUIRunmycampaigncontinuGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIRunmycampaigncontinuGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIRunmycampaigncontinuGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUICbContinuouslyMenuBar;
        
        private WinTitleBar mUIRunmycampaigncontinuTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUICbContinuouslyMenuBar1;
        
        private WinCheckBox mUIRunmycampaigncontinuCheckBox;
        
        private UIRunmycampaigncontinuScrollBar mUIRunmycampaigncontinuScrollBar;
        
        private UIRunmycampaigncontinuScrollBar1 mUIRunmycampaigncontinuScrollBar1;
        
        private WinControl mUIRunmycampaigncontinuGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRunmycampaigncontinuScrollBar : WinScrollBar
    {
        
        public UIRunmycampaigncontinuScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRunmycampaigncontinuScrollBar1 : WinScrollBar
    {
        
        public UIRunmycampaigncontinuScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDtpFromWindow : WinWindow
    {
        
        public UIDtpFromWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "dtpFrom";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIDtpFromMenuBar
        {
            get
            {
                if ((this.mUIDtpFromMenuBar == null))
                {
                    this.mUIDtpFromMenuBar = new WinMenuBar(this);
                }
                return this.mUIDtpFromMenuBar;
            }
        }
        
        public WinTitleBar UIDtpFromTitleBar
        {
            get
            {
                if ((this.mUIDtpFromTitleBar == null))
                {
                    this.mUIDtpFromTitleBar = new WinTitleBar(this);
                }
                return this.mUIDtpFromTitleBar;
            }
        }
        
        public WinButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WinButton(this);
                }
                return this.mUIItemButton;
            }
        }
        
        public WinButton UIItemButton1
        {
            get
            {
                if ((this.mUIItemButton1 == null))
                {
                    this.mUIItemButton1 = new WinButton(this);
                }
                return this.mUIItemButton1;
            }
        }
        
        public WinButton UIItemButton2
        {
            get
            {
                if ((this.mUIItemButton2 == null))
                {
                    this.mUIItemButton2 = new WinButton(this);
                }
                return this.mUIItemButton2;
            }
        }
        
        public WinButton UIItemButton3
        {
            get
            {
                if ((this.mUIItemButton3 == null))
                {
                    this.mUIItemButton3 = new WinButton(this);
                }
                return this.mUIItemButton3;
            }
        }
        
        public WinButton UIItemButton4
        {
            get
            {
                if ((this.mUIItemButton4 == null))
                {
                    this.mUIItemButton4 = new WinButton(this);
                }
                return this.mUIItemButton4;
            }
        }
        
        public WinMenuBar UIDtpFromMenuBar1
        {
            get
            {
                if ((this.mUIDtpFromMenuBar1 == null))
                {
                    this.mUIDtpFromMenuBar1 = new WinMenuBar(this);
                }
                return this.mUIDtpFromMenuBar1;
            }
        }
        
        public WinDateTimePicker UIDtpFromDateTimePicker
        {
            get
            {
                if ((this.mUIDtpFromDateTimePicker == null))
                {
                    this.mUIDtpFromDateTimePicker = new WinDateTimePicker(this);
                }
                return this.mUIDtpFromDateTimePicker;
            }
        }
        
        public UIDtpFromScrollBar UIDtpFromScrollBar
        {
            get
            {
                if ((this.mUIDtpFromScrollBar == null))
                {
                    this.mUIDtpFromScrollBar = new UIDtpFromScrollBar(this);
                }
                return this.mUIDtpFromScrollBar;
            }
        }
        
        public UIDtpFromScrollBar1 UIDtpFromScrollBar1
        {
            get
            {
                if ((this.mUIDtpFromScrollBar1 == null))
                {
                    this.mUIDtpFromScrollBar1 = new UIDtpFromScrollBar1(this);
                }
                return this.mUIDtpFromScrollBar1;
            }
        }
        
        public WinControl UIDtpFromGrip
        {
            get
            {
                if ((this.mUIDtpFromGrip == null))
                {
                    this.mUIDtpFromGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIDtpFromGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIDtpFromGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIDtpFromMenuBar;
        
        private WinTitleBar mUIDtpFromTitleBar;
        
        private WinButton mUIItemButton;
        
        private WinButton mUIItemButton1;
        
        private WinButton mUIItemButton2;
        
        private WinButton mUIItemButton3;
        
        private WinButton mUIItemButton4;
        
        private WinMenuBar mUIDtpFromMenuBar1;
        
        private WinDateTimePicker mUIDtpFromDateTimePicker;
        
        private UIDtpFromScrollBar mUIDtpFromScrollBar;
        
        private UIDtpFromScrollBar1 mUIDtpFromScrollBar1;
        
        private WinControl mUIDtpFromGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDtpFromScrollBar : WinScrollBar
    {
        
        public UIDtpFromScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WinButton(this);
                }
                return this.mUIItemButton;
            }
        }
        
        public WinButton UIItemButton1
        {
            get
            {
                if ((this.mUIItemButton1 == null))
                {
                    this.mUIItemButton1 = new WinButton(this);
                }
                return this.mUIItemButton1;
            }
        }
        
        public WinControl UIItemIndicator
        {
            get
            {
                if ((this.mUIItemIndicator == null))
                {
                    this.mUIItemIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIItemIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIItemIndicator;
            }
        }
        
        public WinButton UIItemButton2
        {
            get
            {
                if ((this.mUIItemButton2 == null))
                {
                    this.mUIItemButton2 = new WinButton(this);
                }
                return this.mUIItemButton2;
            }
        }
        
        public WinButton UIItemButton3
        {
            get
            {
                if ((this.mUIItemButton3 == null))
                {
                    this.mUIItemButton3 = new WinButton(this);
                }
                return this.mUIItemButton3;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItemButton;
        
        private WinButton mUIItemButton1;
        
        private WinControl mUIItemIndicator;
        
        private WinButton mUIItemButton2;
        
        private WinButton mUIItemButton3;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDtpFromScrollBar1 : WinScrollBar
    {
        
        public UIDtpFromScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WinButton(this);
                }
                return this.mUIItemButton;
            }
        }
        
        public WinButton UIItemButton1
        {
            get
            {
                if ((this.mUIItemButton1 == null))
                {
                    this.mUIItemButton1 = new WinButton(this);
                }
                return this.mUIItemButton1;
            }
        }
        
        public WinControl UIItemIndicator
        {
            get
            {
                if ((this.mUIItemIndicator == null))
                {
                    this.mUIItemIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIItemIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIItemIndicator;
            }
        }
        
        public WinButton UIItemButton2
        {
            get
            {
                if ((this.mUIItemButton2 == null))
                {
                    this.mUIItemButton2 = new WinButton(this);
                }
                return this.mUIItemButton2;
            }
        }
        
        public WinButton UIItemButton3
        {
            get
            {
                if ((this.mUIItemButton3 == null))
                {
                    this.mUIItemButton3 = new WinButton(this);
                }
                return this.mUIItemButton3;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItemButton;
        
        private WinButton mUIItemButton1;
        
        private WinControl mUIItemIndicator;
        
        private WinButton mUIItemButton2;
        
        private WinButton mUIItemButton3;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDtpToWindow : WinWindow
    {
        
        public UIDtpToWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "dtpTo";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIDtpToMenuBar
        {
            get
            {
                if ((this.mUIDtpToMenuBar == null))
                {
                    this.mUIDtpToMenuBar = new WinMenuBar(this);
                }
                return this.mUIDtpToMenuBar;
            }
        }
        
        public WinTitleBar UIDtpToTitleBar
        {
            get
            {
                if ((this.mUIDtpToTitleBar == null))
                {
                    this.mUIDtpToTitleBar = new WinTitleBar(this);
                }
                return this.mUIDtpToTitleBar;
            }
        }
        
        public WinButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WinButton(this);
                }
                return this.mUIItemButton;
            }
        }
        
        public WinButton UIItemButton1
        {
            get
            {
                if ((this.mUIItemButton1 == null))
                {
                    this.mUIItemButton1 = new WinButton(this);
                }
                return this.mUIItemButton1;
            }
        }
        
        public WinButton UIItemButton2
        {
            get
            {
                if ((this.mUIItemButton2 == null))
                {
                    this.mUIItemButton2 = new WinButton(this);
                }
                return this.mUIItemButton2;
            }
        }
        
        public WinButton UIItemButton3
        {
            get
            {
                if ((this.mUIItemButton3 == null))
                {
                    this.mUIItemButton3 = new WinButton(this);
                }
                return this.mUIItemButton3;
            }
        }
        
        public WinButton UIItemButton4
        {
            get
            {
                if ((this.mUIItemButton4 == null))
                {
                    this.mUIItemButton4 = new WinButton(this);
                }
                return this.mUIItemButton4;
            }
        }
        
        public WinMenuBar UIDtpToMenuBar1
        {
            get
            {
                if ((this.mUIDtpToMenuBar1 == null))
                {
                    this.mUIDtpToMenuBar1 = new WinMenuBar(this);
                }
                return this.mUIDtpToMenuBar1;
            }
        }
        
        public WinDateTimePicker UIDtpToDateTimePicker
        {
            get
            {
                if ((this.mUIDtpToDateTimePicker == null))
                {
                    this.mUIDtpToDateTimePicker = new WinDateTimePicker(this);
                }
                return this.mUIDtpToDateTimePicker;
            }
        }
        
        public UIDtpToScrollBar UIDtpToScrollBar
        {
            get
            {
                if ((this.mUIDtpToScrollBar == null))
                {
                    this.mUIDtpToScrollBar = new UIDtpToScrollBar(this);
                }
                return this.mUIDtpToScrollBar;
            }
        }
        
        public UIDtpToScrollBar1 UIDtpToScrollBar1
        {
            get
            {
                if ((this.mUIDtpToScrollBar1 == null))
                {
                    this.mUIDtpToScrollBar1 = new UIDtpToScrollBar1(this);
                }
                return this.mUIDtpToScrollBar1;
            }
        }
        
        public WinControl UIDtpToGrip
        {
            get
            {
                if ((this.mUIDtpToGrip == null))
                {
                    this.mUIDtpToGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIDtpToGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIDtpToGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIDtpToMenuBar;
        
        private WinTitleBar mUIDtpToTitleBar;
        
        private WinButton mUIItemButton;
        
        private WinButton mUIItemButton1;
        
        private WinButton mUIItemButton2;
        
        private WinButton mUIItemButton3;
        
        private WinButton mUIItemButton4;
        
        private WinMenuBar mUIDtpToMenuBar1;
        
        private WinDateTimePicker mUIDtpToDateTimePicker;
        
        private UIDtpToScrollBar mUIDtpToScrollBar;
        
        private UIDtpToScrollBar1 mUIDtpToScrollBar1;
        
        private WinControl mUIDtpToGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDtpToScrollBar : WinScrollBar
    {
        
        public UIDtpToScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WinButton(this);
                }
                return this.mUIItemButton;
            }
        }
        
        public WinButton UIItemButton1
        {
            get
            {
                if ((this.mUIItemButton1 == null))
                {
                    this.mUIItemButton1 = new WinButton(this);
                }
                return this.mUIItemButton1;
            }
        }
        
        public WinControl UIItemIndicator
        {
            get
            {
                if ((this.mUIItemIndicator == null))
                {
                    this.mUIItemIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIItemIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIItemIndicator;
            }
        }
        
        public WinButton UIItemButton2
        {
            get
            {
                if ((this.mUIItemButton2 == null))
                {
                    this.mUIItemButton2 = new WinButton(this);
                }
                return this.mUIItemButton2;
            }
        }
        
        public WinButton UIItemButton3
        {
            get
            {
                if ((this.mUIItemButton3 == null))
                {
                    this.mUIItemButton3 = new WinButton(this);
                }
                return this.mUIItemButton3;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItemButton;
        
        private WinButton mUIItemButton1;
        
        private WinControl mUIItemIndicator;
        
        private WinButton mUIItemButton2;
        
        private WinButton mUIItemButton3;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDtpToScrollBar1 : WinScrollBar
    {
        
        public UIDtpToScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WinButton(this);
                }
                return this.mUIItemButton;
            }
        }
        
        public WinButton UIItemButton1
        {
            get
            {
                if ((this.mUIItemButton1 == null))
                {
                    this.mUIItemButton1 = new WinButton(this);
                }
                return this.mUIItemButton1;
            }
        }
        
        public WinControl UIItemIndicator
        {
            get
            {
                if ((this.mUIItemIndicator == null))
                {
                    this.mUIItemIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIItemIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIItemIndicator;
            }
        }
        
        public WinButton UIItemButton2
        {
            get
            {
                if ((this.mUIItemButton2 == null))
                {
                    this.mUIItemButton2 = new WinButton(this);
                }
                return this.mUIItemButton2;
            }
        }
        
        public WinButton UIItemButton3
        {
            get
            {
                if ((this.mUIItemButton3 == null))
                {
                    this.mUIItemButton3 = new WinButton(this);
                }
                return this.mUIItemButton3;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItemButton;
        
        private WinButton mUIItemButton1;
        
        private WinControl mUIItemIndicator;
        
        private WinButton mUIItemButton2;
        
        private WinButton mUIItemButton3;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICampaignNameWindow : WinWindow
    {
        
        public UICampaignNameWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "label1";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "6";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UILabel1MenuBar
        {
            get
            {
                if ((this.mUILabel1MenuBar == null))
                {
                    this.mUILabel1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabel1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUILabel1MenuBar;
            }
        }
        
        public WinTitleBar UICampaignNameTitleBar
        {
            get
            {
                if ((this.mUICampaignNameTitleBar == null))
                {
                    this.mUICampaignNameTitleBar = new WinTitleBar(this);
                }
                return this.mUICampaignNameTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UILabel1MenuBar1
        {
            get
            {
                if ((this.mUILabel1MenuBar1 == null))
                {
                    this.mUILabel1MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabel1MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUILabel1MenuBar1;
            }
        }
        
        public WinText UICampaignNameText
        {
            get
            {
                if ((this.mUICampaignNameText == null))
                {
                    this.mUICampaignNameText = new WinText(this);
                    #region Search Criteria
                    this.mUICampaignNameText.SearchProperties[WinText.PropertyNames.Name] = "Campaign Name";
                    #endregion
                }
                return this.mUICampaignNameText;
            }
        }
        
        public UICampaignNameScrollBar UICampaignNameScrollBar
        {
            get
            {
                if ((this.mUICampaignNameScrollBar == null))
                {
                    this.mUICampaignNameScrollBar = new UICampaignNameScrollBar(this);
                }
                return this.mUICampaignNameScrollBar;
            }
        }
        
        public UICampaignNameScrollBar1 UICampaignNameScrollBar1
        {
            get
            {
                if ((this.mUICampaignNameScrollBar1 == null))
                {
                    this.mUICampaignNameScrollBar1 = new UICampaignNameScrollBar1(this);
                }
                return this.mUICampaignNameScrollBar1;
            }
        }
        
        public WinControl UICampaignNameGrip
        {
            get
            {
                if ((this.mUICampaignNameGrip == null))
                {
                    this.mUICampaignNameGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUICampaignNameGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUICampaignNameGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUILabel1MenuBar;
        
        private WinTitleBar mUICampaignNameTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUILabel1MenuBar1;
        
        private WinText mUICampaignNameText;
        
        private UICampaignNameScrollBar mUICampaignNameScrollBar;
        
        private UICampaignNameScrollBar1 mUICampaignNameScrollBar1;
        
        private WinControl mUICampaignNameGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICampaignNameScrollBar : WinScrollBar
    {
        
        public UICampaignNameScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICampaignNameScrollBar1 : WinScrollBar
    {
        
        public UICampaignNameScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIBudgetUSDWindow : WinWindow
    {
        
        public UIBudgetUSDWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "lblBudget";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UILblBudgetMenuBar
        {
            get
            {
                if ((this.mUILblBudgetMenuBar == null))
                {
                    this.mUILblBudgetMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILblBudgetMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUILblBudgetMenuBar;
            }
        }
        
        public WinTitleBar UIBudgetUSDTitleBar
        {
            get
            {
                if ((this.mUIBudgetUSDTitleBar == null))
                {
                    this.mUIBudgetUSDTitleBar = new WinTitleBar(this);
                }
                return this.mUIBudgetUSDTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UILblBudgetMenuBar1
        {
            get
            {
                if ((this.mUILblBudgetMenuBar1 == null))
                {
                    this.mUILblBudgetMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILblBudgetMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUILblBudgetMenuBar1;
            }
        }
        
        public WinText UIBudgetUSDText
        {
            get
            {
                if ((this.mUIBudgetUSDText == null))
                {
                    this.mUIBudgetUSDText = new WinText(this);
                    #region Search Criteria
                    this.mUIBudgetUSDText.SearchProperties[WinText.PropertyNames.Name] = "Budget (USD)";
                    #endregion
                }
                return this.mUIBudgetUSDText;
            }
        }
        
        public UIBudgetUSDScrollBar UIBudgetUSDScrollBar
        {
            get
            {
                if ((this.mUIBudgetUSDScrollBar == null))
                {
                    this.mUIBudgetUSDScrollBar = new UIBudgetUSDScrollBar(this);
                }
                return this.mUIBudgetUSDScrollBar;
            }
        }
        
        public UIBudgetUSDScrollBar1 UIBudgetUSDScrollBar1
        {
            get
            {
                if ((this.mUIBudgetUSDScrollBar1 == null))
                {
                    this.mUIBudgetUSDScrollBar1 = new UIBudgetUSDScrollBar1(this);
                }
                return this.mUIBudgetUSDScrollBar1;
            }
        }
        
        public WinControl UIBudgetUSDGrip
        {
            get
            {
                if ((this.mUIBudgetUSDGrip == null))
                {
                    this.mUIBudgetUSDGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIBudgetUSDGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIBudgetUSDGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUILblBudgetMenuBar;
        
        private WinTitleBar mUIBudgetUSDTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUILblBudgetMenuBar1;
        
        private WinText mUIBudgetUSDText;
        
        private UIBudgetUSDScrollBar mUIBudgetUSDScrollBar;
        
        private UIBudgetUSDScrollBar1 mUIBudgetUSDScrollBar1;
        
        private WinControl mUIBudgetUSDGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIBudgetUSDScrollBar : WinScrollBar
    {
        
        public UIBudgetUSDScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIBudgetUSDScrollBar1 : WinScrollBar
    {
        
        public UIBudgetUSDScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIScheduleWindow : WinWindow
    {
        
        public UIScheduleWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "label3";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UILabel3MenuBar
        {
            get
            {
                if ((this.mUILabel3MenuBar == null))
                {
                    this.mUILabel3MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabel3MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUILabel3MenuBar;
            }
        }
        
        public WinTitleBar UIScheduleTitleBar
        {
            get
            {
                if ((this.mUIScheduleTitleBar == null))
                {
                    this.mUIScheduleTitleBar = new WinTitleBar(this);
                }
                return this.mUIScheduleTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UILabel3MenuBar1
        {
            get
            {
                if ((this.mUILabel3MenuBar1 == null))
                {
                    this.mUILabel3MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabel3MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUILabel3MenuBar1;
            }
        }
        
        public WinText UIScheduleText
        {
            get
            {
                if ((this.mUIScheduleText == null))
                {
                    this.mUIScheduleText = new WinText(this);
                    #region Search Criteria
                    this.mUIScheduleText.SearchProperties[WinText.PropertyNames.Name] = "Schedule";
                    #endregion
                }
                return this.mUIScheduleText;
            }
        }
        
        public UIScheduleScrollBar UIScheduleScrollBar
        {
            get
            {
                if ((this.mUIScheduleScrollBar == null))
                {
                    this.mUIScheduleScrollBar = new UIScheduleScrollBar(this);
                }
                return this.mUIScheduleScrollBar;
            }
        }
        
        public UIScheduleScrollBar1 UIScheduleScrollBar1
        {
            get
            {
                if ((this.mUIScheduleScrollBar1 == null))
                {
                    this.mUIScheduleScrollBar1 = new UIScheduleScrollBar1(this);
                }
                return this.mUIScheduleScrollBar1;
            }
        }
        
        public WinControl UIScheduleGrip
        {
            get
            {
                if ((this.mUIScheduleGrip == null))
                {
                    this.mUIScheduleGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIScheduleGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIScheduleGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUILabel3MenuBar;
        
        private WinTitleBar mUIScheduleTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUILabel3MenuBar1;
        
        private WinText mUIScheduleText;
        
        private UIScheduleScrollBar mUIScheduleScrollBar;
        
        private UIScheduleScrollBar1 mUIScheduleScrollBar1;
        
        private WinControl mUIScheduleGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIScheduleScrollBar : WinScrollBar
    {
        
        public UIScheduleScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIScheduleScrollBar1 : WinScrollBar
    {
        
        public UIScheduleScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFromWindow : WinWindow
    {
        
        public UIFromWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "label4";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UILabel4MenuBar
        {
            get
            {
                if ((this.mUILabel4MenuBar == null))
                {
                    this.mUILabel4MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabel4MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUILabel4MenuBar;
            }
        }
        
        public WinTitleBar UIFromTitleBar
        {
            get
            {
                if ((this.mUIFromTitleBar == null))
                {
                    this.mUIFromTitleBar = new WinTitleBar(this);
                }
                return this.mUIFromTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UILabel4MenuBar1
        {
            get
            {
                if ((this.mUILabel4MenuBar1 == null))
                {
                    this.mUILabel4MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabel4MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUILabel4MenuBar1;
            }
        }
        
        public WinText UIFromText
        {
            get
            {
                if ((this.mUIFromText == null))
                {
                    this.mUIFromText = new WinText(this);
                    #region Search Criteria
                    this.mUIFromText.SearchProperties[WinText.PropertyNames.Name] = "From";
                    #endregion
                }
                return this.mUIFromText;
            }
        }
        
        public UIFromScrollBar UIFromScrollBar
        {
            get
            {
                if ((this.mUIFromScrollBar == null))
                {
                    this.mUIFromScrollBar = new UIFromScrollBar(this);
                }
                return this.mUIFromScrollBar;
            }
        }
        
        public UIFromScrollBar1 UIFromScrollBar1
        {
            get
            {
                if ((this.mUIFromScrollBar1 == null))
                {
                    this.mUIFromScrollBar1 = new UIFromScrollBar1(this);
                }
                return this.mUIFromScrollBar1;
            }
        }
        
        public WinControl UIFromGrip
        {
            get
            {
                if ((this.mUIFromGrip == null))
                {
                    this.mUIFromGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIFromGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIFromGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUILabel4MenuBar;
        
        private WinTitleBar mUIFromTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUILabel4MenuBar1;
        
        private WinText mUIFromText;
        
        private UIFromScrollBar mUIFromScrollBar;
        
        private UIFromScrollBar1 mUIFromScrollBar1;
        
        private WinControl mUIFromGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFromScrollBar : WinScrollBar
    {
        
        public UIFromScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFromScrollBar1 : WinScrollBar
    {
        
        public UIFromScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITOWindow : WinWindow
    {
        
        public UITOWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "label5";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UILabel5MenuBar
        {
            get
            {
                if ((this.mUILabel5MenuBar == null))
                {
                    this.mUILabel5MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabel5MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUILabel5MenuBar;
            }
        }
        
        public WinTitleBar UITOTitleBar
        {
            get
            {
                if ((this.mUITOTitleBar == null))
                {
                    this.mUITOTitleBar = new WinTitleBar(this);
                }
                return this.mUITOTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UILabel5MenuBar1
        {
            get
            {
                if ((this.mUILabel5MenuBar1 == null))
                {
                    this.mUILabel5MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabel5MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUILabel5MenuBar1;
            }
        }
        
        public WinText UITOText
        {
            get
            {
                if ((this.mUITOText == null))
                {
                    this.mUITOText = new WinText(this);
                    #region Search Criteria
                    this.mUITOText.SearchProperties[WinText.PropertyNames.Name] = "To";
                    #endregion
                }
                return this.mUITOText;
            }
        }
        
        public UITOScrollBar UITOScrollBar
        {
            get
            {
                if ((this.mUITOScrollBar == null))
                {
                    this.mUITOScrollBar = new UITOScrollBar(this);
                }
                return this.mUITOScrollBar;
            }
        }
        
        public UITOScrollBar1 UITOScrollBar1
        {
            get
            {
                if ((this.mUITOScrollBar1 == null))
                {
                    this.mUITOScrollBar1 = new UITOScrollBar1(this);
                }
                return this.mUITOScrollBar1;
            }
        }
        
        public WinControl UITOGrip
        {
            get
            {
                if ((this.mUITOGrip == null))
                {
                    this.mUITOGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUITOGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUITOGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUILabel5MenuBar;
        
        private WinTitleBar mUITOTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUILabel5MenuBar1;
        
        private WinText mUITOText;
        
        private UITOScrollBar mUITOScrollBar;
        
        private UITOScrollBar1 mUITOScrollBar1;
        
        private WinControl mUITOGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITOScrollBar : WinScrollBar
    {
        
        public UITOScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITOScrollBar1 : WinScrollBar
    {
        
        public UITOScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRunStatusWindow : WinWindow
    {
        
        public UIRunStatusWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "label6";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UILabel6MenuBar
        {
            get
            {
                if ((this.mUILabel6MenuBar == null))
                {
                    this.mUILabel6MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabel6MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUILabel6MenuBar;
            }
        }
        
        public WinTitleBar UIRunStatusTitleBar
        {
            get
            {
                if ((this.mUIRunStatusTitleBar == null))
                {
                    this.mUIRunStatusTitleBar = new WinTitleBar(this);
                }
                return this.mUIRunStatusTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UILabel6MenuBar1
        {
            get
            {
                if ((this.mUILabel6MenuBar1 == null))
                {
                    this.mUILabel6MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabel6MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUILabel6MenuBar1;
            }
        }
        
        public WinText UIRunStatusText
        {
            get
            {
                if ((this.mUIRunStatusText == null))
                {
                    this.mUIRunStatusText = new WinText(this);
                    #region Search Criteria
                    this.mUIRunStatusText.SearchProperties[WinText.PropertyNames.Name] = "Run Status";
                    #endregion
                }
                return this.mUIRunStatusText;
            }
        }
        
        public UIRunStatusScrollBar UIRunStatusScrollBar
        {
            get
            {
                if ((this.mUIRunStatusScrollBar == null))
                {
                    this.mUIRunStatusScrollBar = new UIRunStatusScrollBar(this);
                }
                return this.mUIRunStatusScrollBar;
            }
        }
        
        public UIRunStatusScrollBar1 UIRunStatusScrollBar1
        {
            get
            {
                if ((this.mUIRunStatusScrollBar1 == null))
                {
                    this.mUIRunStatusScrollBar1 = new UIRunStatusScrollBar1(this);
                }
                return this.mUIRunStatusScrollBar1;
            }
        }
        
        public WinControl UIRunStatusGrip
        {
            get
            {
                if ((this.mUIRunStatusGrip == null))
                {
                    this.mUIRunStatusGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIRunStatusGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIRunStatusGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUILabel6MenuBar;
        
        private WinTitleBar mUIRunStatusTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUILabel6MenuBar1;
        
        private WinText mUIRunStatusText;
        
        private UIRunStatusScrollBar mUIRunStatusScrollBar;
        
        private UIRunStatusScrollBar1 mUIRunStatusScrollBar1;
        
        private WinControl mUIRunStatusGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRunStatusScrollBar : WinScrollBar
    {
        
        public UIRunStatusScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRunStatusScrollBar1 : WinScrollBar
    {
        
        public UIRunStatusScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPacificTimeWindow : WinWindow
    {
        
        public UIPacificTimeWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "lblTimeZonePlaceTo";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UILblTimeZonePlaceToMenuBar
        {
            get
            {
                if ((this.mUILblTimeZonePlaceToMenuBar == null))
                {
                    this.mUILblTimeZonePlaceToMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILblTimeZonePlaceToMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUILblTimeZonePlaceToMenuBar;
            }
        }
        
        public WinTitleBar UIPacificTimeTitleBar
        {
            get
            {
                if ((this.mUIPacificTimeTitleBar == null))
                {
                    this.mUIPacificTimeTitleBar = new WinTitleBar(this);
                }
                return this.mUIPacificTimeTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UILblTimeZonePlaceToMenuBar1
        {
            get
            {
                if ((this.mUILblTimeZonePlaceToMenuBar1 == null))
                {
                    this.mUILblTimeZonePlaceToMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILblTimeZonePlaceToMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUILblTimeZonePlaceToMenuBar1;
            }
        }
        
        public WinText UIPacificTimeText
        {
            get
            {
                if ((this.mUIPacificTimeText == null))
                {
                    this.mUIPacificTimeText = new WinText(this);
                    #region Search Criteria
                    this.mUIPacificTimeText.SearchProperties[WinText.PropertyNames.Name] = "Pacific Time";
                    #endregion
                }
                return this.mUIPacificTimeText;
            }
        }
        
        public UIPacificTimeScrollBar UIPacificTimeScrollBar
        {
            get
            {
                if ((this.mUIPacificTimeScrollBar == null))
                {
                    this.mUIPacificTimeScrollBar = new UIPacificTimeScrollBar(this);
                }
                return this.mUIPacificTimeScrollBar;
            }
        }
        
        public UIPacificTimeScrollBar1 UIPacificTimeScrollBar1
        {
            get
            {
                if ((this.mUIPacificTimeScrollBar1 == null))
                {
                    this.mUIPacificTimeScrollBar1 = new UIPacificTimeScrollBar1(this);
                }
                return this.mUIPacificTimeScrollBar1;
            }
        }
        
        public WinControl UIPacificTimeGrip
        {
            get
            {
                if ((this.mUIPacificTimeGrip == null))
                {
                    this.mUIPacificTimeGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIPacificTimeGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIPacificTimeGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUILblTimeZonePlaceToMenuBar;
        
        private WinTitleBar mUIPacificTimeTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUILblTimeZonePlaceToMenuBar1;
        
        private WinText mUIPacificTimeText;
        
        private UIPacificTimeScrollBar mUIPacificTimeScrollBar;
        
        private UIPacificTimeScrollBar1 mUIPacificTimeScrollBar1;
        
        private WinControl mUIPacificTimeGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPacificTimeScrollBar : WinScrollBar
    {
        
        public UIPacificTimeScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPacificTimeScrollBar1 : WinScrollBar
    {
        
        public UIPacificTimeScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPacificTimeWindow1 : WinWindow
    {
        
        public UIPacificTimeWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "lblTimeZonePlaceFrom";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UILblTimeZonePlaceFromMenuBar
        {
            get
            {
                if ((this.mUILblTimeZonePlaceFromMenuBar == null))
                {
                    this.mUILblTimeZonePlaceFromMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILblTimeZonePlaceFromMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUILblTimeZonePlaceFromMenuBar;
            }
        }
        
        public WinTitleBar UIPacificTimeTitleBar
        {
            get
            {
                if ((this.mUIPacificTimeTitleBar == null))
                {
                    this.mUIPacificTimeTitleBar = new WinTitleBar(this);
                }
                return this.mUIPacificTimeTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UILblTimeZonePlaceFromMenuBar1
        {
            get
            {
                if ((this.mUILblTimeZonePlaceFromMenuBar1 == null))
                {
                    this.mUILblTimeZonePlaceFromMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILblTimeZonePlaceFromMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUILblTimeZonePlaceFromMenuBar1;
            }
        }
        
        public WinText UIPacificTimeText
        {
            get
            {
                if ((this.mUIPacificTimeText == null))
                {
                    this.mUIPacificTimeText = new WinText(this);
                    #region Search Criteria
                    this.mUIPacificTimeText.SearchProperties[WinText.PropertyNames.Name] = "Pacific Time";
                    #endregion
                }
                return this.mUIPacificTimeText;
            }
        }
        
        public UIPacificTimeScrollBar2 UIPacificTimeScrollBar
        {
            get
            {
                if ((this.mUIPacificTimeScrollBar == null))
                {
                    this.mUIPacificTimeScrollBar = new UIPacificTimeScrollBar2(this);
                }
                return this.mUIPacificTimeScrollBar;
            }
        }
        
        public UIPacificTimeScrollBar11 UIPacificTimeScrollBar1
        {
            get
            {
                if ((this.mUIPacificTimeScrollBar1 == null))
                {
                    this.mUIPacificTimeScrollBar1 = new UIPacificTimeScrollBar11(this);
                }
                return this.mUIPacificTimeScrollBar1;
            }
        }
        
        public WinControl UIPacificTimeGrip
        {
            get
            {
                if ((this.mUIPacificTimeGrip == null))
                {
                    this.mUIPacificTimeGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIPacificTimeGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIPacificTimeGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUILblTimeZonePlaceFromMenuBar;
        
        private WinTitleBar mUIPacificTimeTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUILblTimeZonePlaceFromMenuBar1;
        
        private WinText mUIPacificTimeText;
        
        private UIPacificTimeScrollBar2 mUIPacificTimeScrollBar;
        
        private UIPacificTimeScrollBar11 mUIPacificTimeScrollBar1;
        
        private WinControl mUIPacificTimeGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPacificTimeScrollBar2 : WinScrollBar
    {
        
        public UIPacificTimeScrollBar2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPacificTimeScrollBar11 : WinScrollBar
    {
        
        public UIPacificTimeScrollBar11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UILabelSplitWindow : WinWindow
    {
        
        public UILabelSplitWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "labelSplit";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UILabelSplitMenuBar
        {
            get
            {
                if ((this.mUILabelSplitMenuBar == null))
                {
                    this.mUILabelSplitMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabelSplitMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUILabelSplitMenuBar;
            }
        }
        
        public WinTitleBar UILabelSplitTitleBar
        {
            get
            {
                if ((this.mUILabelSplitTitleBar == null))
                {
                    this.mUILabelSplitTitleBar = new WinTitleBar(this);
                }
                return this.mUILabelSplitTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UILabelSplitMenuBar1
        {
            get
            {
                if ((this.mUILabelSplitMenuBar1 == null))
                {
                    this.mUILabelSplitMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabelSplitMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUILabelSplitMenuBar1;
            }
        }
        
        public WinText UIPacificTimeText
        {
            get
            {
                if ((this.mUIPacificTimeText == null))
                {
                    this.mUIPacificTimeText = new WinText(this);
                    #region Search Criteria
                    this.mUIPacificTimeText.SearchProperties[WinText.PropertyNames.Name] = "Pacific Time";
                    #endregion
                }
                return this.mUIPacificTimeText;
            }
        }
        
        public UIVerticalScrollBar43 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar43(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar43 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar43(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UILabelSplitGrip
        {
            get
            {
                if ((this.mUILabelSplitGrip == null))
                {
                    this.mUILabelSplitGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUILabelSplitGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUILabelSplitGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUILabelSplitMenuBar;
        
        private WinTitleBar mUILabelSplitTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUILabelSplitMenuBar1;
        
        private WinText mUIPacificTimeText;
        
        private UIVerticalScrollBar43 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar43 mUIHorizontalScrollBar;
        
        private WinControl mUILabelSplitGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar43 : WinScrollBar
    {
        
        public UIVerticalScrollBar43(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar43 : WinScrollBar
    {
        
        public UIHorizontalScrollBar43(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISEMSearchPaneWindow : WinWindow
    {
        
        public UISEMSearchPaneWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "SEMSearchPane";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UISEMSearchPaneMenuBar
        {
            get
            {
                if ((this.mUISEMSearchPaneMenuBar == null))
                {
                    this.mUISEMSearchPaneMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISEMSearchPaneMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUISEMSearchPaneMenuBar;
            }
        }
        
        public WinTitleBar UISEMSearchPaneTitleBar
        {
            get
            {
                if ((this.mUISEMSearchPaneTitleBar == null))
                {
                    this.mUISEMSearchPaneTitleBar = new WinTitleBar(this);
                }
                return this.mUISEMSearchPaneTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UISEMSearchPaneMenuBar1
        {
            get
            {
                if ((this.mUISEMSearchPaneMenuBar1 == null))
                {
                    this.mUISEMSearchPaneMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISEMSearchPaneMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUISEMSearchPaneMenuBar1;
            }
        }
        
        public UISEMSearchPaneClient UISEMSearchPaneClient
        {
            get
            {
                if ((this.mUISEMSearchPaneClient == null))
                {
                    this.mUISEMSearchPaneClient = new UISEMSearchPaneClient(this);
                }
                return this.mUISEMSearchPaneClient;
            }
        }
        
        public UIVerticalScrollBar44 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar44(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar44 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar44(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UISEMSearchPaneGrip
        {
            get
            {
                if ((this.mUISEMSearchPaneGrip == null))
                {
                    this.mUISEMSearchPaneGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUISEMSearchPaneGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUISEMSearchPaneGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUISEMSearchPaneMenuBar;
        
        private WinTitleBar mUISEMSearchPaneTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUISEMSearchPaneMenuBar1;
        
        private UISEMSearchPaneClient mUISEMSearchPaneClient;
        
        private UIVerticalScrollBar44 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar44 mUIHorizontalScrollBar;
        
        private WinControl mUISEMSearchPaneGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISEMSearchPaneClient : WinClient
    {
        
        public UISEMSearchPaneClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "SEMSearchPane";
            #endregion
        }
        
        #region Properties
        public WinWindow UISearchPaneWindow
        {
            get
            {
                if ((this.mUISearchPaneWindow == null))
                {
                    this.mUISearchPaneWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUISearchPaneWindow.SearchProperties[WinWindow.PropertyNames.Name] = "SearchPane";
                    this.mUISearchPaneWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUISearchPaneWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUISearchPaneWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar44 : WinScrollBar
    {
        
        public UIVerticalScrollBar44(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar44 : WinScrollBar
    {
        
        public UIHorizontalScrollBar44(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISearchPaneWindow : WinWindow
    {
        
        public UISearchPaneWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "TSSearch";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UITSSearchMenuBar
        {
            get
            {
                if ((this.mUITSSearchMenuBar == null))
                {
                    this.mUITSSearchMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUITSSearchMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUITSSearchMenuBar;
            }
        }
        
        public WinTitleBar UISearchPaneTitleBar
        {
            get
            {
                if ((this.mUISearchPaneTitleBar == null))
                {
                    this.mUISearchPaneTitleBar = new WinTitleBar(this);
                }
                return this.mUISearchPaneTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UITSSearchMenuBar1
        {
            get
            {
                if ((this.mUITSSearchMenuBar1 == null))
                {
                    this.mUITSSearchMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUITSSearchMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUITSSearchMenuBar1;
            }
        }
        
        public UITSSearchToolBar UITSSearchToolBar
        {
            get
            {
                if ((this.mUITSSearchToolBar == null))
                {
                    this.mUITSSearchToolBar = new UITSSearchToolBar(this);
                }
                return this.mUITSSearchToolBar;
            }
        }
        
        public UITsDdlDateRangeMenuItem UITsDdlDateRangeMenuItem
        {
            get
            {
                if ((this.mUITsDdlDateRangeMenuItem == null))
                {
                    this.mUITsDdlDateRangeMenuItem = new UITsDdlDateRangeMenuItem(this);
                }
                return this.mUITsDdlDateRangeMenuItem;
            }
        }
        
        public UITsDdlFilterMenuItem UITsDdlFilterMenuItem
        {
            get
            {
                if ((this.mUITsDdlFilterMenuItem == null))
                {
                    this.mUITsDdlFilterMenuItem = new UITsDdlFilterMenuItem(this);
                }
                return this.mUITsDdlFilterMenuItem;
            }
        }
        
        public UISearchPaneScrollBar UISearchPaneScrollBar
        {
            get
            {
                if ((this.mUISearchPaneScrollBar == null))
                {
                    this.mUISearchPaneScrollBar = new UISearchPaneScrollBar(this);
                }
                return this.mUISearchPaneScrollBar;
            }
        }
        
        public UISearchPaneScrollBar1 UISearchPaneScrollBar1
        {
            get
            {
                if ((this.mUISearchPaneScrollBar1 == null))
                {
                    this.mUISearchPaneScrollBar1 = new UISearchPaneScrollBar1(this);
                }
                return this.mUISearchPaneScrollBar1;
            }
        }
        
        public WinControl UISearchPaneGrip
        {
            get
            {
                if ((this.mUISearchPaneGrip == null))
                {
                    this.mUISearchPaneGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUISearchPaneGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUISearchPaneGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUITSSearchMenuBar;
        
        private WinTitleBar mUISearchPaneTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUITSSearchMenuBar1;
        
        private UITSSearchToolBar mUITSSearchToolBar;
        
        private UITsDdlDateRangeMenuItem mUITsDdlDateRangeMenuItem;
        
        private UITsDdlFilterMenuItem mUITsDdlFilterMenuItem;
        
        private UISearchPaneScrollBar mUISearchPaneScrollBar;
        
        private UISearchPaneScrollBar1 mUISearchPaneScrollBar1;
        
        private WinControl mUISearchPaneGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITSSearchToolBar : WinToolBar
    {
        
        public UITSSearchToolBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "TSSearch";
            #endregion
        }
        
        #region Properties
        public WinText UIShowingstatsforText
        {
            get
            {
                if ((this.mUIShowingstatsforText == null))
                {
                    this.mUIShowingstatsforText = new WinText(this);
                    #region Search Criteria
                    this.mUIShowingstatsforText.SearchProperties[WinText.PropertyNames.Name] = "Showing stats for";
                    #endregion
                }
                return this.mUIShowingstatsforText;
            }
        }
        
        public WinButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WinButton(this);
                }
                return this.mUIItemButton;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIShowingstatsforText;
        
        private WinButton mUIItemButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITsDdlDateRangeMenuItem : WinMenuItem
    {
        
        public UITsDdlDateRangeMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "tsDdlDateRange";
            #endregion
        }
        
        #region Properties
        public WinSeparator UIItemSeparator
        {
            get
            {
                if ((this.mUIItemSeparator == null))
                {
                    this.mUIItemSeparator = new WinSeparator(this);
                    #region Search Criteria
                    this.mUIItemSeparator.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUIItemSeparator;
            }
        }
        #endregion
        
        #region Fields
        private WinSeparator mUIItemSeparator;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITsDdlFilterMenuItem : WinMenuItem
    {
        
        public UITsDdlFilterMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "tsDdlFilter";
            #endregion
        }
        
        #region Properties
        public WinSeparator UIItemSeparator
        {
            get
            {
                if ((this.mUIItemSeparator == null))
                {
                    this.mUIItemSeparator = new WinSeparator(this);
                    #region Search Criteria
                    this.mUIItemSeparator.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUIItemSeparator;
            }
        }
        #endregion
        
        #region Fields
        private WinSeparator mUIItemSeparator;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISearchPaneScrollBar : WinScrollBar
    {
        
        public UISearchPaneScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISearchPaneScrollBar1 : WinScrollBar
    {
        
        public UISearchPaneScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITSSearchToolBar1 : WinToolBar
    {
        
        public UITSSearchToolBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "TSSearch";
            #endregion
        }
        
        #region Properties
        public UITsDdlDateRangeMenuItem1 UITsDdlDateRangeMenuItem
        {
            get
            {
                if ((this.mUITsDdlDateRangeMenuItem == null))
                {
                    this.mUITsDdlDateRangeMenuItem = new UITsDdlDateRangeMenuItem1(this);
                }
                return this.mUITsDdlDateRangeMenuItem;
            }
        }
        
        public UITsDdlFilterMenuItem1 UITsDdlFilterMenuItem
        {
            get
            {
                if ((this.mUITsDdlFilterMenuItem == null))
                {
                    this.mUITsDdlFilterMenuItem = new UITsDdlFilterMenuItem1(this);
                }
                return this.mUITsDdlFilterMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UITsDdlDateRangeMenuItem1 mUITsDdlDateRangeMenuItem;
        
        private UITsDdlFilterMenuItem1 mUITsDdlFilterMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITsDdlDateRangeMenuItem1 : WinMenuItem
    {
        
        public UITsDdlDateRangeMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "tsDdlDateRange";
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIDontShowStatisticsMenuItem
        {
            get
            {
                if ((this.mUIDontShowStatisticsMenuItem == null))
                {
                    this.mUIDontShowStatisticsMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIDontShowStatisticsMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Don\'t Show Statistics";
                    this.mUIDontShowStatisticsMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUIDontShowStatisticsMenuItem;
            }
        }
        
        public WinMenuItem UIYesterday7202011MenuItem
        {
            get
            {
                if ((this.mUIYesterday7202011MenuItem == null))
                {
                    this.mUIYesterday7202011MenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIYesterday7202011MenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Yesterday (7/20/2011)";
                    this.mUIYesterday7202011MenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUIYesterday7202011MenuItem;
            }
        }
        
        public WinMenuItem UILast7days71420117202MenuItem
        {
            get
            {
                if ((this.mUILast7days71420117202MenuItem == null))
                {
                    this.mUILast7days71420117202MenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUILast7days71420117202MenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Last 7 days (7/14/2011 - 7/20/2011)";
                    this.mUILast7days71420117202MenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUILast7days71420117202MenuItem;
            }
        }
        
        public WinMenuItem UILast30days6212011720MenuItem
        {
            get
            {
                if ((this.mUILast30days6212011720MenuItem == null))
                {
                    this.mUILast30days6212011720MenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUILast30days6212011720MenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Last 30 days (6/21/2011 - 7/20/2011)";
                    this.mUILast30days6212011720MenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUILast30days6212011720MenuItem;
            }
        }
        
        public WinMenuItem UICreateCustomDateRangMenuItem
        {
            get
            {
                if ((this.mUICreateCustomDateRangMenuItem == null))
                {
                    this.mUICreateCustomDateRangMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICreateCustomDateRangMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Create Custom Date Range...";
                    this.mUICreateCustomDateRangMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUICreateCustomDateRangMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIDontShowStatisticsMenuItem;
        
        private WinMenuItem mUIYesterday7202011MenuItem;
        
        private WinMenuItem mUILast7days71420117202MenuItem;
        
        private WinMenuItem mUILast30days6212011720MenuItem;
        
        private WinMenuItem mUICreateCustomDateRangMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITsDdlFilterMenuItem1 : WinMenuItem
    {
        
        public UITsDdlFilterMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "tsDdlFilter";
            #endregion
        }
        
        #region Properties
        public WinMenuItem UINofilterMenuItem
        {
            get
            {
                if ((this.mUINofilterMenuItem == null))
                {
                    this.mUINofilterMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINofilterMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "No filter";
                    this.mUINofilterMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUINofilterMenuItem;
            }
        }
        
        public WinMenuItem UIAllunpostedlocalchanMenuItem
        {
            get
            {
                if ((this.mUIAllunpostedlocalchanMenuItem == null))
                {
                    this.mUIAllunpostedlocalchanMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIAllunpostedlocalchanMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "All unposted local changes";
                    this.mUIAllunpostedlocalchanMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUIAllunpostedlocalchanMenuItem;
            }
        }
        
        public WinMenuItem UIItemswitherrorsandwaMenuItem
        {
            get
            {
                if ((this.mUIItemswitherrorsandwaMenuItem == null))
                {
                    this.mUIItemswitherrorsandwaMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIItemswitherrorsandwaMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Items with errors and warnings";
                    this.mUIItemswitherrorsandwaMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUIItemswitherrorsandwaMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUINofilterMenuItem;
        
        private WinMenuItem mUIAllunpostedlocalchanMenuItem;
        
        private WinMenuItem mUIItemswitherrorsandwaMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIQuickSearchControlWindow : WinWindow
    {
        
        public UIQuickSearchControlWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "QuickSearchControl";
            #endregion
        }
        
        #region Properties
        public WinClient UIQuickSearchControlClient
        {
            get
            {
                if ((this.mUIQuickSearchControlClient == null))
                {
                    this.mUIQuickSearchControlClient = new WinClient(this);
                }
                return this.mUIQuickSearchControlClient;
            }
        }
        
        public WinWindow UIPanel1Window
        {
            get
            {
                if ((this.mUIPanel1Window == null))
                {
                    this.mUIPanel1Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUIPanel1Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIPanel1Window.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    #endregion
                }
                return this.mUIPanel1Window;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIQuickSearchControlClient;
        
        private WinWindow mUIPanel1Window;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPanel1Window5 : WinWindow
    {
        
        public UIPanel1Window5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "panel1";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "6";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIPanel1MenuBar
        {
            get
            {
                if ((this.mUIPanel1MenuBar == null))
                {
                    this.mUIPanel1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanel1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIPanel1MenuBar;
            }
        }
        
        public WinTitleBar UIPanel1TitleBar
        {
            get
            {
                if ((this.mUIPanel1TitleBar == null))
                {
                    this.mUIPanel1TitleBar = new WinTitleBar(this);
                }
                return this.mUIPanel1TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIPanel1MenuBar1
        {
            get
            {
                if ((this.mUIPanel1MenuBar1 == null))
                {
                    this.mUIPanel1MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanel1MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIPanel1MenuBar1;
            }
        }
        
        public WinClient UIPanel1Client
        {
            get
            {
                if ((this.mUIPanel1Client == null))
                {
                    this.mUIPanel1Client = new WinClient(this);
                }
                return this.mUIPanel1Client;
            }
        }
        
        public WinWindow UIBtnQueryWindow
        {
            get
            {
                if ((this.mUIBtnQueryWindow == null))
                {
                    this.mUIBtnQueryWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIBtnQueryWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.BUTTON", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIBtnQueryWindow;
            }
        }
        
        public WinWindow UISearchWithinCurrentVWindow
        {
            get
            {
                if ((this.mUISearchWithinCurrentVWindow == null))
                {
                    this.mUISearchWithinCurrentVWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUISearchWithinCurrentVWindow.SearchProperties[WinWindow.PropertyNames.Name] = "Search Within Current View";
                    this.mUISearchWithinCurrentVWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUISearchWithinCurrentVWindow;
            }
        }
        
        public UIVerticalScrollBar45 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar45(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar45 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar45(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIPanel1Grip
        {
            get
            {
                if ((this.mUIPanel1Grip == null))
                {
                    this.mUIPanel1Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUIPanel1Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIPanel1Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIPanel1MenuBar;
        
        private WinTitleBar mUIPanel1TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIPanel1MenuBar1;
        
        private WinClient mUIPanel1Client;
        
        private WinWindow mUIBtnQueryWindow;
        
        private WinWindow mUISearchWithinCurrentVWindow;
        
        private UIVerticalScrollBar45 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar45 mUIHorizontalScrollBar;
        
        private WinControl mUIPanel1Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar45 : WinScrollBar
    {
        
        public UIVerticalScrollBar45(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar45 : WinScrollBar
    {
        
        public UIHorizontalScrollBar45(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIBtnQueryWindow : WinWindow
    {
        
        public UIBtnQueryWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnQuery";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIBtnQueryMenuBar
        {
            get
            {
                if ((this.mUIBtnQueryMenuBar == null))
                {
                    this.mUIBtnQueryMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIBtnQueryMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIBtnQueryMenuBar;
            }
        }
        
        public WinTitleBar UIBtnQueryTitleBar
        {
            get
            {
                if ((this.mUIBtnQueryTitleBar == null))
                {
                    this.mUIBtnQueryTitleBar = new WinTitleBar(this);
                }
                return this.mUIBtnQueryTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIBtnQueryMenuBar1
        {
            get
            {
                if ((this.mUIBtnQueryMenuBar1 == null))
                {
                    this.mUIBtnQueryMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIBtnQueryMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIBtnQueryMenuBar1;
            }
        }
        
        public WinButton UIBtnQueryButton
        {
            get
            {
                if ((this.mUIBtnQueryButton == null))
                {
                    this.mUIBtnQueryButton = new WinButton(this);
                }
                return this.mUIBtnQueryButton;
            }
        }
        
        public UIVerticalScrollBar46 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar46(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar46 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar46(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIBtnQueryGrip
        {
            get
            {
                if ((this.mUIBtnQueryGrip == null))
                {
                    this.mUIBtnQueryGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIBtnQueryGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIBtnQueryGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIBtnQueryMenuBar;
        
        private WinTitleBar mUIBtnQueryTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIBtnQueryMenuBar1;
        
        private WinButton mUIBtnQueryButton;
        
        private UIVerticalScrollBar46 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar46 mUIHorizontalScrollBar;
        
        private WinControl mUIBtnQueryGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar46 : WinScrollBar
    {
        
        public UIVerticalScrollBar46(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar46 : WinScrollBar
    {
        
        public UIHorizontalScrollBar46(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISearchWithinCurrentVWindow : WinWindow
    {
        
        public UISearchWithinCurrentVWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "searchText";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UISearchTextMenuBar
        {
            get
            {
                if ((this.mUISearchTextMenuBar == null))
                {
                    this.mUISearchTextMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISearchTextMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUISearchTextMenuBar;
            }
        }
        
        public WinTitleBar UISearchWithinCurrentVTitleBar
        {
            get
            {
                if ((this.mUISearchWithinCurrentVTitleBar == null))
                {
                    this.mUISearchWithinCurrentVTitleBar = new WinTitleBar(this);
                }
                return this.mUISearchWithinCurrentVTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UISearchTextMenuBar1
        {
            get
            {
                if ((this.mUISearchTextMenuBar1 == null))
                {
                    this.mUISearchTextMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISearchTextMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUISearchTextMenuBar1;
            }
        }
        
        public WinEdit UISearchTextEdit
        {
            get
            {
                if ((this.mUISearchTextEdit == null))
                {
                    this.mUISearchTextEdit = new WinEdit(this);
                }
                return this.mUISearchTextEdit;
            }
        }
        
        public UISearchWithinCurrentVScrollBar UISearchWithinCurrentVScrollBar
        {
            get
            {
                if ((this.mUISearchWithinCurrentVScrollBar == null))
                {
                    this.mUISearchWithinCurrentVScrollBar = new UISearchWithinCurrentVScrollBar(this);
                }
                return this.mUISearchWithinCurrentVScrollBar;
            }
        }
        
        public UISearchWithinCurrentVScrollBar1 UISearchWithinCurrentVScrollBar1
        {
            get
            {
                if ((this.mUISearchWithinCurrentVScrollBar1 == null))
                {
                    this.mUISearchWithinCurrentVScrollBar1 = new UISearchWithinCurrentVScrollBar1(this);
                }
                return this.mUISearchWithinCurrentVScrollBar1;
            }
        }
        
        public WinControl UISearchWithinCurrentVGrip
        {
            get
            {
                if ((this.mUISearchWithinCurrentVGrip == null))
                {
                    this.mUISearchWithinCurrentVGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUISearchWithinCurrentVGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUISearchWithinCurrentVGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUISearchTextMenuBar;
        
        private WinTitleBar mUISearchWithinCurrentVTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUISearchTextMenuBar1;
        
        private WinEdit mUISearchTextEdit;
        
        private UISearchWithinCurrentVScrollBar mUISearchWithinCurrentVScrollBar;
        
        private UISearchWithinCurrentVScrollBar1 mUISearchWithinCurrentVScrollBar1;
        
        private WinControl mUISearchWithinCurrentVGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISearchWithinCurrentVScrollBar : WinScrollBar
    {
        
        public UISearchWithinCurrentVScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISearchWithinCurrentVScrollBar1 : WinScrollBar
    {
        
        public UISearchWithinCurrentVScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar111 : WinScrollBar
    {
        
        public UIVerticalScrollBar111(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar111 : WinScrollBar
    {
        
        public UIHorizontalScrollBar111(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISplitContainerControScrollBar : WinScrollBar
    {
        
        public UISplitContainerControScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISplitContainerControScrollBar1 : WinScrollBar
    {
        
        public UISplitContainerControScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRibbonStatusBarWindow : WinWindow
    {
        
        public UIRibbonStatusBarWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ribbonStatusBar";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIRibbonStatusBarMenuBar
        {
            get
            {
                if ((this.mUIRibbonStatusBarMenuBar == null))
                {
                    this.mUIRibbonStatusBarMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIRibbonStatusBarMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIRibbonStatusBarMenuBar;
            }
        }
        
        public WinTitleBar UIRibbonStatusBarTitleBar
        {
            get
            {
                if ((this.mUIRibbonStatusBarTitleBar == null))
                {
                    this.mUIRibbonStatusBarTitleBar = new WinTitleBar(this);
                }
                return this.mUIRibbonStatusBarTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIRibbonStatusBarMenuBar1
        {
            get
            {
                if ((this.mUIRibbonStatusBarMenuBar1 == null))
                {
                    this.mUIRibbonStatusBarMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIRibbonStatusBarMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIRibbonStatusBarMenuBar1;
            }
        }
        
        public WinScrollBar UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIVerticalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public WinScrollBar UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIHorizontalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIRibbonStatusBarGrip
        {
            get
            {
                if ((this.mUIRibbonStatusBarGrip == null))
                {
                    this.mUIRibbonStatusBarGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIRibbonStatusBarGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIRibbonStatusBarGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIRibbonStatusBarMenuBar;
        
        private WinTitleBar mUIRibbonStatusBarTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIRibbonStatusBarMenuBar1;
        
        private WinScrollBar mUIVerticalScrollBar;
        
        private WinScrollBar mUIHorizontalScrollBar;
        
        private WinControl mUIRibbonStatusBarGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIStatusBarPropertyPage : WinControl
    {
        
        public UIStatusBarPropertyPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Status Bar";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "PropertyPage";
            #endregion
        }
        
        #region Properties
        public WinText UIStaticText
        {
            get
            {
                if ((this.mUIStaticText == null))
                {
                    this.mUIStaticText = new WinText(this);
                    #region Search Criteria
                    this.mUIStaticText.SearchProperties[WinText.PropertyNames.Name] = "Static";
                    #endregion
                }
                return this.mUIStaticText;
            }
        }
        
        public WinText UIStaticText1
        {
            get
            {
                if ((this.mUIStaticText1 == null))
                {
                    this.mUIStaticText1 = new WinText(this);
                    #region Search Criteria
                    this.mUIStaticText1.SearchProperties[WinText.PropertyNames.Name] = "Static";
                    this.mUIStaticText1.SearchProperties[WinText.PropertyNames.Instance] = "2";
                    #endregion
                }
                return this.mUIStaticText1;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIStaticText;
        
        private WinText mUIStaticText1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar210 : WinScrollBar
    {
        
        public UIVerticalScrollBar210(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar210 : WinScrollBar
    {
        
        public UIHorizontalScrollBar210(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRibbonWindow : WinWindow
    {
        
        public UIRibbonWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ribbon";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIRibbonMenuBar
        {
            get
            {
                if ((this.mUIRibbonMenuBar == null))
                {
                    this.mUIRibbonMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIRibbonMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIRibbonMenuBar;
            }
        }
        
        public WinTitleBar UIRibbonTitleBar
        {
            get
            {
                if ((this.mUIRibbonTitleBar == null))
                {
                    this.mUIRibbonTitleBar = new WinTitleBar(this);
                }
                return this.mUIRibbonTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIRibbonMenuBar1
        {
            get
            {
                if ((this.mUIRibbonMenuBar1 == null))
                {
                    this.mUIRibbonMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIRibbonMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIRibbonMenuBar1;
            }
        }
        
        public WinScrollBar UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIVerticalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public WinScrollBar UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIHorizontalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIRibbonGrip
        {
            get
            {
                if ((this.mUIRibbonGrip == null))
                {
                    this.mUIRibbonGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIRibbonGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIRibbonGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIRibbonMenuBar;
        
        private WinTitleBar mUIRibbonTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIRibbonMenuBar1;
        
        private WinScrollBar mUIVerticalScrollBar;
        
        private WinScrollBar mUIHorizontalScrollBar;
        
        private WinControl mUIRibbonGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITheRibbonPropertyPage : WinControl
    {
        
        public UITheRibbonPropertyPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "The Ribbon";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "PropertyPage";
            #endregion
        }
        
        #region Properties
        public WinControl UIItemDropDownGridButton
        {
            get
            {
                if ((this.mUIItemDropDownGridButton == null))
                {
                    this.mUIItemDropDownGridButton = new WinControl(this);
                    #region Search Criteria
                    this.mUIItemDropDownGridButton.SearchProperties[UITestControl.PropertyNames.ControlType] = "DropDownGridButton";
                    #endregion
                }
                return this.mUIItemDropDownGridButton;
            }
        }
        
        public WinToolBar UIRibbonToolBar
        {
            get
            {
                if ((this.mUIRibbonToolBar == null))
                {
                    this.mUIRibbonToolBar = new WinToolBar(this);
                    #region Search Criteria
                    this.mUIRibbonToolBar.SearchProperties[WinToolBar.PropertyNames.Name] = "Quick Access Toolbar";
                    #endregion
                }
                return this.mUIRibbonToolBar;
            }
        }
        
        public WinTabList UIRibbonTabsTabList
        {
            get
            {
                if ((this.mUIRibbonTabsTabList == null))
                {
                    this.mUIRibbonTabsTabList = new WinTabList(this);
                    #region Search Criteria
                    this.mUIRibbonTabsTabList.SearchProperties[WinTabList.PropertyNames.Name] = "Ribbon Tabs";
                    #endregion
                }
                return this.mUIRibbonTabsTabList;
            }
        }
        
        public WinPane UILowerRibbonPane
        {
            get
            {
                if ((this.mUILowerRibbonPane == null))
                {
                    this.mUILowerRibbonPane = new WinPane(this);
                    #region Search Criteria
                    this.mUILowerRibbonPane.SearchProperties[WinControl.PropertyNames.Name] = "Lower Ribbon";
                    #endregion
                }
                return this.mUILowerRibbonPane;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUIItemDropDownGridButton;
        
        private WinToolBar mUIRibbonToolBar;
        
        private WinTabList mUIRibbonTabsTabList;
        
        private WinPane mUILowerRibbonPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRibbonToolBar : WinToolBar
    {
        
        public UIRibbonToolBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "Quick Access Toolbar";
            #endregion
        }
        
        #region Properties
        public WinButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIItemButton.SearchProperties[WinButton.PropertyNames.Name] = "Item";
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItemButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRibbonTabsTabList : WinTabList
    {
        
        public UIRibbonTabsTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTabList.PropertyNames.Name] = "Ribbon Tabs";
            #endregion
        }
        
        #region Properties
        public WinTabPage UIHomeTabPage
        {
            get
            {
                if ((this.mUIHomeTabPage == null))
                {
                    this.mUIHomeTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUIHomeTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Home";
                    #endregion
                }
                return this.mUIHomeTabPage;
            }
        }
        
        public WinTabPage UIFacebookCampaignsTabPage
        {
            get
            {
                if ((this.mUIFacebookCampaignsTabPage == null))
                {
                    this.mUIFacebookCampaignsTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUIFacebookCampaignsTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Facebook Campaigns";
                    #endregion
                }
                return this.mUIFacebookCampaignsTabPage;
            }
        }
        #endregion
        
        #region Fields
        private WinTabPage mUIHomeTabPage;
        
        private WinTabPage mUIFacebookCampaignsTabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UILowerRibbonPane : WinPane
    {
        
        public UILowerRibbonPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Lower Ribbon";
            #endregion
        }
        
        #region Properties
        public WinControl UIFacebookCampaignsPropertyPage
        {
            get
            {
                if ((this.mUIFacebookCampaignsPropertyPage == null))
                {
                    this.mUIFacebookCampaignsPropertyPage = new WinControl(this);
                    #region Search Criteria
                    this.mUIFacebookCampaignsPropertyPage.SearchProperties[UITestControl.PropertyNames.Name] = "Facebook Campaigns";
                    this.mUIFacebookCampaignsPropertyPage.SearchProperties[UITestControl.PropertyNames.ControlType] = "PropertyPage";
                    #endregion
                }
                return this.mUIFacebookCampaignsPropertyPage;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUIFacebookCampaignsPropertyPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFacebookCampaignsPropertyPage : WinControl
    {
        
        public UIFacebookCampaignsPropertyPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Facebook Campaigns";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "PropertyPage";
            #endregion
        }
        
        #region Properties
        public WinToolBar UIRibbonToolBar
        {
            get
            {
                if ((this.mUIRibbonToolBar == null))
                {
                    this.mUIRibbonToolBar = new WinToolBar(this);
                    #region Search Criteria
                    this.mUIRibbonToolBar.SearchProperties[WinToolBar.PropertyNames.Name] = "New";
                    #endregion
                }
                return this.mUIRibbonToolBar;
            }
        }
        
        public WinToolBar UIRibbonToolBar1
        {
            get
            {
                if ((this.mUIRibbonToolBar1 == null))
                {
                    this.mUIRibbonToolBar1 = new WinToolBar(this);
                    #region Search Criteria
                    this.mUIRibbonToolBar1.SearchProperties[WinToolBar.PropertyNames.Name] = "Copy && Paste";
                    #endregion
                }
                return this.mUIRibbonToolBar1;
            }
        }
        
        public WinToolBar UIRibbonToolBar2
        {
            get
            {
                if ((this.mUIRibbonToolBar2 == null))
                {
                    this.mUIRibbonToolBar2 = new WinToolBar(this);
                    #region Search Criteria
                    this.mUIRibbonToolBar2.SearchProperties[WinToolBar.PropertyNames.Name] = "Delete";
                    #endregion
                }
                return this.mUIRibbonToolBar2;
            }
        }
        
        public WinToolBar UIRibbonToolBar3
        {
            get
            {
                if ((this.mUIRibbonToolBar3 == null))
                {
                    this.mUIRibbonToolBar3 = new WinToolBar(this);
                    #region Search Criteria
                    this.mUIRibbonToolBar3.SearchProperties[WinToolBar.PropertyNames.Name] = "Extension";
                    #endregion
                }
                return this.mUIRibbonToolBar3;
            }
        }
        
        public WinToolBar UIRibbonToolBar4
        {
            get
            {
                if ((this.mUIRibbonToolBar4 == null))
                {
                    this.mUIRibbonToolBar4 = new WinToolBar(this);
                    #region Search Criteria
                    this.mUIRibbonToolBar4.SearchProperties[WinToolBar.PropertyNames.Name] = "Import && Export";
                    #endregion
                }
                return this.mUIRibbonToolBar4;
            }
        }
        
        public WinToolBar UIRibbonToolBar5
        {
            get
            {
                if ((this.mUIRibbonToolBar5 == null))
                {
                    this.mUIRibbonToolBar5 = new WinToolBar(this);
                    #region Search Criteria
                    this.mUIRibbonToolBar5.SearchProperties[WinToolBar.PropertyNames.Name] = "Optimization";
                    #endregion
                }
                return this.mUIRibbonToolBar5;
            }
        }
        
        public WinToolBar UIRibbonToolBar6
        {
            get
            {
                if ((this.mUIRibbonToolBar6 == null))
                {
                    this.mUIRibbonToolBar6 = new WinToolBar(this);
                    #region Search Criteria
                    this.mUIRibbonToolBar6.SearchProperties[WinToolBar.PropertyNames.Name] = "Reporting";
                    #endregion
                }
                return this.mUIRibbonToolBar6;
            }
        }
        #endregion
        
        #region Fields
        private WinToolBar mUIRibbonToolBar;
        
        private WinToolBar mUIRibbonToolBar1;
        
        private WinToolBar mUIRibbonToolBar2;
        
        private WinToolBar mUIRibbonToolBar3;
        
        private WinToolBar mUIRibbonToolBar4;
        
        private WinToolBar mUIRibbonToolBar5;
        
        private WinToolBar mUIRibbonToolBar6;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRibbonToolBar1 : WinToolBar
    {
        
        public UIRibbonToolBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "New";
            #endregion
        }
        
        #region Properties
        public WinButton UIAddCampaignButton
        {
            get
            {
                if ((this.mUIAddCampaignButton == null))
                {
                    this.mUIAddCampaignButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIAddCampaignButton.SearchProperties[WinButton.PropertyNames.Name] = "Add Campaign";
                    #endregion
                }
                return this.mUIAddCampaignButton;
            }
        }
        
        public WinControl UINewDropDownButton
        {
            get
            {
                if ((this.mUINewDropDownButton == null))
                {
                    this.mUINewDropDownButton = new WinControl(this);
                    #region Search Criteria
                    this.mUINewDropDownButton.SearchProperties[UITestControl.PropertyNames.Name] = "New";
                    this.mUINewDropDownButton.SearchProperties[UITestControl.PropertyNames.ControlType] = "DropDownButton";
                    #endregion
                }
                return this.mUINewDropDownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIAddCampaignButton;
        
        private WinControl mUINewDropDownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRibbonToolBar2 : WinToolBar
    {
        
        public UIRibbonToolBar2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "Copy && Paste";
            #endregion
        }
        
        #region Properties
        public WinButton UICopyButton
        {
            get
            {
                if ((this.mUICopyButton == null))
                {
                    this.mUICopyButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICopyButton.SearchProperties[WinButton.PropertyNames.Name] = "Copy";
                    #endregion
                }
                return this.mUICopyButton;
            }
        }
        
        public WinButton UIDeepCopyButton
        {
            get
            {
                if ((this.mUIDeepCopyButton == null))
                {
                    this.mUIDeepCopyButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIDeepCopyButton.SearchProperties[WinButton.PropertyNames.Name] = "Deep Copy";
                    #endregion
                }
                return this.mUIDeepCopyButton;
            }
        }
        
        public WinButton UIPasteButton
        {
            get
            {
                if ((this.mUIPasteButton == null))
                {
                    this.mUIPasteButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPasteButton.SearchProperties[WinButton.PropertyNames.Name] = "Paste";
                    #endregion
                }
                return this.mUIPasteButton;
            }
        }
        
        public WinControl UICopyPasteDropDownButton
        {
            get
            {
                if ((this.mUICopyPasteDropDownButton == null))
                {
                    this.mUICopyPasteDropDownButton = new WinControl(this);
                    #region Search Criteria
                    this.mUICopyPasteDropDownButton.SearchProperties[UITestControl.PropertyNames.Name] = "Copy && Paste";
                    this.mUICopyPasteDropDownButton.SearchProperties[UITestControl.PropertyNames.ControlType] = "DropDownButton";
                    #endregion
                }
                return this.mUICopyPasteDropDownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICopyButton;
        
        private WinButton mUIDeepCopyButton;
        
        private WinButton mUIPasteButton;
        
        private WinControl mUICopyPasteDropDownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRibbonToolBar3 : WinToolBar
    {
        
        public UIRibbonToolBar3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "Delete";
            #endregion
        }
        
        #region Properties
        public WinButton UIDeleteButton
        {
            get
            {
                if ((this.mUIDeleteButton == null))
                {
                    this.mUIDeleteButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIDeleteButton.SearchProperties[WinButton.PropertyNames.Name] = "Delete";
                    #endregion
                }
                return this.mUIDeleteButton;
            }
        }
        
        public WinControl UIDeleteDropDownButton
        {
            get
            {
                if ((this.mUIDeleteDropDownButton == null))
                {
                    this.mUIDeleteDropDownButton = new WinControl(this);
                    #region Search Criteria
                    this.mUIDeleteDropDownButton.SearchProperties[UITestControl.PropertyNames.Name] = "Delete";
                    this.mUIDeleteDropDownButton.SearchProperties[UITestControl.PropertyNames.ControlType] = "DropDownButton";
                    #endregion
                }
                return this.mUIDeleteDropDownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIDeleteButton;
        
        private WinControl mUIDeleteDropDownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRibbonToolBar4 : WinToolBar
    {
        
        public UIRibbonToolBar4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "Extension";
            #endregion
        }
        
        #region Properties
        public WinButton UIValidateButton
        {
            get
            {
                if ((this.mUIValidateButton == null))
                {
                    this.mUIValidateButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIValidateButton.SearchProperties[WinButton.PropertyNames.Name] = "Validate";
                    #endregion
                }
                return this.mUIValidateButton;
            }
        }
        
        public WinButton UIRevertButton
        {
            get
            {
                if ((this.mUIRevertButton == null))
                {
                    this.mUIRevertButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIRevertButton.SearchProperties[WinButton.PropertyNames.Name] = "Revert";
                    #endregion
                }
                return this.mUIRevertButton;
            }
        }
        
        public WinControl UIExtensionDropDownButton
        {
            get
            {
                if ((this.mUIExtensionDropDownButton == null))
                {
                    this.mUIExtensionDropDownButton = new WinControl(this);
                    #region Search Criteria
                    this.mUIExtensionDropDownButton.SearchProperties[UITestControl.PropertyNames.Name] = "Extension";
                    this.mUIExtensionDropDownButton.SearchProperties[UITestControl.PropertyNames.ControlType] = "DropDownButton";
                    #endregion
                }
                return this.mUIExtensionDropDownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIValidateButton;
        
        private WinButton mUIRevertButton;
        
        private WinControl mUIExtensionDropDownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRibbonToolBar5 : WinToolBar
    {
        
        public UIRibbonToolBar5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "Import && Export";
            #endregion
        }
        
        #region Properties
        public WinButton UIImportButton
        {
            get
            {
                if ((this.mUIImportButton == null))
                {
                    this.mUIImportButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIImportButton.SearchProperties[WinButton.PropertyNames.Name] = "Import";
                    #endregion
                }
                return this.mUIImportButton;
            }
        }
        
        public WinButton UIExportButton
        {
            get
            {
                if ((this.mUIExportButton == null))
                {
                    this.mUIExportButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIExportButton.SearchProperties[WinButton.PropertyNames.Name] = "Export";
                    #endregion
                }
                return this.mUIExportButton;
            }
        }
        
        public WinControl UIImportExportDropDownButton
        {
            get
            {
                if ((this.mUIImportExportDropDownButton == null))
                {
                    this.mUIImportExportDropDownButton = new WinControl(this);
                    #region Search Criteria
                    this.mUIImportExportDropDownButton.SearchProperties[UITestControl.PropertyNames.Name] = "Import && Export";
                    this.mUIImportExportDropDownButton.SearchProperties[UITestControl.PropertyNames.ControlType] = "DropDownButton";
                    #endregion
                }
                return this.mUIImportExportDropDownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIImportButton;
        
        private WinButton mUIExportButton;
        
        private WinControl mUIImportExportDropDownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRibbonToolBar6 : WinToolBar
    {
        
        public UIRibbonToolBar6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "Optimization";
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIOptimizationMenuItem
        {
            get
            {
                if ((this.mUIOptimizationMenuItem == null))
                {
                    this.mUIOptimizationMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOptimizationMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Optimization";
                    #endregion
                }
                return this.mUIOptimizationMenuItem;
            }
        }
        
        public WinControl UIOptimizationDropDownButton
        {
            get
            {
                if ((this.mUIOptimizationDropDownButton == null))
                {
                    this.mUIOptimizationDropDownButton = new WinControl(this);
                    #region Search Criteria
                    this.mUIOptimizationDropDownButton.SearchProperties[UITestControl.PropertyNames.Name] = "Optimization";
                    this.mUIOptimizationDropDownButton.SearchProperties[UITestControl.PropertyNames.ControlType] = "DropDownButton";
                    #endregion
                }
                return this.mUIOptimizationDropDownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIOptimizationMenuItem;
        
        private WinControl mUIOptimizationDropDownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOptimizationMenuItem : WinMenuItem
    {
        
        public UIOptimizationMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Optimization";
            #endregion
        }
        
        #region Properties
        public WinButton UIMoreimpressionsandclButton
        {
            get
            {
                if ((this.mUIMoreimpressionsandclButton == null))
                {
                    this.mUIMoreimpressionsandclButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMoreimpressionsandclButton.SearchProperties[WinButton.PropertyNames.Name] = "More impressions and clicks.";
                    this.mUIMoreimpressionsandclButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUIMoreimpressionsandclButton;
            }
        }
        
        public WinButton UIIncreasetheROIbyswitButton
        {
            get
            {
                if ((this.mUIIncreasetheROIbyswitButton == null))
                {
                    this.mUIIncreasetheROIbyswitButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIncreasetheROIbyswitButton.SearchProperties[WinButton.PropertyNames.Name] = "Increase the ROI by switching bid type.";
                    this.mUIIncreasetheROIbyswitButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUIIncreasetheROIbyswitButton;
            }
        }
        
        public WinButton UIPausebadperformingadButton
        {
            get
            {
                if ((this.mUIPausebadperformingadButton == null))
                {
                    this.mUIPausebadperformingadButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPausebadperformingadButton.SearchProperties[WinButton.PropertyNames.Name] = "Pause bad performing ads.";
                    this.mUIPausebadperformingadButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUIPausebadperformingadButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIMoreimpressionsandclButton;
        
        private WinButton mUIIncreasetheROIbyswitButton;
        
        private WinButton mUIPausebadperformingadButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRibbonToolBar7 : WinToolBar
    {
        
        public UIRibbonToolBar7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "Reporting";
            #endregion
        }
        
        #region Properties
        public WinButton UIReportButton
        {
            get
            {
                if ((this.mUIReportButton == null))
                {
                    this.mUIReportButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIReportButton.SearchProperties[WinButton.PropertyNames.Name] = "Report";
                    #endregion
                }
                return this.mUIReportButton;
            }
        }
        
        public WinControl UIReportingDropDownButton
        {
            get
            {
                if ((this.mUIReportingDropDownButton == null))
                {
                    this.mUIReportingDropDownButton = new WinControl(this);
                    #region Search Criteria
                    this.mUIReportingDropDownButton.SearchProperties[UITestControl.PropertyNames.Name] = "Reporting";
                    this.mUIReportingDropDownButton.SearchProperties[UITestControl.PropertyNames.ControlType] = "DropDownButton";
                    #endregion
                }
                return this.mUIReportingDropDownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIReportButton;
        
        private WinControl mUIReportingDropDownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar310 : WinScrollBar
    {
        
        public UIVerticalScrollBar310(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar310 : WinScrollBar
    {
        
        public UIHorizontalScrollBar310(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIAdSageforPerformanceScrollBar : WinScrollBar
    {
        
        public UIAdSageforPerformanceScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIAdSageforPerformanceScrollBar1 : WinScrollBar
    {
        
        public UIAdSageforPerformanceScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow5 : WinWindow
    {
        
        public UIItemWindow5()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Desktop";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            #endregion
        }
        
        #region Properties
        public UIItemWindow21 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow21(this);
                }
                return this.mUIItemWindow2;
            }
        }
        
        public UIVerticalScrollBar47 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar47(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar47 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar47(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UICbStatusList UICbStatusList
        {
            get
            {
                if ((this.mUICbStatusList == null))
                {
                    this.mUICbStatusList = new UICbStatusList(this);
                }
                return this.mUICbStatusList;
            }
        }
        
        public UIVerticalScrollBar112 UIVerticalScrollBar1
        {
            get
            {
                if ((this.mUIVerticalScrollBar1 == null))
                {
                    this.mUIVerticalScrollBar1 = new UIVerticalScrollBar112(this);
                }
                return this.mUIVerticalScrollBar1;
            }
        }
        
        public UIHorizontalScrollBar112 UIHorizontalScrollBar1
        {
            get
            {
                if ((this.mUIHorizontalScrollBar1 == null))
                {
                    this.mUIHorizontalScrollBar1 = new UIHorizontalScrollBar112(this);
                }
                return this.mUIHorizontalScrollBar1;
            }
        }
        
        public UIItemWindow111 UIItemWindow11
        {
            get
            {
                if ((this.mUIItemWindow11 == null))
                {
                    this.mUIItemWindow11 = new UIItemWindow111(this);
                }
                return this.mUIItemWindow11;
            }
        }
        
        public UIItemWindow12 UIItemWindow12
        {
            get
            {
                if ((this.mUIItemWindow12 == null))
                {
                    this.mUIItemWindow12 = new UIItemWindow12(this);
                }
                return this.mUIItemWindow12;
            }
        }
        
        public UIItemWindow13 UIItemWindow13
        {
            get
            {
                if ((this.mUIItemWindow13 == null))
                {
                    this.mUIItemWindow13 = new UIItemWindow13(this);
                }
                return this.mUIItemWindow13;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow21 mUIItemWindow2;
        
        private UIVerticalScrollBar47 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar47 mUIHorizontalScrollBar;
        
        private UIItemWindow11 mUIItemWindow1;
        
        private UICbStatusList mUICbStatusList;
        
        private UIVerticalScrollBar112 mUIVerticalScrollBar1;
        
        private UIHorizontalScrollBar112 mUIHorizontalScrollBar1;
        
        private UIItemWindow111 mUIItemWindow11;
        
        private UIItemWindow12 mUIItemWindow12;
        
        private UIItemWindow13 mUIItemWindow13;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow21 : WinWindow
    {
        
        public UIItemWindow21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ComboLBox";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "5";
            #endregion
        }
        
        #region Properties
        public UIItemTitleBar2 UIItemTitleBar
        {
            get
            {
                if ((this.mUIItemTitleBar == null))
                {
                    this.mUIItemTitleBar = new UIItemTitleBar2(this);
                }
                return this.mUIItemTitleBar;
            }
        }
        
        public UIItemList UIItemList
        {
            get
            {
                if ((this.mUIItemList == null))
                {
                    this.mUIItemList = new UIItemList(this);
                }
                return this.mUIItemList;
            }
        }
        
        public WinControl UIItemGrip
        {
            get
            {
                if ((this.mUIItemGrip == null))
                {
                    this.mUIItemGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIItemGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIItemGrip;
            }
        }
        #endregion
        
        #region Fields
        private UIItemTitleBar2 mUIItemTitleBar;
        
        private UIItemList mUIItemList;
        
        private WinControl mUIItemGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemTitleBar2 : WinTitleBar
    {
        
        public UIItemTitleBar2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemList : WinList
    {
        
        public UIItemList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinListItem UIDailyListItem
        {
            get
            {
                if ((this.mUIDailyListItem == null))
                {
                    this.mUIDailyListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIDailyListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Daily";
                    #endregion
                }
                return this.mUIDailyListItem;
            }
        }
        
        public WinListItem UILifetimeListItem
        {
            get
            {
                if ((this.mUILifetimeListItem == null))
                {
                    this.mUILifetimeListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUILifetimeListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Lifetime";
                    #endregion
                }
                return this.mUILifetimeListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUIDailyListItem;
        
        private WinListItem mUILifetimeListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar47 : WinScrollBar
    {
        
        public UIVerticalScrollBar47(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar47 : WinScrollBar
    {
        
        public UIHorizontalScrollBar47(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "cbStatus";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ComboLBox";
            #endregion
        }
        
        #region Properties
        public UIItemTitleBar3 UIItemTitleBar
        {
            get
            {
                if ((this.mUIItemTitleBar == null))
                {
                    this.mUIItemTitleBar = new UIItemTitleBar3(this);
                }
                return this.mUIItemTitleBar;
            }
        }
        
        public WinControl UIItemGrip
        {
            get
            {
                if ((this.mUIItemGrip == null))
                {
                    this.mUIItemGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIItemGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIItemGrip;
            }
        }
        #endregion
        
        #region Fields
        private UIItemTitleBar3 mUIItemTitleBar;
        
        private WinControl mUIItemGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemTitleBar3 : WinTitleBar
    {
        
        public UIItemTitleBar3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICbStatusList : WinList
    {
        
        public UICbStatusList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "cbStatus";
            #endregion
        }
        
        #region Properties
        public WinListItem UIActiveListItem
        {
            get
            {
                if ((this.mUIActiveListItem == null))
                {
                    this.mUIActiveListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIActiveListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Active";
                    #endregion
                }
                return this.mUIActiveListItem;
            }
        }
        
        public WinListItem UIPausedListItem
        {
            get
            {
                if ((this.mUIPausedListItem == null))
                {
                    this.mUIPausedListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIPausedListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Paused";
                    #endregion
                }
                return this.mUIPausedListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUIActiveListItem;
        
        private WinListItem mUIPausedListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerticalScrollBar112 : WinScrollBar
    {
        
        public UIVerticalScrollBar112(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHorizontalScrollBar112 : WinScrollBar
    {
        
        public UIHorizontalScrollBar112(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow111 : WinWindow
    {
        
        public UIItemWindow111(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            #endregion
        }
        
        #region Properties
        public WinClient UIItemClient
        {
            get
            {
                if ((this.mUIItemClient == null))
                {
                    this.mUIItemClient = new WinClient(this);
                }
                return this.mUIItemClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIItemClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow12 : WinWindow
    {
        
        public UIItemWindow12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            #endregion
        }
        
        #region Properties
        public WinClient UIItemClient
        {
            get
            {
                if ((this.mUIItemClient == null))
                {
                    this.mUIItemClient = new WinClient(this);
                }
                return this.mUIItemClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIItemClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow13 : WinWindow
    {
        
        public UIItemWindow13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            #endregion
        }
        
        #region Properties
        public WinClient UIItemClient
        {
            get
            {
                if ((this.mUIItemClient == null))
                {
                    this.mUIItemClient = new WinClient(this);
                }
                return this.mUIItemClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIItemClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHaihadsagecom4684830Window : WinWindow
    {
        
        public UIHaihadsagecom4684830Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "haih@ad-sage.com #46848300(USD) - adSage for Performance";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("haih@ad-sage.com #46848300(USD) - adSage for Performance");
            #endregion
        }
        
        #region Properties
        public UIRibbonTabsTabList1 UIRibbonTabsTabList
        {
            get
            {
                if ((this.mUIRibbonTabsTabList == null))
                {
                    this.mUIRibbonTabsTabList = new UIRibbonTabsTabList1(this);
                }
                return this.mUIRibbonTabsTabList;
            }
        }
        
        public UIRibbonToolBar8 UIRibbonToolBar
        {
            get
            {
                if ((this.mUIRibbonToolBar == null))
                {
                    this.mUIRibbonToolBar = new UIRibbonToolBar8(this);
                }
                return this.mUIRibbonToolBar;
            }
        }
        
        public UIAccountTreeViewWindow1 UIAccountTreeViewWindow
        {
            get
            {
                if ((this.mUIAccountTreeViewWindow == null))
                {
                    this.mUIAccountTreeViewWindow = new UIAccountTreeViewWindow1(this);
                }
                return this.mUIAccountTreeViewWindow;
            }
        }
        
        public UIRibbonToolBar11 UIRibbonToolBar1
        {
            get
            {
                if ((this.mUIRibbonToolBar1 == null))
                {
                    this.mUIRibbonToolBar1 = new UIRibbonToolBar11(this);
                }
                return this.mUIRibbonToolBar1;
            }
        }
        
        public UIRibbonToolBar21 UIRibbonToolBar2
        {
            get
            {
                if ((this.mUIRibbonToolBar2 == null))
                {
                    this.mUIRibbonToolBar2 = new UIRibbonToolBar21(this);
                }
                return this.mUIRibbonToolBar2;
            }
        }
        #endregion
        
        #region Fields
        private UIRibbonTabsTabList1 mUIRibbonTabsTabList;
        
        private UIRibbonToolBar8 mUIRibbonToolBar;
        
        private UIAccountTreeViewWindow1 mUIAccountTreeViewWindow;
        
        private UIRibbonToolBar11 mUIRibbonToolBar1;
        
        private UIRibbonToolBar21 mUIRibbonToolBar2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRibbonTabsTabList1 : WinTabList
    {
        
        public UIRibbonTabsTabList1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTabList.PropertyNames.Name] = "Ribbon Tabs";
            this.WindowTitles.Add("haih@ad-sage.com #46848300(USD) - adSage for Performance");
            #endregion
        }
        
        #region Properties
        public WinTabPage UIHomeTabPage
        {
            get
            {
                if ((this.mUIHomeTabPage == null))
                {
                    this.mUIHomeTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUIHomeTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Home";
                    this.mUIHomeTabPage.WindowTitles.Add("haih@ad-sage.com #46848300(USD) - adSage for Performance");
                    #endregion
                }
                return this.mUIHomeTabPage;
            }
        }
        #endregion
        
        #region Fields
        private WinTabPage mUIHomeTabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRibbonToolBar8 : WinToolBar
    {
        
        public UIRibbonToolBar8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "Synchronization";
            this.WindowTitles.Add("haih@ad-sage.com #46848300(USD) - adSage for Performance");
            #endregion
        }
        
        #region Properties
        public WinButton UIUploadAccountsButton
        {
            get
            {
                if ((this.mUIUploadAccountsButton == null))
                {
                    this.mUIUploadAccountsButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIUploadAccountsButton.SearchProperties[WinButton.PropertyNames.Name] = "Upload Accounts";
                    this.mUIUploadAccountsButton.WindowTitles.Add("haih@ad-sage.com #46848300(USD) - adSage for Performance");
                    #endregion
                }
                return this.mUIUploadAccountsButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIUploadAccountsButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIAccountTreeViewWindow1 : WinWindow
    {
        
        public UIAccountTreeViewWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "accountTreeView";
            this.WindowTitles.Add("haih@ad-sage.com #46848300(USD) - adSage for Performance");
            #endregion
        }
        
        #region Properties
        public UIYourAccounts1TreeItem1 UIYourAccounts1TreeItem
        {
            get
            {
                if ((this.mUIYourAccounts1TreeItem == null))
                {
                    this.mUIYourAccounts1TreeItem = new UIYourAccounts1TreeItem1(this);
                }
                return this.mUIYourAccounts1TreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIYourAccounts1TreeItem1 mUIYourAccounts1TreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIYourAccounts1TreeItem1 : WinTreeItem
    {
        
        public UIYourAccounts1TreeItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Your Accounts(1)";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("haih@ad-sage.com #46848300(USD) - adSage for Performance");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIHaihadsagecom4684830TreeItem
        {
            get
            {
                if ((this.mUIHaihadsagecom4684830TreeItem == null))
                {
                    this.mUIHaihadsagecom4684830TreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIHaihadsagecom4684830TreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "haih@ad-sage.com #46848300(USD)";
                    this.mUIHaihadsagecom4684830TreeItem.SearchProperties["Value"] = "1";
                    this.mUIHaihadsagecom4684830TreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIHaihadsagecom4684830TreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIHaihadsagecom4684830TreeItem.WindowTitles.Add("haih@ad-sage.com #46848300(USD) - adSage for Performance");
                    #endregion
                }
                return this.mUIHaihadsagecom4684830TreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIHaihadsagecom4684830TreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRibbonToolBar11 : WinToolBar
    {
        
        public UIRibbonToolBar11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "Delete";
            this.WindowTitles.Add("haih@ad-sage.com #46848300(USD) - adSage for Performance");
            #endregion
        }
        
        #region Properties
        public WinButton UIDeleteButton
        {
            get
            {
                if ((this.mUIDeleteButton == null))
                {
                    this.mUIDeleteButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIDeleteButton.SearchProperties[WinButton.PropertyNames.Name] = "Delete";
                    this.mUIDeleteButton.WindowTitles.Add("haih@ad-sage.com #46848300(USD) - adSage for Performance");
                    #endregion
                }
                return this.mUIDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRibbonToolBar21 : WinToolBar
    {
        
        public UIRibbonToolBar21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "Extension";
            this.WindowTitles.Add("haih@ad-sage.com #46848300(USD) - adSage for Performance");
            #endregion
        }
        
        #region Properties
        public WinButton UIRevertButton
        {
            get
            {
                if ((this.mUIRevertButton == null))
                {
                    this.mUIRevertButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIRevertButton.SearchProperties[WinButton.PropertyNames.Name] = "Revert";
                    this.mUIRevertButton.WindowTitles.Add("haih@ad-sage.com #46848300(USD) - adSage for Performance");
                    #endregion
                }
                return this.mUIRevertButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIRevertButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow14 : WinWindow
    {
        
        public UIItemWindow14()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "DropDown";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIDropDownMenu UIDropDownMenu
        {
            get
            {
                if ((this.mUIDropDownMenu == null))
                {
                    this.mUIDropDownMenu = new UIDropDownMenu(this);
                }
                return this.mUIDropDownMenu;
            }
        }
        #endregion
        
        #region Fields
        private UIDropDownMenu mUIDropDownMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDropDownMenu : WinMenu
    {
        
        public UIDropDownMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "DropDown";
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIDownloadAccountMenuItem
        {
            get
            {
                if ((this.mUIDownloadAccountMenuItem == null))
                {
                    this.mUIDownloadAccountMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIDownloadAccountMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Download Account";
                    #endregion
                }
                return this.mUIDownloadAccountMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIDownloadAccountMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHaihadsagecom4684830Window1 : WinWindow
    {
        
        public UIHaihadsagecom4684830Window1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "haih@ad-sage.com #46848300(USD) - h4XEK - adSage for Performance";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("haih@ad-sage.com #46848300(USD) - h4XEK - adSage for Performance");
            this.WindowTitles.Add("haih@ad-sage.com #46848300(USD) - adSage for Performance");
            #endregion
        }
        
        #region Properties
        public UIItemTabList1 UIItemTabList
        {
            get
            {
                if ((this.mUIItemTabList == null))
                {
                    this.mUIItemTabList = new UIItemTabList1(this);
                }
                return this.mUIItemTabList;
            }
        }
        #endregion
        
        #region Fields
        private UIItemTabList1 mUIItemTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemTabList1 : WinTabList
    {
        
        public UIItemTabList1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("haih@ad-sage.com #46848300(USD) - h4XEK - adSage for Performance");
            #endregion
        }
        
        #region Properties
        public WinTabPage UIAds0TabPage
        {
            get
            {
                if ((this.mUIAds0TabPage == null))
                {
                    this.mUIAds0TabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUIAds0TabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Ads(0)";
                    this.mUIAds0TabPage.WindowTitles.Add("haih@ad-sage.com #46848300(USD) - h4XEK - adSage for Performance");
                    #endregion
                }
                return this.mUIAds0TabPage;
            }
        }
        #endregion
        
        #region Fields
        private WinTabPage mUIAds0TabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIWss_adsagetest163comWindow : WinWindow
    {
        
        public UIWss_adsagetest163comWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "wss_adsagetest@163.com(CNY) - adSage for Performance";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("wss_adsagetest@163.com(CNY) - adSage for Performance");
            #endregion
        }
        
        #region Properties
        public UITBDailyBudgetWindow UITBDailyBudgetWindow
        {
            get
            {
                if ((this.mUITBDailyBudgetWindow == null))
                {
                    this.mUITBDailyBudgetWindow = new UITBDailyBudgetWindow(this);
                }
                return this.mUITBDailyBudgetWindow;
            }
        }
        
        public UICBStatusWindow UICBStatusWindow
        {
            get
            {
                if ((this.mUICBStatusWindow == null))
                {
                    this.mUICBStatusWindow = new UICBStatusWindow(this);
                }
                return this.mUICBStatusWindow;
            }
        }
        
        public UICBSearchNetworkWindow UICBSearchNetworkWindow
        {
            get
            {
                if ((this.mUICBSearchNetworkWindow == null))
                {
                    this.mUICBSearchNetworkWindow = new UICBSearchNetworkWindow(this);
                }
                return this.mUICBSearchNetworkWindow;
            }
        }
        
        public UIDTPStartDateWindow UIDTPStartDateWindow
        {
            get
            {
                if ((this.mUIDTPStartDateWindow == null))
                {
                    this.mUIDTPStartDateWindow = new UIDTPStartDateWindow(this);
                }
                return this.mUIDTPStartDateWindow;
            }
        }
        
        public UIDTPEndDateWindow UIDTPEndDateWindow
        {
            get
            {
                if ((this.mUIDTPEndDateWindow == null))
                {
                    this.mUIDTPEndDateWindow = new UIDTPEndDateWindow(this);
                }
                return this.mUIDTPEndDateWindow;
            }
        }
        
        public UICBContentNetworkWindow UICBContentNetworkWindow
        {
            get
            {
                if ((this.mUICBContentNetworkWindow == null))
                {
                    this.mUICBContentNetworkWindow = new UICBContentNetworkWindow(this);
                }
                return this.mUICBContentNetworkWindow;
            }
        }
        #endregion
        
        #region Fields
        private UITBDailyBudgetWindow mUITBDailyBudgetWindow;
        
        private UICBStatusWindow mUICBStatusWindow;
        
        private UICBSearchNetworkWindow mUICBSearchNetworkWindow;
        
        private UIDTPStartDateWindow mUIDTPStartDateWindow;
        
        private UIDTPEndDateWindow mUIDTPEndDateWindow;
        
        private UICBContentNetworkWindow mUICBContentNetworkWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITBDailyBudgetWindow : WinWindow
    {
        
        public UITBDailyBudgetWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "TBDailyBudget";
            this.WindowTitles.Add("wss_adsagetest@163.com(CNY) - adSage for Performance");
            #endregion
        }
        
        #region Properties
        public WinEdit UITBDailyBudgetEdit
        {
            get
            {
                if ((this.mUITBDailyBudgetEdit == null))
                {
                    this.mUITBDailyBudgetEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITBDailyBudgetEdit.SearchProperties[WinEdit.PropertyNames.Name] = "TBDailyBudget";
                    this.mUITBDailyBudgetEdit.WindowTitles.Add("wss_adsagetest@163.com(CNY) - adSage for Performance");
                    #endregion
                }
                return this.mUITBDailyBudgetEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITBDailyBudgetEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICBStatusWindow : WinWindow
    {
        
        public UICBStatusWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "CBStatus";
            this.WindowTitles.Add("wss_adsagetest@163.com(CNY) - adSage for Performance");
            #endregion
        }
        
        #region Properties
        public WinComboBox UICBStatusComboBox
        {
            get
            {
                if ((this.mUICBStatusComboBox == null))
                {
                    this.mUICBStatusComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUICBStatusComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "CBStatus";
                    this.mUICBStatusComboBox.WindowTitles.Add("wss_adsagetest@163.com(CNY) - adSage for Performance");
                    #endregion
                }
                return this.mUICBStatusComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUICBStatusComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICBSearchNetworkWindow : WinWindow
    {
        
        public UICBSearchNetworkWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "CBSearchNetwork";
            this.WindowTitles.Add("wss_adsagetest@163.com(CNY) - adSage for Performance");
            #endregion
        }
        
        #region Properties
        public WinComboBox UICBSearchNetworkComboBox
        {
            get
            {
                if ((this.mUICBSearchNetworkComboBox == null))
                {
                    this.mUICBSearchNetworkComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUICBSearchNetworkComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "CBSearchNetwork";
                    this.mUICBSearchNetworkComboBox.WindowTitles.Add("wss_adsagetest@163.com(CNY) - adSage for Performance");
                    #endregion
                }
                return this.mUICBSearchNetworkComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUICBSearchNetworkComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDTPStartDateWindow : WinWindow
    {
        
        public UIDTPStartDateWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "DTPStartDate";
            this.WindowTitles.Add("wss_adsagetest@163.com(CNY) - adSage for Performance");
            #endregion
        }
        
        #region Properties
        public UITuesdaySeptember2020DropDown UITuesdaySeptember2020DropDown
        {
            get
            {
                if ((this.mUITuesdaySeptember2020DropDown == null))
                {
                    this.mUITuesdaySeptember2020DropDown = new UITuesdaySeptember2020DropDown(this);
                }
                return this.mUITuesdaySeptember2020DropDown;
            }
        }
        #endregion
        
        #region Fields
        private UITuesdaySeptember2020DropDown mUITuesdaySeptember2020DropDown;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITuesdaySeptember2020DropDown : WinControl
    {
        
        public UITuesdaySeptember2020DropDown(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Tuesday, September 20, 2011";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "DropDown";
            this.WindowTitles.Add("wss_adsagetest@163.com(CNY) - adSage for Performance");
            #endregion
        }
        
        #region Properties
        public WinControl UITuesdaySeptember2020DropDown1
        {
            get
            {
                if ((this.mUITuesdaySeptember2020DropDown1 == null))
                {
                    this.mUITuesdaySeptember2020DropDown1 = new WinControl(this);
                    #region Search Criteria
                    this.mUITuesdaySeptember2020DropDown1.SearchProperties[UITestControl.PropertyNames.Name] = "Tuesday, September 20, 2011";
                    this.mUITuesdaySeptember2020DropDown1.SearchProperties[UITestControl.PropertyNames.ControlType] = "DropDown";
                    this.mUITuesdaySeptember2020DropDown1.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mUITuesdaySeptember2020DropDown1.WindowTitles.Add("wss_adsagetest@163.com(CNY) - adSage for Performance");
                    #endregion
                }
                return this.mUITuesdaySeptember2020DropDown1;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUITuesdaySeptember2020DropDown1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDTPEndDateWindow : WinWindow
    {
        
        public UIDTPEndDateWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "DTPEndDate";
            this.WindowTitles.Add("wss_adsagetest@163.com(CNY) - adSage for Performance");
            #endregion
        }
        
        #region Properties
        public UIWednesdaySeptember19DropDown UIWednesdaySeptember19DropDown
        {
            get
            {
                if ((this.mUIWednesdaySeptember19DropDown == null))
                {
                    this.mUIWednesdaySeptember19DropDown = new UIWednesdaySeptember19DropDown(this);
                }
                return this.mUIWednesdaySeptember19DropDown;
            }
        }
        #endregion
        
        #region Fields
        private UIWednesdaySeptember19DropDown mUIWednesdaySeptember19DropDown;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIWednesdaySeptember19DropDown : WinControl
    {
        
        public UIWednesdaySeptember19DropDown(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Wednesday, September 19, 2012";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "DropDown";
            this.WindowTitles.Add("wss_adsagetest@163.com(CNY) - adSage for Performance");
            #endregion
        }
        
        #region Properties
        public WinControl UIWednesdaySeptember19DropDown1
        {
            get
            {
                if ((this.mUIWednesdaySeptember19DropDown1 == null))
                {
                    this.mUIWednesdaySeptember19DropDown1 = new WinControl(this);
                    #region Search Criteria
                    this.mUIWednesdaySeptember19DropDown1.SearchProperties[UITestControl.PropertyNames.Name] = "Wednesday, September 19, 2012";
                    this.mUIWednesdaySeptember19DropDown1.SearchProperties[UITestControl.PropertyNames.ControlType] = "DropDown";
                    this.mUIWednesdaySeptember19DropDown1.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mUIWednesdaySeptember19DropDown1.WindowTitles.Add("wss_adsagetest@163.com(CNY) - adSage for Performance");
                    #endregion
                }
                return this.mUIWednesdaySeptember19DropDown1;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUIWednesdaySeptember19DropDown1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICBContentNetworkWindow : WinWindow
    {
        
        public UICBContentNetworkWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "CBContentNetwork";
            this.WindowTitles.Add("wss_adsagetest@163.com(CNY) - adSage for Performance");
            #endregion
        }
        
        #region Properties
        public WinComboBox UICBContentNetworkComboBox
        {
            get
            {
                if ((this.mUICBContentNetworkComboBox == null))
                {
                    this.mUICBContentNetworkComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUICBContentNetworkComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "CBContentNetwork";
                    this.mUICBContentNetworkComboBox.WindowTitles.Add("wss_adsagetest@163.com(CNY) - adSage for Performance");
                    #endregion
                }
                return this.mUICBContentNetworkComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUICBContentNetworkComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHaihadsagecom4684830Window2 : WinWindow
    {
        
        public UIHaihadsagecom4684830Window2()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "haih@ad-sage.com #46848300(USD) - adSage for Performance";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("haih@ad-sage.com #46848300(USD) - adSage for Performance");
            #endregion
        }
        
        #region Properties
        public UIDtpFromWindow1 UIDtpFromWindow
        {
            get
            {
                if ((this.mUIDtpFromWindow == null))
                {
                    this.mUIDtpFromWindow = new UIDtpFromWindow1(this);
                }
                return this.mUIDtpFromWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIDtpFromWindow1 mUIDtpFromWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDtpFromWindow1 : WinWindow
    {
        
        public UIDtpFromWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "dtpFrom";
            this.WindowTitles.Add("haih@ad-sage.com #46848300(USD) - adSage for Performance");
            #endregion
        }
        
        #region Properties
        public UIWednesdaySeptember21DropDown UIWednesdaySeptember21DropDown
        {
            get
            {
                if ((this.mUIWednesdaySeptember21DropDown == null))
                {
                    this.mUIWednesdaySeptember21DropDown = new UIWednesdaySeptember21DropDown(this);
                }
                return this.mUIWednesdaySeptember21DropDown;
            }
        }
        
        public WinClient UIDtpFromClient
        {
            get
            {
                if ((this.mUIDtpFromClient == null))
                {
                    this.mUIDtpFromClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIDtpFromClient.WindowTitles.Add("haih@ad-sage.com #46848300(USD) - adSage for Performance");
                    #endregion
                }
                return this.mUIDtpFromClient;
            }
        }
        
        public WinDateTimePicker UIDtpFromDateTimePicker
        {
            get
            {
                if ((this.mUIDtpFromDateTimePicker == null))
                {
                    this.mUIDtpFromDateTimePicker = new WinDateTimePicker(this);
                    #region Search Criteria
                    this.mUIDtpFromDateTimePicker.WindowTitles.Add("haih@ad-sage.com #46848300(USD) - adSage for Performance");
                    #endregion
                }
                return this.mUIDtpFromDateTimePicker;
            }
        }
        #endregion
        
        #region Fields
        private UIWednesdaySeptember21DropDown mUIWednesdaySeptember21DropDown;
        
        private WinClient mUIDtpFromClient;
        
        private WinDateTimePicker mUIDtpFromDateTimePicker;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIWednesdaySeptember21DropDown : WinControl
    {
        
        public UIWednesdaySeptember21DropDown(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Wednesday, September 21, 2011";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "DropDown";
            this.WindowTitles.Add("haih@ad-sage.com #46848300(USD) - adSage for Performance");
            #endregion
        }
        
        #region Properties
        public WinControl UIWednesdaySeptember21DropDown1
        {
            get
            {
                if ((this.mUIWednesdaySeptember21DropDown1 == null))
                {
                    this.mUIWednesdaySeptember21DropDown1 = new WinControl(this);
                    #region Search Criteria
                    this.mUIWednesdaySeptember21DropDown1.SearchProperties[UITestControl.PropertyNames.Name] = "Wednesday, September 21, 2011";
                    this.mUIWednesdaySeptember21DropDown1.SearchProperties[UITestControl.PropertyNames.ControlType] = "DropDown";
                    this.mUIWednesdaySeptember21DropDown1.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mUIWednesdaySeptember21DropDown1.WindowTitles.Add("haih@ad-sage.com #46848300(USD) - adSage for Performance");
                    #endregion
                }
                return this.mUIWednesdaySeptember21DropDown1;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUIWednesdaySeptember21DropDown1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHaihadsagecom4684830Window3 : WinWindow
    {
        
        public UIHaihadsagecom4684830Window3()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "haih@ad-sage.com #46848300(USD) - adSage for Performance";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("haih@ad-sage.com #46848300(USD) - adSage for Performance");
            #endregion
        }
        
        #region Properties
        public UIDtpToWindow1 UIDtpToWindow
        {
            get
            {
                if ((this.mUIDtpToWindow == null))
                {
                    this.mUIDtpToWindow = new UIDtpToWindow1(this);
                }
                return this.mUIDtpToWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIDtpToWindow1 mUIDtpToWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDtpToWindow1 : WinWindow
    {
        
        public UIDtpToWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "dtpTo";
            this.WindowTitles.Add("haih@ad-sage.com #46848300(USD) - adSage for Performance");
            #endregion
        }
        
        #region Properties
        public UIFridayJanuary012100DropDown UIFridayJanuary012100DropDown
        {
            get
            {
                if ((this.mUIFridayJanuary012100DropDown == null))
                {
                    this.mUIFridayJanuary012100DropDown = new UIFridayJanuary012100DropDown(this);
                }
                return this.mUIFridayJanuary012100DropDown;
            }
        }
        
        public WinClient UIDtpToClient
        {
            get
            {
                if ((this.mUIDtpToClient == null))
                {
                    this.mUIDtpToClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIDtpToClient.WindowTitles.Add("haih@ad-sage.com #46848300(USD) - adSage for Performance");
                    #endregion
                }
                return this.mUIDtpToClient;
            }
        }
        
        public WinDateTimePicker UIDtpToDateTimePicker
        {
            get
            {
                if ((this.mUIDtpToDateTimePicker == null))
                {
                    this.mUIDtpToDateTimePicker = new WinDateTimePicker(this);
                    #region Search Criteria
                    this.mUIDtpToDateTimePicker.WindowTitles.Add("haih@ad-sage.com #46848300(USD) - adSage for Performance");
                    #endregion
                }
                return this.mUIDtpToDateTimePicker;
            }
        }
        #endregion
        
        #region Fields
        private UIFridayJanuary012100DropDown mUIFridayJanuary012100DropDown;
        
        private WinClient mUIDtpToClient;
        
        private WinDateTimePicker mUIDtpToDateTimePicker;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFridayJanuary012100DropDown : WinControl
    {
        
        public UIFridayJanuary012100DropDown(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Friday, January 01, 2100";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "DropDown";
            this.WindowTitles.Add("haih@ad-sage.com #46848300(USD) - adSage for Performance");
            #endregion
        }
        
        #region Properties
        public WinControl UIFridayJanuary012100DropDown1
        {
            get
            {
                if ((this.mUIFridayJanuary012100DropDown1 == null))
                {
                    this.mUIFridayJanuary012100DropDown1 = new WinControl(this);
                    #region Search Criteria
                    this.mUIFridayJanuary012100DropDown1.SearchProperties[UITestControl.PropertyNames.Name] = "Friday, January 01, 2100";
                    this.mUIFridayJanuary012100DropDown1.SearchProperties[UITestControl.PropertyNames.ControlType] = "DropDown";
                    this.mUIFridayJanuary012100DropDown1.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mUIFridayJanuary012100DropDown1.WindowTitles.Add("haih@ad-sage.com #46848300(USD) - adSage for Performance");
                    #endregion
                }
                return this.mUIFridayJanuary012100DropDown1;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUIFridayJanuary012100DropDown1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHaihadsagecom4684830Window4 : WinWindow
    {
        
        public UIHaihadsagecom4684830Window4()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "haih@ad-sage.com #46848300(USD) - adSage for Performance";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("haih@ad-sage.com #46848300(USD) - adSage for Performance");
            #endregion
        }
        
        #region Properties
        public UIItemWindow6 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow6(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow6 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow6 : WinWindow
    {
        
        public UIItemWindow6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "16";
            this.WindowTitles.Add("haih@ad-sage.com #46848300(USD) - adSage for Performance");
            #endregion
        }
        
        #region Properties
        public UIRow1Row5 UIRow1Row
        {
            get
            {
                if ((this.mUIRow1Row == null))
                {
                    this.mUIRow1Row = new UIRow1Row5(this);
                }
                return this.mUIRow1Row;
            }
        }
        
        public UINewItemRowRow UINewItemRowRow
        {
            get
            {
                if ((this.mUINewItemRowRow == null))
                {
                    this.mUINewItemRowRow = new UINewItemRowRow(this);
                }
                return this.mUINewItemRowRow;
            }
        }
        
        public UIItemTable UIItemTable
        {
            get
            {
                if ((this.mUIItemTable == null))
                {
                    this.mUIItemTable = new UIItemTable(this);
                }
                return this.mUIItemTable;
            }
        }
        #endregion
        
        #region Fields
        private UIRow1Row5 mUIRow1Row;
        
        private UINewItemRowRow mUINewItemRowRow;
        
        private UIItemTable mUIItemTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRow1Row5 : WinRow
    {
        
        public UIRow1Row5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Name] = "Row 1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("haih@ad-sage.com #46848300(USD) - adSage for Performance");
            #endregion
        }
        
        #region Properties
        public WinCell UI___6kQ5VjCell
        {
            get
            {
                if ((this.mUI___6kQ5VjCell == null))
                {
                    this.mUI___6kQ5VjCell = new WinCell(this);
                    #region Search Criteria
                    this.mUI___6kQ5VjCell.SearchProperties[WinCell.PropertyNames.Value] = "___6kQ5Vj";
                    this.mUI___6kQ5VjCell.WindowTitles.Add("haih@ad-sage.com #46848300(USD) - adSage for Performance");
                    #endregion
                }
                return this.mUI___6kQ5VjCell;
            }
        }
        
        public WinCell UILocalStateExtensionrCell
        {
            get
            {
                if ((this.mUILocalStateExtensionrCell == null))
                {
                    this.mUILocalStateExtensionrCell = new WinCell(this);
                    #region Search Criteria
                    this.mUILocalStateExtensionrCell.WindowTitles.Add("haih@ad-sage.com #46848300(USD) - adSage for Performance");
                    #endregion
                }
                return this.mUILocalStateExtensionrCell;
            }
        }
        
        public WinCell UIActiveCell
        {
            get
            {
                if ((this.mUIActiveCell == null))
                {
                    this.mUIActiveCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIActiveCell.SearchProperties[WinCell.PropertyNames.Value] = "Active";
                    this.mUIActiveCell.WindowTitles.Add("haih@ad-sage.com #46848300(USD) - adSage for Performance");
                    #endregion
                }
                return this.mUIActiveCell;
            }
        }
        
        public WinCell UIItem1Cell
        {
            get
            {
                if ((this.mUIItem1Cell == null))
                {
                    this.mUIItem1Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem1Cell.SearchProperties[WinCell.PropertyNames.Value] = "1";
                    this.mUIItem1Cell.WindowTitles.Add("haih@ad-sage.com #46848300(USD) - adSage for Performance");
                    #endregion
                }
                return this.mUIItem1Cell;
            }
        }
        
        public WinCell UIDailyCell
        {
            get
            {
                if ((this.mUIDailyCell == null))
                {
                    this.mUIDailyCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIDailyCell.SearchProperties[WinCell.PropertyNames.Value] = "Daily";
                    this.mUIDailyCell.WindowTitles.Add("haih@ad-sage.com #46848300(USD) - adSage for Performance");
                    #endregion
                }
                return this.mUIDailyCell;
            }
        }
        
        public WinCell UIItem092120112309Cell
        {
            get
            {
                if ((this.mUIItem092120112309Cell == null))
                {
                    this.mUIItem092120112309Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem092120112309Cell.SearchProperties[WinCell.PropertyNames.Value] = "09/21/2011 23:09";
                    this.mUIItem092120112309Cell.WindowTitles.Add("haih@ad-sage.com #46848300(USD) - adSage for Performance");
                    #endregion
                }
                return this.mUIItem092120112309Cell;
            }
        }
        
        public WinCell UIItem092120112309Cell1
        {
            get
            {
                if ((this.mUIItem092120112309Cell1 == null))
                {
                    this.mUIItem092120112309Cell1 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem092120112309Cell1.SearchProperties[WinCell.PropertyNames.Value] = "09/21/2011 23:09";
                    this.mUIItem092120112309Cell1.WindowTitles.Add("haih@ad-sage.com #46848300(USD) - adSage for Performance");
                    #endregion
                }
                return this.mUIItem092120112309Cell1;
            }
        }
        
        public WinCell UIImpressionsrow0Cell
        {
            get
            {
                if ((this.mUIImpressionsrow0Cell == null))
                {
                    this.mUIImpressionsrow0Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIImpressionsrow0Cell.WindowTitles.Add("haih@ad-sage.com #46848300(USD) - adSage for Performance");
                    #endregion
                }
                return this.mUIImpressionsrow0Cell;
            }
        }
        
        public WinCell UISpentrow0Cell
        {
            get
            {
                if ((this.mUISpentrow0Cell == null))
                {
                    this.mUISpentrow0Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUISpentrow0Cell.WindowTitles.Add("haih@ad-sage.com #46848300(USD) - adSage for Performance");
                    #endregion
                }
                return this.mUISpentrow0Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUI___6kQ5VjCell;
        
        private WinCell mUILocalStateExtensionrCell;
        
        private WinCell mUIActiveCell;
        
        private WinCell mUIItem1Cell;
        
        private WinCell mUIDailyCell;
        
        private WinCell mUIItem092120112309Cell;
        
        private WinCell mUIItem092120112309Cell1;
        
        private WinCell mUIImpressionsrow0Cell;
        
        private WinCell mUISpentrow0Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UINewItemRowRow : WinRow
    {
        
        public UINewItemRowRow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Name] = "NewItem Row";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("haih@ad-sage.com #46848300(USD) - adSage for Performance");
            #endregion
        }
        
        #region Properties
        public WinCell UIImpressionsrow214748Cell
        {
            get
            {
                if ((this.mUIImpressionsrow214748Cell == null))
                {
                    this.mUIImpressionsrow214748Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIImpressionsrow214748Cell.WindowTitles.Add("haih@ad-sage.com #46848300(USD) - adSage for Performance");
                    #endregion
                }
                return this.mUIImpressionsrow214748Cell;
            }
        }
        
        public WinCell UILocalStatusExtensionCell
        {
            get
            {
                if ((this.mUILocalStatusExtensionCell == null))
                {
                    this.mUILocalStatusExtensionCell = new WinCell(this);
                    #region Search Criteria
                    this.mUILocalStatusExtensionCell.WindowTitles.Add("haih@ad-sage.com #46848300(USD) - adSage for Performance");
                    #endregion
                }
                return this.mUILocalStatusExtensionCell;
            }
        }
        
        public WinCell UILocalStateExtensionrCell
        {
            get
            {
                if ((this.mUILocalStateExtensionrCell == null))
                {
                    this.mUILocalStateExtensionrCell = new WinCell(this);
                    #region Search Criteria
                    this.mUILocalStateExtensionrCell.WindowTitles.Add("haih@ad-sage.com #46848300(USD) - adSage for Performance");
                    #endregion
                }
                return this.mUILocalStateExtensionrCell;
            }
        }
        
        public WinCell UICampaignNamerow21474Cell
        {
            get
            {
                if ((this.mUICampaignNamerow21474Cell == null))
                {
                    this.mUICampaignNamerow21474Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUICampaignNamerow21474Cell.WindowTitles.Add("haih@ad-sage.com #46848300(USD) - adSage for Performance");
                    #endregion
                }
                return this.mUICampaignNamerow21474Cell;
            }
        }
        
        public WinCell UICampaignRunStatusrowCell
        {
            get
            {
                if ((this.mUICampaignRunStatusrowCell == null))
                {
                    this.mUICampaignRunStatusrowCell = new WinCell(this);
                    #region Search Criteria
                    this.mUICampaignRunStatusrowCell.WindowTitles.Add("haih@ad-sage.com #46848300(USD) - adSage for Performance");
                    #endregion
                }
                return this.mUICampaignRunStatusrowCell;
            }
        }
        
        public WinCell UIPriceCPMrow214748364Cell
        {
            get
            {
                if ((this.mUIPriceCPMrow214748364Cell == null))
                {
                    this.mUIPriceCPMrow214748364Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIPriceCPMrow214748364Cell.WindowTitles.Add("haih@ad-sage.com #46848300(USD) - adSage for Performance");
                    #endregion
                }
                return this.mUIPriceCPMrow214748364Cell;
            }
        }
        
        public WinCell UISpentrow2147483647Cell
        {
            get
            {
                if ((this.mUISpentrow2147483647Cell == null))
                {
                    this.mUISpentrow2147483647Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUISpentrow2147483647Cell.WindowTitles.Add("haih@ad-sage.com #46848300(USD) - adSage for Performance");
                    #endregion
                }
                return this.mUISpentrow2147483647Cell;
            }
        }
        
        public WinCell UINoneCell
        {
            get
            {
                if ((this.mUINoneCell == null))
                {
                    this.mUINoneCell = new WinCell(this);
                    #region Search Criteria
                    this.mUINoneCell.SearchProperties[WinCell.PropertyNames.Value] = "None";
                    this.mUINoneCell.WindowTitles.Add("haih@ad-sage.com #46848300(USD) - adSage for Performance");
                    #endregion
                }
                return this.mUINoneCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIImpressionsrow214748Cell;
        
        private WinCell mUILocalStatusExtensionCell;
        
        private WinCell mUILocalStateExtensionrCell;
        
        private WinCell mUICampaignNamerow21474Cell;
        
        private WinCell mUICampaignRunStatusrowCell;
        
        private WinCell mUIPriceCPMrow214748364Cell;
        
        private WinCell mUISpentrow2147483647Cell;
        
        private WinCell mUINoneCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemTable : WinTable
    {
        
        public UIItemTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("haih@ad-sage.com #46848300(USD) - adSage for Performance");
            #endregion
        }
        
        #region Properties
        public UIDataPanelClient5 UIDataPanelClient
        {
            get
            {
                if ((this.mUIDataPanelClient == null))
                {
                    this.mUIDataPanelClient = new UIDataPanelClient5(this);
                }
                return this.mUIDataPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UIDataPanelClient5 mUIDataPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDataPanelClient5 : WinClient
    {
        
        public UIDataPanelClient5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Data Panel";
            this.WindowTitles.Add("haih@ad-sage.com #46848300(USD) - adSage for Performance");
            #endregion
        }
        
        #region Properties
        public WinRow UINewItemRowRow
        {
            get
            {
                if ((this.mUINewItemRowRow == null))
                {
                    this.mUINewItemRowRow = new WinRow(this);
                    #region Search Criteria
                    this.mUINewItemRowRow.SearchProperties[WinRow.PropertyNames.Name] = "NewItem Row";
                    this.mUINewItemRowRow.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mUINewItemRowRow.WindowTitles.Add("haih@ad-sage.com #46848300(USD) - adSage for Performance");
                    #endregion
                }
                return this.mUINewItemRowRow;
            }
        }
        #endregion
        
        #region Fields
        private WinRow mUINewItemRowRow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIAccount2348004880USDWindow : WinWindow
    {
        
        public UIAccount2348004880USDWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Account2 #348004880(USD) - adSage for Performance";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Account2 #348004880(USD) - adSage for Performance");
            #endregion
        }
        
        #region Properties
        public UIItemWindow7 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow7(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow7 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow7 : WinWindow
    {
        
        public UIItemWindow7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.SysTreeView32", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Account2 #348004880(USD) - adSage for Performance");
            #endregion
        }
        
        #region Properties
        public UIItemTree UIItemTree
        {
            get
            {
                if ((this.mUIItemTree == null))
                {
                    this.mUIItemTree = new UIItemTree(this);
                }
                return this.mUIItemTree;
            }
        }
        #endregion
        
        #region Fields
        private UIItemTree mUIItemTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemTree : WinTree
    {
        
        public UIItemTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Account2 #348004880(USD) - adSage for Performance");
            #endregion
        }
        
        #region Properties
        public UIYourAccounts1TreeItem2 UIYourAccounts1TreeItem
        {
            get
            {
                if ((this.mUIYourAccounts1TreeItem == null))
                {
                    this.mUIYourAccounts1TreeItem = new UIYourAccounts1TreeItem2(this);
                }
                return this.mUIYourAccounts1TreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIYourAccounts1TreeItem2 mUIYourAccounts1TreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIYourAccounts1TreeItem2 : WinTreeItem
    {
        
        public UIYourAccounts1TreeItem2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Your Accounts(1)";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("Account2 #348004880(USD) - adSage for Performance");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIAccount2348004880USDTreeItem
        {
            get
            {
                if ((this.mUIAccount2348004880USDTreeItem == null))
                {
                    this.mUIAccount2348004880USDTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIAccount2348004880USDTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Account2 #348004880(USD)";
                    this.mUIAccount2348004880USDTreeItem.SearchProperties["Value"] = "1";
                    this.mUIAccount2348004880USDTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIAccount2348004880USDTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIAccount2348004880USDTreeItem.WindowTitles.Add("Account2 #348004880(USD) - adSage for Performance");
                    #endregion
                }
                return this.mUIAccount2348004880USDTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIAccount2348004880USDTreeItem;
        #endregion
    }
}
