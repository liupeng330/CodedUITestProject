// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Common.UITestFramework.UIMaps.UploadChangesClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public partial class UploadChanges
    {
        
        /// <summary>
        /// SelectGoogleAccountAndClickOKButton
        /// </summary>
        public void SelectGoogleAccountAndClickOKButton()
        {
            #region Variable Declarations
            WinCell uIFalseCell = this.UIUploadchangesWindow.UIAccountsDataGridViewWindow.UIAccountsDataGridViewTable.UIRow0Row2.UIFalseCell;
            WinButton uIOKButton = this.UIUploadchangesWindow.UIOKWindow.UIOKButton;
            #endregion

            // Click 'False' cell
            Mouse.Click(uIFalseCell, new Point(18, 8));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(40, 10));
        }
        
        /// <summary>
        /// SelectAdCenterAccountAndClickOKButton
        /// </summary>
        public void SelectAdCenterAccountAndClickOKButton()
        {
            #region Variable Declarations
            WinCell uIFalseCell = this.UIUploadchangesWindow.UIAccountsDataGridViewWindow.UIAccountsDataGridViewTable.UIRow0Row3.UIFalseCell;
            WinButton uIOKButton = this.UIUploadchangesWindow.UIOKWindow.UIOKButton;
            #endregion

            // Click 'False' cell
            Mouse.Click(uIFalseCell, new Point(13, 9));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(42, 5));
        }
        
        #region Properties
        public UIUploadchangesWindow UIUploadchangesWindow
        {
            get
            {
                if ((this.mUIUploadchangesWindow == null))
                {
                    this.mUIUploadchangesWindow = new UIUploadchangesWindow();
                }
                return this.mUIUploadchangesWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIUploadchangesWindow mUIUploadchangesWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIUploadchangesWindow : WinWindow
    {
        
        public UIUploadchangesWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Upload changes";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Upload changes");
            #endregion
        }
        
        #region Properties
        public UIUploadAccountsDialogMenuBar UIUploadAccountsDialogMenuBar
        {
            get
            {
                if ((this.mUIUploadAccountsDialogMenuBar == null))
                {
                    this.mUIUploadAccountsDialogMenuBar = new UIUploadAccountsDialogMenuBar(this);
                }
                return this.mUIUploadAccountsDialogMenuBar;
            }
        }
        
        public UISystemMenuItem1 UISystemMenuItem
        {
            get
            {
                if ((this.mUISystemMenuItem == null))
                {
                    this.mUISystemMenuItem = new UISystemMenuItem1(this);
                }
                return this.mUISystemMenuItem;
            }
        }
        
        public UISystemMenu UISystemMenu
        {
            get
            {
                if ((this.mUISystemMenu == null))
                {
                    this.mUISystemMenu = new UISystemMenu(this);
                }
                return this.mUISystemMenu;
            }
        }
        
        public UIUploadchangesTitleBar UIUploadchangesTitleBar
        {
            get
            {
                if ((this.mUIUploadchangesTitleBar == null))
                {
                    this.mUIUploadchangesTitleBar = new UIUploadchangesTitleBar(this);
                }
                return this.mUIUploadchangesTitleBar;
            }
        }
        
        public WinMenuBar UIUploadAccountsDialogMenuBar1
        {
            get
            {
                if ((this.mUIUploadAccountsDialogMenuBar1 == null))
                {
                    this.mUIUploadAccountsDialogMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIUploadAccountsDialogMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIUploadAccountsDialogMenuBar1;
            }
        }
        
        public UIUploadchangesClient UIUploadchangesClient
        {
            get
            {
                if ((this.mUIUploadchangesClient == null))
                {
                    this.mUIUploadchangesClient = new UIUploadchangesClient(this);
                }
                return this.mUIUploadchangesClient;
            }
        }
        
        public UISelectaccountstouploWindow UISelectaccountstouploWindow
        {
            get
            {
                if ((this.mUISelectaccountstouploWindow == null))
                {
                    this.mUISelectaccountstouploWindow = new UISelectaccountstouploWindow(this);
                }
                return this.mUISelectaccountstouploWindow;
            }
        }
        
        public UISelectaccountstouploScrollBar UISelectaccountstouploScrollBar
        {
            get
            {
                if ((this.mUISelectaccountstouploScrollBar == null))
                {
                    this.mUISelectaccountstouploScrollBar = new UISelectaccountstouploScrollBar(this);
                }
                return this.mUISelectaccountstouploScrollBar;
            }
        }
        
        public UISelectaccountstouploScrollBar1 UISelectaccountstouploScrollBar1
        {
            get
            {
                if ((this.mUISelectaccountstouploScrollBar1 == null))
                {
                    this.mUISelectaccountstouploScrollBar1 = new UISelectaccountstouploScrollBar1(this);
                }
                return this.mUISelectaccountstouploScrollBar1;
            }
        }
        
        public UIAccountsDataGridViewWindow UIAccountsDataGridViewWindow
        {
            get
            {
                if ((this.mUIAccountsDataGridViewWindow == null))
                {
                    this.mUIAccountsDataGridViewWindow = new UIAccountsDataGridViewWindow(this);
                }
                return this.mUIAccountsDataGridViewWindow;
            }
        }
        
        public UIVerticalScrollBar UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow(this);
                }
                return this.mUIOKWindow;
            }
        }
        
        public UIOKScrollBar UIOKScrollBar
        {
            get
            {
                if ((this.mUIOKScrollBar == null))
                {
                    this.mUIOKScrollBar = new UIOKScrollBar(this);
                }
                return this.mUIOKScrollBar;
            }
        }
        
        public UIOKScrollBar1 UIOKScrollBar1
        {
            get
            {
                if ((this.mUIOKScrollBar1 == null))
                {
                    this.mUIOKScrollBar1 = new UIOKScrollBar1(this);
                }
                return this.mUIOKScrollBar1;
            }
        }
        
        public UICancelWindow UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow(this);
                }
                return this.mUICancelWindow;
            }
        }
        
        public UICancelScrollBar UICancelScrollBar
        {
            get
            {
                if ((this.mUICancelScrollBar == null))
                {
                    this.mUICancelScrollBar = new UICancelScrollBar(this);
                }
                return this.mUICancelScrollBar;
            }
        }
        
        public UICancelScrollBar1 UICancelScrollBar1
        {
            get
            {
                if ((this.mUICancelScrollBar1 == null))
                {
                    this.mUICancelScrollBar1 = new UICancelScrollBar1(this);
                }
                return this.mUICancelScrollBar1;
            }
        }
        
        public UIUploadchangesScrollBar UIUploadchangesScrollBar
        {
            get
            {
                if ((this.mUIUploadchangesScrollBar == null))
                {
                    this.mUIUploadchangesScrollBar = new UIUploadchangesScrollBar(this);
                }
                return this.mUIUploadchangesScrollBar;
            }
        }
        
        public UIUploadchangesScrollBar1 UIUploadchangesScrollBar1
        {
            get
            {
                if ((this.mUIUploadchangesScrollBar1 == null))
                {
                    this.mUIUploadchangesScrollBar1 = new UIUploadchangesScrollBar1(this);
                }
                return this.mUIUploadchangesScrollBar1;
            }
        }
        
        public WinControl UIUploadchangesGrip
        {
            get
            {
                if ((this.mUIUploadchangesGrip == null))
                {
                    this.mUIUploadchangesGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIUploadchangesGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIUploadchangesGrip;
            }
        }
        #endregion
        
        #region Fields
        private UIUploadAccountsDialogMenuBar mUIUploadAccountsDialogMenuBar;
        
        private UISystemMenuItem1 mUISystemMenuItem;
        
        private UISystemMenu mUISystemMenu;
        
        private UIUploadchangesTitleBar mUIUploadchangesTitleBar;
        
        private WinMenuBar mUIUploadAccountsDialogMenuBar1;
        
        private UIUploadchangesClient mUIUploadchangesClient;
        
        private UISelectaccountstouploWindow mUISelectaccountstouploWindow;
        
        private UISelectaccountstouploScrollBar mUISelectaccountstouploScrollBar;
        
        private UISelectaccountstouploScrollBar1 mUISelectaccountstouploScrollBar1;
        
        private UIAccountsDataGridViewWindow mUIAccountsDataGridViewWindow;
        
        private UIVerticalScrollBar mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar mUIHorizontalScrollBar;
        
        private UIOKWindow mUIOKWindow;
        
        private UIOKScrollBar mUIOKScrollBar;
        
        private UIOKScrollBar1 mUIOKScrollBar1;
        
        private UICancelWindow mUICancelWindow;
        
        private UICancelScrollBar mUICancelScrollBar;
        
        private UICancelScrollBar1 mUICancelScrollBar1;
        
        private UIUploadchangesScrollBar mUIUploadchangesScrollBar;
        
        private UIUploadchangesScrollBar1 mUIUploadchangesScrollBar1;
        
        private WinControl mUIUploadchangesGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIUploadAccountsDialogMenuBar : WinMenuBar
    {
        
        public UIUploadAccountsDialogMenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "System";
            #endregion
        }
        
        #region Properties
        public UISystemMenuItem UISystemMenuItem
        {
            get
            {
                if ((this.mUISystemMenuItem == null))
                {
                    this.mUISystemMenuItem = new UISystemMenuItem(this);
                }
                return this.mUISystemMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UISystemMenuItem mUISystemMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISystemMenuItem : WinMenuItem
    {
        
        public UISystemMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "System";
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIRestoreMenuItem
        {
            get
            {
                if ((this.mUIRestoreMenuItem == null))
                {
                    this.mUIRestoreMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIRestoreMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Restore";
                    this.mUIRestoreMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUIRestoreMenuItem;
            }
        }
        
        public WinMenuItem UIMoveMenuItem
        {
            get
            {
                if ((this.mUIMoveMenuItem == null))
                {
                    this.mUIMoveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIMoveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Move";
                    this.mUIMoveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUIMoveMenuItem;
            }
        }
        
        public WinMenuItem UISizeMenuItem
        {
            get
            {
                if ((this.mUISizeMenuItem == null))
                {
                    this.mUISizeMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISizeMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Size";
                    this.mUISizeMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUISizeMenuItem;
            }
        }
        
        public WinMenuItem UIMinimizeMenuItem
        {
            get
            {
                if ((this.mUIMinimizeMenuItem == null))
                {
                    this.mUIMinimizeMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIMinimizeMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Minimize";
                    this.mUIMinimizeMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUIMinimizeMenuItem;
            }
        }
        
        public WinMenuItem UIMaximizeMenuItem
        {
            get
            {
                if ((this.mUIMaximizeMenuItem == null))
                {
                    this.mUIMaximizeMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIMaximizeMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Maximize";
                    this.mUIMaximizeMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUIMaximizeMenuItem;
            }
        }
        
        public WinMenuItem UICloseAltF4MenuItem
        {
            get
            {
                if ((this.mUICloseAltF4MenuItem == null))
                {
                    this.mUICloseAltF4MenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseAltF4MenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close\tAlt+F4";
                    this.mUICloseAltF4MenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUICloseAltF4MenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIRestoreMenuItem;
        
        private WinMenuItem mUIMoveMenuItem;
        
        private WinMenuItem mUISizeMenuItem;
        
        private WinMenuItem mUIMinimizeMenuItem;
        
        private WinMenuItem mUIMaximizeMenuItem;
        
        private WinMenuItem mUICloseAltF4MenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISystemMenuItem1 : WinMenuItem
    {
        
        public UISystemMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "System";
            #endregion
        }
        
        #region Properties
        public WinMenu UISystemMenu
        {
            get
            {
                if ((this.mUISystemMenu == null))
                {
                    this.mUISystemMenu = new WinMenu(this);
                    #region Search Criteria
                    this.mUISystemMenu.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    this.mUISystemMenu.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISystemMenu.SearchConfigurations.Remove(SearchConfiguration.VisibleOnly);
                    #endregion
                }
                return this.mUISystemMenu;
            }
        }
        #endregion
        
        #region Fields
        private WinMenu mUISystemMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISystemMenu : WinMenu
    {
        
        public UISystemMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "System";
            this.SearchConfigurations.Remove(SearchConfiguration.VisibleOnly);
            #endregion
        }
        
        #region Properties
        public WinSeparator UIItemSeparator
        {
            get
            {
                if ((this.mUIItemSeparator == null))
                {
                    this.mUIItemSeparator = new WinSeparator(this);
                }
                return this.mUIItemSeparator;
            }
        }
        #endregion
        
        #region Fields
        private WinSeparator mUIItemSeparator;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIUploadchangesTitleBar : WinTitleBar
    {
        
        public UIUploadchangesTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIUploadchangesClient : WinClient
    {
        
        public UIUploadchangesClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "SelectDownloadActiveObjectsDialog";
            #endregion
        }
        
        #region Properties
        public WinWindow UISelectaccountstouploWindow
        {
            get
            {
                if ((this.mUISelectaccountstouploWindow == null))
                {
                    this.mUISelectaccountstouploWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUISelectaccountstouploWindow.SearchProperties[WinWindow.PropertyNames.Name] = "&Select accounts to upload:";
                    this.mUISelectaccountstouploWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUISelectaccountstouploWindow;
            }
        }
        
        public WinWindow UIAccountsDataGridViewWindow
        {
            get
            {
                if ((this.mUIAccountsDataGridViewWindow == null))
                {
                    this.mUIAccountsDataGridViewWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIAccountsDataGridViewWindow.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "accountsDataGridView";
                    this.mUIAccountsDataGridViewWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIAccountsDataGridViewWindow;
            }
        }
        
        public WinWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIOKWindow.SearchProperties[WinWindow.PropertyNames.Name] = "OK";
                    this.mUIOKWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.BUTTON", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIOKWindow;
            }
        }
        
        public WinWindow UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUICancelWindow.SearchProperties[WinWindow.PropertyNames.Name] = "Cancel";
                    this.mUICancelWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.BUTTON", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUICancelWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUISelectaccountstouploWindow;
        
        private WinWindow mUIAccountsDataGridViewWindow;
        
        private WinWindow mUIOKWindow;
        
        private WinWindow mUICancelWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISelectaccountstouploWindow : WinWindow
    {
        
        public UISelectaccountstouploWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "selectLabel";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UISelectLabelMenuBar
        {
            get
            {
                if ((this.mUISelectLabelMenuBar == null))
                {
                    this.mUISelectLabelMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISelectLabelMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUISelectLabelMenuBar;
            }
        }
        
        public WinTitleBar UISelectaccountstouploTitleBar
        {
            get
            {
                if ((this.mUISelectaccountstouploTitleBar == null))
                {
                    this.mUISelectaccountstouploTitleBar = new WinTitleBar(this);
                }
                return this.mUISelectaccountstouploTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UISelectLabelMenuBar1
        {
            get
            {
                if ((this.mUISelectLabelMenuBar1 == null))
                {
                    this.mUISelectLabelMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISelectLabelMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUISelectLabelMenuBar1;
            }
        }
        
        public WinText UISelectaccountstouploText
        {
            get
            {
                if ((this.mUISelectaccountstouploText == null))
                {
                    this.mUISelectaccountstouploText = new WinText(this);
                    #region Search Criteria
                    this.mUISelectaccountstouploText.SearchProperties[WinText.PropertyNames.Name] = "selectLabel";
                    #endregion
                }
                return this.mUISelectaccountstouploText;
            }
        }
        
        public WinScrollBar UISelectaccountstouploScrollBar
        {
            get
            {
                if ((this.mUISelectaccountstouploScrollBar == null))
                {
                    this.mUISelectaccountstouploScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUISelectaccountstouploScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUISelectaccountstouploScrollBar;
            }
        }
        
        public WinScrollBar UISelectaccountstouploScrollBar1
        {
            get
            {
                if ((this.mUISelectaccountstouploScrollBar1 == null))
                {
                    this.mUISelectaccountstouploScrollBar1 = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUISelectaccountstouploScrollBar1.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUISelectaccountstouploScrollBar1;
            }
        }
        
        public WinControl UISelectaccountstouploGrip
        {
            get
            {
                if ((this.mUISelectaccountstouploGrip == null))
                {
                    this.mUISelectaccountstouploGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUISelectaccountstouploGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUISelectaccountstouploGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUISelectLabelMenuBar;
        
        private WinTitleBar mUISelectaccountstouploTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUISelectLabelMenuBar1;
        
        private WinText mUISelectaccountstouploText;
        
        private WinScrollBar mUISelectaccountstouploScrollBar;
        
        private WinScrollBar mUISelectaccountstouploScrollBar1;
        
        private WinControl mUISelectaccountstouploGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISelectaccountstouploScrollBar : WinScrollBar
    {
        
        public UISelectaccountstouploScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISelectaccountstouploScrollBar1 : WinScrollBar
    {
        
        public UISelectaccountstouploScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAccountsDataGridViewWindow : WinWindow
    {
        
        public UIAccountsDataGridViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "accountsDataGridView";
            this.WindowTitles.Add("Upload changes");
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIAccountsDataGridViewMenuBar
        {
            get
            {
                if ((this.mUIAccountsDataGridViewMenuBar == null))
                {
                    this.mUIAccountsDataGridViewMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIAccountsDataGridViewMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIAccountsDataGridViewMenuBar;
            }
        }
        
        public WinTitleBar UIAccountsDataGridViewTitleBar
        {
            get
            {
                if ((this.mUIAccountsDataGridViewTitleBar == null))
                {
                    this.mUIAccountsDataGridViewTitleBar = new WinTitleBar(this);
                }
                return this.mUIAccountsDataGridViewTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIAccountsDataGridViewMenuBar1
        {
            get
            {
                if ((this.mUIAccountsDataGridViewMenuBar1 == null))
                {
                    this.mUIAccountsDataGridViewMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIAccountsDataGridViewMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIAccountsDataGridViewMenuBar1;
            }
        }
        
        public UIAccountsDataGridViewTable UIAccountsDataGridViewTable
        {
            get
            {
                if ((this.mUIAccountsDataGridViewTable == null))
                {
                    this.mUIAccountsDataGridViewTable = new UIAccountsDataGridViewTable(this);
                }
                return this.mUIAccountsDataGridViewTable;
            }
        }
        
        public WinScrollBar UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIVerticalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public WinScrollBar UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIHorizontalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIAccountsDataGridViewGrip
        {
            get
            {
                if ((this.mUIAccountsDataGridViewGrip == null))
                {
                    this.mUIAccountsDataGridViewGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIAccountsDataGridViewGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIAccountsDataGridViewGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIAccountsDataGridViewMenuBar;
        
        private WinTitleBar mUIAccountsDataGridViewTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIAccountsDataGridViewMenuBar1;
        
        private UIAccountsDataGridViewTable mUIAccountsDataGridViewTable;
        
        private WinScrollBar mUIVerticalScrollBar;
        
        private WinScrollBar mUIHorizontalScrollBar;
        
        private WinControl mUIAccountsDataGridViewGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAccountsDataGridViewTable : WinTable
    {
        
        public UIAccountsDataGridViewTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTable.PropertyNames.Name] = "accountsDataGridView";
            this.WindowTitles.Add("Upload changes");
            #endregion
        }
        
        #region Properties
        public UITopRowRow UITopRowRow
        {
            get
            {
                if ((this.mUITopRowRow == null))
                {
                    this.mUITopRowRow = new UITopRowRow(this);
                }
                return this.mUITopRowRow;
            }
        }
        
        public WinRow UIRow0Row
        {
            get
            {
                if ((this.mUIRow0Row == null))
                {
                    this.mUIRow0Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow0Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 0";
                    this.mUIRow0Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow0Row;
            }
        }
        
        public UIRow0Row1 UIRow0Row1
        {
            get
            {
                if ((this.mUIRow0Row1 == null))
                {
                    this.mUIRow0Row1 = new UIRow0Row1(this);
                }
                return this.mUIRow0Row1;
            }
        }
        
        public UIRow0Row2 UIRow0Row2
        {
            get
            {
                if ((this.mUIRow0Row2 == null))
                {
                    this.mUIRow0Row2 = new UIRow0Row2(this);
                }
                return this.mUIRow0Row2;
            }
        }
        
        public UIRow0Row3 UIRow0Row3
        {
            get
            {
                if ((this.mUIRow0Row3 == null))
                {
                    this.mUIRow0Row3 = new UIRow0Row3(this);
                }
                return this.mUIRow0Row3;
            }
        }
        #endregion
        
        #region Fields
        private UITopRowRow mUITopRowRow;
        
        private WinRow mUIRow0Row;
        
        private UIRow0Row1 mUIRow0Row1;
        
        private UIRow0Row2 mUIRow0Row2;
        
        private UIRow0Row3 mUIRow0Row3;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UITopRowRow : WinRow
    {
        
        public UITopRowRow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Name] = "Top Row";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinColumnHeader UIItemColumnHeader
        {
            get
            {
                if ((this.mUIItemColumnHeader == null))
                {
                    this.mUIItemColumnHeader = new WinColumnHeader(this);
                }
                return this.mUIItemColumnHeader;
            }
        }
        
        public WinColumnHeader UIItemColumnHeader1
        {
            get
            {
                if ((this.mUIItemColumnHeader1 == null))
                {
                    this.mUIItemColumnHeader1 = new WinColumnHeader(this);
                    #region Search Criteria
                    this.mUIItemColumnHeader1.SearchProperties[WinControl.PropertyNames.Instance] = "2";
                    #endregion
                }
                return this.mUIItemColumnHeader1;
            }
        }
        
        public WinColumnHeader UIAccountNameColumnHeader
        {
            get
            {
                if ((this.mUIAccountNameColumnHeader == null))
                {
                    this.mUIAccountNameColumnHeader = new WinColumnHeader(this);
                    #region Search Criteria
                    this.mUIAccountNameColumnHeader.SearchProperties[WinControl.PropertyNames.Name] = "Account Name";
                    #endregion
                }
                return this.mUIAccountNameColumnHeader;
            }
        }
        #endregion
        
        #region Fields
        private WinColumnHeader mUIItemColumnHeader;
        
        private WinColumnHeader mUIItemColumnHeader1;
        
        private WinColumnHeader mUIAccountNameColumnHeader;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow0Row1 : WinRow
    {
        
        public UIRow0Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;System.Drawing.Bitmap;haih@ad-sage.com #46848300(USD)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UISystemDrawingBitmapCell
        {
            get
            {
                if ((this.mUISystemDrawingBitmapCell == null))
                {
                    this.mUISystemDrawingBitmapCell = new WinCell(this);
                    #region Search Criteria
                    this.mUISystemDrawingBitmapCell.SearchProperties[WinCell.PropertyNames.Value] = "System.Drawing.Bitmap";
                    #endregion
                }
                return this.mUISystemDrawingBitmapCell;
            }
        }
        
        public WinCell UIHaihadsagecom4684830Cell
        {
            get
            {
                if ((this.mUIHaihadsagecom4684830Cell == null))
                {
                    this.mUIHaihadsagecom4684830Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIHaihadsagecom4684830Cell.SearchProperties[WinCell.PropertyNames.Value] = "haih@ad-sage.com #46848300(USD)";
                    #endregion
                }
                return this.mUIHaihadsagecom4684830Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUISystemDrawingBitmapCell;
        
        private WinCell mUIHaihadsagecom4684830Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow0Row2 : WinRow
    {
        
        public UIRow0Row2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;System.Drawing.Bitmap;wss_adsagetest@163.com(CNY)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Upload changes");
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    this.mUIFalseCell.WindowTitles.Add("Upload changes");
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow0Row3 : WinRow
    {
        
        public UIRow0Row3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;System.Drawing.Bitmap;Microsoft adlabs(USD)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Upload Changes");
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    this.mUIFalseCell.WindowTitles.Add("Upload Changes");
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar : WinScrollBar
    {
        
        public UIVerticalScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar : WinScrollBar
    {
        
        public UIHorizontalScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonOK";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIButtonOKMenuBar
        {
            get
            {
                if ((this.mUIButtonOKMenuBar == null))
                {
                    this.mUIButtonOKMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIButtonOKMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIButtonOKMenuBar;
            }
        }
        
        public WinTitleBar UIOKTitleBar
        {
            get
            {
                if ((this.mUIOKTitleBar == null))
                {
                    this.mUIOKTitleBar = new WinTitleBar(this);
                }
                return this.mUIOKTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIButtonOKMenuBar1
        {
            get
            {
                if ((this.mUIButtonOKMenuBar1 == null))
                {
                    this.mUIButtonOKMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIButtonOKMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIButtonOKMenuBar1;
            }
        }
        
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        
        public WinScrollBar UIOKScrollBar
        {
            get
            {
                if ((this.mUIOKScrollBar == null))
                {
                    this.mUIOKScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIOKScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIOKScrollBar;
            }
        }
        
        public WinScrollBar UIOKScrollBar1
        {
            get
            {
                if ((this.mUIOKScrollBar1 == null))
                {
                    this.mUIOKScrollBar1 = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIOKScrollBar1.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIOKScrollBar1;
            }
        }
        
        public WinControl UIOKGrip
        {
            get
            {
                if ((this.mUIOKGrip == null))
                {
                    this.mUIOKGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIOKGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIOKGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIButtonOKMenuBar;
        
        private WinTitleBar mUIOKTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIButtonOKMenuBar1;
        
        private WinButton mUIOKButton;
        
        private WinScrollBar mUIOKScrollBar;
        
        private WinScrollBar mUIOKScrollBar1;
        
        private WinControl mUIOKGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIOKScrollBar : WinScrollBar
    {
        
        public UIOKScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIOKScrollBar1 : WinScrollBar
    {
        
        public UIOKScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UICancelWindow : WinWindow
    {
        
        public UICancelWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonCancel";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIButtonCancelMenuBar
        {
            get
            {
                if ((this.mUIButtonCancelMenuBar == null))
                {
                    this.mUIButtonCancelMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIButtonCancelMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIButtonCancelMenuBar;
            }
        }
        
        public WinTitleBar UICancelTitleBar
        {
            get
            {
                if ((this.mUICancelTitleBar == null))
                {
                    this.mUICancelTitleBar = new WinTitleBar(this);
                }
                return this.mUICancelTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIButtonCancelMenuBar1
        {
            get
            {
                if ((this.mUIButtonCancelMenuBar1 == null))
                {
                    this.mUIButtonCancelMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIButtonCancelMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIButtonCancelMenuBar1;
            }
        }
        
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        
        public WinScrollBar UICancelScrollBar
        {
            get
            {
                if ((this.mUICancelScrollBar == null))
                {
                    this.mUICancelScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUICancelScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUICancelScrollBar;
            }
        }
        
        public WinScrollBar UICancelScrollBar1
        {
            get
            {
                if ((this.mUICancelScrollBar1 == null))
                {
                    this.mUICancelScrollBar1 = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUICancelScrollBar1.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUICancelScrollBar1;
            }
        }
        
        public WinControl UICancelGrip
        {
            get
            {
                if ((this.mUICancelGrip == null))
                {
                    this.mUICancelGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUICancelGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUICancelGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIButtonCancelMenuBar;
        
        private WinTitleBar mUICancelTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIButtonCancelMenuBar1;
        
        private WinButton mUICancelButton;
        
        private WinScrollBar mUICancelScrollBar;
        
        private WinScrollBar mUICancelScrollBar1;
        
        private WinControl mUICancelGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UICancelScrollBar : WinScrollBar
    {
        
        public UICancelScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UICancelScrollBar1 : WinScrollBar
    {
        
        public UICancelScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIUploadchangesScrollBar : WinScrollBar
    {
        
        public UIUploadchangesScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIUploadchangesScrollBar1 : WinScrollBar
    {
        
        public UIUploadchangesScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
}
