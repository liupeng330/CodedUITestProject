// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Common.UITestFramework.UIMaps.AccountManagementCenterClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public partial class AccountManagementCenter
    {
        
        /// <summary>
        /// ActivateAdcenterUser
        /// </summary>
        public void ActivateAdcenterUser()
        {
            #region Variable Declarations
            WinCell uIActivateCell = this.UIAccountManagementCenWindow.UIDgvAccountWindow.UIDataGridViewTable.UIRow1Row3.UIActivateCell;
            #endregion

            // Click 'Activate' cell
            Mouse.Click(uIActivateCell, new Point(46, 9));
        }
        
        /// <summary>
        /// ActivateFacebookUser
        /// </summary>
        public void ActivateFacebookUser()
        {
            #region Variable Declarations
            WinCell uIActivateCell = this.UIAccountManagementCenWindow.UIDgvAccountWindow.UIDataGridViewTable.UIRow2Row2.UIActivateCell;
            #endregion

            // Click 'Activate' cell
            Mouse.Click(uIActivateCell, new Point(37, 12));
        }
        
        /// <summary>
        /// ActivateGoogleUser
        /// </summary>
        public void ActivateGoogleUser()
        {
            #region Variable Declarations
            WinCell uIActivateCell = this.UIAccountManagementCenWindow.UIDgvAccountWindow.UIDataGridViewTable.UIRow1Row2.UIActivateCell;
            #endregion

            // Click 'Activate' cell
            Mouse.Click(uIActivateCell, new Point(43, 10));
        }
        
        /// <summary>
        /// AssertMethod1 - Use 'AssertMethod1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WinText uISynchronizeaccountsfText = this.UIAccountManagementCenWindow.UILabel1Window.UISynchronizeaccountsfText;
            #endregion

            // Verify that 'Synchronize accounts from wss_adsagetest@163.com ....' label's property 'Name' equals 'Synchronize accounts from wss_adsagetest@163.com ...'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UISynchronizeaccountsfTextName, uISynchronizeaccountsfText.Name);
        }
        
        /// <summary>
        /// AssertMethod2 - Use 'AssertMethod2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod2()
        {
            #region Variable Declarations
            WinText uISynchronizeaccountsfText1 = this.UIAccountManagementCenWindow.UILabel1Window.UISynchronizeaccountsfText1;
            #endregion

            // Verify that 'Synchronize accounts from API_msft_adlabs ...' label's property 'Name' equals 'Synchronize accounts from API_msft_adlabs ...'
            Assert.AreEqual(this.AssertMethod2ExpectedValues.UISynchronizeaccountsfText1Name, uISynchronizeaccountsfText1.Name);
        }
        
        /// <summary>
        /// AssertMethod3 - Use 'AssertMethod3ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod3()
        {
            #region Variable Declarations
            WinText uISynchronizeaccountsfText2 = this.UIAccountManagementCenWindow.UILabel1Window.UISynchronizeaccountsfText2;
            #endregion

            // Verify that 'Synchronize accounts from Hai Huang ...' label's property 'Name' equals 'Synchronize accounts from Hai Huang ...'
            Assert.AreEqual(this.AssertMethod3ExpectedValues.UISynchronizeaccountsfText2Name, uISynchronizeaccountsfText2.Name);
        }
        
        /// <summary>
        /// ClickAccountActivateButton
        /// </summary>
        public void ClickAccountActivateButton()
        {
            #region Variable Declarations
            WinCell uIActivateCell = this.UIAccountManagementCenWindow.UIDgvAccountWindow.UIDataGridViewTable.UIRow7Row2.UIActivateCell;
            #endregion

            // Click 'Activate' cell
            Mouse.Click(uIActivateCell, new Point(40, 12));
        }
        
        /// <summary>
        /// ClickActivateButton
        /// </summary>
        public void ClickActivateButton()
        {
            #region Variable Declarations
            WinCell uIActivateCell = this.UIAccountManagementCenWindow.UIDgvAccountWindow.UIDataGridViewTable.UIRow2Row1.UIActivateCell;
            #endregion

            // Click 'Activate' cell
            Mouse.Click(uIActivateCell, new Point(42, 8));
        }
        
        /// <summary>
        /// ClickCloseWindowButton
        /// </summary>
        public void ClickCloseWindowButton()
        {
            #region Variable Declarations
            WinButton uICloseButton1 = this.UIAccountManagementCenWindow.UICloseWindow.UICloseButton1;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton1, new Point(15, 13));
        }
        
        /// <summary>
        /// DeactivateAdcenterUser
        /// </summary>
        public void DeactivateAdcenterUser()
        {
            #region Variable Declarations
            WinCell uIDeactivateCell = this.UIAccountManagementCenWindow.UIDgvAccountWindow.UIDataGridViewTable.UIRow1Row5.UIDeactivateCell;
            #endregion

            // Click 'Deactivate' cell
            Mouse.Click(uIDeactivateCell, new Point(32, 7));
        }
        
        /// <summary>
        /// DeactivateFacebookUser
        /// </summary>
        public void DeactivateFacebookUser()
        {
            #region Variable Declarations
            WinCell uIDeactivateCell = this.UIAccountManagementCenWindow.UIDgvAccountWindow.UIDataGridViewTable.UIRow1Row6.UIDeactivateCell;
            #endregion

            // Click 'Deactivate' cell
            Mouse.Click(uIDeactivateCell, new Point(30, 8));
        }
        
        /// <summary>
        /// DeactivateGoogleUser
        /// </summary>
        public void DeactivateGoogleUser()
        {
            #region Variable Declarations
            WinCell uIDeactivateCell = this.UIAccountManagementCenWindow.UIDgvAccountWindow.UIDataGridViewTable.UIRow1Row4.UIDeactivateCell;
            #endregion

            // Click 'Deactivate' cell
            Mouse.Click(uIDeactivateCell, new Point(35, 8));
        }
        
        /// <summary>
        /// DeleteUser
        /// </summary>
        public void DeleteUser()
        {
            #region Variable Declarations
            WinButton uIDeleteButton = this.UIAccountManagementCenWindow.UISageToolStripToolBar.UIDeleteButton;
            #endregion

            // Click 'Delete' button
            Mouse.Click(uIDeleteButton, new Point(27, 9));
        }
        
        /// <summary>
        /// VerifyAccountActiveAccount - Use 'VerifyAccountActiveAccountExpectedValues' to pass parameters into this method.
        /// </summary>
        public void VerifyAccountActiveAccount()
        {
            #region Variable Declarations
            WinRow uIRow1Row = this.UIAccountManagementCenWindow.UIDgvAccountWindow.UIDataGridViewTable.UIRow1Row;
            #endregion

            // Verify that 'Row 1' row's property 'Value' equals 'Account2 #348004880(USD);Facebook;&Deactivate'
            Assert.AreEqual(this.VerifyAccountActiveAccountExpectedValues.UIRow1RowValue, uIRow1Row.Value);
        }
        
        /// <summary>
        /// VerifyActivateAdcenterUser - Use 'VerifyActivateAdcenterUserExpectedValues' to pass parameters into this method.
        /// </summary>
        public void VerifyActivateAdcenterUser()
        {
            #region Variable Declarations
            WinRow uIRow1Row = this.UIAccountManagementCenWindow.UIDgvAccountWindow.UIDataGridViewTable.UIRow1Row;
            #endregion

            // Verify that 'Row 1' row's property 'Value' equals 'Microsoft adlabs(USD);AdCenter;&Activate'
            Assert.AreEqual(this.VerifyActivateAdcenterUserExpectedValues.UIRow1RowValue, uIRow1Row.Value);
        }
        
        /// <summary>
        /// VerifyActivateFacebookUser - Use 'VerifyActivateFacebookUserExpectedValues' to pass parameters into this method.
        /// </summary>
        public void VerifyActivateFacebookUser()
        {
            #region Variable Declarations
            WinRow uIRow2Row = this.UIAccountManagementCenWindow.UIDgvAccountWindow.UIDataGridViewTable.UIRow2Row;
            #endregion

            // Verify that 'Row 2' row's property 'Value' equals 'haih@ad-sage.com #46848300(USD);Facebook;&Activate'
            Assert.AreEqual(this.VerifyActivateFacebookUserExpectedValues.UIRow2RowValue, uIRow2Row.Value);
        }
        
        /// <summary>
        /// VerifyActivateGoogleUser - Use 'VerifyActivateGoogleUserExpectedValues' to pass parameters into this method.
        /// </summary>
        public void VerifyActivateGoogleUser()
        {
            #region Variable Declarations
            WinRow uIRow1Row = this.UIAccountManagementCenWindow.UIDgvAccountWindow.UIDataGridViewTable.UIRow1Row;
            #endregion

            // Verify that 'Row 1' row's property 'Value' equals 'wss_adsagetest@163.com(CNY);Google;&Activate'
            Assert.AreEqual(this.VerifyActivateGoogleUserExpectedValues.UIRow1RowValue, uIRow1Row.Value);
        }
        
        /// <summary>
        /// VerifyActiveAccount - Use 'VerifyActiveAccountExpectedValues' to pass parameters into this method.
        /// </summary>
        public void VerifyActiveAccount()
        {
            #region Variable Declarations
            WinRow uIRow1Row = this.UIAccountManagementCenWindow.UIDgvAccountWindow.UIDataGridViewTable.UIRow1Row;
            #endregion

            // Verify that 'Row 1' row's property 'Value' equals 'haih@ad-sage.com #46848300(USD);Facebook;&Deactivate'
            Assert.AreEqual(this.VerifyActiveAccountExpectedValues.UIRow1RowValue, uIRow1Row.Value);
        }
        
        /// <summary>
        /// VerifyActiveAdcenterAccount - Use 'VerifyActiveAdcenterAccountExpectedValues' to pass parameters into this method.
        /// </summary>
        public void VerifyActiveAdcenterAccount()
        {
            #region Variable Declarations
            WinRow uIRow1Row = this.UIAccountManagementCenWindow.UIDgvAccountWindow.UIDataGridViewTable.UIRow1Row;
            WinRow uIRow2Row = this.UIAccountManagementCenWindow.UIDgvAccountWindow.UIDataGridViewTable.UIRow2Row;
            WinTreeItem uIAPI_msft_adlabsTreeItem = this.UIAccountManagementCenWindow.UISageTreeViewWindow.UIAPI_msft_adlabsTreeItem;
            #endregion

            // Verify that 'Row 1' row's property 'Value' equals 'Microsoft adlabs(USD);AdCenter;&Activate'
            Assert.AreEqual(this.VerifyActiveAdcenterAccountExpectedValues.UIRow1RowValue, uIRow1Row.Value);

            // Verify that 'Row 2' row's property 'Value' equals 'Microsoft adLabs 3(USD);AdCenter;&Activate'
            Assert.AreEqual(this.VerifyActiveAdcenterAccountExpectedValues.UIRow2RowValue, uIRow2Row.Value);

            // Verify that 'API_msft_adlabs' tree item's property 'Name' equals 'API_msft_adlabs'
            Assert.AreEqual(this.VerifyActiveAdcenterAccountExpectedValues.UIAPI_msft_adlabsTreeItemName, uIAPI_msft_adlabsTreeItem.Name);
        }
        
        /// <summary>
        /// VerifyActiveFacebookAccount - Use 'VerifyActiveFacebookAccountExpectedValues' to pass parameters into this method.
        /// </summary>
        public void VerifyActiveFacebookAccount()
        {
            #region Variable Declarations
            WinRow uIRow2Row = this.UIAccountManagementCenWindow.UIDgvAccountWindow.UIDataGridViewTable.UIRow2Row;
            WinTreeItem uIHaiHuangTreeItem = this.UIAccountManagementCenWindow.UISageTreeViewWindow.UIHaiHuangTreeItem;
            #endregion

            // Verify that 'Row 2' row's property 'Value' equals 'haih@ad-sage.com #46848300(USD);Facebook;&Activate'
            Assert.AreEqual(this.VerifyActiveFacebookAccountExpectedValues.UIRow2RowValue, uIRow2Row.Value);

            // Verify that 'Hai Huang' tree item's property 'Name' equals 'Hai Huang'
            Assert.AreEqual(this.VerifyActiveFacebookAccountExpectedValues.UIHaiHuangTreeItemName, uIHaiHuangTreeItem.Name);
        }
        
        /// <summary>
        /// VerifyDeactivateAdcenterUser - Use 'VerifyDeactivateAdcenterUserExpectedValues' to pass parameters into this method.
        /// </summary>
        public void VerifyDeactivateAdcenterUser()
        {
            #region Variable Declarations
            WinRow uIRow1Row = this.UIAccountManagementCenWindow.UIDgvAccountWindow.UIDataGridViewTable.UIRow1Row;
            #endregion

            // Verify that 'Row 1' row's property 'Value' equals 'Microsoft adlabs(USD);AdCenter;&Deactivate'
            Assert.AreEqual(this.VerifyDeactivateAdcenterUserExpectedValues.UIRow1RowValue, uIRow1Row.Value);
        }
        
        /// <summary>
        /// VerifyDeactivateGoogleUser - Use 'VerifyDeactivateGoogleUserExpectedValues' to pass parameters into this method.
        /// </summary>
        public void VerifyDeactivateGoogleUser()
        {
            #region Variable Declarations
            WinRow uIRow1Row = this.UIAccountManagementCenWindow.UIDgvAccountWindow.UIDataGridViewTable.UIRow1Row;
            #endregion

            // Verify that 'Row 1' row's property 'Value' equals 'wss_adsagetest@163.com(CNY);Google;&Deactivate'
            Assert.AreEqual(this.VerifyDeactivateGoogleUserExpectedValues.UIRow1RowValue, uIRow1Row.Value);
        }
        
        #region Properties
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public virtual AssertMethod2ExpectedValues AssertMethod2ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod2ExpectedValues == null))
                {
                    this.mAssertMethod2ExpectedValues = new AssertMethod2ExpectedValues();
                }
                return this.mAssertMethod2ExpectedValues;
            }
        }
        
        public virtual AssertMethod3ExpectedValues AssertMethod3ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod3ExpectedValues == null))
                {
                    this.mAssertMethod3ExpectedValues = new AssertMethod3ExpectedValues();
                }
                return this.mAssertMethod3ExpectedValues;
            }
        }
        
        public virtual VerifyAccountActiveAccountExpectedValues VerifyAccountActiveAccountExpectedValues
        {
            get
            {
                if ((this.mVerifyAccountActiveAccountExpectedValues == null))
                {
                    this.mVerifyAccountActiveAccountExpectedValues = new VerifyAccountActiveAccountExpectedValues();
                }
                return this.mVerifyAccountActiveAccountExpectedValues;
            }
        }
        
        public virtual VerifyActivateAdcenterUserExpectedValues VerifyActivateAdcenterUserExpectedValues
        {
            get
            {
                if ((this.mVerifyActivateAdcenterUserExpectedValues == null))
                {
                    this.mVerifyActivateAdcenterUserExpectedValues = new VerifyActivateAdcenterUserExpectedValues();
                }
                return this.mVerifyActivateAdcenterUserExpectedValues;
            }
        }
        
        public virtual VerifyActivateFacebookUserExpectedValues VerifyActivateFacebookUserExpectedValues
        {
            get
            {
                if ((this.mVerifyActivateFacebookUserExpectedValues == null))
                {
                    this.mVerifyActivateFacebookUserExpectedValues = new VerifyActivateFacebookUserExpectedValues();
                }
                return this.mVerifyActivateFacebookUserExpectedValues;
            }
        }
        
        public virtual VerifyActivateGoogleUserExpectedValues VerifyActivateGoogleUserExpectedValues
        {
            get
            {
                if ((this.mVerifyActivateGoogleUserExpectedValues == null))
                {
                    this.mVerifyActivateGoogleUserExpectedValues = new VerifyActivateGoogleUserExpectedValues();
                }
                return this.mVerifyActivateGoogleUserExpectedValues;
            }
        }
        
        public virtual VerifyActiveAccountExpectedValues VerifyActiveAccountExpectedValues
        {
            get
            {
                if ((this.mVerifyActiveAccountExpectedValues == null))
                {
                    this.mVerifyActiveAccountExpectedValues = new VerifyActiveAccountExpectedValues();
                }
                return this.mVerifyActiveAccountExpectedValues;
            }
        }
        
        public virtual VerifyActiveAdcenterAccountExpectedValues VerifyActiveAdcenterAccountExpectedValues
        {
            get
            {
                if ((this.mVerifyActiveAdcenterAccountExpectedValues == null))
                {
                    this.mVerifyActiveAdcenterAccountExpectedValues = new VerifyActiveAdcenterAccountExpectedValues();
                }
                return this.mVerifyActiveAdcenterAccountExpectedValues;
            }
        }
        
        public virtual VerifyActiveFacebookAccountExpectedValues VerifyActiveFacebookAccountExpectedValues
        {
            get
            {
                if ((this.mVerifyActiveFacebookAccountExpectedValues == null))
                {
                    this.mVerifyActiveFacebookAccountExpectedValues = new VerifyActiveFacebookAccountExpectedValues();
                }
                return this.mVerifyActiveFacebookAccountExpectedValues;
            }
        }
        
        public virtual VerifyDeactivateAdcenterUserExpectedValues VerifyDeactivateAdcenterUserExpectedValues
        {
            get
            {
                if ((this.mVerifyDeactivateAdcenterUserExpectedValues == null))
                {
                    this.mVerifyDeactivateAdcenterUserExpectedValues = new VerifyDeactivateAdcenterUserExpectedValues();
                }
                return this.mVerifyDeactivateAdcenterUserExpectedValues;
            }
        }
        
        public virtual VerifyDeactivateGoogleUserExpectedValues VerifyDeactivateGoogleUserExpectedValues
        {
            get
            {
                if ((this.mVerifyDeactivateGoogleUserExpectedValues == null))
                {
                    this.mVerifyDeactivateGoogleUserExpectedValues = new VerifyDeactivateGoogleUserExpectedValues();
                }
                return this.mVerifyDeactivateGoogleUserExpectedValues;
            }
        }
        
        public UIAccountManagementCenWindow UIAccountManagementCenWindow
        {
            get
            {
                if ((this.mUIAccountManagementCenWindow == null))
                {
                    this.mUIAccountManagementCenWindow = new UIAccountManagementCenWindow();
                }
                return this.mUIAccountManagementCenWindow;
            }
        }
        #endregion
        
        #region Fields
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private AssertMethod2ExpectedValues mAssertMethod2ExpectedValues;
        
        private AssertMethod3ExpectedValues mAssertMethod3ExpectedValues;
        
        private VerifyAccountActiveAccountExpectedValues mVerifyAccountActiveAccountExpectedValues;
        
        private VerifyActivateAdcenterUserExpectedValues mVerifyActivateAdcenterUserExpectedValues;
        
        private VerifyActivateFacebookUserExpectedValues mVerifyActivateFacebookUserExpectedValues;
        
        private VerifyActivateGoogleUserExpectedValues mVerifyActivateGoogleUserExpectedValues;
        
        private VerifyActiveAccountExpectedValues mVerifyActiveAccountExpectedValues;
        
        private VerifyActiveAdcenterAccountExpectedValues mVerifyActiveAdcenterAccountExpectedValues;
        
        private VerifyActiveFacebookAccountExpectedValues mVerifyActiveFacebookAccountExpectedValues;
        
        private VerifyDeactivateAdcenterUserExpectedValues mVerifyDeactivateAdcenterUserExpectedValues;
        
        private VerifyDeactivateGoogleUserExpectedValues mVerifyDeactivateGoogleUserExpectedValues;
        
        private UIAccountManagementCenWindow mUIAccountManagementCenWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Synchronize accounts from wss_adsagetest@163.com ....' label's property 'Name' equals 'Synchronize accounts from wss_adsagetest@163.com ...'
        /// </summary>
        public string UISynchronizeaccountsfTextName = "Synchronize accounts from wss_adsagetest@163.com ...";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class AssertMethod2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Synchronize accounts from API_msft_adlabs ...' label's property 'Name' equals 'Synchronize accounts from API_msft_adlabs ...'
        /// </summary>
        public string UISynchronizeaccountsfText1Name = "Synchronize accounts from API_msft_adlabs ...";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class AssertMethod3ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Synchronize accounts from Hai Huang ...' label's property 'Name' equals 'Synchronize accounts from Hai Huang ...'
        /// </summary>
        public string UISynchronizeaccountsfText2Name = "Synchronize accounts from Hai Huang ...";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'VerifyAccountActiveAccount'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class VerifyAccountActiveAccountExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Row 1' row's property 'Value' equals 'Account2 #348004880(USD);Facebook;&Deactivate'
        /// </summary>
        public string UIRow1RowValue = "Account2 #348004880(USD);Facebook;&Deactivate";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'VerifyActivateAdcenterUser'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class VerifyActivateAdcenterUserExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Row 1' row's property 'Value' equals 'Microsoft adlabs(USD);AdCenter;&Activate'
        /// </summary>
        public string UIRow1RowValue = "Microsoft adlabs(USD);AdCenter;&Activate";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'VerifyActivateFacebookUser'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class VerifyActivateFacebookUserExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Row 2' row's property 'Value' equals 'haih@ad-sage.com #46848300(USD);Facebook;&Activate'
        /// </summary>
        public string UIRow2RowValue = "haih@ad-sage.com #46848300(USD);Facebook;&Activate";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'VerifyActivateGoogleUser'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class VerifyActivateGoogleUserExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Row 1' row's property 'Value' equals 'wss_adsagetest@163.com(CNY);Google;&Activate'
        /// </summary>
        public string UIRow1RowValue = "wss_adsagetest@163.com(CNY);Google;&Activate";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'VerifyActiveAccount'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class VerifyActiveAccountExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Row 1' row's property 'Value' equals 'haih@ad-sage.com #46848300(USD);Facebook;&Deactivate'
        /// </summary>
        public string UIRow1RowValue = "haih@ad-sage.com #46848300(USD);Facebook;&Deactivate";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'VerifyActiveAdcenterAccount'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class VerifyActiveAdcenterAccountExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Row 1' row's property 'Value' equals 'Microsoft adlabs(USD);AdCenter;&Activate'
        /// </summary>
        public string UIRow1RowValue = "Microsoft adlabs(USD);AdCenter;&Activate";
        
        /// <summary>
        /// Verify that 'Row 2' row's property 'Value' equals 'Microsoft adLabs 3(USD);AdCenter;&Activate'
        /// </summary>
        public string UIRow2RowValue = "Microsoft adLabs 3(USD);AdCenter;&Activate";
        
        /// <summary>
        /// Verify that 'API_msft_adlabs' tree item's property 'Name' equals 'API_msft_adlabs'
        /// </summary>
        public string UIAPI_msft_adlabsTreeItemName = "API_msft_adlabs";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'VerifyActiveFacebookAccount'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class VerifyActiveFacebookAccountExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Row 2' row's property 'Value' equals 'haih@ad-sage.com #46848300(USD);Facebook;&Activate'
        /// </summary>
        public string UIRow2RowValue = "haih@ad-sage.com #46848300(USD);Facebook;&Activate";
        
        /// <summary>
        /// Verify that 'Hai Huang' tree item's property 'Name' equals 'Hai Huang'
        /// </summary>
        public string UIHaiHuangTreeItemName = "Hai Huang";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'VerifyDeactivateAdcenterUser'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class VerifyDeactivateAdcenterUserExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Row 1' row's property 'Value' equals 'Microsoft adlabs(USD);AdCenter;&Deactivate'
        /// </summary>
        public string UIRow1RowValue = "Microsoft adlabs(USD);AdCenter;&Deactivate";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'VerifyDeactivateGoogleUser'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class VerifyDeactivateGoogleUserExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Row 1' row's property 'Value' equals 'wss_adsagetest@163.com(CNY);Google;&Deactivate'
        /// </summary>
        public string UIRow1RowValue = "wss_adsagetest@163.com(CNY);Google;&Deactivate";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAccountManagementCenWindow : WinWindow
    {
        
        public UIAccountManagementCenWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Account Management Center";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Account Management Center");
            #endregion
        }
        
        #region Properties
        public UIUserAccountManagemenMenuBar UIUserAccountManagemenMenuBar
        {
            get
            {
                if ((this.mUIUserAccountManagemenMenuBar == null))
                {
                    this.mUIUserAccountManagemenMenuBar = new UIUserAccountManagemenMenuBar(this);
                }
                return this.mUIUserAccountManagemenMenuBar;
            }
        }
        
        public UISystemMenuItem1 UISystemMenuItem
        {
            get
            {
                if ((this.mUISystemMenuItem == null))
                {
                    this.mUISystemMenuItem = new UISystemMenuItem1(this);
                }
                return this.mUISystemMenuItem;
            }
        }
        
        public UISystemMenu UISystemMenu
        {
            get
            {
                if ((this.mUISystemMenu == null))
                {
                    this.mUISystemMenu = new UISystemMenu(this);
                }
                return this.mUISystemMenu;
            }
        }
        
        public UIAccountManagementCenTitleBar UIAccountManagementCenTitleBar
        {
            get
            {
                if ((this.mUIAccountManagementCenTitleBar == null))
                {
                    this.mUIAccountManagementCenTitleBar = new UIAccountManagementCenTitleBar(this);
                }
                return this.mUIAccountManagementCenTitleBar;
            }
        }
        
        public WinMenuBar UIUserAccountManagemenMenuBar1
        {
            get
            {
                if ((this.mUIUserAccountManagemenMenuBar1 == null))
                {
                    this.mUIUserAccountManagemenMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIUserAccountManagemenMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIUserAccountManagemenMenuBar1;
            }
        }
        
        public UIAccountManagementCenClient UIAccountManagementCenClient
        {
            get
            {
                if ((this.mUIAccountManagementCenClient == null))
                {
                    this.mUIAccountManagementCenClient = new UIAccountManagementCenClient(this);
                }
                return this.mUIAccountManagementCenClient;
            }
        }
        
        public UISageVerticalSplitConWindow UISageVerticalSplitConWindow
        {
            get
            {
                if ((this.mUISageVerticalSplitConWindow == null))
                {
                    this.mUISageVerticalSplitConWindow = new UISageVerticalSplitConWindow(this);
                }
                return this.mUISageVerticalSplitConWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UISageTreeViewWindow UISageTreeViewWindow
        {
            get
            {
                if ((this.mUISageTreeViewWindow == null))
                {
                    this.mUISageTreeViewWindow = new UISageTreeViewWindow(this);
                }
                return this.mUISageTreeViewWindow;
            }
        }
        
        public UIVerticalScrollBar UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public UISageToolStrip1Window UISageToolStrip1Window
        {
            get
            {
                if ((this.mUISageToolStrip1Window == null))
                {
                    this.mUISageToolStrip1Window = new UISageToolStrip1Window(this);
                }
                return this.mUISageToolStrip1Window;
            }
        }
        
        public UISageToolStripToolBar UISageToolStripToolBar
        {
            get
            {
                if ((this.mUISageToolStripToolBar == null))
                {
                    this.mUISageToolStripToolBar = new UISageToolStripToolBar(this);
                }
                return this.mUISageToolStripToolBar;
            }
        }
        
        public UISageToolStrip1ScrollBar UISageToolStrip1ScrollBar
        {
            get
            {
                if ((this.mUISageToolStrip1ScrollBar == null))
                {
                    this.mUISageToolStrip1ScrollBar = new UISageToolStrip1ScrollBar(this);
                }
                return this.mUISageToolStrip1ScrollBar;
            }
        }
        
        public UISageToolStrip1ScrollBar1 UISageToolStrip1ScrollBar1
        {
            get
            {
                if ((this.mUISageToolStrip1ScrollBar1 == null))
                {
                    this.mUISageToolStrip1ScrollBar1 = new UISageToolStrip1ScrollBar1(this);
                }
                return this.mUISageToolStrip1ScrollBar1;
            }
        }
        
        public UIAddAccountWindow UIAddAccountWindow
        {
            get
            {
                if ((this.mUIAddAccountWindow == null))
                {
                    this.mUIAddAccountWindow = new UIAddAccountWindow(this);
                }
                return this.mUIAddAccountWindow;
            }
        }
        
        public UISageToolStrip1ToolBar UISageToolStrip1ToolBar
        {
            get
            {
                if ((this.mUISageToolStrip1ToolBar == null))
                {
                    this.mUISageToolStrip1ToolBar = new UISageToolStrip1ToolBar(this);
                }
                return this.mUISageToolStrip1ToolBar;
            }
        }
        
        public UIAddAccountScrollBar UIAddAccountScrollBar
        {
            get
            {
                if ((this.mUIAddAccountScrollBar == null))
                {
                    this.mUIAddAccountScrollBar = new UIAddAccountScrollBar(this);
                }
                return this.mUIAddAccountScrollBar;
            }
        }
        
        public UIAddAccountScrollBar1 UIAddAccountScrollBar1
        {
            get
            {
                if ((this.mUIAddAccountScrollBar1 == null))
                {
                    this.mUIAddAccountScrollBar1 = new UIAddAccountScrollBar1(this);
                }
                return this.mUIAddAccountScrollBar1;
            }
        }
        
        public UIVerticalScrollBar1 UIVerticalScrollBar1
        {
            get
            {
                if ((this.mUIVerticalScrollBar1 == null))
                {
                    this.mUIVerticalScrollBar1 = new UIVerticalScrollBar1(this);
                }
                return this.mUIVerticalScrollBar1;
            }
        }
        
        public UIHorizontalScrollBar1 UIHorizontalScrollBar1
        {
            get
            {
                if ((this.mUIHorizontalScrollBar1 == null))
                {
                    this.mUIHorizontalScrollBar1 = new UIHorizontalScrollBar1(this);
                }
                return this.mUIHorizontalScrollBar1;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIAdvertiserAccountVieWindow UIAdvertiserAccountVieWindow
        {
            get
            {
                if ((this.mUIAdvertiserAccountVieWindow == null))
                {
                    this.mUIAdvertiserAccountVieWindow = new UIAdvertiserAccountVieWindow(this);
                }
                return this.mUIAdvertiserAccountVieWindow;
            }
        }
        
        public UIDgvAccountWindow UIDgvAccountWindow
        {
            get
            {
                if ((this.mUIDgvAccountWindow == null))
                {
                    this.mUIDgvAccountWindow = new UIDgvAccountWindow(this);
                }
                return this.mUIDgvAccountWindow;
            }
        }
        
        public UIVerticalScrollBar2 UIVerticalScrollBar2
        {
            get
            {
                if ((this.mUIVerticalScrollBar2 == null))
                {
                    this.mUIVerticalScrollBar2 = new UIVerticalScrollBar2(this);
                }
                return this.mUIVerticalScrollBar2;
            }
        }
        
        public UIHorizontalScrollBar2 UIHorizontalScrollBar2
        {
            get
            {
                if ((this.mUIHorizontalScrollBar2 == null))
                {
                    this.mUIHorizontalScrollBar2 = new UIHorizontalScrollBar2(this);
                }
                return this.mUIHorizontalScrollBar2;
            }
        }
        
        public UIVerticalScrollBar3 UIVerticalScrollBar3
        {
            get
            {
                if ((this.mUIVerticalScrollBar3 == null))
                {
                    this.mUIVerticalScrollBar3 = new UIVerticalScrollBar3(this);
                }
                return this.mUIVerticalScrollBar3;
            }
        }
        
        public UIHorizontalScrollBar3 UIHorizontalScrollBar3
        {
            get
            {
                if ((this.mUIHorizontalScrollBar3 == null))
                {
                    this.mUIHorizontalScrollBar3 = new UIHorizontalScrollBar3(this);
                }
                return this.mUIHorizontalScrollBar3;
            }
        }
        
        public UIPanel1Window UIPanel1Window
        {
            get
            {
                if ((this.mUIPanel1Window == null))
                {
                    this.mUIPanel1Window = new UIPanel1Window(this);
                }
                return this.mUIPanel1Window;
            }
        }
        
        public UICloseWindow UICloseWindow
        {
            get
            {
                if ((this.mUICloseWindow == null))
                {
                    this.mUICloseWindow = new UICloseWindow(this);
                }
                return this.mUICloseWindow;
            }
        }
        
        public UICloseScrollBar UICloseScrollBar
        {
            get
            {
                if ((this.mUICloseScrollBar == null))
                {
                    this.mUICloseScrollBar = new UICloseScrollBar(this);
                }
                return this.mUICloseScrollBar;
            }
        }
        
        public UICloseScrollBar1 UICloseScrollBar1
        {
            get
            {
                if ((this.mUICloseScrollBar1 == null))
                {
                    this.mUICloseScrollBar1 = new UICloseScrollBar1(this);
                }
                return this.mUICloseScrollBar1;
            }
        }
        
        public UILabel1Window UILabel1Window
        {
            get
            {
                if ((this.mUILabel1Window == null))
                {
                    this.mUILabel1Window = new UILabel1Window(this);
                }
                return this.mUILabel1Window;
            }
        }
        
        public UIVerticalScrollBar4 UIVerticalScrollBar4
        {
            get
            {
                if ((this.mUIVerticalScrollBar4 == null))
                {
                    this.mUIVerticalScrollBar4 = new UIVerticalScrollBar4(this);
                }
                return this.mUIVerticalScrollBar4;
            }
        }
        
        public UIHorizontalScrollBar4 UIHorizontalScrollBar4
        {
            get
            {
                if ((this.mUIHorizontalScrollBar4 == null))
                {
                    this.mUIHorizontalScrollBar4 = new UIHorizontalScrollBar4(this);
                }
                return this.mUIHorizontalScrollBar4;
            }
        }
        
        public UIVerticalScrollBar5 UIVerticalScrollBar5
        {
            get
            {
                if ((this.mUIVerticalScrollBar5 == null))
                {
                    this.mUIVerticalScrollBar5 = new UIVerticalScrollBar5(this);
                }
                return this.mUIVerticalScrollBar5;
            }
        }
        
        public UIHorizontalScrollBar5 UIHorizontalScrollBar5
        {
            get
            {
                if ((this.mUIHorizontalScrollBar5 == null))
                {
                    this.mUIHorizontalScrollBar5 = new UIHorizontalScrollBar5(this);
                }
                return this.mUIHorizontalScrollBar5;
            }
        }
        
        public UIVerticalScrollBar6 UIVerticalScrollBar6
        {
            get
            {
                if ((this.mUIVerticalScrollBar6 == null))
                {
                    this.mUIVerticalScrollBar6 = new UIVerticalScrollBar6(this);
                }
                return this.mUIVerticalScrollBar6;
            }
        }
        
        public UIHorizontalScrollBar6 UIHorizontalScrollBar6
        {
            get
            {
                if ((this.mUIHorizontalScrollBar6 == null))
                {
                    this.mUIHorizontalScrollBar6 = new UIHorizontalScrollBar6(this);
                }
                return this.mUIHorizontalScrollBar6;
            }
        }
        
        public UIVerticalScrollBar7 UIVerticalScrollBar7
        {
            get
            {
                if ((this.mUIVerticalScrollBar7 == null))
                {
                    this.mUIVerticalScrollBar7 = new UIVerticalScrollBar7(this);
                }
                return this.mUIVerticalScrollBar7;
            }
        }
        
        public UIHorizontalScrollBar7 UIHorizontalScrollBar7
        {
            get
            {
                if ((this.mUIHorizontalScrollBar7 == null))
                {
                    this.mUIHorizontalScrollBar7 = new UIHorizontalScrollBar7(this);
                }
                return this.mUIHorizontalScrollBar7;
            }
        }
        
        public UIAccountManagementCenScrollBar UIAccountManagementCenScrollBar
        {
            get
            {
                if ((this.mUIAccountManagementCenScrollBar == null))
                {
                    this.mUIAccountManagementCenScrollBar = new UIAccountManagementCenScrollBar(this);
                }
                return this.mUIAccountManagementCenScrollBar;
            }
        }
        
        public UIAccountManagementCenScrollBar1 UIAccountManagementCenScrollBar1
        {
            get
            {
                if ((this.mUIAccountManagementCenScrollBar1 == null))
                {
                    this.mUIAccountManagementCenScrollBar1 = new UIAccountManagementCenScrollBar1(this);
                }
                return this.mUIAccountManagementCenScrollBar1;
            }
        }
        
        public WinControl UIAccountManagementCenGrip
        {
            get
            {
                if ((this.mUIAccountManagementCenGrip == null))
                {
                    this.mUIAccountManagementCenGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIAccountManagementCenGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIAccountManagementCenGrip;
            }
        }
        #endregion
        
        #region Fields
        private UIUserAccountManagemenMenuBar mUIUserAccountManagemenMenuBar;
        
        private UISystemMenuItem1 mUISystemMenuItem;
        
        private UISystemMenu mUISystemMenu;
        
        private UIAccountManagementCenTitleBar mUIAccountManagementCenTitleBar;
        
        private WinMenuBar mUIUserAccountManagemenMenuBar1;
        
        private UIAccountManagementCenClient mUIAccountManagementCenClient;
        
        private UISageVerticalSplitConWindow mUISageVerticalSplitConWindow;
        
        private UIItemWindow mUIItemWindow;
        
        private UISageTreeViewWindow mUISageTreeViewWindow;
        
        private UIVerticalScrollBar mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar mUIHorizontalScrollBar;
        
        private UISageToolStrip1Window mUISageToolStrip1Window;
        
        private UISageToolStripToolBar mUISageToolStripToolBar;
        
        private UISageToolStrip1ScrollBar mUISageToolStrip1ScrollBar;
        
        private UISageToolStrip1ScrollBar1 mUISageToolStrip1ScrollBar1;
        
        private UIAddAccountWindow mUIAddAccountWindow;
        
        private UISageToolStrip1ToolBar mUISageToolStrip1ToolBar;
        
        private UIAddAccountScrollBar mUIAddAccountScrollBar;
        
        private UIAddAccountScrollBar1 mUIAddAccountScrollBar1;
        
        private UIVerticalScrollBar1 mUIVerticalScrollBar1;
        
        private UIHorizontalScrollBar1 mUIHorizontalScrollBar1;
        
        private UIItemWindow1 mUIItemWindow1;
        
        private UIAdvertiserAccountVieWindow mUIAdvertiserAccountVieWindow;
        
        private UIDgvAccountWindow mUIDgvAccountWindow;
        
        private UIVerticalScrollBar2 mUIVerticalScrollBar2;
        
        private UIHorizontalScrollBar2 mUIHorizontalScrollBar2;
        
        private UIVerticalScrollBar3 mUIVerticalScrollBar3;
        
        private UIHorizontalScrollBar3 mUIHorizontalScrollBar3;
        
        private UIPanel1Window mUIPanel1Window;
        
        private UICloseWindow mUICloseWindow;
        
        private UICloseScrollBar mUICloseScrollBar;
        
        private UICloseScrollBar1 mUICloseScrollBar1;
        
        private UILabel1Window mUILabel1Window;
        
        private UIVerticalScrollBar4 mUIVerticalScrollBar4;
        
        private UIHorizontalScrollBar4 mUIHorizontalScrollBar4;
        
        private UIVerticalScrollBar5 mUIVerticalScrollBar5;
        
        private UIHorizontalScrollBar5 mUIHorizontalScrollBar5;
        
        private UIVerticalScrollBar6 mUIVerticalScrollBar6;
        
        private UIHorizontalScrollBar6 mUIHorizontalScrollBar6;
        
        private UIVerticalScrollBar7 mUIVerticalScrollBar7;
        
        private UIHorizontalScrollBar7 mUIHorizontalScrollBar7;
        
        private UIAccountManagementCenScrollBar mUIAccountManagementCenScrollBar;
        
        private UIAccountManagementCenScrollBar1 mUIAccountManagementCenScrollBar1;
        
        private WinControl mUIAccountManagementCenGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIUserAccountManagemenMenuBar : WinMenuBar
    {
        
        public UIUserAccountManagemenMenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "System";
            #endregion
        }
        
        #region Properties
        public UISystemMenuItem UISystemMenuItem
        {
            get
            {
                if ((this.mUISystemMenuItem == null))
                {
                    this.mUISystemMenuItem = new UISystemMenuItem(this);
                }
                return this.mUISystemMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UISystemMenuItem mUISystemMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISystemMenuItem : WinMenuItem
    {
        
        public UISystemMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "System";
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIRestoreMenuItem
        {
            get
            {
                if ((this.mUIRestoreMenuItem == null))
                {
                    this.mUIRestoreMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIRestoreMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Restore";
                    this.mUIRestoreMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUIRestoreMenuItem;
            }
        }
        
        public WinMenuItem UIMoveMenuItem
        {
            get
            {
                if ((this.mUIMoveMenuItem == null))
                {
                    this.mUIMoveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIMoveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Move";
                    this.mUIMoveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUIMoveMenuItem;
            }
        }
        
        public WinMenuItem UISizeMenuItem
        {
            get
            {
                if ((this.mUISizeMenuItem == null))
                {
                    this.mUISizeMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISizeMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Size";
                    this.mUISizeMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUISizeMenuItem;
            }
        }
        
        public WinMenuItem UIMinimizeMenuItem
        {
            get
            {
                if ((this.mUIMinimizeMenuItem == null))
                {
                    this.mUIMinimizeMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIMinimizeMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Minimize";
                    this.mUIMinimizeMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUIMinimizeMenuItem;
            }
        }
        
        public WinMenuItem UIMaximizeMenuItem
        {
            get
            {
                if ((this.mUIMaximizeMenuItem == null))
                {
                    this.mUIMaximizeMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIMaximizeMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Maximize";
                    this.mUIMaximizeMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUIMaximizeMenuItem;
            }
        }
        
        public WinMenuItem UICloseAltF4MenuItem
        {
            get
            {
                if ((this.mUICloseAltF4MenuItem == null))
                {
                    this.mUICloseAltF4MenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseAltF4MenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close\tAlt+F4";
                    this.mUICloseAltF4MenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUICloseAltF4MenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIRestoreMenuItem;
        
        private WinMenuItem mUIMoveMenuItem;
        
        private WinMenuItem mUISizeMenuItem;
        
        private WinMenuItem mUIMinimizeMenuItem;
        
        private WinMenuItem mUIMaximizeMenuItem;
        
        private WinMenuItem mUICloseAltF4MenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISystemMenuItem1 : WinMenuItem
    {
        
        public UISystemMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "System";
            #endregion
        }
        
        #region Properties
        public WinMenu UISystemMenu
        {
            get
            {
                if ((this.mUISystemMenu == null))
                {
                    this.mUISystemMenu = new WinMenu(this);
                    #region Search Criteria
                    this.mUISystemMenu.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    this.mUISystemMenu.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISystemMenu.SearchConfigurations.Remove(SearchConfiguration.VisibleOnly);
                    #endregion
                }
                return this.mUISystemMenu;
            }
        }
        #endregion
        
        #region Fields
        private WinMenu mUISystemMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISystemMenu : WinMenu
    {
        
        public UISystemMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "System";
            this.SearchConfigurations.Remove(SearchConfiguration.VisibleOnly);
            #endregion
        }
        
        #region Properties
        public WinSeparator UIItemSeparator
        {
            get
            {
                if ((this.mUIItemSeparator == null))
                {
                    this.mUIItemSeparator = new WinSeparator(this);
                }
                return this.mUIItemSeparator;
            }
        }
        #endregion
        
        #region Fields
        private WinSeparator mUIItemSeparator;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAccountManagementCenTitleBar : WinTitleBar
    {
        
        public UIAccountManagementCenTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAccountManagementCenClient : WinClient
    {
        
        public UIAccountManagementCenClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Account Management Center";
            #endregion
        }
        
        #region Properties
        public WinWindow UISageVerticalSplitConWindow
        {
            get
            {
                if ((this.mUISageVerticalSplitConWindow == null))
                {
                    this.mUISageVerticalSplitConWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUISageVerticalSplitConWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUISageVerticalSplitConWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUISageVerticalSplitConWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISageVerticalSplitConWindow : WinWindow
    {
        
        public UISageVerticalSplitConWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "sageVerticalSplitContainer1";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UISageVerticalSplitConMenuBar
        {
            get
            {
                if ((this.mUISageVerticalSplitConMenuBar == null))
                {
                    this.mUISageVerticalSplitConMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISageVerticalSplitConMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUISageVerticalSplitConMenuBar;
            }
        }
        
        public WinTitleBar UISageVerticalSplitConTitleBar
        {
            get
            {
                if ((this.mUISageVerticalSplitConTitleBar == null))
                {
                    this.mUISageVerticalSplitConTitleBar = new WinTitleBar(this);
                }
                return this.mUISageVerticalSplitConTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UISageVerticalSplitConMenuBar1
        {
            get
            {
                if ((this.mUISageVerticalSplitConMenuBar1 == null))
                {
                    this.mUISageVerticalSplitConMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISageVerticalSplitConMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUISageVerticalSplitConMenuBar1;
            }
        }
        
        public WinClient UISageVerticalSplitConClient
        {
            get
            {
                if ((this.mUISageVerticalSplitConClient == null))
                {
                    this.mUISageVerticalSplitConClient = new WinClient(this);
                }
                return this.mUISageVerticalSplitConClient;
            }
        }
        
        public WinWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIItemWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIItemWindow.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    #endregion
                }
                return this.mUIItemWindow;
            }
        }
        
        public WinMenuBar UISystemMenuBar
        {
            get
            {
                if ((this.mUISystemMenuBar == null))
                {
                    this.mUISystemMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISystemMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUISystemMenuBar;
            }
        }
        
        public WinMenuBar UIApplicationMenuBar
        {
            get
            {
                if ((this.mUIApplicationMenuBar == null))
                {
                    this.mUIApplicationMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIApplicationMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIApplicationMenuBar;
            }
        }
        
        public WinScrollBar UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIVerticalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public WinScrollBar UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIHorizontalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinWindow UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new WinWindow(this);
                    #region Search Criteria
                    this.mUIItemWindow1.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIItemWindow1.SearchProperties[WinWindow.PropertyNames.Instance] = "4";
                    #endregion
                }
                return this.mUIItemWindow1;
            }
        }
        
        public WinMenuBar UISystemMenuBar1
        {
            get
            {
                if ((this.mUISystemMenuBar1 == null))
                {
                    this.mUISystemMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISystemMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUISystemMenuBar1;
            }
        }
        
        public WinMenuBar UIApplicationMenuBar1
        {
            get
            {
                if ((this.mUIApplicationMenuBar1 == null))
                {
                    this.mUIApplicationMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIApplicationMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIApplicationMenuBar1;
            }
        }
        
        public WinScrollBar UIVerticalScrollBar1
        {
            get
            {
                if ((this.mUIVerticalScrollBar1 == null))
                {
                    this.mUIVerticalScrollBar1 = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIVerticalScrollBar1.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIVerticalScrollBar1;
            }
        }
        
        public WinScrollBar UIHorizontalScrollBar1
        {
            get
            {
                if ((this.mUIHorizontalScrollBar1 == null))
                {
                    this.mUIHorizontalScrollBar1 = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIHorizontalScrollBar1.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIHorizontalScrollBar1;
            }
        }
        
        public WinScrollBar UIVerticalScrollBar2
        {
            get
            {
                if ((this.mUIVerticalScrollBar2 == null))
                {
                    this.mUIVerticalScrollBar2 = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIVerticalScrollBar2.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIVerticalScrollBar2;
            }
        }
        
        public WinScrollBar UIHorizontalScrollBar2
        {
            get
            {
                if ((this.mUIHorizontalScrollBar2 == null))
                {
                    this.mUIHorizontalScrollBar2 = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIHorizontalScrollBar2.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIHorizontalScrollBar2;
            }
        }
        
        public WinControl UISageVerticalSplitConGrip
        {
            get
            {
                if ((this.mUISageVerticalSplitConGrip == null))
                {
                    this.mUISageVerticalSplitConGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUISageVerticalSplitConGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUISageVerticalSplitConGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUISageVerticalSplitConMenuBar;
        
        private WinTitleBar mUISageVerticalSplitConTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUISageVerticalSplitConMenuBar1;
        
        private WinClient mUISageVerticalSplitConClient;
        
        private WinWindow mUIItemWindow;
        
        private WinMenuBar mUISystemMenuBar;
        
        private WinMenuBar mUIApplicationMenuBar;
        
        private WinScrollBar mUIVerticalScrollBar;
        
        private WinScrollBar mUIHorizontalScrollBar;
        
        private WinWindow mUIItemWindow1;
        
        private WinMenuBar mUISystemMenuBar1;
        
        private WinMenuBar mUIApplicationMenuBar1;
        
        private WinScrollBar mUIVerticalScrollBar1;
        
        private WinScrollBar mUIHorizontalScrollBar1;
        
        private WinScrollBar mUIVerticalScrollBar2;
        
        private WinScrollBar mUIHorizontalScrollBar2;
        
        private WinControl mUISageVerticalSplitConGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            #endregion
        }
        
        #region Properties
        public UIItemTitleBar UIItemTitleBar
        {
            get
            {
                if ((this.mUIItemTitleBar == null))
                {
                    this.mUIItemTitleBar = new UIItemTitleBar(this);
                }
                return this.mUIItemTitleBar;
            }
        }
        
        public UISageVerticalSplitConClient UISageVerticalSplitConClient
        {
            get
            {
                if ((this.mUISageVerticalSplitConClient == null))
                {
                    this.mUISageVerticalSplitConClient = new UISageVerticalSplitConClient(this);
                }
                return this.mUISageVerticalSplitConClient;
            }
        }
        
        public WinControl UIItemGrip
        {
            get
            {
                if ((this.mUIItemGrip == null))
                {
                    this.mUIItemGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIItemGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIItemGrip;
            }
        }
        #endregion
        
        #region Fields
        private UIItemTitleBar mUIItemTitleBar;
        
        private UISageVerticalSplitConClient mUISageVerticalSplitConClient;
        
        private WinControl mUIItemGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemTitleBar : WinTitleBar
    {
        
        public UIItemTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISageVerticalSplitConClient : WinClient
    {
        
        public UISageVerticalSplitConClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinWindow UISageTreeViewWindow
        {
            get
            {
                if ((this.mUISageTreeViewWindow == null))
                {
                    this.mUISageTreeViewWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUISageTreeViewWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.SysTreeView32", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUISageTreeViewWindow;
            }
        }
        
        public WinWindow UISageToolStrip1Window
        {
            get
            {
                if ((this.mUISageToolStrip1Window == null))
                {
                    this.mUISageToolStrip1Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUISageToolStrip1Window.SearchProperties[WinWindow.PropertyNames.Name] = "sageToolStrip1";
                    this.mUISageToolStrip1Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUISageToolStrip1Window;
            }
        }
        
        public WinWindow UIAddAccountWindow
        {
            get
            {
                if ((this.mUIAddAccountWindow == null))
                {
                    this.mUIAddAccountWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIAddAccountWindow.SearchProperties[WinWindow.PropertyNames.Name] = "Add Account";
                    this.mUIAddAccountWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIAddAccountWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUISageTreeViewWindow;
        
        private WinWindow mUISageToolStrip1Window;
        
        private WinWindow mUIAddAccountWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISageTreeViewWindow : WinWindow
    {
        
        public UISageTreeViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "sageTreeView";
            this.WindowTitles.Add("Account Management Center");
            #endregion
        }
        
        #region Properties
        public WinMenuBar UISageTreeViewMenuBar
        {
            get
            {
                if ((this.mUISageTreeViewMenuBar == null))
                {
                    this.mUISageTreeViewMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISageTreeViewMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUISageTreeViewMenuBar;
            }
        }
        
        public WinTitleBar UISageTreeViewTitleBar
        {
            get
            {
                if ((this.mUISageTreeViewTitleBar == null))
                {
                    this.mUISageTreeViewTitleBar = new WinTitleBar(this);
                }
                return this.mUISageTreeViewTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UISageTreeViewMenuBar1
        {
            get
            {
                if ((this.mUISageTreeViewMenuBar1 == null))
                {
                    this.mUISageTreeViewMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISageTreeViewMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUISageTreeViewMenuBar1;
            }
        }
        
        public WinTree UISageTreeViewTree
        {
            get
            {
                if ((this.mUISageTreeViewTree == null))
                {
                    this.mUISageTreeViewTree = new WinTree(this);
                }
                return this.mUISageTreeViewTree;
            }
        }
        
        public WinTreeItem UIHaiHuangTreeItem
        {
            get
            {
                if ((this.mUIHaiHuangTreeItem == null))
                {
                    this.mUIHaiHuangTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIHaiHuangTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Hai Huang";
                    this.mUIHaiHuangTreeItem.SearchProperties["Value"] = "0";
                    #endregion
                }
                return this.mUIHaiHuangTreeItem;
            }
        }
        
        public WinScrollBar UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIVerticalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public WinScrollBar UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIHorizontalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UISageTreeViewGrip
        {
            get
            {
                if ((this.mUISageTreeViewGrip == null))
                {
                    this.mUISageTreeViewGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUISageTreeViewGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUISageTreeViewGrip;
            }
        }
        
        public WinTreeItem UIWss_adsagetest163comTreeItem
        {
            get
            {
                if ((this.mUIWss_adsagetest163comTreeItem == null))
                {
                    this.mUIWss_adsagetest163comTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIWss_adsagetest163comTreeItem.SearchProperties.Add(new PropertyExpression(WinTreeItem.PropertyNames.Name, "adsagetest@163.com", PropertyExpressionOperator.Contains));
                    this.mUIWss_adsagetest163comTreeItem.SearchProperties["Value"] = "0";
                    this.mUIWss_adsagetest163comTreeItem.WindowTitles.Add("Account Management Center");
                    #endregion
                }
                return this.mUIWss_adsagetest163comTreeItem;
            }
        }
        
        public WinTreeItem UIAPI_msft_adlabsTreeItem
        {
            get
            {
                if ((this.mUIAPI_msft_adlabsTreeItem == null))
                {
                    this.mUIAPI_msft_adlabsTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIAPI_msft_adlabsTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "API_msft_adlabs";
                    this.mUIAPI_msft_adlabsTreeItem.SearchProperties["Value"] = "0";
                    this.mUIAPI_msft_adlabsTreeItem.WindowTitles.Add("Account Management Center");
                    #endregion
                }
                return this.mUIAPI_msft_adlabsTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUISageTreeViewMenuBar;
        
        private WinTitleBar mUISageTreeViewTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUISageTreeViewMenuBar1;
        
        private WinTree mUISageTreeViewTree;
        
        private WinTreeItem mUIHaiHuangTreeItem;
        
        private WinScrollBar mUIVerticalScrollBar;
        
        private WinScrollBar mUIHorizontalScrollBar;
        
        private WinControl mUISageTreeViewGrip;
        
        private WinTreeItem mUIWss_adsagetest163comTreeItem;
        
        private WinTreeItem mUIAPI_msft_adlabsTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar : WinScrollBar
    {
        
        public UIVerticalScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar : WinScrollBar
    {
        
        public UIHorizontalScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISageToolStrip1Window : WinWindow
    {
        
        public UISageToolStrip1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "sageToolStrip";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UISageToolStripMenuBar
        {
            get
            {
                if ((this.mUISageToolStripMenuBar == null))
                {
                    this.mUISageToolStripMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISageToolStripMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUISageToolStripMenuBar;
            }
        }
        
        public WinTitleBar UISageToolStrip1TitleBar
        {
            get
            {
                if ((this.mUISageToolStrip1TitleBar == null))
                {
                    this.mUISageToolStrip1TitleBar = new WinTitleBar(this);
                }
                return this.mUISageToolStrip1TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UISageToolStripMenuBar1
        {
            get
            {
                if ((this.mUISageToolStripMenuBar1 == null))
                {
                    this.mUISageToolStripMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISageToolStripMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUISageToolStripMenuBar1;
            }
        }
        
        public WinToolBar UISageToolStripToolBar
        {
            get
            {
                if ((this.mUISageToolStripToolBar == null))
                {
                    this.mUISageToolStripToolBar = new WinToolBar(this);
                    #region Search Criteria
                    this.mUISageToolStripToolBar.SearchProperties[WinToolBar.PropertyNames.Name] = "sageToolStrip1";
                    #endregion
                }
                return this.mUISageToolStripToolBar;
            }
        }
        
        public WinScrollBar UISageToolStrip1ScrollBar
        {
            get
            {
                if ((this.mUISageToolStrip1ScrollBar == null))
                {
                    this.mUISageToolStrip1ScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUISageToolStrip1ScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUISageToolStrip1ScrollBar;
            }
        }
        
        public WinScrollBar UISageToolStrip1ScrollBar1
        {
            get
            {
                if ((this.mUISageToolStrip1ScrollBar1 == null))
                {
                    this.mUISageToolStrip1ScrollBar1 = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUISageToolStrip1ScrollBar1.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUISageToolStrip1ScrollBar1;
            }
        }
        
        public WinControl UISageToolStrip1Grip
        {
            get
            {
                if ((this.mUISageToolStrip1Grip == null))
                {
                    this.mUISageToolStrip1Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUISageToolStrip1Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUISageToolStrip1Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUISageToolStripMenuBar;
        
        private WinTitleBar mUISageToolStrip1TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUISageToolStripMenuBar1;
        
        private WinToolBar mUISageToolStripToolBar;
        
        private WinScrollBar mUISageToolStrip1ScrollBar;
        
        private WinScrollBar mUISageToolStrip1ScrollBar1;
        
        private WinControl mUISageToolStrip1Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISageToolStripToolBar : WinToolBar
    {
        
        public UISageToolStripToolBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "sageToolStrip1";
            #endregion
        }
        
        #region Properties
        public WinButton UIDeleteButton
        {
            get
            {
                if ((this.mUIDeleteButton == null))
                {
                    this.mUIDeleteButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIDeleteButton.SearchProperties[WinButton.PropertyNames.Name] = "Delete";
                    #endregion
                }
                return this.mUIDeleteButton;
            }
        }
        
        public WinButton UIEditButton
        {
            get
            {
                if ((this.mUIEditButton == null))
                {
                    this.mUIEditButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIEditButton.SearchProperties[WinButton.PropertyNames.Name] = "Edit";
                    #endregion
                }
                return this.mUIEditButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIDeleteButton;
        
        private WinButton mUIEditButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISageToolStrip1ScrollBar : WinScrollBar
    {
        
        public UISageToolStrip1ScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISageToolStrip1ScrollBar1 : WinScrollBar
    {
        
        public UISageToolStrip1ScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAddAccountWindow : WinWindow
    {
        
        public UIAddAccountWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "sageToolStrip1";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UISageToolStrip1MenuBar
        {
            get
            {
                if ((this.mUISageToolStrip1MenuBar == null))
                {
                    this.mUISageToolStrip1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISageToolStrip1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUISageToolStrip1MenuBar;
            }
        }
        
        public WinTitleBar UIAddAccountTitleBar
        {
            get
            {
                if ((this.mUIAddAccountTitleBar == null))
                {
                    this.mUIAddAccountTitleBar = new WinTitleBar(this);
                }
                return this.mUIAddAccountTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UISageToolStrip1MenuBar1
        {
            get
            {
                if ((this.mUISageToolStrip1MenuBar1 == null))
                {
                    this.mUISageToolStrip1MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISageToolStrip1MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUISageToolStrip1MenuBar1;
            }
        }
        
        public WinToolBar UISageToolStrip1ToolBar
        {
            get
            {
                if ((this.mUISageToolStrip1ToolBar == null))
                {
                    this.mUISageToolStrip1ToolBar = new WinToolBar(this);
                    #region Search Criteria
                    this.mUISageToolStrip1ToolBar.SearchProperties[WinToolBar.PropertyNames.Name] = "Add Account";
                    #endregion
                }
                return this.mUISageToolStrip1ToolBar;
            }
        }
        
        public WinScrollBar UIAddAccountScrollBar
        {
            get
            {
                if ((this.mUIAddAccountScrollBar == null))
                {
                    this.mUIAddAccountScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIAddAccountScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIAddAccountScrollBar;
            }
        }
        
        public WinScrollBar UIAddAccountScrollBar1
        {
            get
            {
                if ((this.mUIAddAccountScrollBar1 == null))
                {
                    this.mUIAddAccountScrollBar1 = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIAddAccountScrollBar1.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIAddAccountScrollBar1;
            }
        }
        
        public WinControl UIAddAccountGrip
        {
            get
            {
                if ((this.mUIAddAccountGrip == null))
                {
                    this.mUIAddAccountGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIAddAccountGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIAddAccountGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUISageToolStrip1MenuBar;
        
        private WinTitleBar mUIAddAccountTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUISageToolStrip1MenuBar1;
        
        private WinToolBar mUISageToolStrip1ToolBar;
        
        private WinScrollBar mUIAddAccountScrollBar;
        
        private WinScrollBar mUIAddAccountScrollBar1;
        
        private WinControl mUIAddAccountGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISageToolStrip1ToolBar : WinToolBar
    {
        
        public UISageToolStrip1ToolBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "Add Account";
            #endregion
        }
        
        #region Properties
        public WinText UIManagedUsersText
        {
            get
            {
                if ((this.mUIManagedUsersText == null))
                {
                    this.mUIManagedUsersText = new WinText(this);
                    #region Search Criteria
                    this.mUIManagedUsersText.SearchProperties[WinText.PropertyNames.Name] = "Managed Users";
                    #endregion
                }
                return this.mUIManagedUsersText;
            }
        }
        
        public WinButton UIAddNewUserButton
        {
            get
            {
                if ((this.mUIAddNewUserButton == null))
                {
                    this.mUIAddNewUserButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIAddNewUserButton.SearchProperties[WinButton.PropertyNames.Name] = "Add New User";
                    #endregion
                }
                return this.mUIAddNewUserButton;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIManagedUsersText;
        
        private WinButton mUIAddNewUserButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAddAccountScrollBar : WinScrollBar
    {
        
        public UIAddAccountScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAddAccountScrollBar1 : WinScrollBar
    {
        
        public UIAddAccountScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar1 : WinScrollBar
    {
        
        public UIVerticalScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar1 : WinScrollBar
    {
        
        public UIHorizontalScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "5";
            #endregion
        }
        
        #region Properties
        public UIItemTitleBar1 UIItemTitleBar
        {
            get
            {
                if ((this.mUIItemTitleBar == null))
                {
                    this.mUIItemTitleBar = new UIItemTitleBar1(this);
                }
                return this.mUIItemTitleBar;
            }
        }
        
        public UISageVerticalSplitConClient1 UISageVerticalSplitConClient
        {
            get
            {
                if ((this.mUISageVerticalSplitConClient == null))
                {
                    this.mUISageVerticalSplitConClient = new UISageVerticalSplitConClient1(this);
                }
                return this.mUISageVerticalSplitConClient;
            }
        }
        
        public WinControl UIItemGrip
        {
            get
            {
                if ((this.mUIItemGrip == null))
                {
                    this.mUIItemGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIItemGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIItemGrip;
            }
        }
        #endregion
        
        #region Fields
        private UIItemTitleBar1 mUIItemTitleBar;
        
        private UISageVerticalSplitConClient1 mUISageVerticalSplitConClient;
        
        private WinControl mUIItemGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemTitleBar1 : WinTitleBar
    {
        
        public UIItemTitleBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISageVerticalSplitConClient1 : WinClient
    {
        
        public UISageVerticalSplitConClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinWindow UIAdvertiserAccountVieWindow
        {
            get
            {
                if ((this.mUIAdvertiserAccountVieWindow == null))
                {
                    this.mUIAdvertiserAccountVieWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIAdvertiserAccountVieWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIAdvertiserAccountVieWindow;
            }
        }
        
        public WinWindow UIPanel1Window
        {
            get
            {
                if ((this.mUIPanel1Window == null))
                {
                    this.mUIPanel1Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUIPanel1Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIPanel1Window.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
                    #endregion
                }
                return this.mUIPanel1Window;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUIAdvertiserAccountVieWindow;
        
        private WinWindow mUIPanel1Window;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAdvertiserAccountVieWindow : WinWindow
    {
        
        public UIAdvertiserAccountVieWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "advertiserAccountViewControl1";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIAdvertiserAccountVieMenuBar
        {
            get
            {
                if ((this.mUIAdvertiserAccountVieMenuBar == null))
                {
                    this.mUIAdvertiserAccountVieMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIAdvertiserAccountVieMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIAdvertiserAccountVieMenuBar;
            }
        }
        
        public WinTitleBar UIAdvertiserAccountVieTitleBar
        {
            get
            {
                if ((this.mUIAdvertiserAccountVieTitleBar == null))
                {
                    this.mUIAdvertiserAccountVieTitleBar = new WinTitleBar(this);
                }
                return this.mUIAdvertiserAccountVieTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIAdvertiserAccountVieMenuBar1
        {
            get
            {
                if ((this.mUIAdvertiserAccountVieMenuBar1 == null))
                {
                    this.mUIAdvertiserAccountVieMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIAdvertiserAccountVieMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIAdvertiserAccountVieMenuBar1;
            }
        }
        
        public WinClient UIAdvertiserAccountVieClient
        {
            get
            {
                if ((this.mUIAdvertiserAccountVieClient == null))
                {
                    this.mUIAdvertiserAccountVieClient = new WinClient(this);
                }
                return this.mUIAdvertiserAccountVieClient;
            }
        }
        
        public WinWindow UIDgvAccountWindow
        {
            get
            {
                if ((this.mUIDgvAccountWindow == null))
                {
                    this.mUIDgvAccountWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIDgvAccountWindow.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "DataGridView";
                    this.mUIDgvAccountWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIDgvAccountWindow;
            }
        }
        
        public WinScrollBar UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIVerticalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public WinScrollBar UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIHorizontalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIAdvertiserAccountVieGrip
        {
            get
            {
                if ((this.mUIAdvertiserAccountVieGrip == null))
                {
                    this.mUIAdvertiserAccountVieGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIAdvertiserAccountVieGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIAdvertiserAccountVieGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIAdvertiserAccountVieMenuBar;
        
        private WinTitleBar mUIAdvertiserAccountVieTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIAdvertiserAccountVieMenuBar1;
        
        private WinClient mUIAdvertiserAccountVieClient;
        
        private WinWindow mUIDgvAccountWindow;
        
        private WinScrollBar mUIVerticalScrollBar;
        
        private WinScrollBar mUIHorizontalScrollBar;
        
        private WinControl mUIAdvertiserAccountVieGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDgvAccountWindow : WinWindow
    {
        
        public UIDgvAccountWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "dgvAccount";
            this.WindowTitles.Add("Account Management Center");
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIDgvAccountMenuBar
        {
            get
            {
                if ((this.mUIDgvAccountMenuBar == null))
                {
                    this.mUIDgvAccountMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIDgvAccountMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIDgvAccountMenuBar;
            }
        }
        
        public WinTitleBar UIDgvAccountTitleBar
        {
            get
            {
                if ((this.mUIDgvAccountTitleBar == null))
                {
                    this.mUIDgvAccountTitleBar = new WinTitleBar(this);
                }
                return this.mUIDgvAccountTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIDgvAccountMenuBar1
        {
            get
            {
                if ((this.mUIDgvAccountMenuBar1 == null))
                {
                    this.mUIDgvAccountMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIDgvAccountMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIDgvAccountMenuBar1;
            }
        }
        
        public UIDataGridViewTable UIDataGridViewTable
        {
            get
            {
                if ((this.mUIDataGridViewTable == null))
                {
                    this.mUIDataGridViewTable = new UIDataGridViewTable(this);
                }
                return this.mUIDataGridViewTable;
            }
        }
        
        public WinScrollBar UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIVerticalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public WinScrollBar UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIHorizontalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIDgvAccountGrip
        {
            get
            {
                if ((this.mUIDgvAccountGrip == null))
                {
                    this.mUIDgvAccountGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIDgvAccountGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIDgvAccountGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIDgvAccountMenuBar;
        
        private WinTitleBar mUIDgvAccountTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIDgvAccountMenuBar1;
        
        private UIDataGridViewTable mUIDataGridViewTable;
        
        private WinScrollBar mUIVerticalScrollBar;
        
        private WinScrollBar mUIHorizontalScrollBar;
        
        private WinControl mUIDgvAccountGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDataGridViewTable : WinTable
    {
        
        public UIDataGridViewTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTable.PropertyNames.Name] = "DataGridView";
            this.WindowTitles.Add("Account Management Center");
            #endregion
        }
        
        #region Properties
        public UITopRowRow UITopRowRow
        {
            get
            {
                if ((this.mUITopRowRow == null))
                {
                    this.mUITopRowRow = new UITopRowRow(this);
                }
                return this.mUITopRowRow;
            }
        }
        
        public WinRow UIRow0Row
        {
            get
            {
                if ((this.mUIRow0Row == null))
                {
                    this.mUIRow0Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow0Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 0";
                    this.mUIRow0Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow0Row;
            }
        }
        
        public UIRow0Row1 UIRow0Row1
        {
            get
            {
                if ((this.mUIRow0Row1 == null))
                {
                    this.mUIRow0Row1 = new UIRow0Row1(this);
                }
                return this.mUIRow0Row1;
            }
        }
        
        public WinRow UIRow1Row
        {
            get
            {
                if ((this.mUIRow1Row == null))
                {
                    this.mUIRow1Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow1Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 1";
                    this.mUIRow1Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow1Row;
            }
        }
        
        public UIRow1Row1 UIRow1Row1
        {
            get
            {
                if ((this.mUIRow1Row1 == null))
                {
                    this.mUIRow1Row1 = new UIRow1Row1(this);
                }
                return this.mUIRow1Row1;
            }
        }
        
        public WinRow UIRow2Row
        {
            get
            {
                if ((this.mUIRow2Row == null))
                {
                    this.mUIRow2Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow2Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 2";
                    this.mUIRow2Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow2Row;
            }
        }
        
        public UIRow2Row1 UIRow2Row1
        {
            get
            {
                if ((this.mUIRow2Row1 == null))
                {
                    this.mUIRow2Row1 = new UIRow2Row1(this);
                }
                return this.mUIRow2Row1;
            }
        }
        
        public WinRow UIRow3Row
        {
            get
            {
                if ((this.mUIRow3Row == null))
                {
                    this.mUIRow3Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow3Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 3";
                    this.mUIRow3Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow3Row;
            }
        }
        
        public UIRow3Row1 UIRow3Row1
        {
            get
            {
                if ((this.mUIRow3Row1 == null))
                {
                    this.mUIRow3Row1 = new UIRow3Row1(this);
                }
                return this.mUIRow3Row1;
            }
        }
        
        public WinRow UIRow4Row
        {
            get
            {
                if ((this.mUIRow4Row == null))
                {
                    this.mUIRow4Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow4Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 4";
                    this.mUIRow4Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow4Row;
            }
        }
        
        public UIRow4Row1 UIRow4Row1
        {
            get
            {
                if ((this.mUIRow4Row1 == null))
                {
                    this.mUIRow4Row1 = new UIRow4Row1(this);
                }
                return this.mUIRow4Row1;
            }
        }
        
        public WinRow UIRow5Row
        {
            get
            {
                if ((this.mUIRow5Row == null))
                {
                    this.mUIRow5Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow5Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 5";
                    this.mUIRow5Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow5Row;
            }
        }
        
        public UIRow5Row1 UIRow5Row1
        {
            get
            {
                if ((this.mUIRow5Row1 == null))
                {
                    this.mUIRow5Row1 = new UIRow5Row1(this);
                }
                return this.mUIRow5Row1;
            }
        }
        
        public WinRow UIRow6Row
        {
            get
            {
                if ((this.mUIRow6Row == null))
                {
                    this.mUIRow6Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow6Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 6";
                    this.mUIRow6Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow6Row;
            }
        }
        
        public UIRow6Row1 UIRow6Row1
        {
            get
            {
                if ((this.mUIRow6Row1 == null))
                {
                    this.mUIRow6Row1 = new UIRow6Row1(this);
                }
                return this.mUIRow6Row1;
            }
        }
        
        public WinRow UIRow7Row
        {
            get
            {
                if ((this.mUIRow7Row == null))
                {
                    this.mUIRow7Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow7Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 7";
                    this.mUIRow7Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow7Row;
            }
        }
        
        public UIRow7Row1 UIRow7Row1
        {
            get
            {
                if ((this.mUIRow7Row1 == null))
                {
                    this.mUIRow7Row1 = new UIRow7Row1(this);
                }
                return this.mUIRow7Row1;
            }
        }
        
        public WinRow UIRow8Row
        {
            get
            {
                if ((this.mUIRow8Row == null))
                {
                    this.mUIRow8Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow8Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 8";
                    this.mUIRow8Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow8Row;
            }
        }
        
        public UIRow8Row1 UIRow8Row1
        {
            get
            {
                if ((this.mUIRow8Row1 == null))
                {
                    this.mUIRow8Row1 = new UIRow8Row1(this);
                }
                return this.mUIRow8Row1;
            }
        }
        
        public WinRow UIRow9Row
        {
            get
            {
                if ((this.mUIRow9Row == null))
                {
                    this.mUIRow9Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow9Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 9";
                    this.mUIRow9Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow9Row;
            }
        }
        
        public UIRow9Row1 UIRow9Row1
        {
            get
            {
                if ((this.mUIRow9Row1 == null))
                {
                    this.mUIRow9Row1 = new UIRow9Row1(this);
                }
                return this.mUIRow9Row1;
            }
        }
        
        public WinRow UIRow10Row
        {
            get
            {
                if ((this.mUIRow10Row == null))
                {
                    this.mUIRow10Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow10Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 10";
                    this.mUIRow10Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow10Row;
            }
        }
        
        public UIRow10Row1 UIRow10Row1
        {
            get
            {
                if ((this.mUIRow10Row1 == null))
                {
                    this.mUIRow10Row1 = new UIRow10Row1(this);
                }
                return this.mUIRow10Row1;
            }
        }
        
        public UIRow1Row2 UIRow1Row2
        {
            get
            {
                if ((this.mUIRow1Row2 == null))
                {
                    this.mUIRow1Row2 = new UIRow1Row2(this);
                }
                return this.mUIRow1Row2;
            }
        }
        
        public UIRow1Row3 UIRow1Row3
        {
            get
            {
                if ((this.mUIRow1Row3 == null))
                {
                    this.mUIRow1Row3 = new UIRow1Row3(this);
                }
                return this.mUIRow1Row3;
            }
        }
        
        public UIRow2Row2 UIRow2Row2
        {
            get
            {
                if ((this.mUIRow2Row2 == null))
                {
                    this.mUIRow2Row2 = new UIRow2Row2(this);
                }
                return this.mUIRow2Row2;
            }
        }
        
        public UIRow1Row4 UIRow1Row4
        {
            get
            {
                if ((this.mUIRow1Row4 == null))
                {
                    this.mUIRow1Row4 = new UIRow1Row4(this);
                }
                return this.mUIRow1Row4;
            }
        }
        
        public UIRow1Row5 UIRow1Row5
        {
            get
            {
                if ((this.mUIRow1Row5 == null))
                {
                    this.mUIRow1Row5 = new UIRow1Row5(this);
                }
                return this.mUIRow1Row5;
            }
        }
        
        public UIRow1Row6 UIRow1Row6
        {
            get
            {
                if ((this.mUIRow1Row6 == null))
                {
                    this.mUIRow1Row6 = new UIRow1Row6(this);
                }
                return this.mUIRow1Row6;
            }
        }
        
        public UIRow7Row2 UIRow7Row2
        {
            get
            {
                if ((this.mUIRow7Row2 == null))
                {
                    this.mUIRow7Row2 = new UIRow7Row2(this);
                }
                return this.mUIRow7Row2;
            }
        }
        #endregion
        
        #region Fields
        private UITopRowRow mUITopRowRow;
        
        private WinRow mUIRow0Row;
        
        private UIRow0Row1 mUIRow0Row1;
        
        private WinRow mUIRow1Row;
        
        private UIRow1Row1 mUIRow1Row1;
        
        private WinRow mUIRow2Row;
        
        private UIRow2Row1 mUIRow2Row1;
        
        private WinRow mUIRow3Row;
        
        private UIRow3Row1 mUIRow3Row1;
        
        private WinRow mUIRow4Row;
        
        private UIRow4Row1 mUIRow4Row1;
        
        private WinRow mUIRow5Row;
        
        private UIRow5Row1 mUIRow5Row1;
        
        private WinRow mUIRow6Row;
        
        private UIRow6Row1 mUIRow6Row1;
        
        private WinRow mUIRow7Row;
        
        private UIRow7Row1 mUIRow7Row1;
        
        private WinRow mUIRow8Row;
        
        private UIRow8Row1 mUIRow8Row1;
        
        private WinRow mUIRow9Row;
        
        private UIRow9Row1 mUIRow9Row1;
        
        private WinRow mUIRow10Row;
        
        private UIRow10Row1 mUIRow10Row1;
        
        private UIRow1Row2 mUIRow1Row2;
        
        private UIRow1Row3 mUIRow1Row3;
        
        private UIRow2Row2 mUIRow2Row2;
        
        private UIRow1Row4 mUIRow1Row4;
        
        private UIRow1Row5 mUIRow1Row5;
        
        private UIRow1Row6 mUIRow1Row6;
        
        private UIRow7Row2 mUIRow7Row2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UITopRowRow : WinRow
    {
        
        public UITopRowRow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Name] = "Top Row";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinColumnHeader UIAccountColumnHeader
        {
            get
            {
                if ((this.mUIAccountColumnHeader == null))
                {
                    this.mUIAccountColumnHeader = new WinColumnHeader(this);
                    #region Search Criteria
                    this.mUIAccountColumnHeader.SearchProperties[WinControl.PropertyNames.Name] = "Account";
                    #endregion
                }
                return this.mUIAccountColumnHeader;
            }
        }
        
        public WinColumnHeader UIEngineColumnHeader
        {
            get
            {
                if ((this.mUIEngineColumnHeader == null))
                {
                    this.mUIEngineColumnHeader = new WinColumnHeader(this);
                    #region Search Criteria
                    this.mUIEngineColumnHeader.SearchProperties[WinControl.PropertyNames.Name] = "Engine";
                    #endregion
                }
                return this.mUIEngineColumnHeader;
            }
        }
        
        public WinColumnHeader UIItemColumnHeader
        {
            get
            {
                if ((this.mUIItemColumnHeader == null))
                {
                    this.mUIItemColumnHeader = new WinColumnHeader(this);
                    #region Search Criteria
                    this.mUIItemColumnHeader.SearchProperties[WinControl.PropertyNames.Instance] = "3";
                    #endregion
                }
                return this.mUIItemColumnHeader;
            }
        }
        #endregion
        
        #region Fields
        private WinColumnHeader mUIAccountColumnHeader;
        
        private WinColumnHeader mUIEngineColumnHeader;
        
        private WinColumnHeader mUIItemColumnHeader;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow0Row1 : WinRow
    {
        
        public UIRow0Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(null);(null);(null)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UINullCell
        {
            get
            {
                if ((this.mUINullCell == null))
                {
                    this.mUINullCell = new WinCell(this);
                    #region Search Criteria
                    this.mUINullCell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    #endregion
                }
                return this.mUINullCell;
            }
        }
        
        public WinCell UINullCell1
        {
            get
            {
                if ((this.mUINullCell1 == null))
                {
                    this.mUINullCell1 = new WinCell(this);
                    #region Search Criteria
                    this.mUINullCell1.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mUINullCell1.SearchProperties[WinCell.PropertyNames.Instance] = "2";
                    #endregion
                }
                return this.mUINullCell1;
            }
        }
        
        public WinCell UINullCell2
        {
            get
            {
                if ((this.mUINullCell2 == null))
                {
                    this.mUINullCell2 = new WinCell(this);
                    #region Search Criteria
                    this.mUINullCell2.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mUINullCell2.SearchProperties[WinCell.PropertyNames.Instance] = "3";
                    #endregion
                }
                return this.mUINullCell2;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUINullCell;
        
        private WinCell mUINullCell1;
        
        private WinCell mUINullCell2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow1Row1 : WinRow
    {
        
        public UIRow1Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "haih@ad-sage.com #347331496(TRY);Facebook;Activate";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIHaihadsagecom3473314Cell
        {
            get
            {
                if ((this.mUIHaihadsagecom3473314Cell == null))
                {
                    this.mUIHaihadsagecom3473314Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIHaihadsagecom3473314Cell.SearchProperties[WinCell.PropertyNames.Value] = "haih@ad-sage.com #347331496(TRY)";
                    #endregion
                }
                return this.mUIHaihadsagecom3473314Cell;
            }
        }
        
        public WinCell UIFacebookCell
        {
            get
            {
                if ((this.mUIFacebookCell == null))
                {
                    this.mUIFacebookCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFacebookCell.SearchProperties[WinCell.PropertyNames.Value] = "Facebook";
                    #endregion
                }
                return this.mUIFacebookCell;
            }
        }
        
        public WinCell UIActivateCell
        {
            get
            {
                if ((this.mUIActivateCell == null))
                {
                    this.mUIActivateCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIActivateCell.SearchProperties[WinCell.PropertyNames.Value] = "Activate";
                    #endregion
                }
                return this.mUIActivateCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIHaihadsagecom3473314Cell;
        
        private WinCell mUIFacebookCell;
        
        private WinCell mUIActivateCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow2Row1 : WinRow
    {
        
        public UIRow2Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinRow.PropertyNames.Value, "#46848300(USD);Facebook;&Activate", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIHaihadsagecom4684830Cell
        {
            get
            {
                if ((this.mUIHaihadsagecom4684830Cell == null))
                {
                    this.mUIHaihadsagecom4684830Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIHaihadsagecom4684830Cell.SearchProperties[WinCell.PropertyNames.Value] = "haih@ad-sage.com #46848300(USD)";
                    #endregion
                }
                return this.mUIHaihadsagecom4684830Cell;
            }
        }
        
        public WinCell UIFacebookCell
        {
            get
            {
                if ((this.mUIFacebookCell == null))
                {
                    this.mUIFacebookCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFacebookCell.SearchProperties[WinCell.PropertyNames.Value] = "Facebook";
                    #endregion
                }
                return this.mUIFacebookCell;
            }
        }
        
        public WinCell UIActivateCell
        {
            get
            {
                if ((this.mUIActivateCell == null))
                {
                    this.mUIActivateCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIActivateCell.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Value, "Activate", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIActivateCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIHaihadsagecom4684830Cell;
        
        private WinCell mUIFacebookCell;
        
        private WinCell mUIActivateCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow3Row1 : WinRow
    {
        
        public UIRow3Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "haih@ad-sage.com #347331673(HKD);Facebook;Activate";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIHaihadsagecom3473316Cell
        {
            get
            {
                if ((this.mUIHaihadsagecom3473316Cell == null))
                {
                    this.mUIHaihadsagecom3473316Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIHaihadsagecom3473316Cell.SearchProperties[WinCell.PropertyNames.Value] = "haih@ad-sage.com #347331673(HKD)";
                    #endregion
                }
                return this.mUIHaihadsagecom3473316Cell;
            }
        }
        
        public WinCell UIFacebookCell
        {
            get
            {
                if ((this.mUIFacebookCell == null))
                {
                    this.mUIFacebookCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFacebookCell.SearchProperties[WinCell.PropertyNames.Value] = "Facebook";
                    #endregion
                }
                return this.mUIFacebookCell;
            }
        }
        
        public WinCell UIActivateCell
        {
            get
            {
                if ((this.mUIActivateCell == null))
                {
                    this.mUIActivateCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIActivateCell.SearchProperties[WinCell.PropertyNames.Value] = "Activate";
                    #endregion
                }
                return this.mUIActivateCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIHaihadsagecom3473316Cell;
        
        private WinCell mUIFacebookCell;
        
        private WinCell mUIActivateCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow4Row1 : WinRow
    {
        
        public UIRow4Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "haih@ad-sage.com #347331589(VEF);Facebook;Activate";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIHaihadsagecom3473315Cell
        {
            get
            {
                if ((this.mUIHaihadsagecom3473315Cell == null))
                {
                    this.mUIHaihadsagecom3473315Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIHaihadsagecom3473315Cell.SearchProperties[WinCell.PropertyNames.Value] = "haih@ad-sage.com #347331589(VEF)";
                    #endregion
                }
                return this.mUIHaihadsagecom3473315Cell;
            }
        }
        
        public WinCell UIFacebookCell
        {
            get
            {
                if ((this.mUIFacebookCell == null))
                {
                    this.mUIFacebookCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFacebookCell.SearchProperties[WinCell.PropertyNames.Value] = "Facebook";
                    #endregion
                }
                return this.mUIFacebookCell;
            }
        }
        
        public WinCell UIActivateCell
        {
            get
            {
                if ((this.mUIActivateCell == null))
                {
                    this.mUIActivateCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIActivateCell.SearchProperties[WinCell.PropertyNames.Value] = "Activate";
                    #endregion
                }
                return this.mUIActivateCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIHaihadsagecom3473315Cell;
        
        private WinCell mUIFacebookCell;
        
        private WinCell mUIActivateCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow5Row1 : WinRow
    {
        
        public UIRow5Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "haih@ad-sage.com #347330674(AUD);Facebook;Activate";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIHaihadsagecom3473306Cell
        {
            get
            {
                if ((this.mUIHaihadsagecom3473306Cell == null))
                {
                    this.mUIHaihadsagecom3473306Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIHaihadsagecom3473306Cell.SearchProperties[WinCell.PropertyNames.Value] = "haih@ad-sage.com #347330674(AUD)";
                    #endregion
                }
                return this.mUIHaihadsagecom3473306Cell;
            }
        }
        
        public WinCell UIFacebookCell
        {
            get
            {
                if ((this.mUIFacebookCell == null))
                {
                    this.mUIFacebookCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFacebookCell.SearchProperties[WinCell.PropertyNames.Value] = "Facebook";
                    #endregion
                }
                return this.mUIFacebookCell;
            }
        }
        
        public WinCell UIActivateCell
        {
            get
            {
                if ((this.mUIActivateCell == null))
                {
                    this.mUIActivateCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIActivateCell.SearchProperties[WinCell.PropertyNames.Value] = "Activate";
                    #endregion
                }
                return this.mUIActivateCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIHaihadsagecom3473306Cell;
        
        private WinCell mUIFacebookCell;
        
        private WinCell mUIActivateCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow6Row1 : WinRow
    {
        
        public UIRow6Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "haih@ad-sage.com #109159935839551(DKK);Facebook;Activate";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIHaihadsagecom1091599Cell
        {
            get
            {
                if ((this.mUIHaihadsagecom1091599Cell == null))
                {
                    this.mUIHaihadsagecom1091599Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIHaihadsagecom1091599Cell.SearchProperties[WinCell.PropertyNames.Value] = "haih@ad-sage.com #109159935839551(DKK)";
                    #endregion
                }
                return this.mUIHaihadsagecom1091599Cell;
            }
        }
        
        public WinCell UIFacebookCell
        {
            get
            {
                if ((this.mUIFacebookCell == null))
                {
                    this.mUIFacebookCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFacebookCell.SearchProperties[WinCell.PropertyNames.Value] = "Facebook";
                    #endregion
                }
                return this.mUIFacebookCell;
            }
        }
        
        public WinCell UIActivateCell
        {
            get
            {
                if ((this.mUIActivateCell == null))
                {
                    this.mUIActivateCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIActivateCell.SearchProperties[WinCell.PropertyNames.Value] = "Activate";
                    #endregion
                }
                return this.mUIActivateCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIHaihadsagecom1091599Cell;
        
        private WinCell mUIFacebookCell;
        
        private WinCell mUIActivateCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow7Row1 : WinRow
    {
        
        public UIRow7Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "haih@ad-sage.com #348004880(USD);Facebook;Activate";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIHaihadsagecom3480048Cell
        {
            get
            {
                if ((this.mUIHaihadsagecom3480048Cell == null))
                {
                    this.mUIHaihadsagecom3480048Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIHaihadsagecom3480048Cell.SearchProperties[WinCell.PropertyNames.Value] = "haih@ad-sage.com #348004880(USD)";
                    #endregion
                }
                return this.mUIHaihadsagecom3480048Cell;
            }
        }
        
        public WinCell UIFacebookCell
        {
            get
            {
                if ((this.mUIFacebookCell == null))
                {
                    this.mUIFacebookCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFacebookCell.SearchProperties[WinCell.PropertyNames.Value] = "Facebook";
                    #endregion
                }
                return this.mUIFacebookCell;
            }
        }
        
        public WinCell UIActivateCell
        {
            get
            {
                if ((this.mUIActivateCell == null))
                {
                    this.mUIActivateCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIActivateCell.SearchProperties[WinCell.PropertyNames.Value] = "Activate";
                    #endregion
                }
                return this.mUIActivateCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIHaihadsagecom3480048Cell;
        
        private WinCell mUIFacebookCell;
        
        private WinCell mUIActivateCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow8Row1 : WinRow
    {
        
        public UIRow8Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "haih@ad-sage.com #346020419(USD);Facebook;Activate";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIHaihadsagecom3460204Cell
        {
            get
            {
                if ((this.mUIHaihadsagecom3460204Cell == null))
                {
                    this.mUIHaihadsagecom3460204Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIHaihadsagecom3460204Cell.SearchProperties[WinCell.PropertyNames.Value] = "haih@ad-sage.com #346020419(USD)";
                    #endregion
                }
                return this.mUIHaihadsagecom3460204Cell;
            }
        }
        
        public WinCell UIFacebookCell
        {
            get
            {
                if ((this.mUIFacebookCell == null))
                {
                    this.mUIFacebookCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFacebookCell.SearchProperties[WinCell.PropertyNames.Value] = "Facebook";
                    #endregion
                }
                return this.mUIFacebookCell;
            }
        }
        
        public WinCell UIActivateCell
        {
            get
            {
                if ((this.mUIActivateCell == null))
                {
                    this.mUIActivateCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIActivateCell.SearchProperties[WinCell.PropertyNames.Value] = "Activate";
                    #endregion
                }
                return this.mUIActivateCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIHaihadsagecom3460204Cell;
        
        private WinCell mUIFacebookCell;
        
        private WinCell mUIActivateCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow9Row1 : WinRow
    {
        
        public UIRow9Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "haih@ad-sage.com #340924653(USD);Facebook;Activate";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIHaihadsagecom3409246Cell
        {
            get
            {
                if ((this.mUIHaihadsagecom3409246Cell == null))
                {
                    this.mUIHaihadsagecom3409246Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIHaihadsagecom3409246Cell.SearchProperties[WinCell.PropertyNames.Value] = "haih@ad-sage.com #340924653(USD)";
                    #endregion
                }
                return this.mUIHaihadsagecom3409246Cell;
            }
        }
        
        public WinCell UIFacebookCell
        {
            get
            {
                if ((this.mUIFacebookCell == null))
                {
                    this.mUIFacebookCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFacebookCell.SearchProperties[WinCell.PropertyNames.Value] = "Facebook";
                    #endregion
                }
                return this.mUIFacebookCell;
            }
        }
        
        public WinCell UIActivateCell
        {
            get
            {
                if ((this.mUIActivateCell == null))
                {
                    this.mUIActivateCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIActivateCell.SearchProperties[WinCell.PropertyNames.Value] = "Activate";
                    #endregion
                }
                return this.mUIActivateCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIHaihadsagecom3409246Cell;
        
        private WinCell mUIFacebookCell;
        
        private WinCell mUIActivateCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow10Row1 : WinRow
    {
        
        public UIRow10Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "haih@ad-sage.com #21442041(USD);Facebook;Activate";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIHaihadsagecom2144204Cell
        {
            get
            {
                if ((this.mUIHaihadsagecom2144204Cell == null))
                {
                    this.mUIHaihadsagecom2144204Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIHaihadsagecom2144204Cell.SearchProperties[WinCell.PropertyNames.Value] = "haih@ad-sage.com #21442041(USD)";
                    #endregion
                }
                return this.mUIHaihadsagecom2144204Cell;
            }
        }
        
        public WinCell UIFacebookCell
        {
            get
            {
                if ((this.mUIFacebookCell == null))
                {
                    this.mUIFacebookCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFacebookCell.SearchProperties[WinCell.PropertyNames.Value] = "Facebook";
                    #endregion
                }
                return this.mUIFacebookCell;
            }
        }
        
        public WinCell UIActivateCell
        {
            get
            {
                if ((this.mUIActivateCell == null))
                {
                    this.mUIActivateCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIActivateCell.SearchProperties[WinCell.PropertyNames.Value] = "Activate";
                    #endregion
                }
                return this.mUIActivateCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIHaihadsagecom2144204Cell;
        
        private WinCell mUIFacebookCell;
        
        private WinCell mUIActivateCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow1Row2 : WinRow
    {
        
        public UIRow1Row2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "wss_adsagetest@163.com(CNY);Google;&Activate";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Account Management Center");
            #endregion
        }
        
        #region Properties
        public WinCell UIActivateCell
        {
            get
            {
                if ((this.mUIActivateCell == null))
                {
                    this.mUIActivateCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIActivateCell.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Value, "Activate", PropertyExpressionOperator.Contains));
                    this.mUIActivateCell.WindowTitles.Add("Account Management Center");
                    #endregion
                }
                return this.mUIActivateCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIActivateCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow1Row3 : WinRow
    {
        
        public UIRow1Row3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "Microsoft adlabs(USD);AdCenter;&Activate";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Account Management Center");
            #endregion
        }
        
        #region Properties
        public WinCell UIActivateCell
        {
            get
            {
                if ((this.mUIActivateCell == null))
                {
                    this.mUIActivateCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIActivateCell.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Value, "Activate", PropertyExpressionOperator.Contains));
                    this.mUIActivateCell.WindowTitles.Add("Account Management Center");
                    #endregion
                }
                return this.mUIActivateCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIActivateCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow2Row2 : WinRow
    {
        
        public UIRow2Row2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "haih@ad-sage.com #46848300(USD);Facebook;&Activate";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Account Management Center");
            #endregion
        }
        
        #region Properties
        public WinCell UIActivateCell
        {
            get
            {
                if ((this.mUIActivateCell == null))
                {
                    this.mUIActivateCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIActivateCell.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Value, "Activate", PropertyExpressionOperator.Contains));
                    this.mUIActivateCell.WindowTitles.Add("Account Management Center");
                    #endregion
                }
                return this.mUIActivateCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIActivateCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow1Row4 : WinRow
    {
        
        public UIRow1Row4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "wss_adsagetest@163.com(CNY);Google;&Deactivate";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Account Management Center");
            #endregion
        }
        
        #region Properties
        public WinCell UIDeactivateCell
        {
            get
            {
                if ((this.mUIDeactivateCell == null))
                {
                    this.mUIDeactivateCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIDeactivateCell.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Value, "Deactivate", PropertyExpressionOperator.Contains));
                    this.mUIDeactivateCell.WindowTitles.Add("Account Management Center");
                    #endregion
                }
                return this.mUIDeactivateCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIDeactivateCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow1Row5 : WinRow
    {
        
        public UIRow1Row5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "Microsoft adlabs(USD);AdCenter;&Deactivate";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Account Management Center");
            #endregion
        }
        
        #region Properties
        public WinCell UIDeactivateCell
        {
            get
            {
                if ((this.mUIDeactivateCell == null))
                {
                    this.mUIDeactivateCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIDeactivateCell.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Value, "Deactivate", PropertyExpressionOperator.Contains));
                    this.mUIDeactivateCell.WindowTitles.Add("Account Management Center");
                    #endregion
                }
                return this.mUIDeactivateCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIDeactivateCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow1Row6 : WinRow
    {
        
        public UIRow1Row6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "haih@ad-sage.com #46848300(USD);Facebook;&Deactivate";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Account Management Center");
            #endregion
        }
        
        #region Properties
        public WinCell UIDeactivateCell
        {
            get
            {
                if ((this.mUIDeactivateCell == null))
                {
                    this.mUIDeactivateCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIDeactivateCell.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Value, "Deactivate", PropertyExpressionOperator.Contains));
                    this.mUIDeactivateCell.WindowTitles.Add("Account Management Center");
                    #endregion
                }
                return this.mUIDeactivateCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIDeactivateCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow7Row2 : WinRow
    {
        
        public UIRow7Row2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "Account2 #348004880(USD);Facebook;&Activate";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Account Management Center");
            #endregion
        }
        
        #region Properties
        public WinCell UIActivateCell
        {
            get
            {
                if ((this.mUIActivateCell == null))
                {
                    this.mUIActivateCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIActivateCell.SearchProperties.Add(new PropertyExpression(WinCell.PropertyNames.Value, "Activate", PropertyExpressionOperator.Contains));
                    this.mUIActivateCell.WindowTitles.Add("Account Management Center");
                    #endregion
                }
                return this.mUIActivateCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIActivateCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar2 : WinScrollBar
    {
        
        public UIVerticalScrollBar2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar2 : WinScrollBar
    {
        
        public UIHorizontalScrollBar2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar3 : WinScrollBar
    {
        
        public UIVerticalScrollBar3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar3 : WinScrollBar
    {
        
        public UIHorizontalScrollBar3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPanel1Window : WinWindow
    {
        
        public UIPanel1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "panel1";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIPanel1MenuBar
        {
            get
            {
                if ((this.mUIPanel1MenuBar == null))
                {
                    this.mUIPanel1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanel1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIPanel1MenuBar;
            }
        }
        
        public WinTitleBar UIPanel1TitleBar
        {
            get
            {
                if ((this.mUIPanel1TitleBar == null))
                {
                    this.mUIPanel1TitleBar = new WinTitleBar(this);
                }
                return this.mUIPanel1TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIPanel1MenuBar1
        {
            get
            {
                if ((this.mUIPanel1MenuBar1 == null))
                {
                    this.mUIPanel1MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanel1MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIPanel1MenuBar1;
            }
        }
        
        public WinClient UIPanel1Client
        {
            get
            {
                if ((this.mUIPanel1Client == null))
                {
                    this.mUIPanel1Client = new WinClient(this);
                }
                return this.mUIPanel1Client;
            }
        }
        
        public WinWindow UICloseWindow
        {
            get
            {
                if ((this.mUICloseWindow == null))
                {
                    this.mUICloseWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUICloseWindow.SearchProperties[WinWindow.PropertyNames.Name] = "Close";
                    this.mUICloseWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.BUTTON", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUICloseWindow;
            }
        }
        
        public WinWindow UILabel1Window
        {
            get
            {
                if ((this.mUILabel1Window == null))
                {
                    this.mUILabel1Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUILabel1Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUILabel1Window;
            }
        }
        
        public WinScrollBar UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIVerticalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public WinScrollBar UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIHorizontalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIPanel1Grip
        {
            get
            {
                if ((this.mUIPanel1Grip == null))
                {
                    this.mUIPanel1Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUIPanel1Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIPanel1Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIPanel1MenuBar;
        
        private WinTitleBar mUIPanel1TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIPanel1MenuBar1;
        
        private WinClient mUIPanel1Client;
        
        private WinWindow mUICloseWindow;
        
        private WinWindow mUILabel1Window;
        
        private WinScrollBar mUIVerticalScrollBar;
        
        private WinScrollBar mUIHorizontalScrollBar;
        
        private WinControl mUIPanel1Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UICloseWindow : WinWindow
    {
        
        public UICloseWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "sageButtonCancel";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UISageButtonCancelMenuBar
        {
            get
            {
                if ((this.mUISageButtonCancelMenuBar == null))
                {
                    this.mUISageButtonCancelMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISageButtonCancelMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUISageButtonCancelMenuBar;
            }
        }
        
        public WinTitleBar UICloseTitleBar
        {
            get
            {
                if ((this.mUICloseTitleBar == null))
                {
                    this.mUICloseTitleBar = new WinTitleBar(this);
                }
                return this.mUICloseTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UISageButtonCancelMenuBar1
        {
            get
            {
                if ((this.mUISageButtonCancelMenuBar1 == null))
                {
                    this.mUISageButtonCancelMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISageButtonCancelMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUISageButtonCancelMenuBar1;
            }
        }
        
        public WinButton UICloseButton1
        {
            get
            {
                if ((this.mUICloseButton1 == null))
                {
                    this.mUICloseButton1 = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton1.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton1;
            }
        }
        
        public WinScrollBar UICloseScrollBar
        {
            get
            {
                if ((this.mUICloseScrollBar == null))
                {
                    this.mUICloseScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUICloseScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUICloseScrollBar;
            }
        }
        
        public WinScrollBar UICloseScrollBar1
        {
            get
            {
                if ((this.mUICloseScrollBar1 == null))
                {
                    this.mUICloseScrollBar1 = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUICloseScrollBar1.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUICloseScrollBar1;
            }
        }
        
        public WinControl UICloseGrip
        {
            get
            {
                if ((this.mUICloseGrip == null))
                {
                    this.mUICloseGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUICloseGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUICloseGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUISageButtonCancelMenuBar;
        
        private WinTitleBar mUICloseTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUISageButtonCancelMenuBar1;
        
        private WinButton mUICloseButton1;
        
        private WinScrollBar mUICloseScrollBar;
        
        private WinScrollBar mUICloseScrollBar1;
        
        private WinControl mUICloseGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UICloseScrollBar : WinScrollBar
    {
        
        public UICloseScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UICloseScrollBar1 : WinScrollBar
    {
        
        public UICloseScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UILabel1Window : WinWindow
    {
        
        public UILabel1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "label1";
            this.WindowTitles.Add("Account Management Center");
            #endregion
        }
        
        #region Properties
        public WinMenuBar UILabel1MenuBar
        {
            get
            {
                if ((this.mUILabel1MenuBar == null))
                {
                    this.mUILabel1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabel1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUILabel1MenuBar;
            }
        }
        
        public WinTitleBar UILabel1TitleBar
        {
            get
            {
                if ((this.mUILabel1TitleBar == null))
                {
                    this.mUILabel1TitleBar = new WinTitleBar(this);
                }
                return this.mUILabel1TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UILabel1MenuBar1
        {
            get
            {
                if ((this.mUILabel1MenuBar1 == null))
                {
                    this.mUILabel1MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabel1MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUILabel1MenuBar1;
            }
        }
        
        public WinText UILabel1Text
        {
            get
            {
                if ((this.mUILabel1Text == null))
                {
                    this.mUILabel1Text = new WinText(this);
                }
                return this.mUILabel1Text;
            }
        }
        
        public WinScrollBar UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIVerticalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public WinScrollBar UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIHorizontalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UILabel1Grip
        {
            get
            {
                if ((this.mUILabel1Grip == null))
                {
                    this.mUILabel1Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUILabel1Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUILabel1Grip;
            }
        }
        
        public WinText UISynchronizeaccountsfText
        {
            get
            {
                if ((this.mUISynchronizeaccountsfText == null))
                {
                    this.mUISynchronizeaccountsfText = new WinText(this);
                    #region Search Criteria
                    this.mUISynchronizeaccountsfText.SearchProperties[WinText.PropertyNames.Name] = "Synchronize accounts from wss_adsagetest@163.com ...";
                    this.mUISynchronizeaccountsfText.WindowTitles.Add("Account Management Center");
                    #endregion
                }
                return this.mUISynchronizeaccountsfText;
            }
        }
        
        public WinText UISynchronizeaccountsfText1
        {
            get
            {
                if ((this.mUISynchronizeaccountsfText1 == null))
                {
                    this.mUISynchronizeaccountsfText1 = new WinText(this);
                    #region Search Criteria
                    this.mUISynchronizeaccountsfText1.SearchProperties[WinText.PropertyNames.Name] = "Synchronize accounts from API_msft_adlabs ...";
                    this.mUISynchronizeaccountsfText1.WindowTitles.Add("Account Management Center");
                    #endregion
                }
                return this.mUISynchronizeaccountsfText1;
            }
        }
        
        public WinText UISynchronizeaccountsfText2
        {
            get
            {
                if ((this.mUISynchronizeaccountsfText2 == null))
                {
                    this.mUISynchronizeaccountsfText2 = new WinText(this);
                    #region Search Criteria
                    this.mUISynchronizeaccountsfText2.SearchProperties[WinText.PropertyNames.Name] = "Synchronize accounts from Hai Huang ...";
                    this.mUISynchronizeaccountsfText2.WindowTitles.Add("Account Management Center");
                    #endregion
                }
                return this.mUISynchronizeaccountsfText2;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUILabel1MenuBar;
        
        private WinTitleBar mUILabel1TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUILabel1MenuBar1;
        
        private WinText mUILabel1Text;
        
        private WinScrollBar mUIVerticalScrollBar;
        
        private WinScrollBar mUIHorizontalScrollBar;
        
        private WinControl mUILabel1Grip;
        
        private WinText mUISynchronizeaccountsfText;
        
        private WinText mUISynchronizeaccountsfText1;
        
        private WinText mUISynchronizeaccountsfText2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar4 : WinScrollBar
    {
        
        public UIVerticalScrollBar4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar4 : WinScrollBar
    {
        
        public UIHorizontalScrollBar4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar5 : WinScrollBar
    {
        
        public UIVerticalScrollBar5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar5 : WinScrollBar
    {
        
        public UIHorizontalScrollBar5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar6 : WinScrollBar
    {
        
        public UIVerticalScrollBar6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar6 : WinScrollBar
    {
        
        public UIHorizontalScrollBar6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar7 : WinScrollBar
    {
        
        public UIVerticalScrollBar7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar7 : WinScrollBar
    {
        
        public UIHorizontalScrollBar7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAccountManagementCenScrollBar : WinScrollBar
    {
        
        public UIAccountManagementCenScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAccountManagementCenScrollBar1 : WinScrollBar
    {
        
        public UIAccountManagementCenScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
}
