// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Common.UITestFramework.UIMaps.QuestionWindowClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public partial class QuestionWindow
    {
        
        /// <summary>
        /// ClickNoButton
        /// </summary>
        public void ClickNoButton()
        {
            #region Variable Declarations
            WinButton uINOButton = this.UIQuestionWindow.UINOWindow.UINOButton;
            #endregion

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(43, 8));
        }
        
        /// <summary>
        /// ClickYesButton
        /// </summary>
        public void ClickYesButton()
        {
            #region Variable Declarations
            WinButton uIYesButton = this.UIQuestionWindow.UIYesWindow.UIYesButton;
            #endregion

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(54, 14));
        }
        
        /// <summary>
        /// ClickDeactivateButton
        /// </summary>
        public void ClickDeactivateButton()
        {
            #region Variable Declarations
            WinButton uIDeactiveButton = this.UIQuestionWindow.UIDeactiveWindow.UIDeactiveButton;
            #endregion

            // Click '&Deactive' button
            Mouse.Click(uIDeactiveButton, new Point(49, 9));
        }
        
        #region Properties
        public UIQuestionWindow UIQuestionWindow
        {
            get
            {
                if ((this.mUIQuestionWindow == null))
                {
                    this.mUIQuestionWindow = new UIQuestionWindow();
                }
                return this.mUIQuestionWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIQuestionWindow mUIQuestionWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIQuestionWindow : WinWindow
    {
        
        public UIQuestionWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Question";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Question");
            #endregion
        }
        
        #region Properties
        public UINOWindow UINOWindow
        {
            get
            {
                if ((this.mUINOWindow == null))
                {
                    this.mUINOWindow = new UINOWindow(this);
                }
                return this.mUINOWindow;
            }
        }
        
        public WinTitleBar UIQuestionTitleBar
        {
            get
            {
                if ((this.mUIQuestionTitleBar == null))
                {
                    this.mUIQuestionTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUIQuestionTitleBar.WindowTitles.Add("Question");
                    #endregion
                }
                return this.mUIQuestionTitleBar;
            }
        }
        
        public UIWouldyouliketodownloWindow UIWouldyouliketodownloWindow
        {
            get
            {
                if ((this.mUIWouldyouliketodownloWindow == null))
                {
                    this.mUIWouldyouliketodownloWindow = new UIWouldyouliketodownloWindow(this);
                }
                return this.mUIWouldyouliketodownloWindow;
            }
        }
        
        public UIYesWindow UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow(this);
                }
                return this.mUIYesWindow;
            }
        }
        
        public UIDeactiveDeleteWindow UIDeactiveDeleteWindow
        {
            get
            {
                if ((this.mUIDeactiveDeleteWindow == null))
                {
                    this.mUIDeactiveDeleteWindow = new UIDeactiveDeleteWindow(this);
                }
                return this.mUIDeactiveDeleteWindow;
            }
        }
        
        public UIDeactiveWindow UIDeactiveWindow
        {
            get
            {
                if ((this.mUIDeactiveWindow == null))
                {
                    this.mUIDeactiveWindow = new UIDeactiveWindow(this);
                }
                return this.mUIDeactiveWindow;
            }
        }
        
        public UICancelWindow UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow(this);
                }
                return this.mUICancelWindow;
            }
        }
        #endregion
        
        #region Fields
        private UINOWindow mUINOWindow;
        
        private WinTitleBar mUIQuestionTitleBar;
        
        private UIWouldyouliketodownloWindow mUIWouldyouliketodownloWindow;
        
        private UIYesWindow mUIYesWindow;
        
        private UIDeactiveDeleteWindow mUIDeactiveDeleteWindow;
        
        private UIDeactiveWindow mUIDeactiveWindow;
        
        private UICancelWindow mUICancelWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UINOWindow : WinWindow
    {
        
        public UINOWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button2";
            this.WindowTitles.Add("Question");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("Question");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIWouldyouliketodownloWindow : WinWindow
    {
        
        public UIWouldyouliketodownloWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "lblText";
            this.WindowTitles.Add("Question");
            #endregion
        }
        
        #region Properties
        public WinText UIWouldyouliketodownloText
        {
            get
            {
                if ((this.mUIWouldyouliketodownloText == null))
                {
                    this.mUIWouldyouliketodownloText = new WinText(this);
                    #region Search Criteria
                    this.mUIWouldyouliketodownloText.SearchProperties[WinText.PropertyNames.Name] = "Would you like to download the accounts that have just been activated?";
                    this.mUIWouldyouliketodownloText.WindowTitles.Add("Question");
                    #endregion
                }
                return this.mUIWouldyouliketodownloText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIWouldyouliketodownloText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIYesWindow : WinWindow
    {
        
        public UIYesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button1";
            this.WindowTitles.Add("Question");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Question");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDeactiveDeleteWindow : WinWindow
    {
        
        public UIDeactiveDeleteWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnDeactiveDelete";
            this.WindowTitles.Add("Question");
            #endregion
        }
        
        #region Properties
        public WinButton UIDeactiveDeleteButton
        {
            get
            {
                if ((this.mUIDeactiveDeleteButton == null))
                {
                    this.mUIDeactiveDeleteButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIDeactiveDeleteButton.SearchProperties[WinButton.PropertyNames.Name] = "Deactive&Delete";
                    this.mUIDeactiveDeleteButton.WindowTitles.Add("Question");
                    #endregion
                }
                return this.mUIDeactiveDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIDeactiveDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDeactiveWindow : WinWindow
    {
        
        public UIDeactiveWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnDeactive";
            this.WindowTitles.Add("Question");
            #endregion
        }
        
        #region Properties
        public WinButton UIDeactiveButton
        {
            get
            {
                if ((this.mUIDeactiveButton == null))
                {
                    this.mUIDeactiveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIDeactiveButton.SearchProperties[WinButton.PropertyNames.Name] = "Deactivate";
                    this.mUIDeactiveButton.WindowTitles.Add("Question");
                    #endregion
                }
                return this.mUIDeactiveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIDeactiveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICancelWindow : WinWindow
    {
        
        public UICancelWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnCancel";
            this.WindowTitles.Add("Question");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Question");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
}
