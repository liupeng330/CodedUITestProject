// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Facebook.UITestFramework.UIMaps.AccountSummaryClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public partial class AccountSummary
    {
        
        #region Properties
        public UIAdSageforPerformanceWindow UIAdSageforPerformanceWindow
        {
            get
            {
                if ((this.mUIAdSageforPerformanceWindow == null))
                {
                    this.mUIAdSageforPerformanceWindow = new UIAdSageforPerformanceWindow();
                }
                return this.mUIAdSageforPerformanceWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIAdSageforPerformanceWindow mUIAdSageforPerformanceWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAdSageforPerformanceWindow : WinWindow
    {
        
        public UIAdSageforPerformanceWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "adSage for Performance";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIRibbonFormMenuBar UIRibbonFormMenuBar
        {
            get
            {
                if ((this.mUIRibbonFormMenuBar == null))
                {
                    this.mUIRibbonFormMenuBar = new UIRibbonFormMenuBar(this);
                }
                return this.mUIRibbonFormMenuBar;
            }
        }
        
        public UISystemMenuItem1 UISystemMenuItem
        {
            get
            {
                if ((this.mUISystemMenuItem == null))
                {
                    this.mUISystemMenuItem = new UISystemMenuItem1(this);
                }
                return this.mUISystemMenuItem;
            }
        }
        
        public UISystemMenu UISystemMenu
        {
            get
            {
                if ((this.mUISystemMenu == null))
                {
                    this.mUISystemMenu = new UISystemMenu(this);
                }
                return this.mUISystemMenu;
            }
        }
        
        public UIAdSageforPerformanceTitleBar UIAdSageforPerformanceTitleBar
        {
            get
            {
                if ((this.mUIAdSageforPerformanceTitleBar == null))
                {
                    this.mUIAdSageforPerformanceTitleBar = new UIAdSageforPerformanceTitleBar(this);
                }
                return this.mUIAdSageforPerformanceTitleBar;
            }
        }
        
        public WinMenuBar UIRibbonFormMenuBar1
        {
            get
            {
                if ((this.mUIRibbonFormMenuBar1 == null))
                {
                    this.mUIRibbonFormMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIRibbonFormMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIRibbonFormMenuBar1;
            }
        }
        
        public UIAdSageforPerformanceClient UIAdSageforPerformanceClient
        {
            get
            {
                if ((this.mUIAdSageforPerformanceClient == null))
                {
                    this.mUIAdSageforPerformanceClient = new UIAdSageforPerformanceClient(this);
                }
                return this.mUIAdSageforPerformanceClient;
            }
        }
        
        public UISplitContainerControWindow UISplitContainerControWindow
        {
            get
            {
                if ((this.mUISplitContainerControWindow == null))
                {
                    this.mUISplitContainerControWindow = new UISplitContainerControWindow(this);
                }
                return this.mUISplitContainerControWindow;
            }
        }
        
        public UISplitContainerControPane UISplitContainerControPane
        {
            get
            {
                if ((this.mUISplitContainerControPane == null))
                {
                    this.mUISplitContainerControPane = new UISplitContainerControPane(this);
                }
                return this.mUISplitContainerControPane;
            }
        }
        
        public UIScrollbarScrollBar UIScrollbarScrollBar
        {
            get
            {
                if ((this.mUIScrollbarScrollBar == null))
                {
                    this.mUIScrollbarScrollBar = new UIScrollbarScrollBar(this);
                }
                return this.mUIScrollbarScrollBar;
            }
        }
        
        public UIPanel1Pane UIPanel1Pane
        {
            get
            {
                if ((this.mUIPanel1Pane == null))
                {
                    this.mUIPanel1Pane = new UIPanel1Pane(this);
                }
                return this.mUIPanel1Pane;
            }
        }
        
        public UIScrollbarScrollBar1 UIScrollbarScrollBar1
        {
            get
            {
                if ((this.mUIScrollbarScrollBar1 == null))
                {
                    this.mUIScrollbarScrollBar1 = new UIScrollbarScrollBar1(this);
                }
                return this.mUIScrollbarScrollBar1;
            }
        }
        
        public UINavBarControl1Window UINavBarControl1Window
        {
            get
            {
                if ((this.mUINavBarControl1Window == null))
                {
                    this.mUINavBarControl1Window = new UINavBarControl1Window(this);
                }
                return this.mUINavBarControl1Window;
            }
        }
        
        public UINavBarControl1Client UINavBarControl1Client
        {
            get
            {
                if ((this.mUINavBarControl1Client == null))
                {
                    this.mUINavBarControl1Client = new UINavBarControl1Client(this);
                }
                return this.mUINavBarControl1Client;
            }
        }
        
        public UINavBarGroupControlCoWindow UINavBarGroupControlCoWindow
        {
            get
            {
                if ((this.mUINavBarGroupControlCoWindow == null))
                {
                    this.mUINavBarGroupControlCoWindow = new UINavBarGroupControlCoWindow(this);
                }
                return this.mUINavBarGroupControlCoWindow;
            }
        }
        
        public UIAccountNavigatorContWindow UIAccountNavigatorContWindow
        {
            get
            {
                if ((this.mUIAccountNavigatorContWindow == null))
                {
                    this.mUIAccountNavigatorContWindow = new UIAccountNavigatorContWindow(this);
                }
                return this.mUIAccountNavigatorContWindow;
            }
        }
        
        public UIAccountTreeViewWindow UIAccountTreeViewWindow
        {
            get
            {
                if ((this.mUIAccountTreeViewWindow == null))
                {
                    this.mUIAccountTreeViewWindow = new UIAccountTreeViewWindow(this);
                }
                return this.mUIAccountTreeViewWindow;
            }
        }
        
        public UIPanel2Pane UIPanel2Pane
        {
            get
            {
                if ((this.mUIPanel2Pane == null))
                {
                    this.mUIPanel2Pane = new UIPanel2Pane(this);
                }
                return this.mUIPanel2Pane;
            }
        }
        
        public UIScrollbarScrollBar2 UIScrollbarScrollBar2
        {
            get
            {
                if ((this.mUIScrollbarScrollBar2 == null))
                {
                    this.mUIScrollbarScrollBar2 = new UIScrollbarScrollBar2(this);
                }
                return this.mUIScrollbarScrollBar2;
            }
        }
        
        public UIPanel1Window UIPanel1Window
        {
            get
            {
                if ((this.mUIPanel1Window == null))
                {
                    this.mUIPanel1Window = new UIPanel1Window(this);
                }
                return this.mUIPanel1Window;
            }
        }
        
        public UIDropdownNotifierHostWindow UIDropdownNotifierHostWindow
        {
            get
            {
                if ((this.mUIDropdownNotifierHostWindow == null))
                {
                    this.mUIDropdownNotifierHostWindow = new UIDropdownNotifierHostWindow(this);
                }
                return this.mUIDropdownNotifierHostWindow;
            }
        }
        
        public UIPanelControlWindow UIPanelControlWindow
        {
            get
            {
                if ((this.mUIPanelControlWindow == null))
                {
                    this.mUIPanelControlWindow = new UIPanelControlWindow(this);
                }
                return this.mUIPanelControlWindow;
            }
        }
        
        public UIPanelControlPane UIPanelControlPane
        {
            get
            {
                if ((this.mUIPanelControlPane == null))
                {
                    this.mUIPanelControlPane = new UIPanelControlPane(this);
                }
                return this.mUIPanelControlPane;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIMessageNotifierContrWindow UIMessageNotifierContrWindow
        {
            get
            {
                if ((this.mUIMessageNotifierContrWindow == null))
                {
                    this.mUIMessageNotifierContrWindow = new UIMessageNotifierContrWindow(this);
                }
                return this.mUIMessageNotifierContrWindow;
            }
        }
        
        public UIMissingsomeperformanWindow UIMissingsomeperformanWindow
        {
            get
            {
                if ((this.mUIMissingsomeperformanWindow == null))
                {
                    this.mUIMissingsomeperformanWindow = new UIMissingsomeperformanWindow(this);
                }
                return this.mUIMissingsomeperformanWindow;
            }
        }
        
        public UIDownloadNowWindow UIDownloadNowWindow
        {
            get
            {
                if ((this.mUIDownloadNowWindow == null))
                {
                    this.mUIDownloadNowWindow = new UIDownloadNowWindow(this);
                }
                return this.mUIDownloadNowWindow;
            }
        }
        
        public UIVerticalScrollBar3 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar3(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar3 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar3(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public UIDxTabPageContainerCoWindow UIDxTabPageContainerCoWindow
        {
            get
            {
                if ((this.mUIDxTabPageContainerCoWindow == null))
                {
                    this.mUIDxTabPageContainerCoWindow = new UIDxTabPageContainerCoWindow(this);
                }
                return this.mUIDxTabPageContainerCoWindow;
            }
        }
        
        public UITabPageContainerContClient UITabPageContainerContClient
        {
            get
            {
                if ((this.mUITabPageContainerContClient == null))
                {
                    this.mUITabPageContainerContClient = new UITabPageContainerContClient(this);
                }
                return this.mUITabPageContainerContClient;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemTabList UIItemTabList
        {
            get
            {
                if ((this.mUIItemTabList == null))
                {
                    this.mUIItemTabList = new UIItemTabList(this);
                }
                return this.mUIItemTabList;
            }
        }
        
        public UIReportControlFacebooWindow UIReportControlFacebooWindow
        {
            get
            {
                if ((this.mUIReportControlFacebooWindow == null))
                {
                    this.mUIReportControlFacebooWindow = new UIReportControlFacebooWindow(this);
                }
                return this.mUIReportControlFacebooWindow;
            }
        }
        
        public UIReportDateSelectContWindow UIReportDateSelectContWindow
        {
            get
            {
                if ((this.mUIReportDateSelectContWindow == null))
                {
                    this.mUIReportDateSelectContWindow = new UIReportDateSelectContWindow(this);
                }
                return this.mUIReportDateSelectContWindow;
            }
        }
        
        public UIDateRange07142011072Window UIDateRange07142011072Window
        {
            get
            {
                if ((this.mUIDateRange07142011072Window == null))
                {
                    this.mUIDateRange07142011072Window = new UIDateRange07142011072Window(this);
                }
                return this.mUIDateRange07142011072Window;
            }
        }
        
        public UILast7DaysWindow UILast7DaysWindow
        {
            get
            {
                if ((this.mUILast7DaysWindow == null))
                {
                    this.mUILast7DaysWindow = new UILast7DaysWindow(this);
                }
                return this.mUILast7DaysWindow;
            }
        }
        
        public UILast30DaysWindow UILast30DaysWindow
        {
            get
            {
                if ((this.mUILast30DaysWindow == null))
                {
                    this.mUILast30DaysWindow = new UILast30DaysWindow(this);
                }
                return this.mUILast30DaysWindow;
            }
        }
        
        public UITableLayoutPanel1Window UITableLayoutPanel1Window
        {
            get
            {
                if ((this.mUITableLayoutPanel1Window == null))
                {
                    this.mUITableLayoutPanel1Window = new UITableLayoutPanel1Window(this);
                }
                return this.mUITableLayoutPanel1Window;
            }
        }
        
        public UIPanel5Window UIPanel5Window
        {
            get
            {
                if ((this.mUIPanel5Window == null))
                {
                    this.mUIPanel5Window = new UIPanel5Window(this);
                }
                return this.mUIPanel5Window;
            }
        }
        
        public UIPanelControl11Window UIPanelControl11Window
        {
            get
            {
                if ((this.mUIPanelControl11Window == null))
                {
                    this.mUIPanelControl11Window = new UIPanelControl11Window(this);
                }
                return this.mUIPanelControl11Window;
            }
        }
        
        public UISocialonlyWindow UISocialonlyWindow
        {
            get
            {
                if ((this.mUISocialonlyWindow == null))
                {
                    this.mUISocialonlyWindow = new UISocialonlyWindow(this);
                }
                return this.mUISocialonlyWindow;
            }
        }
        
        public UIShowDetailWindow UIShowDetailWindow
        {
            get
            {
                if ((this.mUIShowDetailWindow == null))
                {
                    this.mUIShowDetailWindow = new UIShowDetailWindow(this);
                }
                return this.mUIShowDetailWindow;
            }
        }
        
        public UIMagnifythelowvalueWindow UIMagnifythelowvalueWindow
        {
            get
            {
                if ((this.mUIMagnifythelowvalueWindow == null))
                {
                    this.mUIMagnifythelowvalueWindow = new UIMagnifythelowvalueWindow(this);
                }
                return this.mUIMagnifythelowvalueWindow;
            }
        }
        
        public UIAccountPerformanceChWindow UIAccountPerformanceChWindow
        {
            get
            {
                if ((this.mUIAccountPerformanceChWindow == null))
                {
                    this.mUIAccountPerformanceChWindow = new UIAccountPerformanceChWindow(this);
                }
                return this.mUIAccountPerformanceChWindow;
            }
        }
        
        public UIPanel3Window UIPanel3Window
        {
            get
            {
                if ((this.mUIPanel3Window == null))
                {
                    this.mUIPanel3Window = new UIPanel3Window(this);
                }
                return this.mUIPanel3Window;
            }
        }
        
        public UIPanelControl13Window UIPanelControl13Window
        {
            get
            {
                if ((this.mUIPanelControl13Window == null))
                {
                    this.mUIPanelControl13Window = new UIPanelControl13Window(this);
                }
                return this.mUIPanelControl13Window;
            }
        }
        
        public UIAdsPerformanceChartWindow UIAdsPerformanceChartWindow
        {
            get
            {
                if ((this.mUIAdsPerformanceChartWindow == null))
                {
                    this.mUIAdsPerformanceChartWindow = new UIAdsPerformanceChartWindow(this);
                }
                return this.mUIAdsPerformanceChartWindow;
            }
        }
        
        public UIPanel2Window UIPanel2Window
        {
            get
            {
                if ((this.mUIPanel2Window == null))
                {
                    this.mUIPanel2Window = new UIPanel2Window(this);
                }
                return this.mUIPanel2Window;
            }
        }
        
        public UIPanelControl15Window UIPanelControl15Window
        {
            get
            {
                if ((this.mUIPanelControl15Window == null))
                {
                    this.mUIPanelControl15Window = new UIPanelControl15Window(this);
                }
                return this.mUIPanelControl15Window;
            }
        }
        
        public UIImageComboBoxEdit2Window UIImageComboBoxEdit2Window
        {
            get
            {
                if ((this.mUIImageComboBoxEdit2Window == null))
                {
                    this.mUIImageComboBoxEdit2Window = new UIImageComboBoxEdit2Window(this);
                }
                return this.mUIImageComboBoxEdit2Window;
            }
        }
        
        public UIImageComboBoxEdit1Window UIImageComboBoxEdit1Window
        {
            get
            {
                if ((this.mUIImageComboBoxEdit1Window == null))
                {
                    this.mUIImageComboBoxEdit1Window = new UIImageComboBoxEdit1Window(this);
                }
                return this.mUIImageComboBoxEdit1Window;
            }
        }
        
        public UICostTrendChartWindow UICostTrendChartWindow
        {
            get
            {
                if ((this.mUICostTrendChartWindow == null))
                {
                    this.mUICostTrendChartWindow = new UICostTrendChartWindow(this);
                }
                return this.mUICostTrendChartWindow;
            }
        }
        
        public UIPanel4Window UIPanel4Window
        {
            get
            {
                if ((this.mUIPanel4Window == null))
                {
                    this.mUIPanel4Window = new UIPanel4Window(this);
                }
                return this.mUIPanel4Window;
            }
        }
        
        public UIPanelControl14Window UIPanelControl14Window
        {
            get
            {
                if ((this.mUIPanelControl14Window == null))
                {
                    this.mUIPanelControl14Window = new UIPanelControl14Window(this);
                }
                return this.mUIPanelControl14Window;
            }
        }
        
        public UIProgressForTargetedPWindow UIProgressForTargetedPWindow
        {
            get
            {
                if ((this.mUIProgressForTargetedPWindow == null))
                {
                    this.mUIProgressForTargetedPWindow = new UIProgressForTargetedPWindow(this);
                }
                return this.mUIProgressForTargetedPWindow;
            }
        }
        
        public UIGetTargetedPeopleWindow UIGetTargetedPeopleWindow
        {
            get
            {
                if ((this.mUIGetTargetedPeopleWindow == null))
                {
                    this.mUIGetTargetedPeopleWindow = new UIGetTargetedPeopleWindow(this);
                }
                return this.mUIGetTargetedPeopleWindow;
            }
        }
        
        public UIAudienceChartWindow UIAudienceChartWindow
        {
            get
            {
                if ((this.mUIAudienceChartWindow == null))
                {
                    this.mUIAudienceChartWindow = new UIAudienceChartWindow(this);
                }
                return this.mUIAudienceChartWindow;
            }
        }
        
        public UINoadsinthiscampaignrWindow UINoadsinthiscampaignrWindow
        {
            get
            {
                if ((this.mUINoadsinthiscampaignrWindow == null))
                {
                    this.mUINoadsinthiscampaignrWindow = new UINoadsinthiscampaignrWindow(this);
                }
                return this.mUINoadsinthiscampaignrWindow;
            }
        }
        
        public UIPanel1Window1 UIPanel1Window1
        {
            get
            {
                if ((this.mUIPanel1Window1 == null))
                {
                    this.mUIPanel1Window1 = new UIPanel1Window1(this);
                }
                return this.mUIPanel1Window1;
            }
        }
        
        public UIGrdCtrSummaryWindow UIGrdCtrSummaryWindow
        {
            get
            {
                if ((this.mUIGrdCtrSummaryWindow == null))
                {
                    this.mUIGrdCtrSummaryWindow = new UIGrdCtrSummaryWindow(this);
                }
                return this.mUIGrdCtrSummaryWindow;
            }
        }
        
        public UIVerticalScrollBar110 UIVerticalScrollBar1
        {
            get
            {
                if ((this.mUIVerticalScrollBar1 == null))
                {
                    this.mUIVerticalScrollBar1 = new UIVerticalScrollBar110(this);
                }
                return this.mUIVerticalScrollBar1;
            }
        }
        
        public UIHorizontalScrollBar110 UIHorizontalScrollBar1
        {
            get
            {
                if ((this.mUIHorizontalScrollBar1 == null))
                {
                    this.mUIHorizontalScrollBar1 = new UIHorizontalScrollBar110(this);
                }
                return this.mUIHorizontalScrollBar1;
            }
        }
        
        public UISplitContainerControScrollBar UISplitContainerControScrollBar
        {
            get
            {
                if ((this.mUISplitContainerControScrollBar == null))
                {
                    this.mUISplitContainerControScrollBar = new UISplitContainerControScrollBar(this);
                }
                return this.mUISplitContainerControScrollBar;
            }
        }
        
        public UISplitContainerControScrollBar1 UISplitContainerControScrollBar1
        {
            get
            {
                if ((this.mUISplitContainerControScrollBar1 == null))
                {
                    this.mUISplitContainerControScrollBar1 = new UISplitContainerControScrollBar1(this);
                }
                return this.mUISplitContainerControScrollBar1;
            }
        }
        
        public UIRibbonStatusBarWindow UIRibbonStatusBarWindow
        {
            get
            {
                if ((this.mUIRibbonStatusBarWindow == null))
                {
                    this.mUIRibbonStatusBarWindow = new UIRibbonStatusBarWindow(this);
                }
                return this.mUIRibbonStatusBarWindow;
            }
        }
        
        public UIStatusBarPropertyPage UIStatusBarPropertyPage
        {
            get
            {
                if ((this.mUIStatusBarPropertyPage == null))
                {
                    this.mUIStatusBarPropertyPage = new UIStatusBarPropertyPage(this);
                }
                return this.mUIStatusBarPropertyPage;
            }
        }
        
        public UIVerticalScrollBar21 UIVerticalScrollBar2
        {
            get
            {
                if ((this.mUIVerticalScrollBar2 == null))
                {
                    this.mUIVerticalScrollBar2 = new UIVerticalScrollBar21(this);
                }
                return this.mUIVerticalScrollBar2;
            }
        }
        
        public UIHorizontalScrollBar21 UIHorizontalScrollBar2
        {
            get
            {
                if ((this.mUIHorizontalScrollBar2 == null))
                {
                    this.mUIHorizontalScrollBar2 = new UIHorizontalScrollBar21(this);
                }
                return this.mUIHorizontalScrollBar2;
            }
        }
        
        public UIRibbonWindow UIRibbonWindow
        {
            get
            {
                if ((this.mUIRibbonWindow == null))
                {
                    this.mUIRibbonWindow = new UIRibbonWindow(this);
                }
                return this.mUIRibbonWindow;
            }
        }
        
        public UITheRibbonPropertyPage UITheRibbonPropertyPage
        {
            get
            {
                if ((this.mUITheRibbonPropertyPage == null))
                {
                    this.mUITheRibbonPropertyPage = new UITheRibbonPropertyPage(this);
                }
                return this.mUITheRibbonPropertyPage;
            }
        }
        
        public UIRibbonToolBar UIRibbonToolBar
        {
            get
            {
                if ((this.mUIRibbonToolBar == null))
                {
                    this.mUIRibbonToolBar = new UIRibbonToolBar(this);
                }
                return this.mUIRibbonToolBar;
            }
        }
        
        public UIRibbonTabsTabList UIRibbonTabsTabList
        {
            get
            {
                if ((this.mUIRibbonTabsTabList == null))
                {
                    this.mUIRibbonTabsTabList = new UIRibbonTabsTabList(this);
                }
                return this.mUIRibbonTabsTabList;
            }
        }
        
        public UILowerRibbonPane UILowerRibbonPane
        {
            get
            {
                if ((this.mUILowerRibbonPane == null))
                {
                    this.mUILowerRibbonPane = new UILowerRibbonPane(this);
                }
                return this.mUILowerRibbonPane;
            }
        }
        
        public UIAccountPropertyPage UIAccountPropertyPage
        {
            get
            {
                if ((this.mUIAccountPropertyPage == null))
                {
                    this.mUIAccountPropertyPage = new UIAccountPropertyPage(this);
                }
                return this.mUIAccountPropertyPage;
            }
        }
        
        public UIRibbonToolBar1 UIRibbonToolBar1
        {
            get
            {
                if ((this.mUIRibbonToolBar1 == null))
                {
                    this.mUIRibbonToolBar1 = new UIRibbonToolBar1(this);
                }
                return this.mUIRibbonToolBar1;
            }
        }
        
        public UIRibbonToolBar2 UIRibbonToolBar2
        {
            get
            {
                if ((this.mUIRibbonToolBar2 == null))
                {
                    this.mUIRibbonToolBar2 = new UIRibbonToolBar2(this);
                }
                return this.mUIRibbonToolBar2;
            }
        }
        
        public UIVerticalScrollBar31 UIVerticalScrollBar3
        {
            get
            {
                if ((this.mUIVerticalScrollBar3 == null))
                {
                    this.mUIVerticalScrollBar3 = new UIVerticalScrollBar31(this);
                }
                return this.mUIVerticalScrollBar3;
            }
        }
        
        public UIHorizontalScrollBar31 UIHorizontalScrollBar3
        {
            get
            {
                if ((this.mUIHorizontalScrollBar3 == null))
                {
                    this.mUIHorizontalScrollBar3 = new UIHorizontalScrollBar31(this);
                }
                return this.mUIHorizontalScrollBar3;
            }
        }
        
        public UIAdSageforPerformanceScrollBar UIAdSageforPerformanceScrollBar
        {
            get
            {
                if ((this.mUIAdSageforPerformanceScrollBar == null))
                {
                    this.mUIAdSageforPerformanceScrollBar = new UIAdSageforPerformanceScrollBar(this);
                }
                return this.mUIAdSageforPerformanceScrollBar;
            }
        }
        
        public UIAdSageforPerformanceScrollBar1 UIAdSageforPerformanceScrollBar1
        {
            get
            {
                if ((this.mUIAdSageforPerformanceScrollBar1 == null))
                {
                    this.mUIAdSageforPerformanceScrollBar1 = new UIAdSageforPerformanceScrollBar1(this);
                }
                return this.mUIAdSageforPerformanceScrollBar1;
            }
        }
        
        public WinControl UIAdSageforPerformanceGrip
        {
            get
            {
                if ((this.mUIAdSageforPerformanceGrip == null))
                {
                    this.mUIAdSageforPerformanceGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIAdSageforPerformanceGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIAdSageforPerformanceGrip;
            }
        }
        #endregion
        
        #region Fields
        private UIRibbonFormMenuBar mUIRibbonFormMenuBar;
        
        private UISystemMenuItem1 mUISystemMenuItem;
        
        private UISystemMenu mUISystemMenu;
        
        private UIAdSageforPerformanceTitleBar mUIAdSageforPerformanceTitleBar;
        
        private WinMenuBar mUIRibbonFormMenuBar1;
        
        private UIAdSageforPerformanceClient mUIAdSageforPerformanceClient;
        
        private UISplitContainerControWindow mUISplitContainerControWindow;
        
        private UISplitContainerControPane mUISplitContainerControPane;
        
        private UIScrollbarScrollBar mUIScrollbarScrollBar;
        
        private UIPanel1Pane mUIPanel1Pane;
        
        private UIScrollbarScrollBar1 mUIScrollbarScrollBar1;
        
        private UINavBarControl1Window mUINavBarControl1Window;
        
        private UINavBarControl1Client mUINavBarControl1Client;
        
        private UINavBarGroupControlCoWindow mUINavBarGroupControlCoWindow;
        
        private UIAccountNavigatorContWindow mUIAccountNavigatorContWindow;
        
        private UIAccountTreeViewWindow mUIAccountTreeViewWindow;
        
        private UIPanel2Pane mUIPanel2Pane;
        
        private UIScrollbarScrollBar2 mUIScrollbarScrollBar2;
        
        private UIPanel1Window mUIPanel1Window;
        
        private UIDropdownNotifierHostWindow mUIDropdownNotifierHostWindow;
        
        private UIPanelControlWindow mUIPanelControlWindow;
        
        private UIPanelControlPane mUIPanelControlPane;
        
        private UIItemWindow mUIItemWindow;
        
        private UIMessageNotifierContrWindow mUIMessageNotifierContrWindow;
        
        private UIMissingsomeperformanWindow mUIMissingsomeperformanWindow;
        
        private UIDownloadNowWindow mUIDownloadNowWindow;
        
        private UIVerticalScrollBar3 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar3 mUIHorizontalScrollBar;
        
        private UIDxTabPageContainerCoWindow mUIDxTabPageContainerCoWindow;
        
        private UITabPageContainerContClient mUITabPageContainerContClient;
        
        private UIItemWindow1 mUIItemWindow1;
        
        private UIItemTabList mUIItemTabList;
        
        private UIReportControlFacebooWindow mUIReportControlFacebooWindow;
        
        private UIReportDateSelectContWindow mUIReportDateSelectContWindow;
        
        private UIDateRange07142011072Window mUIDateRange07142011072Window;
        
        private UILast7DaysWindow mUILast7DaysWindow;
        
        private UILast30DaysWindow mUILast30DaysWindow;
        
        private UITableLayoutPanel1Window mUITableLayoutPanel1Window;
        
        private UIPanel5Window mUIPanel5Window;
        
        private UIPanelControl11Window mUIPanelControl11Window;
        
        private UISocialonlyWindow mUISocialonlyWindow;
        
        private UIShowDetailWindow mUIShowDetailWindow;
        
        private UIMagnifythelowvalueWindow mUIMagnifythelowvalueWindow;
        
        private UIAccountPerformanceChWindow mUIAccountPerformanceChWindow;
        
        private UIPanel3Window mUIPanel3Window;
        
        private UIPanelControl13Window mUIPanelControl13Window;
        
        private UIAdsPerformanceChartWindow mUIAdsPerformanceChartWindow;
        
        private UIPanel2Window mUIPanel2Window;
        
        private UIPanelControl15Window mUIPanelControl15Window;
        
        private UIImageComboBoxEdit2Window mUIImageComboBoxEdit2Window;
        
        private UIImageComboBoxEdit1Window mUIImageComboBoxEdit1Window;
        
        private UICostTrendChartWindow mUICostTrendChartWindow;
        
        private UIPanel4Window mUIPanel4Window;
        
        private UIPanelControl14Window mUIPanelControl14Window;
        
        private UIProgressForTargetedPWindow mUIProgressForTargetedPWindow;
        
        private UIGetTargetedPeopleWindow mUIGetTargetedPeopleWindow;
        
        private UIAudienceChartWindow mUIAudienceChartWindow;
        
        private UINoadsinthiscampaignrWindow mUINoadsinthiscampaignrWindow;
        
        private UIPanel1Window1 mUIPanel1Window1;
        
        private UIGrdCtrSummaryWindow mUIGrdCtrSummaryWindow;
        
        private UIVerticalScrollBar110 mUIVerticalScrollBar1;
        
        private UIHorizontalScrollBar110 mUIHorizontalScrollBar1;
        
        private UISplitContainerControScrollBar mUISplitContainerControScrollBar;
        
        private UISplitContainerControScrollBar1 mUISplitContainerControScrollBar1;
        
        private UIRibbonStatusBarWindow mUIRibbonStatusBarWindow;
        
        private UIStatusBarPropertyPage mUIStatusBarPropertyPage;
        
        private UIVerticalScrollBar21 mUIVerticalScrollBar2;
        
        private UIHorizontalScrollBar21 mUIHorizontalScrollBar2;
        
        private UIRibbonWindow mUIRibbonWindow;
        
        private UITheRibbonPropertyPage mUITheRibbonPropertyPage;
        
        private UIRibbonToolBar mUIRibbonToolBar;
        
        private UIRibbonTabsTabList mUIRibbonTabsTabList;
        
        private UILowerRibbonPane mUILowerRibbonPane;
        
        private UIAccountPropertyPage mUIAccountPropertyPage;
        
        private UIRibbonToolBar1 mUIRibbonToolBar1;
        
        private UIRibbonToolBar2 mUIRibbonToolBar2;
        
        private UIVerticalScrollBar31 mUIVerticalScrollBar3;
        
        private UIHorizontalScrollBar31 mUIHorizontalScrollBar3;
        
        private UIAdSageforPerformanceScrollBar mUIAdSageforPerformanceScrollBar;
        
        private UIAdSageforPerformanceScrollBar1 mUIAdSageforPerformanceScrollBar1;
        
        private WinControl mUIAdSageforPerformanceGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRibbonFormMenuBar : WinMenuBar
    {
        
        public UIRibbonFormMenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "System";
            #endregion
        }
        
        #region Properties
        public UISystemMenuItem UISystemMenuItem
        {
            get
            {
                if ((this.mUISystemMenuItem == null))
                {
                    this.mUISystemMenuItem = new UISystemMenuItem(this);
                }
                return this.mUISystemMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UISystemMenuItem mUISystemMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISystemMenuItem : WinMenuItem
    {
        
        public UISystemMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "System";
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIRestoreMenuItem
        {
            get
            {
                if ((this.mUIRestoreMenuItem == null))
                {
                    this.mUIRestoreMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIRestoreMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Restore";
                    this.mUIRestoreMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUIRestoreMenuItem;
            }
        }
        
        public WinMenuItem UIMoveMenuItem
        {
            get
            {
                if ((this.mUIMoveMenuItem == null))
                {
                    this.mUIMoveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIMoveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Move";
                    this.mUIMoveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUIMoveMenuItem;
            }
        }
        
        public WinMenuItem UISizeMenuItem
        {
            get
            {
                if ((this.mUISizeMenuItem == null))
                {
                    this.mUISizeMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISizeMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Size";
                    this.mUISizeMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUISizeMenuItem;
            }
        }
        
        public WinMenuItem UIMinimizeMenuItem
        {
            get
            {
                if ((this.mUIMinimizeMenuItem == null))
                {
                    this.mUIMinimizeMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIMinimizeMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Minimize";
                    this.mUIMinimizeMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUIMinimizeMenuItem;
            }
        }
        
        public WinMenuItem UIMaximizeMenuItem
        {
            get
            {
                if ((this.mUIMaximizeMenuItem == null))
                {
                    this.mUIMaximizeMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIMaximizeMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Maximize";
                    this.mUIMaximizeMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUIMaximizeMenuItem;
            }
        }
        
        public WinMenuItem UICloseAltF4MenuItem
        {
            get
            {
                if ((this.mUICloseAltF4MenuItem == null))
                {
                    this.mUICloseAltF4MenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseAltF4MenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close\tAlt+F4";
                    this.mUICloseAltF4MenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUICloseAltF4MenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIRestoreMenuItem;
        
        private WinMenuItem mUIMoveMenuItem;
        
        private WinMenuItem mUISizeMenuItem;
        
        private WinMenuItem mUIMinimizeMenuItem;
        
        private WinMenuItem mUIMaximizeMenuItem;
        
        private WinMenuItem mUICloseAltF4MenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISystemMenuItem1 : WinMenuItem
    {
        
        public UISystemMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "System";
            #endregion
        }
        
        #region Properties
        public WinMenu UISystemMenu
        {
            get
            {
                if ((this.mUISystemMenu == null))
                {
                    this.mUISystemMenu = new WinMenu(this);
                    #region Search Criteria
                    this.mUISystemMenu.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    this.mUISystemMenu.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISystemMenu.SearchConfigurations.Remove(SearchConfiguration.VisibleOnly);
                    #endregion
                }
                return this.mUISystemMenu;
            }
        }
        #endregion
        
        #region Fields
        private WinMenu mUISystemMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISystemMenu : WinMenu
    {
        
        public UISystemMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "System";
            this.SearchConfigurations.Remove(SearchConfiguration.VisibleOnly);
            #endregion
        }
        
        #region Properties
        public WinSeparator UIItemSeparator
        {
            get
            {
                if ((this.mUIItemSeparator == null))
                {
                    this.mUIItemSeparator = new WinSeparator(this);
                }
                return this.mUIItemSeparator;
            }
        }
        #endregion
        
        #region Fields
        private WinSeparator mUIItemSeparator;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAdSageforPerformanceTitleBar : WinTitleBar
    {
        
        public UIAdSageforPerformanceTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIRestoreButton
        {
            get
            {
                if ((this.mUIRestoreButton == null))
                {
                    this.mUIRestoreButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIRestoreButton.SearchProperties[WinButton.PropertyNames.Name] = "Restore";
                    #endregion
                }
                return this.mUIRestoreButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIRestoreButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAdSageforPerformanceClient : WinClient
    {
        
        public UIAdSageforPerformanceClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "adSage for Performance";
            #endregion
        }
        
        #region Properties
        public WinWindow UISplitContainerControWindow
        {
            get
            {
                if ((this.mUISplitContainerControWindow == null))
                {
                    this.mUISplitContainerControWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUISplitContainerControWindow.SearchProperties[WinWindow.PropertyNames.Name] = "splitContainerControl1";
                    this.mUISplitContainerControWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUISplitContainerControWindow;
            }
        }
        
        public WinPane UISplitContainerControPane
        {
            get
            {
                if ((this.mUISplitContainerControPane == null))
                {
                    this.mUISplitContainerControPane = new WinPane(this);
                    #region Search Criteria
                    this.mUISplitContainerControPane.SearchProperties[WinControl.PropertyNames.Name] = "splitContainerControl1";
                    #endregion
                }
                return this.mUISplitContainerControPane;
            }
        }
        
        public WinWindow UIRibbonStatusBarWindow
        {
            get
            {
                if ((this.mUIRibbonStatusBarWindow == null))
                {
                    this.mUIRibbonStatusBarWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIRibbonStatusBarWindow.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Status Bar";
                    this.mUIRibbonStatusBarWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIRibbonStatusBarWindow;
            }
        }
        
        public WinControl UIStatusBarPropertyPage
        {
            get
            {
                if ((this.mUIStatusBarPropertyPage == null))
                {
                    this.mUIStatusBarPropertyPage = new WinControl(this);
                    #region Search Criteria
                    this.mUIStatusBarPropertyPage.SearchProperties[UITestControl.PropertyNames.Name] = "Status Bar";
                    this.mUIStatusBarPropertyPage.SearchProperties[UITestControl.PropertyNames.ControlType] = "PropertyPage";
                    #endregion
                }
                return this.mUIStatusBarPropertyPage;
            }
        }
        
        public WinWindow UIRibbonWindow
        {
            get
            {
                if ((this.mUIRibbonWindow == null))
                {
                    this.mUIRibbonWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIRibbonWindow.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "The Ribbon";
                    this.mUIRibbonWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIRibbonWindow;
            }
        }
        
        public WinControl UITheRibbonPropertyPage
        {
            get
            {
                if ((this.mUITheRibbonPropertyPage == null))
                {
                    this.mUITheRibbonPropertyPage = new WinControl(this);
                    #region Search Criteria
                    this.mUITheRibbonPropertyPage.SearchProperties[UITestControl.PropertyNames.Name] = "The Ribbon";
                    this.mUITheRibbonPropertyPage.SearchProperties[UITestControl.PropertyNames.ControlType] = "PropertyPage";
                    #endregion
                }
                return this.mUITheRibbonPropertyPage;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUISplitContainerControWindow;
        
        private WinPane mUISplitContainerControPane;
        
        private WinWindow mUIRibbonStatusBarWindow;
        
        private WinControl mUIStatusBarPropertyPage;
        
        private WinWindow mUIRibbonWindow;
        
        private WinControl mUITheRibbonPropertyPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISplitContainerControWindow : WinWindow
    {
        
        public UISplitContainerControWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "splitContainerControl1";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UISplitContainerControMenuBar
        {
            get
            {
                if ((this.mUISplitContainerControMenuBar == null))
                {
                    this.mUISplitContainerControMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISplitContainerControMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUISplitContainerControMenuBar;
            }
        }
        
        public WinTitleBar UISplitContainerControTitleBar
        {
            get
            {
                if ((this.mUISplitContainerControTitleBar == null))
                {
                    this.mUISplitContainerControTitleBar = new WinTitleBar(this);
                }
                return this.mUISplitContainerControTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UISplitContainerControMenuBar1
        {
            get
            {
                if ((this.mUISplitContainerControMenuBar1 == null))
                {
                    this.mUISplitContainerControMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISplitContainerControMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUISplitContainerControMenuBar1;
            }
        }
        
        public WinScrollBar UISplitContainerControScrollBar
        {
            get
            {
                if ((this.mUISplitContainerControScrollBar == null))
                {
                    this.mUISplitContainerControScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUISplitContainerControScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUISplitContainerControScrollBar;
            }
        }
        
        public WinScrollBar UISplitContainerControScrollBar1
        {
            get
            {
                if ((this.mUISplitContainerControScrollBar1 == null))
                {
                    this.mUISplitContainerControScrollBar1 = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUISplitContainerControScrollBar1.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUISplitContainerControScrollBar1;
            }
        }
        
        public WinControl UISplitContainerControGrip
        {
            get
            {
                if ((this.mUISplitContainerControGrip == null))
                {
                    this.mUISplitContainerControGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUISplitContainerControGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUISplitContainerControGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUISplitContainerControMenuBar;
        
        private WinTitleBar mUISplitContainerControTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUISplitContainerControMenuBar1;
        
        private WinScrollBar mUISplitContainerControScrollBar;
        
        private WinScrollBar mUISplitContainerControScrollBar1;
        
        private WinControl mUISplitContainerControGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISplitContainerControPane : WinPane
    {
        
        public UISplitContainerControPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "splitContainerControl1";
            #endregion
        }
        
        #region Properties
        public WinScrollBar UIScrollbarScrollBar
        {
            get
            {
                if ((this.mUIScrollbarScrollBar == null))
                {
                    this.mUIScrollbarScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIScrollbarScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "scroll bar";
                    #endregion
                }
                return this.mUIScrollbarScrollBar;
            }
        }
        
        public WinPane UIPanel1Pane
        {
            get
            {
                if ((this.mUIPanel1Pane == null))
                {
                    this.mUIPanel1Pane = new WinPane(this);
                    #region Search Criteria
                    this.mUIPanel1Pane.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    #endregion
                }
                return this.mUIPanel1Pane;
            }
        }
        
        public WinPane UIPanel2Pane
        {
            get
            {
                if ((this.mUIPanel2Pane == null))
                {
                    this.mUIPanel2Pane = new WinPane(this);
                    #region Search Criteria
                    this.mUIPanel2Pane.SearchProperties[WinControl.PropertyNames.Instance] = "2";
                    #endregion
                }
                return this.mUIPanel2Pane;
            }
        }
        #endregion
        
        #region Fields
        private WinScrollBar mUIScrollbarScrollBar;
        
        private WinPane mUIPanel1Pane;
        
        private WinPane mUIPanel2Pane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIScrollbarScrollBar : WinScrollBar
    {
        
        public UIScrollbarScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "scroll bar";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnLeftButton
        {
            get
            {
                if ((this.mUIColumnLeftButton == null))
                {
                    this.mUIColumnLeftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnLeftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column Left";
                    #endregion
                }
                return this.mUIColumnLeftButton;
            }
        }
        
        public WinButton UIPageLeftButton
        {
            get
            {
                if ((this.mUIPageLeftButton == null))
                {
                    this.mUIPageLeftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageLeftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Left";
                    #endregion
                }
                return this.mUIPageLeftButton;
            }
        }
        
        public WinButton UIPositionButton
        {
            get
            {
                if ((this.mUIPositionButton == null))
                {
                    this.mUIPositionButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPositionButton.SearchProperties[WinButton.PropertyNames.Name] = "Position";
                    #endregion
                }
                return this.mUIPositionButton;
            }
        }
        
        public WinButton UIPageRightButton
        {
            get
            {
                if ((this.mUIPageRightButton == null))
                {
                    this.mUIPageRightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageRightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Right";
                    #endregion
                }
                return this.mUIPageRightButton;
            }
        }
        
        public WinButton UIColumnRightButton
        {
            get
            {
                if ((this.mUIColumnRightButton == null))
                {
                    this.mUIColumnRightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnRightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column Right";
                    #endregion
                }
                return this.mUIColumnRightButton;
            }
        }
        
        public WinButton UILineUpButton
        {
            get
            {
                if ((this.mUILineUpButton == null))
                {
                    this.mUILineUpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineUpButton.SearchProperties[WinButton.PropertyNames.Name] = "Line Up";
                    #endregion
                }
                return this.mUILineUpButton;
            }
        }
        
        public WinButton UIPageUpButton
        {
            get
            {
                if ((this.mUIPageUpButton == null))
                {
                    this.mUIPageUpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageUpButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Up";
                    #endregion
                }
                return this.mUIPageUpButton;
            }
        }
        
        public WinButton UIPageDownButton
        {
            get
            {
                if ((this.mUIPageDownButton == null))
                {
                    this.mUIPageDownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageDownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Down";
                    #endregion
                }
                return this.mUIPageDownButton;
            }
        }
        
        public WinButton UILineDownButton
        {
            get
            {
                if ((this.mUILineDownButton == null))
                {
                    this.mUILineDownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineDownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line Down";
                    #endregion
                }
                return this.mUILineDownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnLeftButton;
        
        private WinButton mUIPageLeftButton;
        
        private WinButton mUIPositionButton;
        
        private WinButton mUIPageRightButton;
        
        private WinButton mUIColumnRightButton;
        
        private WinButton mUILineUpButton;
        
        private WinButton mUIPageUpButton;
        
        private WinButton mUIPageDownButton;
        
        private WinButton mUILineDownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPanel1Pane : WinPane
    {
        
        public UIPanel1Pane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinScrollBar UIScrollbarScrollBar
        {
            get
            {
                if ((this.mUIScrollbarScrollBar == null))
                {
                    this.mUIScrollbarScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIScrollbarScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "scroll bar";
                    #endregion
                }
                return this.mUIScrollbarScrollBar;
            }
        }
        #endregion
        
        #region Fields
        private WinScrollBar mUIScrollbarScrollBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIScrollbarScrollBar1 : WinScrollBar
    {
        
        public UIScrollbarScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "scroll bar";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnLeftButton
        {
            get
            {
                if ((this.mUIColumnLeftButton == null))
                {
                    this.mUIColumnLeftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnLeftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column Left";
                    #endregion
                }
                return this.mUIColumnLeftButton;
            }
        }
        
        public WinButton UIPageLeftButton
        {
            get
            {
                if ((this.mUIPageLeftButton == null))
                {
                    this.mUIPageLeftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageLeftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Left";
                    #endregion
                }
                return this.mUIPageLeftButton;
            }
        }
        
        public WinButton UIPositionButton
        {
            get
            {
                if ((this.mUIPositionButton == null))
                {
                    this.mUIPositionButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPositionButton.SearchProperties[WinButton.PropertyNames.Name] = "Position";
                    #endregion
                }
                return this.mUIPositionButton;
            }
        }
        
        public WinButton UIPageRightButton
        {
            get
            {
                if ((this.mUIPageRightButton == null))
                {
                    this.mUIPageRightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageRightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Right";
                    #endregion
                }
                return this.mUIPageRightButton;
            }
        }
        
        public WinButton UIColumnRightButton
        {
            get
            {
                if ((this.mUIColumnRightButton == null))
                {
                    this.mUIColumnRightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnRightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column Right";
                    #endregion
                }
                return this.mUIColumnRightButton;
            }
        }
        
        public WinButton UILineUpButton
        {
            get
            {
                if ((this.mUILineUpButton == null))
                {
                    this.mUILineUpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineUpButton.SearchProperties[WinButton.PropertyNames.Name] = "Line Up";
                    #endregion
                }
                return this.mUILineUpButton;
            }
        }
        
        public WinButton UIPageUpButton
        {
            get
            {
                if ((this.mUIPageUpButton == null))
                {
                    this.mUIPageUpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageUpButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Up";
                    #endregion
                }
                return this.mUIPageUpButton;
            }
        }
        
        public WinButton UIPageDownButton
        {
            get
            {
                if ((this.mUIPageDownButton == null))
                {
                    this.mUIPageDownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageDownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Down";
                    #endregion
                }
                return this.mUIPageDownButton;
            }
        }
        
        public WinButton UILineDownButton
        {
            get
            {
                if ((this.mUILineDownButton == null))
                {
                    this.mUILineDownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineDownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line Down";
                    #endregion
                }
                return this.mUILineDownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnLeftButton;
        
        private WinButton mUIPageLeftButton;
        
        private WinButton mUIPositionButton;
        
        private WinButton mUIPageRightButton;
        
        private WinButton mUIColumnRightButton;
        
        private WinButton mUILineUpButton;
        
        private WinButton mUIPageUpButton;
        
        private WinButton mUIPageDownButton;
        
        private WinButton mUILineDownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UINavBarControl1Window : WinWindow
    {
        
        public UINavBarControl1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "navBarControl1";
            #endregion
        }
        
        #region Properties
        public WinClient UINavBarControl1Client
        {
            get
            {
                if ((this.mUINavBarControl1Client == null))
                {
                    this.mUINavBarControl1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUINavBarControl1Client.SearchProperties[WinControl.PropertyNames.Name] = "navBarControl1";
                    #endregion
                }
                return this.mUINavBarControl1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUINavBarControl1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UINavBarControl1Client : WinClient
    {
        
        public UINavBarControl1Client(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "navBarControl1";
            #endregion
        }
        
        #region Properties
        public WinGroup UIAccountsViewGroup
        {
            get
            {
                if ((this.mUIAccountsViewGroup == null))
                {
                    this.mUIAccountsViewGroup = new WinGroup(this);
                    #region Search Criteria
                    this.mUIAccountsViewGroup.SearchProperties[WinControl.PropertyNames.Name] = "Accounts View";
                    #endregion
                }
                return this.mUIAccountsViewGroup;
            }
        }
        #endregion
        
        #region Fields
        private WinGroup mUIAccountsViewGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UINavBarGroupControlCoWindow : WinWindow
    {
        
        public UINavBarGroupControlCoWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "navBarGroupControlContainer1";
            #endregion
        }
        
        #region Properties
        public WinClient UINavBarGroupControlCoClient
        {
            get
            {
                if ((this.mUINavBarGroupControlCoClient == null))
                {
                    this.mUINavBarGroupControlCoClient = new WinClient(this);
                }
                return this.mUINavBarGroupControlCoClient;
            }
        }
        
        public WinWindow UIAccountNavigatorContWindow
        {
            get
            {
                if ((this.mUIAccountNavigatorContWindow == null))
                {
                    this.mUIAccountNavigatorContWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIAccountNavigatorContWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIAccountNavigatorContWindow.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    #endregion
                }
                return this.mUIAccountNavigatorContWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUINavBarGroupControlCoClient;
        
        private WinWindow mUIAccountNavigatorContWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAccountNavigatorContWindow : WinWindow
    {
        
        public UIAccountNavigatorContWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "AccountNavigatorControl";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIAccountNavigatorContMenuBar
        {
            get
            {
                if ((this.mUIAccountNavigatorContMenuBar == null))
                {
                    this.mUIAccountNavigatorContMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIAccountNavigatorContMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIAccountNavigatorContMenuBar;
            }
        }
        
        public WinTitleBar UIAccountNavigatorContTitleBar
        {
            get
            {
                if ((this.mUIAccountNavigatorContTitleBar == null))
                {
                    this.mUIAccountNavigatorContTitleBar = new WinTitleBar(this);
                }
                return this.mUIAccountNavigatorContTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIAccountNavigatorContMenuBar1
        {
            get
            {
                if ((this.mUIAccountNavigatorContMenuBar1 == null))
                {
                    this.mUIAccountNavigatorContMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIAccountNavigatorContMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIAccountNavigatorContMenuBar1;
            }
        }
        
        public WinClient UIAccountNavigatorContClient
        {
            get
            {
                if ((this.mUIAccountNavigatorContClient == null))
                {
                    this.mUIAccountNavigatorContClient = new WinClient(this);
                }
                return this.mUIAccountNavigatorContClient;
            }
        }
        
        public WinWindow UIAccountTreeViewWindow
        {
            get
            {
                if ((this.mUIAccountTreeViewWindow == null))
                {
                    this.mUIAccountTreeViewWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIAccountTreeViewWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.SysTreeView32", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIAccountTreeViewWindow;
            }
        }
        
        public UIVerticalScrollBar UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIAccountNavigatorContGrip
        {
            get
            {
                if ((this.mUIAccountNavigatorContGrip == null))
                {
                    this.mUIAccountNavigatorContGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIAccountNavigatorContGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIAccountNavigatorContGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIAccountNavigatorContMenuBar;
        
        private WinTitleBar mUIAccountNavigatorContTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIAccountNavigatorContMenuBar1;
        
        private WinClient mUIAccountNavigatorContClient;
        
        private WinWindow mUIAccountTreeViewWindow;
        
        private UIVerticalScrollBar mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar mUIHorizontalScrollBar;
        
        private WinControl mUIAccountNavigatorContGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar : WinScrollBar
    {
        
        public UIVerticalScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar : WinScrollBar
    {
        
        public UIHorizontalScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAccountTreeViewWindow : WinWindow
    {
        
        public UIAccountTreeViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "accountTreeView";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIAccountTreeViewMenuBar
        {
            get
            {
                if ((this.mUIAccountTreeViewMenuBar == null))
                {
                    this.mUIAccountTreeViewMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIAccountTreeViewMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIAccountTreeViewMenuBar;
            }
        }
        
        public WinTitleBar UIAccountTreeViewTitleBar
        {
            get
            {
                if ((this.mUIAccountTreeViewTitleBar == null))
                {
                    this.mUIAccountTreeViewTitleBar = new WinTitleBar(this);
                }
                return this.mUIAccountTreeViewTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIAccountTreeViewMenuBar1
        {
            get
            {
                if ((this.mUIAccountTreeViewMenuBar1 == null))
                {
                    this.mUIAccountTreeViewMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIAccountTreeViewMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIAccountTreeViewMenuBar1;
            }
        }
        
        public WinTree UIAccountTreeViewTree
        {
            get
            {
                if ((this.mUIAccountTreeViewTree == null))
                {
                    this.mUIAccountTreeViewTree = new WinTree(this);
                }
                return this.mUIAccountTreeViewTree;
            }
        }
        
        public UIYourAccounts1TreeItem UIYourAccounts1TreeItem
        {
            get
            {
                if ((this.mUIYourAccounts1TreeItem == null))
                {
                    this.mUIYourAccounts1TreeItem = new UIYourAccounts1TreeItem(this);
                }
                return this.mUIYourAccounts1TreeItem;
            }
        }
        
        public UIVerticalScrollBar1 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar1(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar1 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar1(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIAccountTreeViewGrip
        {
            get
            {
                if ((this.mUIAccountTreeViewGrip == null))
                {
                    this.mUIAccountTreeViewGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIAccountTreeViewGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIAccountTreeViewGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIAccountTreeViewMenuBar;
        
        private WinTitleBar mUIAccountTreeViewTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIAccountTreeViewMenuBar1;
        
        private WinTree mUIAccountTreeViewTree;
        
        private UIYourAccounts1TreeItem mUIYourAccounts1TreeItem;
        
        private UIVerticalScrollBar1 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar1 mUIHorizontalScrollBar;
        
        private WinControl mUIAccountTreeViewGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIYourAccounts1TreeItem : WinTreeItem
    {
        
        public UIYourAccounts1TreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Your Accounts(1)";
            this.SearchProperties["Value"] = "0";
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIHaihadsagecom4684830TreeItem
        {
            get
            {
                if ((this.mUIHaihadsagecom4684830TreeItem == null))
                {
                    this.mUIHaihadsagecom4684830TreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIHaihadsagecom4684830TreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "haih@ad-sage.com #46848300(USD)";
                    this.mUIHaihadsagecom4684830TreeItem.SearchProperties["Value"] = "1";
                    this.mUIHaihadsagecom4684830TreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIHaihadsagecom4684830TreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    #endregion
                }
                return this.mUIHaihadsagecom4684830TreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIHaihadsagecom4684830TreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar1 : WinScrollBar
    {
        
        public UIVerticalScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar1 : WinScrollBar
    {
        
        public UIHorizontalScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPanel2Pane : WinPane
    {
        
        public UIPanel2Pane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinScrollBar UIScrollbarScrollBar
        {
            get
            {
                if ((this.mUIScrollbarScrollBar == null))
                {
                    this.mUIScrollbarScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIScrollbarScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "scroll bar";
                    #endregion
                }
                return this.mUIScrollbarScrollBar;
            }
        }
        #endregion
        
        #region Fields
        private WinScrollBar mUIScrollbarScrollBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIScrollbarScrollBar2 : WinScrollBar
    {
        
        public UIScrollbarScrollBar2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "scroll bar";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnLeftButton
        {
            get
            {
                if ((this.mUIColumnLeftButton == null))
                {
                    this.mUIColumnLeftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnLeftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column Left";
                    #endregion
                }
                return this.mUIColumnLeftButton;
            }
        }
        
        public WinButton UIPageLeftButton
        {
            get
            {
                if ((this.mUIPageLeftButton == null))
                {
                    this.mUIPageLeftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageLeftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Left";
                    #endregion
                }
                return this.mUIPageLeftButton;
            }
        }
        
        public WinButton UIPositionButton
        {
            get
            {
                if ((this.mUIPositionButton == null))
                {
                    this.mUIPositionButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPositionButton.SearchProperties[WinButton.PropertyNames.Name] = "Position";
                    #endregion
                }
                return this.mUIPositionButton;
            }
        }
        
        public WinButton UIPageRightButton
        {
            get
            {
                if ((this.mUIPageRightButton == null))
                {
                    this.mUIPageRightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageRightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Right";
                    #endregion
                }
                return this.mUIPageRightButton;
            }
        }
        
        public WinButton UIColumnRightButton
        {
            get
            {
                if ((this.mUIColumnRightButton == null))
                {
                    this.mUIColumnRightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnRightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column Right";
                    #endregion
                }
                return this.mUIColumnRightButton;
            }
        }
        
        public WinButton UILineUpButton
        {
            get
            {
                if ((this.mUILineUpButton == null))
                {
                    this.mUILineUpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineUpButton.SearchProperties[WinButton.PropertyNames.Name] = "Line Up";
                    #endregion
                }
                return this.mUILineUpButton;
            }
        }
        
        public WinButton UIPageUpButton
        {
            get
            {
                if ((this.mUIPageUpButton == null))
                {
                    this.mUIPageUpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageUpButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Up";
                    #endregion
                }
                return this.mUIPageUpButton;
            }
        }
        
        public WinButton UIPageDownButton
        {
            get
            {
                if ((this.mUIPageDownButton == null))
                {
                    this.mUIPageDownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageDownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Down";
                    #endregion
                }
                return this.mUIPageDownButton;
            }
        }
        
        public WinButton UILineDownButton
        {
            get
            {
                if ((this.mUILineDownButton == null))
                {
                    this.mUILineDownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineDownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line Down";
                    #endregion
                }
                return this.mUILineDownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnLeftButton;
        
        private WinButton mUIPageLeftButton;
        
        private WinButton mUIPositionButton;
        
        private WinButton mUIPageRightButton;
        
        private WinButton mUIColumnRightButton;
        
        private WinButton mUILineUpButton;
        
        private WinButton mUIPageUpButton;
        
        private WinButton mUIPageDownButton;
        
        private WinButton mUILineDownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPanel1Window : WinWindow
    {
        
        public UIPanel1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "panel1";
            #endregion
        }
        
        #region Properties
        public WinClient UIPanel1Client
        {
            get
            {
                if ((this.mUIPanel1Client == null))
                {
                    this.mUIPanel1Client = new WinClient(this);
                }
                return this.mUIPanel1Client;
            }
        }
        
        public WinWindow UIDropdownNotifierHostWindow
        {
            get
            {
                if ((this.mUIDropdownNotifierHostWindow == null))
                {
                    this.mUIDropdownNotifierHostWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIDropdownNotifierHostWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIDropdownNotifierHostWindow.SearchProperties[WinWindow.PropertyNames.Instance] = "35";
                    #endregion
                }
                return this.mUIDropdownNotifierHostWindow;
            }
        }
        
        public WinWindow UIDxTabPageContainerCoWindow
        {
            get
            {
                if ((this.mUIDxTabPageContainerCoWindow == null))
                {
                    this.mUIDxTabPageContainerCoWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIDxTabPageContainerCoWindow.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "TabPageContainerControl";
                    this.mUIDxTabPageContainerCoWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIDxTabPageContainerCoWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIPanel1Client;
        
        private WinWindow mUIDropdownNotifierHostWindow;
        
        private WinWindow mUIDxTabPageContainerCoWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDropdownNotifierHostWindow : WinWindow
    {
        
        public UIDropdownNotifierHostWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "dropdownNotifierHost1";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIDropdownNotifierHostMenuBar
        {
            get
            {
                if ((this.mUIDropdownNotifierHostMenuBar == null))
                {
                    this.mUIDropdownNotifierHostMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIDropdownNotifierHostMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIDropdownNotifierHostMenuBar;
            }
        }
        
        public WinTitleBar UIDropdownNotifierHostTitleBar
        {
            get
            {
                if ((this.mUIDropdownNotifierHostTitleBar == null))
                {
                    this.mUIDropdownNotifierHostTitleBar = new WinTitleBar(this);
                }
                return this.mUIDropdownNotifierHostTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIDropdownNotifierHostMenuBar1
        {
            get
            {
                if ((this.mUIDropdownNotifierHostMenuBar1 == null))
                {
                    this.mUIDropdownNotifierHostMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIDropdownNotifierHostMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIDropdownNotifierHostMenuBar1;
            }
        }
        
        public WinClient UIDropdownNotifierHostClient
        {
            get
            {
                if ((this.mUIDropdownNotifierHostClient == null))
                {
                    this.mUIDropdownNotifierHostClient = new WinClient(this);
                }
                return this.mUIDropdownNotifierHostClient;
            }
        }
        
        public WinWindow UIPanelControlWindow
        {
            get
            {
                if ((this.mUIPanelControlWindow == null))
                {
                    this.mUIPanelControlWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIPanelControlWindow.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "panelControl";
                    this.mUIPanelControlWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIPanelControlWindow;
            }
        }
        
        public WinPane UIPanelControlPane
        {
            get
            {
                if ((this.mUIPanelControlPane == null))
                {
                    this.mUIPanelControlPane = new WinPane(this);
                    #region Search Criteria
                    this.mUIPanelControlPane.SearchProperties[WinControl.PropertyNames.Name] = "panelControl";
                    #endregion
                }
                return this.mUIPanelControlPane;
            }
        }
        
        public WinScrollBar UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIVerticalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public WinScrollBar UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIHorizontalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIDropdownNotifierHostGrip
        {
            get
            {
                if ((this.mUIDropdownNotifierHostGrip == null))
                {
                    this.mUIDropdownNotifierHostGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIDropdownNotifierHostGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIDropdownNotifierHostGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIDropdownNotifierHostMenuBar;
        
        private WinTitleBar mUIDropdownNotifierHostTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIDropdownNotifierHostMenuBar1;
        
        private WinClient mUIDropdownNotifierHostClient;
        
        private WinWindow mUIPanelControlWindow;
        
        private WinPane mUIPanelControlPane;
        
        private WinScrollBar mUIVerticalScrollBar;
        
        private WinScrollBar mUIHorizontalScrollBar;
        
        private WinControl mUIDropdownNotifierHostGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPanelControlWindow : WinWindow
    {
        
        public UIPanelControlWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "panelControl";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIPanelControlMenuBar
        {
            get
            {
                if ((this.mUIPanelControlMenuBar == null))
                {
                    this.mUIPanelControlMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanelControlMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIPanelControlMenuBar;
            }
        }
        
        public WinTitleBar UIPanelControlTitleBar
        {
            get
            {
                if ((this.mUIPanelControlTitleBar == null))
                {
                    this.mUIPanelControlTitleBar = new WinTitleBar(this);
                }
                return this.mUIPanelControlTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIPanelControlMenuBar1
        {
            get
            {
                if ((this.mUIPanelControlMenuBar1 == null))
                {
                    this.mUIPanelControlMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanelControlMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIPanelControlMenuBar1;
            }
        }
        
        public UIScrollbarScrollBar3 UIScrollbarScrollBar
        {
            get
            {
                if ((this.mUIScrollbarScrollBar == null))
                {
                    this.mUIScrollbarScrollBar = new UIScrollbarScrollBar3(this);
                }
                return this.mUIScrollbarScrollBar;
            }
        }
        
        public UIItemPane UIItemPane
        {
            get
            {
                if ((this.mUIItemPane == null))
                {
                    this.mUIItemPane = new UIItemPane(this);
                }
                return this.mUIItemPane;
            }
        }
        
        public UIVerticalScrollBar2 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar2(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar2 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar2(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIPanelControlGrip
        {
            get
            {
                if ((this.mUIPanelControlGrip == null))
                {
                    this.mUIPanelControlGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIPanelControlGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIPanelControlGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIPanelControlMenuBar;
        
        private WinTitleBar mUIPanelControlTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIPanelControlMenuBar1;
        
        private UIScrollbarScrollBar3 mUIScrollbarScrollBar;
        
        private UIItemPane mUIItemPane;
        
        private UIVerticalScrollBar2 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar2 mUIHorizontalScrollBar;
        
        private WinControl mUIPanelControlGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIScrollbarScrollBar3 : WinScrollBar
    {
        
        public UIScrollbarScrollBar3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "scroll bar";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnLeftButton
        {
            get
            {
                if ((this.mUIColumnLeftButton == null))
                {
                    this.mUIColumnLeftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnLeftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column Left";
                    #endregion
                }
                return this.mUIColumnLeftButton;
            }
        }
        
        public WinButton UIPageLeftButton
        {
            get
            {
                if ((this.mUIPageLeftButton == null))
                {
                    this.mUIPageLeftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageLeftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Left";
                    #endregion
                }
                return this.mUIPageLeftButton;
            }
        }
        
        public WinButton UIPositionButton
        {
            get
            {
                if ((this.mUIPositionButton == null))
                {
                    this.mUIPositionButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPositionButton.SearchProperties[WinButton.PropertyNames.Name] = "Position";
                    #endregion
                }
                return this.mUIPositionButton;
            }
        }
        
        public WinButton UIPageRightButton
        {
            get
            {
                if ((this.mUIPageRightButton == null))
                {
                    this.mUIPageRightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageRightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Right";
                    #endregion
                }
                return this.mUIPageRightButton;
            }
        }
        
        public WinButton UIColumnRightButton
        {
            get
            {
                if ((this.mUIColumnRightButton == null))
                {
                    this.mUIColumnRightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnRightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column Right";
                    #endregion
                }
                return this.mUIColumnRightButton;
            }
        }
        
        public WinButton UILineUpButton
        {
            get
            {
                if ((this.mUILineUpButton == null))
                {
                    this.mUILineUpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineUpButton.SearchProperties[WinButton.PropertyNames.Name] = "Line Up";
                    #endregion
                }
                return this.mUILineUpButton;
            }
        }
        
        public WinButton UIPageUpButton
        {
            get
            {
                if ((this.mUIPageUpButton == null))
                {
                    this.mUIPageUpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageUpButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Up";
                    #endregion
                }
                return this.mUIPageUpButton;
            }
        }
        
        public WinButton UIPageDownButton
        {
            get
            {
                if ((this.mUIPageDownButton == null))
                {
                    this.mUIPageDownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageDownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Down";
                    #endregion
                }
                return this.mUIPageDownButton;
            }
        }
        
        public WinButton UILineDownButton
        {
            get
            {
                if ((this.mUILineDownButton == null))
                {
                    this.mUILineDownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineDownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line Down";
                    #endregion
                }
                return this.mUILineDownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnLeftButton;
        
        private WinButton mUIPageLeftButton;
        
        private WinButton mUIPositionButton;
        
        private WinButton mUIPageRightButton;
        
        private WinButton mUIColumnRightButton;
        
        private WinButton mUILineUpButton;
        
        private WinButton mUIPageUpButton;
        
        private WinButton mUIPageDownButton;
        
        private WinButton mUILineDownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemPane : WinPane
    {
        
        public UIItemPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinScrollBar UIScrollbarScrollBar
        {
            get
            {
                if ((this.mUIScrollbarScrollBar == null))
                {
                    this.mUIScrollbarScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIScrollbarScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "scroll bar";
                    #endregion
                }
                return this.mUIScrollbarScrollBar;
            }
        }
        #endregion
        
        #region Fields
        private WinScrollBar mUIScrollbarScrollBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar2 : WinScrollBar
    {
        
        public UIVerticalScrollBar2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar2 : WinScrollBar
    {
        
        public UIHorizontalScrollBar2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPanelControlPane : WinPane
    {
        
        public UIPanelControlPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "panelControl";
            #endregion
        }
        
        #region Properties
        public WinScrollBar UIScrollbarScrollBar
        {
            get
            {
                if ((this.mUIScrollbarScrollBar == null))
                {
                    this.mUIScrollbarScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIScrollbarScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "scroll bar";
                    #endregion
                }
                return this.mUIScrollbarScrollBar;
            }
        }
        
        public WinPane UIItemPane
        {
            get
            {
                if ((this.mUIItemPane == null))
                {
                    this.mUIItemPane = new WinPane(this);
                    #region Search Criteria
                    this.mUIItemPane.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    #endregion
                }
                return this.mUIItemPane;
            }
        }
        #endregion
        
        #region Fields
        private WinScrollBar mUIScrollbarScrollBar;
        
        private WinPane mUIItemPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "45";
            #endregion
        }
        
        #region Properties
        public UIScrollbarScrollBar4 UIScrollbarScrollBar
        {
            get
            {
                if ((this.mUIScrollbarScrollBar == null))
                {
                    this.mUIScrollbarScrollBar = new UIScrollbarScrollBar4(this);
                }
                return this.mUIScrollbarScrollBar;
            }
        }
        #endregion
        
        #region Fields
        private UIScrollbarScrollBar4 mUIScrollbarScrollBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIScrollbarScrollBar4 : WinScrollBar
    {
        
        public UIScrollbarScrollBar4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "scroll bar";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnLeftButton
        {
            get
            {
                if ((this.mUIColumnLeftButton == null))
                {
                    this.mUIColumnLeftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnLeftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column Left";
                    #endregion
                }
                return this.mUIColumnLeftButton;
            }
        }
        
        public WinButton UIPageLeftButton
        {
            get
            {
                if ((this.mUIPageLeftButton == null))
                {
                    this.mUIPageLeftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageLeftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Left";
                    #endregion
                }
                return this.mUIPageLeftButton;
            }
        }
        
        public WinButton UIPositionButton
        {
            get
            {
                if ((this.mUIPositionButton == null))
                {
                    this.mUIPositionButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPositionButton.SearchProperties[WinButton.PropertyNames.Name] = "Position";
                    #endregion
                }
                return this.mUIPositionButton;
            }
        }
        
        public WinButton UIPageRightButton
        {
            get
            {
                if ((this.mUIPageRightButton == null))
                {
                    this.mUIPageRightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageRightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Right";
                    #endregion
                }
                return this.mUIPageRightButton;
            }
        }
        
        public WinButton UIColumnRightButton
        {
            get
            {
                if ((this.mUIColumnRightButton == null))
                {
                    this.mUIColumnRightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnRightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column Right";
                    #endregion
                }
                return this.mUIColumnRightButton;
            }
        }
        
        public WinButton UILineUpButton
        {
            get
            {
                if ((this.mUILineUpButton == null))
                {
                    this.mUILineUpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineUpButton.SearchProperties[WinButton.PropertyNames.Name] = "Line Up";
                    #endregion
                }
                return this.mUILineUpButton;
            }
        }
        
        public WinButton UIPageUpButton
        {
            get
            {
                if ((this.mUIPageUpButton == null))
                {
                    this.mUIPageUpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageUpButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Up";
                    #endregion
                }
                return this.mUIPageUpButton;
            }
        }
        
        public WinButton UIPageDownButton
        {
            get
            {
                if ((this.mUIPageDownButton == null))
                {
                    this.mUIPageDownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageDownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Down";
                    #endregion
                }
                return this.mUIPageDownButton;
            }
        }
        
        public WinButton UILineDownButton
        {
            get
            {
                if ((this.mUILineDownButton == null))
                {
                    this.mUILineDownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineDownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line Down";
                    #endregion
                }
                return this.mUILineDownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnLeftButton;
        
        private WinButton mUIPageLeftButton;
        
        private WinButton mUIPositionButton;
        
        private WinButton mUIPageRightButton;
        
        private WinButton mUIColumnRightButton;
        
        private WinButton mUILineUpButton;
        
        private WinButton mUIPageUpButton;
        
        private WinButton mUIPageDownButton;
        
        private WinButton mUILineDownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMessageNotifierContrWindow : WinWindow
    {
        
        public UIMessageNotifierContrWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "MessageNotifierControl";
            #endregion
        }
        
        #region Properties
        public WinClient UIMessageNotifierContrClient
        {
            get
            {
                if ((this.mUIMessageNotifierContrClient == null))
                {
                    this.mUIMessageNotifierContrClient = new WinClient(this);
                }
                return this.mUIMessageNotifierContrClient;
            }
        }
        
        public WinWindow UIMissingsomeperformanWindow
        {
            get
            {
                if ((this.mUIMissingsomeperformanWindow == null))
                {
                    this.mUIMissingsomeperformanWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIMissingsomeperformanWindow.SearchProperties[WinWindow.PropertyNames.Name] = "Missing some performance data in the recent period,";
                    this.mUIMissingsomeperformanWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIMissingsomeperformanWindow;
            }
        }
        
        public WinText UIMissingsomeperformanText
        {
            get
            {
                if ((this.mUIMissingsomeperformanText == null))
                {
                    this.mUIMissingsomeperformanText = new WinText(this);
                    #region Search Criteria
                    this.mUIMissingsomeperformanText.SearchProperties[WinText.PropertyNames.Name] = "Missing some performance data in the recent period,";
                    #endregion
                }
                return this.mUIMissingsomeperformanText;
            }
        }
        
        public WinWindow UIDownloadNowWindow
        {
            get
            {
                if ((this.mUIDownloadNowWindow == null))
                {
                    this.mUIDownloadNowWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIDownloadNowWindow.SearchProperties[WinWindow.PropertyNames.Name] = "Download Now!";
                    this.mUIDownloadNowWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIDownloadNowWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIMessageNotifierContrClient;
        
        private WinWindow mUIMissingsomeperformanWindow;
        
        private WinText mUIMissingsomeperformanText;
        
        private WinWindow mUIDownloadNowWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMissingsomeperformanWindow : WinWindow
    {
        
        public UIMissingsomeperformanWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "labelMessage";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UILabelMessageMenuBar
        {
            get
            {
                if ((this.mUILabelMessageMenuBar == null))
                {
                    this.mUILabelMessageMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabelMessageMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUILabelMessageMenuBar;
            }
        }
        
        public WinTitleBar UIMissingsomeperformanTitleBar
        {
            get
            {
                if ((this.mUIMissingsomeperformanTitleBar == null))
                {
                    this.mUIMissingsomeperformanTitleBar = new WinTitleBar(this);
                }
                return this.mUIMissingsomeperformanTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UILabelMessageMenuBar1
        {
            get
            {
                if ((this.mUILabelMessageMenuBar1 == null))
                {
                    this.mUILabelMessageMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabelMessageMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUILabelMessageMenuBar1;
            }
        }
        
        public UIMissingsomeperformanScrollBar UIMissingsomeperformanScrollBar
        {
            get
            {
                if ((this.mUIMissingsomeperformanScrollBar == null))
                {
                    this.mUIMissingsomeperformanScrollBar = new UIMissingsomeperformanScrollBar(this);
                }
                return this.mUIMissingsomeperformanScrollBar;
            }
        }
        
        public UIMissingsomeperformanScrollBar1 UIMissingsomeperformanScrollBar1
        {
            get
            {
                if ((this.mUIMissingsomeperformanScrollBar1 == null))
                {
                    this.mUIMissingsomeperformanScrollBar1 = new UIMissingsomeperformanScrollBar1(this);
                }
                return this.mUIMissingsomeperformanScrollBar1;
            }
        }
        
        public WinControl UIMissingsomeperformanGrip
        {
            get
            {
                if ((this.mUIMissingsomeperformanGrip == null))
                {
                    this.mUIMissingsomeperformanGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIMissingsomeperformanGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIMissingsomeperformanGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUILabelMessageMenuBar;
        
        private WinTitleBar mUIMissingsomeperformanTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUILabelMessageMenuBar1;
        
        private UIMissingsomeperformanScrollBar mUIMissingsomeperformanScrollBar;
        
        private UIMissingsomeperformanScrollBar1 mUIMissingsomeperformanScrollBar1;
        
        private WinControl mUIMissingsomeperformanGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMissingsomeperformanScrollBar : WinScrollBar
    {
        
        public UIMissingsomeperformanScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMissingsomeperformanScrollBar1 : WinScrollBar
    {
        
        public UIMissingsomeperformanScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDownloadNowWindow : WinWindow
    {
        
        public UIDownloadNowWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "linkContent";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UILinkContentMenuBar
        {
            get
            {
                if ((this.mUILinkContentMenuBar == null))
                {
                    this.mUILinkContentMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILinkContentMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUILinkContentMenuBar;
            }
        }
        
        public WinTitleBar UIDownloadNowTitleBar
        {
            get
            {
                if ((this.mUIDownloadNowTitleBar == null))
                {
                    this.mUIDownloadNowTitleBar = new WinTitleBar(this);
                }
                return this.mUIDownloadNowTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UILinkContentMenuBar1
        {
            get
            {
                if ((this.mUILinkContentMenuBar1 == null))
                {
                    this.mUILinkContentMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILinkContentMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUILinkContentMenuBar1;
            }
        }
        
        public UIDownloadNowText UIDownloadNowText
        {
            get
            {
                if ((this.mUIDownloadNowText == null))
                {
                    this.mUIDownloadNowText = new UIDownloadNowText(this);
                }
                return this.mUIDownloadNowText;
            }
        }
        
        public UIDownloadNowScrollBar UIDownloadNowScrollBar
        {
            get
            {
                if ((this.mUIDownloadNowScrollBar == null))
                {
                    this.mUIDownloadNowScrollBar = new UIDownloadNowScrollBar(this);
                }
                return this.mUIDownloadNowScrollBar;
            }
        }
        
        public UIDownloadNowScrollBar1 UIDownloadNowScrollBar1
        {
            get
            {
                if ((this.mUIDownloadNowScrollBar1 == null))
                {
                    this.mUIDownloadNowScrollBar1 = new UIDownloadNowScrollBar1(this);
                }
                return this.mUIDownloadNowScrollBar1;
            }
        }
        
        public WinControl UIDownloadNowGrip
        {
            get
            {
                if ((this.mUIDownloadNowGrip == null))
                {
                    this.mUIDownloadNowGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIDownloadNowGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIDownloadNowGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUILinkContentMenuBar;
        
        private WinTitleBar mUIDownloadNowTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUILinkContentMenuBar1;
        
        private UIDownloadNowText mUIDownloadNowText;
        
        private UIDownloadNowScrollBar mUIDownloadNowScrollBar;
        
        private UIDownloadNowScrollBar1 mUIDownloadNowScrollBar1;
        
        private WinControl mUIDownloadNowGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDownloadNowText : WinText
    {
        
        public UIDownloadNowText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinText.PropertyNames.Name] = "Download Now!";
            #endregion
        }
        
        #region Properties
        public WinHyperlink UIDownloadNowHyperlink
        {
            get
            {
                if ((this.mUIDownloadNowHyperlink == null))
                {
                    this.mUIDownloadNowHyperlink = new WinHyperlink(this);
                    #region Search Criteria
                    this.mUIDownloadNowHyperlink.SearchProperties[WinHyperlink.PropertyNames.Name] = "Download Now!";
                    #endregion
                }
                return this.mUIDownloadNowHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private WinHyperlink mUIDownloadNowHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDownloadNowScrollBar : WinScrollBar
    {
        
        public UIDownloadNowScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDownloadNowScrollBar1 : WinScrollBar
    {
        
        public UIDownloadNowScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar3 : WinScrollBar
    {
        
        public UIVerticalScrollBar3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar3 : WinScrollBar
    {
        
        public UIHorizontalScrollBar3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDxTabPageContainerCoWindow : WinWindow
    {
        
        public UIDxTabPageContainerCoWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "dxTabPageContainerControl1";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIDxTabPageContainerCoMenuBar
        {
            get
            {
                if ((this.mUIDxTabPageContainerCoMenuBar == null))
                {
                    this.mUIDxTabPageContainerCoMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIDxTabPageContainerCoMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIDxTabPageContainerCoMenuBar;
            }
        }
        
        public WinTitleBar UIDxTabPageContainerCoTitleBar
        {
            get
            {
                if ((this.mUIDxTabPageContainerCoTitleBar == null))
                {
                    this.mUIDxTabPageContainerCoTitleBar = new WinTitleBar(this);
                }
                return this.mUIDxTabPageContainerCoTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIDxTabPageContainerCoMenuBar1
        {
            get
            {
                if ((this.mUIDxTabPageContainerCoMenuBar1 == null))
                {
                    this.mUIDxTabPageContainerCoMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIDxTabPageContainerCoMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIDxTabPageContainerCoMenuBar1;
            }
        }
        
        public WinClient UITabPageContainerContClient
        {
            get
            {
                if ((this.mUITabPageContainerContClient == null))
                {
                    this.mUITabPageContainerContClient = new WinClient(this);
                    #region Search Criteria
                    this.mUITabPageContainerContClient.SearchProperties[WinControl.PropertyNames.Name] = "TabPageContainerControl";
                    #endregion
                }
                return this.mUITabPageContainerContClient;
            }
        }
        
        public WinScrollBar UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIVerticalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public WinScrollBar UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIHorizontalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIDxTabPageContainerCoGrip
        {
            get
            {
                if ((this.mUIDxTabPageContainerCoGrip == null))
                {
                    this.mUIDxTabPageContainerCoGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIDxTabPageContainerCoGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIDxTabPageContainerCoGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIDxTabPageContainerCoMenuBar;
        
        private WinTitleBar mUIDxTabPageContainerCoTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIDxTabPageContainerCoMenuBar1;
        
        private WinClient mUITabPageContainerContClient;
        
        private WinScrollBar mUIVerticalScrollBar;
        
        private WinScrollBar mUIHorizontalScrollBar;
        
        private WinControl mUIDxTabPageContainerCoGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UITabPageContainerContClient : WinClient
    {
        
        public UITabPageContainerContClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "TabPageContainerControl";
            #endregion
        }
        
        #region Properties
        public WinWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIItemWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIItemWindow;
            }
        }
        
        public WinMenuBar UISystemMenuBar
        {
            get
            {
                if ((this.mUISystemMenuBar == null))
                {
                    this.mUISystemMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISystemMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUISystemMenuBar;
            }
        }
        
        public WinMenuBar UIApplicationMenuBar
        {
            get
            {
                if ((this.mUIApplicationMenuBar == null))
                {
                    this.mUIApplicationMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIApplicationMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIApplicationMenuBar;
            }
        }
        
        public WinTabList UIItemTabList
        {
            get
            {
                if ((this.mUIItemTabList == null))
                {
                    this.mUIItemTabList = new WinTabList(this);
                }
                return this.mUIItemTabList;
            }
        }
        
        public WinScrollBar UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIVerticalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public WinScrollBar UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIHorizontalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUIItemWindow;
        
        private WinMenuBar mUISystemMenuBar;
        
        private WinMenuBar mUIApplicationMenuBar;
        
        private WinTabList mUIItemTabList;
        
        private WinScrollBar mUIVerticalScrollBar;
        
        private WinScrollBar mUIHorizontalScrollBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "10";
            #endregion
        }
        
        #region Properties
        public UIItemTitleBar UIItemTitleBar
        {
            get
            {
                if ((this.mUIItemTitleBar == null))
                {
                    this.mUIItemTitleBar = new UIItemTitleBar(this);
                }
                return this.mUIItemTitleBar;
            }
        }
        
        public UIVerticalScrollBar4 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar4(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar4 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar4(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIItemGrip
        {
            get
            {
                if ((this.mUIItemGrip == null))
                {
                    this.mUIItemGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIItemGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIItemGrip;
            }
        }
        #endregion
        
        #region Fields
        private UIItemTitleBar mUIItemTitleBar;
        
        private UIVerticalScrollBar4 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar4 mUIHorizontalScrollBar;
        
        private WinControl mUIItemGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemTitleBar : WinTitleBar
    {
        
        public UIItemTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar4 : WinScrollBar
    {
        
        public UIVerticalScrollBar4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar4 : WinScrollBar
    {
        
        public UIHorizontalScrollBar4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemTabList : WinTabList
    {
        
        public UIItemTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WinButton(this);
                }
                return this.mUIItemButton;
            }
        }
        
        public WinTabPage UIAccountSummaryTabPage
        {
            get
            {
                if ((this.mUIAccountSummaryTabPage == null))
                {
                    this.mUIAccountSummaryTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUIAccountSummaryTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Account Summary";
                    #endregion
                }
                return this.mUIAccountSummaryTabPage;
            }
        }
        
        public WinTabPage UICampaigns1TabPage
        {
            get
            {
                if ((this.mUICampaigns1TabPage == null))
                {
                    this.mUICampaigns1TabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUICampaigns1TabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Campaigns(1)";
                    #endregion
                }
                return this.mUICampaigns1TabPage;
            }
        }
        
        public WinTabPage UIAdsTabPage
        {
            get
            {
                if ((this.mUIAdsTabPage == null))
                {
                    this.mUIAdsTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUIAdsTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Ads(...)";
                    #endregion
                }
                return this.mUIAdsTabPage;
            }
        }
        
        public WinTabPage UIAccountSummaryTabPage1
        {
            get
            {
                if ((this.mUIAccountSummaryTabPage1 == null))
                {
                    this.mUIAccountSummaryTabPage1 = new WinTabPage(this);
                    #region Search Criteria
                    this.mUIAccountSummaryTabPage1.SearchProperties[WinTabPage.PropertyNames.Name] = "Account Summary";
                    this.mUIAccountSummaryTabPage1.SearchProperties[WinTabPage.PropertyNames.Instance] = "2";
                    #endregion
                }
                return this.mUIAccountSummaryTabPage1;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItemButton;
        
        private WinTabPage mUIAccountSummaryTabPage;
        
        private WinTabPage mUICampaigns1TabPage;
        
        private WinTabPage mUIAdsTabPage;
        
        private WinTabPage mUIAccountSummaryTabPage1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIReportControlFacebooWindow : WinWindow
    {
        
        public UIReportControlFacebooWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ReportControlFacebook";
            #endregion
        }
        
        #region Properties
        public WinClient UIReportControlFacebooClient
        {
            get
            {
                if ((this.mUIReportControlFacebooClient == null))
                {
                    this.mUIReportControlFacebooClient = new WinClient(this);
                }
                return this.mUIReportControlFacebooClient;
            }
        }
        
        public WinWindow UIReportDateSelectContWindow
        {
            get
            {
                if ((this.mUIReportDateSelectContWindow == null))
                {
                    this.mUIReportDateSelectContWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIReportDateSelectContWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIReportDateSelectContWindow.SearchProperties[WinWindow.PropertyNames.Instance] = "25";
                    #endregion
                }
                return this.mUIReportDateSelectContWindow;
            }
        }
        
        public WinWindow UITableLayoutPanel1Window
        {
            get
            {
                if ((this.mUITableLayoutPanel1Window == null))
                {
                    this.mUITableLayoutPanel1Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUITableLayoutPanel1Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUITableLayoutPanel1Window.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    #endregion
                }
                return this.mUITableLayoutPanel1Window;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIReportControlFacebooClient;
        
        private WinWindow mUIReportDateSelectContWindow;
        
        private WinWindow mUITableLayoutPanel1Window;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIReportDateSelectContWindow : WinWindow
    {
        
        public UIReportDateSelectContWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "reportDateSelectControl1";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIReportDateSelectContMenuBar
        {
            get
            {
                if ((this.mUIReportDateSelectContMenuBar == null))
                {
                    this.mUIReportDateSelectContMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIReportDateSelectContMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIReportDateSelectContMenuBar;
            }
        }
        
        public WinTitleBar UIReportDateSelectContTitleBar
        {
            get
            {
                if ((this.mUIReportDateSelectContTitleBar == null))
                {
                    this.mUIReportDateSelectContTitleBar = new WinTitleBar(this);
                }
                return this.mUIReportDateSelectContTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIReportDateSelectContMenuBar1
        {
            get
            {
                if ((this.mUIReportDateSelectContMenuBar1 == null))
                {
                    this.mUIReportDateSelectContMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIReportDateSelectContMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIReportDateSelectContMenuBar1;
            }
        }
        
        public WinClient UIReportDateSelectContClient
        {
            get
            {
                if ((this.mUIReportDateSelectContClient == null))
                {
                    this.mUIReportDateSelectContClient = new WinClient(this);
                }
                return this.mUIReportDateSelectContClient;
            }
        }
        
        public WinWindow UIDateRange07142011072Window
        {
            get
            {
                if ((this.mUIDateRange07142011072Window == null))
                {
                    this.mUIDateRange07142011072Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUIDateRange07142011072Window.SearchProperties[WinWindow.PropertyNames.Name] = "Date Range: 07/14/2011 - 07/20/2011";
                    this.mUIDateRange07142011072Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIDateRange07142011072Window;
            }
        }
        
        public WinText UIDateRange07142011072Text
        {
            get
            {
                if ((this.mUIDateRange07142011072Text == null))
                {
                    this.mUIDateRange07142011072Text = new WinText(this);
                    #region Search Criteria
                    this.mUIDateRange07142011072Text.SearchProperties[WinText.PropertyNames.Name] = "Date Range: 07/14/2011 - 07/20/2011";
                    #endregion
                }
                return this.mUIDateRange07142011072Text;
            }
        }
        
        public WinWindow UILast7DaysWindow
        {
            get
            {
                if ((this.mUILast7DaysWindow == null))
                {
                    this.mUILast7DaysWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUILast7DaysWindow.SearchProperties[WinWindow.PropertyNames.Name] = "Last 7 Days";
                    this.mUILast7DaysWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.BUTTON", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUILast7DaysWindow;
            }
        }
        
        public WinWindow UILast30DaysWindow
        {
            get
            {
                if ((this.mUILast30DaysWindow == null))
                {
                    this.mUILast30DaysWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUILast30DaysWindow.SearchProperties[WinWindow.PropertyNames.Name] = "Last 30 Days";
                    this.mUILast30DaysWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.BUTTON", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUILast30DaysWindow;
            }
        }
        
        public UIVerticalScrollBar5 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar5(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar5 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar5(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIReportDateSelectContGrip
        {
            get
            {
                if ((this.mUIReportDateSelectContGrip == null))
                {
                    this.mUIReportDateSelectContGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIReportDateSelectContGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIReportDateSelectContGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIReportDateSelectContMenuBar;
        
        private WinTitleBar mUIReportDateSelectContTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIReportDateSelectContMenuBar1;
        
        private WinClient mUIReportDateSelectContClient;
        
        private WinWindow mUIDateRange07142011072Window;
        
        private WinText mUIDateRange07142011072Text;
        
        private WinWindow mUILast7DaysWindow;
        
        private WinWindow mUILast30DaysWindow;
        
        private UIVerticalScrollBar5 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar5 mUIHorizontalScrollBar;
        
        private WinControl mUIReportDateSelectContGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar5 : WinScrollBar
    {
        
        public UIVerticalScrollBar5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar5 : WinScrollBar
    {
        
        public UIHorizontalScrollBar5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDateRange07142011072Window : WinWindow
    {
        
        public UIDateRange07142011072Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "labelControl";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UILabelControlMenuBar
        {
            get
            {
                if ((this.mUILabelControlMenuBar == null))
                {
                    this.mUILabelControlMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabelControlMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUILabelControlMenuBar;
            }
        }
        
        public WinTitleBar UIDateRange07142011072TitleBar
        {
            get
            {
                if ((this.mUIDateRange07142011072TitleBar == null))
                {
                    this.mUIDateRange07142011072TitleBar = new WinTitleBar(this);
                }
                return this.mUIDateRange07142011072TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UILabelControlMenuBar1
        {
            get
            {
                if ((this.mUILabelControlMenuBar1 == null))
                {
                    this.mUILabelControlMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabelControlMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUILabelControlMenuBar1;
            }
        }
        
        public UIDateRange07142011072ScrollBar UIDateRange07142011072ScrollBar
        {
            get
            {
                if ((this.mUIDateRange07142011072ScrollBar == null))
                {
                    this.mUIDateRange07142011072ScrollBar = new UIDateRange07142011072ScrollBar(this);
                }
                return this.mUIDateRange07142011072ScrollBar;
            }
        }
        
        public UIDateRange07142011072ScrollBar1 UIDateRange07142011072ScrollBar1
        {
            get
            {
                if ((this.mUIDateRange07142011072ScrollBar1 == null))
                {
                    this.mUIDateRange07142011072ScrollBar1 = new UIDateRange07142011072ScrollBar1(this);
                }
                return this.mUIDateRange07142011072ScrollBar1;
            }
        }
        
        public WinControl UIDateRange07142011072Grip
        {
            get
            {
                if ((this.mUIDateRange07142011072Grip == null))
                {
                    this.mUIDateRange07142011072Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUIDateRange07142011072Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIDateRange07142011072Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUILabelControlMenuBar;
        
        private WinTitleBar mUIDateRange07142011072TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUILabelControlMenuBar1;
        
        private UIDateRange07142011072ScrollBar mUIDateRange07142011072ScrollBar;
        
        private UIDateRange07142011072ScrollBar1 mUIDateRange07142011072ScrollBar1;
        
        private WinControl mUIDateRange07142011072Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDateRange07142011072ScrollBar : WinScrollBar
    {
        
        public UIDateRange07142011072ScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDateRange07142011072ScrollBar1 : WinScrollBar
    {
        
        public UIDateRange07142011072ScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UILast7DaysWindow : WinWindow
    {
        
        public UILast7DaysWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "sageButton7Days";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UISageButton7DaysMenuBar
        {
            get
            {
                if ((this.mUISageButton7DaysMenuBar == null))
                {
                    this.mUISageButton7DaysMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISageButton7DaysMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUISageButton7DaysMenuBar;
            }
        }
        
        public WinTitleBar UILast7DaysTitleBar
        {
            get
            {
                if ((this.mUILast7DaysTitleBar == null))
                {
                    this.mUILast7DaysTitleBar = new WinTitleBar(this);
                }
                return this.mUILast7DaysTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UISageButton7DaysMenuBar1
        {
            get
            {
                if ((this.mUISageButton7DaysMenuBar1 == null))
                {
                    this.mUISageButton7DaysMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISageButton7DaysMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUISageButton7DaysMenuBar1;
            }
        }
        
        public WinButton UILast7DaysButton
        {
            get
            {
                if ((this.mUILast7DaysButton == null))
                {
                    this.mUILast7DaysButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILast7DaysButton.SearchProperties[WinButton.PropertyNames.Name] = "Last 7 Days";
                    #endregion
                }
                return this.mUILast7DaysButton;
            }
        }
        
        public UILast7DaysScrollBar UILast7DaysScrollBar
        {
            get
            {
                if ((this.mUILast7DaysScrollBar == null))
                {
                    this.mUILast7DaysScrollBar = new UILast7DaysScrollBar(this);
                }
                return this.mUILast7DaysScrollBar;
            }
        }
        
        public UILast7DaysScrollBar1 UILast7DaysScrollBar1
        {
            get
            {
                if ((this.mUILast7DaysScrollBar1 == null))
                {
                    this.mUILast7DaysScrollBar1 = new UILast7DaysScrollBar1(this);
                }
                return this.mUILast7DaysScrollBar1;
            }
        }
        
        public WinControl UILast7DaysGrip
        {
            get
            {
                if ((this.mUILast7DaysGrip == null))
                {
                    this.mUILast7DaysGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUILast7DaysGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUILast7DaysGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUISageButton7DaysMenuBar;
        
        private WinTitleBar mUILast7DaysTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUISageButton7DaysMenuBar1;
        
        private WinButton mUILast7DaysButton;
        
        private UILast7DaysScrollBar mUILast7DaysScrollBar;
        
        private UILast7DaysScrollBar1 mUILast7DaysScrollBar1;
        
        private WinControl mUILast7DaysGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UILast7DaysScrollBar : WinScrollBar
    {
        
        public UILast7DaysScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UILast7DaysScrollBar1 : WinScrollBar
    {
        
        public UILast7DaysScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UILast30DaysWindow : WinWindow
    {
        
        public UILast30DaysWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "sageButton30Days";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UISageButton30DaysMenuBar
        {
            get
            {
                if ((this.mUISageButton30DaysMenuBar == null))
                {
                    this.mUISageButton30DaysMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISageButton30DaysMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUISageButton30DaysMenuBar;
            }
        }
        
        public WinTitleBar UILast30DaysTitleBar
        {
            get
            {
                if ((this.mUILast30DaysTitleBar == null))
                {
                    this.mUILast30DaysTitleBar = new WinTitleBar(this);
                }
                return this.mUILast30DaysTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UISageButton30DaysMenuBar1
        {
            get
            {
                if ((this.mUISageButton30DaysMenuBar1 == null))
                {
                    this.mUISageButton30DaysMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISageButton30DaysMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUISageButton30DaysMenuBar1;
            }
        }
        
        public WinButton UILast30DaysButton
        {
            get
            {
                if ((this.mUILast30DaysButton == null))
                {
                    this.mUILast30DaysButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILast30DaysButton.SearchProperties[WinButton.PropertyNames.Name] = "Last 30 Days";
                    #endregion
                }
                return this.mUILast30DaysButton;
            }
        }
        
        public UILast30DaysScrollBar UILast30DaysScrollBar
        {
            get
            {
                if ((this.mUILast30DaysScrollBar == null))
                {
                    this.mUILast30DaysScrollBar = new UILast30DaysScrollBar(this);
                }
                return this.mUILast30DaysScrollBar;
            }
        }
        
        public UILast30DaysScrollBar1 UILast30DaysScrollBar1
        {
            get
            {
                if ((this.mUILast30DaysScrollBar1 == null))
                {
                    this.mUILast30DaysScrollBar1 = new UILast30DaysScrollBar1(this);
                }
                return this.mUILast30DaysScrollBar1;
            }
        }
        
        public WinControl UILast30DaysGrip
        {
            get
            {
                if ((this.mUILast30DaysGrip == null))
                {
                    this.mUILast30DaysGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUILast30DaysGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUILast30DaysGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUISageButton30DaysMenuBar;
        
        private WinTitleBar mUILast30DaysTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUISageButton30DaysMenuBar1;
        
        private WinButton mUILast30DaysButton;
        
        private UILast30DaysScrollBar mUILast30DaysScrollBar;
        
        private UILast30DaysScrollBar1 mUILast30DaysScrollBar1;
        
        private WinControl mUILast30DaysGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UILast30DaysScrollBar : WinScrollBar
    {
        
        public UILast30DaysScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UILast30DaysScrollBar1 : WinScrollBar
    {
        
        public UILast30DaysScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UITableLayoutPanel1Window : WinWindow
    {
        
        public UITableLayoutPanel1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "tableLayoutPanel1";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UITableLayoutPanel1MenuBar
        {
            get
            {
                if ((this.mUITableLayoutPanel1MenuBar == null))
                {
                    this.mUITableLayoutPanel1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUITableLayoutPanel1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUITableLayoutPanel1MenuBar;
            }
        }
        
        public WinTitleBar UITableLayoutPanel1TitleBar
        {
            get
            {
                if ((this.mUITableLayoutPanel1TitleBar == null))
                {
                    this.mUITableLayoutPanel1TitleBar = new WinTitleBar(this);
                }
                return this.mUITableLayoutPanel1TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UITableLayoutPanel1MenuBar1
        {
            get
            {
                if ((this.mUITableLayoutPanel1MenuBar1 == null))
                {
                    this.mUITableLayoutPanel1MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUITableLayoutPanel1MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUITableLayoutPanel1MenuBar1;
            }
        }
        
        public WinClient UITableLayoutPanel1Client
        {
            get
            {
                if ((this.mUITableLayoutPanel1Client == null))
                {
                    this.mUITableLayoutPanel1Client = new WinClient(this);
                }
                return this.mUITableLayoutPanel1Client;
            }
        }
        
        public WinWindow UIPanel5Window
        {
            get
            {
                if ((this.mUIPanel5Window == null))
                {
                    this.mUIPanel5Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUIPanel5Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIPanel5Window.SearchProperties[WinWindow.PropertyNames.Instance] = "17";
                    #endregion
                }
                return this.mUIPanel5Window;
            }
        }
        
        public WinWindow UIPanel3Window
        {
            get
            {
                if ((this.mUIPanel3Window == null))
                {
                    this.mUIPanel3Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUIPanel3Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIPanel3Window.SearchProperties[WinWindow.PropertyNames.Instance] = "13";
                    #endregion
                }
                return this.mUIPanel3Window;
            }
        }
        
        public WinWindow UIPanel2Window
        {
            get
            {
                if ((this.mUIPanel2Window == null))
                {
                    this.mUIPanel2Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUIPanel2Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIPanel2Window.SearchProperties[WinWindow.PropertyNames.Instance] = "6";
                    #endregion
                }
                return this.mUIPanel2Window;
            }
        }
        
        public WinWindow UIPanel4Window
        {
            get
            {
                if ((this.mUIPanel4Window == null))
                {
                    this.mUIPanel4Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUIPanel4Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIPanel4Window.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    #endregion
                }
                return this.mUIPanel4Window;
            }
        }
        
        public WinWindow UIPanel1Window
        {
            get
            {
                if ((this.mUIPanel1Window == null))
                {
                    this.mUIPanel1Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUIPanel1Window.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "No ads in this campaign received impressions in thepast 28 days, so there is no a" +
                        "udience data to display.";
                    this.mUIPanel1Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIPanel1Window;
            }
        }
        
        public UIVerticalScrollBar6 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar6(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar6 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar6(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UITableLayoutPanel1Grip
        {
            get
            {
                if ((this.mUITableLayoutPanel1Grip == null))
                {
                    this.mUITableLayoutPanel1Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUITableLayoutPanel1Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUITableLayoutPanel1Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUITableLayoutPanel1MenuBar;
        
        private WinTitleBar mUITableLayoutPanel1TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUITableLayoutPanel1MenuBar1;
        
        private WinClient mUITableLayoutPanel1Client;
        
        private WinWindow mUIPanel5Window;
        
        private WinWindow mUIPanel3Window;
        
        private WinWindow mUIPanel2Window;
        
        private WinWindow mUIPanel4Window;
        
        private WinWindow mUIPanel1Window;
        
        private UIVerticalScrollBar6 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar6 mUIHorizontalScrollBar;
        
        private WinControl mUITableLayoutPanel1Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar6 : WinScrollBar
    {
        
        public UIVerticalScrollBar6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar6 : WinScrollBar
    {
        
        public UIHorizontalScrollBar6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPanel5Window : WinWindow
    {
        
        public UIPanel5Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "panel5";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIPanel5MenuBar
        {
            get
            {
                if ((this.mUIPanel5MenuBar == null))
                {
                    this.mUIPanel5MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanel5MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIPanel5MenuBar;
            }
        }
        
        public WinTitleBar UIPanel5TitleBar
        {
            get
            {
                if ((this.mUIPanel5TitleBar == null))
                {
                    this.mUIPanel5TitleBar = new WinTitleBar(this);
                }
                return this.mUIPanel5TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIPanel5MenuBar1
        {
            get
            {
                if ((this.mUIPanel5MenuBar1 == null))
                {
                    this.mUIPanel5MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanel5MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIPanel5MenuBar1;
            }
        }
        
        public WinClient UIPanel5Client
        {
            get
            {
                if ((this.mUIPanel5Client == null))
                {
                    this.mUIPanel5Client = new WinClient(this);
                }
                return this.mUIPanel5Client;
            }
        }
        
        public WinWindow UIPanelControl11Window
        {
            get
            {
                if ((this.mUIPanelControl11Window == null))
                {
                    this.mUIPanelControl11Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUIPanelControl11Window.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "panelControl11";
                    this.mUIPanelControl11Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIPanelControl11Window;
            }
        }
        
        public UIPanelControl11Pane UIPanelControl11Pane
        {
            get
            {
                if ((this.mUIPanelControl11Pane == null))
                {
                    this.mUIPanelControl11Pane = new UIPanelControl11Pane(this);
                }
                return this.mUIPanelControl11Pane;
            }
        }
        
        public WinWindow UIAccountPerformanceChWindow
        {
            get
            {
                if ((this.mUIAccountPerformanceChWindow == null))
                {
                    this.mUIAccountPerformanceChWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIAccountPerformanceChWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIAccountPerformanceChWindow.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    #endregion
                }
                return this.mUIAccountPerformanceChWindow;
            }
        }
        
        public UIVerticalScrollBar7 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar7(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar7 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar7(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIPanel5Grip
        {
            get
            {
                if ((this.mUIPanel5Grip == null))
                {
                    this.mUIPanel5Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUIPanel5Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIPanel5Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIPanel5MenuBar;
        
        private WinTitleBar mUIPanel5TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIPanel5MenuBar1;
        
        private WinClient mUIPanel5Client;
        
        private WinWindow mUIPanelControl11Window;
        
        private UIPanelControl11Pane mUIPanelControl11Pane;
        
        private WinWindow mUIAccountPerformanceChWindow;
        
        private UIVerticalScrollBar7 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar7 mUIHorizontalScrollBar;
        
        private WinControl mUIPanel5Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPanelControl11Pane : WinPane
    {
        
        public UIPanelControl11Pane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "panelControl11";
            #endregion
        }
        
        #region Properties
        public WinScrollBar UIScrollbarScrollBar
        {
            get
            {
                if ((this.mUIScrollbarScrollBar == null))
                {
                    this.mUIScrollbarScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIScrollbarScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "scroll bar";
                    #endregion
                }
                return this.mUIScrollbarScrollBar;
            }
        }
        
        public WinText UIAccountPerformanceText
        {
            get
            {
                if ((this.mUIAccountPerformanceText == null))
                {
                    this.mUIAccountPerformanceText = new WinText(this);
                    #region Search Criteria
                    this.mUIAccountPerformanceText.SearchProperties[WinText.PropertyNames.Name] = "Account Performance";
                    #endregion
                }
                return this.mUIAccountPerformanceText;
            }
        }
        #endregion
        
        #region Fields
        private WinScrollBar mUIScrollbarScrollBar;
        
        private WinText mUIAccountPerformanceText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar7 : WinScrollBar
    {
        
        public UIVerticalScrollBar7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar7 : WinScrollBar
    {
        
        public UIHorizontalScrollBar7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPanelControl11Window : WinWindow
    {
        
        public UIPanelControl11Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "panelControl11";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIPanelControl11MenuBar
        {
            get
            {
                if ((this.mUIPanelControl11MenuBar == null))
                {
                    this.mUIPanelControl11MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanelControl11MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIPanelControl11MenuBar;
            }
        }
        
        public WinTitleBar UIPanelControl11TitleBar
        {
            get
            {
                if ((this.mUIPanelControl11TitleBar == null))
                {
                    this.mUIPanelControl11TitleBar = new WinTitleBar(this);
                }
                return this.mUIPanelControl11TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIPanelControl11MenuBar1
        {
            get
            {
                if ((this.mUIPanelControl11MenuBar1 == null))
                {
                    this.mUIPanelControl11MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanelControl11MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIPanelControl11MenuBar1;
            }
        }
        
        public UIScrollbarScrollBar5 UIScrollbarScrollBar
        {
            get
            {
                if ((this.mUIScrollbarScrollBar == null))
                {
                    this.mUIScrollbarScrollBar = new UIScrollbarScrollBar5(this);
                }
                return this.mUIScrollbarScrollBar;
            }
        }
        
        public UIVerticalScrollBar8 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar8(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar8 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar8(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIPanelControl11Grip
        {
            get
            {
                if ((this.mUIPanelControl11Grip == null))
                {
                    this.mUIPanelControl11Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUIPanelControl11Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIPanelControl11Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIPanelControl11MenuBar;
        
        private WinTitleBar mUIPanelControl11TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIPanelControl11MenuBar1;
        
        private UIScrollbarScrollBar5 mUIScrollbarScrollBar;
        
        private UIVerticalScrollBar8 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar8 mUIHorizontalScrollBar;
        
        private WinControl mUIPanelControl11Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIScrollbarScrollBar5 : WinScrollBar
    {
        
        public UIScrollbarScrollBar5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "scroll bar";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnLeftButton
        {
            get
            {
                if ((this.mUIColumnLeftButton == null))
                {
                    this.mUIColumnLeftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnLeftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column Left";
                    #endregion
                }
                return this.mUIColumnLeftButton;
            }
        }
        
        public WinButton UIPageLeftButton
        {
            get
            {
                if ((this.mUIPageLeftButton == null))
                {
                    this.mUIPageLeftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageLeftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Left";
                    #endregion
                }
                return this.mUIPageLeftButton;
            }
        }
        
        public WinButton UIPositionButton
        {
            get
            {
                if ((this.mUIPositionButton == null))
                {
                    this.mUIPositionButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPositionButton.SearchProperties[WinButton.PropertyNames.Name] = "Position";
                    #endregion
                }
                return this.mUIPositionButton;
            }
        }
        
        public WinButton UIPageRightButton
        {
            get
            {
                if ((this.mUIPageRightButton == null))
                {
                    this.mUIPageRightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageRightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Right";
                    #endregion
                }
                return this.mUIPageRightButton;
            }
        }
        
        public WinButton UIColumnRightButton
        {
            get
            {
                if ((this.mUIColumnRightButton == null))
                {
                    this.mUIColumnRightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnRightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column Right";
                    #endregion
                }
                return this.mUIColumnRightButton;
            }
        }
        
        public WinButton UILineUpButton
        {
            get
            {
                if ((this.mUILineUpButton == null))
                {
                    this.mUILineUpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineUpButton.SearchProperties[WinButton.PropertyNames.Name] = "Line Up";
                    #endregion
                }
                return this.mUILineUpButton;
            }
        }
        
        public WinButton UIPageUpButton
        {
            get
            {
                if ((this.mUIPageUpButton == null))
                {
                    this.mUIPageUpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageUpButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Up";
                    #endregion
                }
                return this.mUIPageUpButton;
            }
        }
        
        public WinButton UIPageDownButton
        {
            get
            {
                if ((this.mUIPageDownButton == null))
                {
                    this.mUIPageDownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageDownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Down";
                    #endregion
                }
                return this.mUIPageDownButton;
            }
        }
        
        public WinButton UILineDownButton
        {
            get
            {
                if ((this.mUILineDownButton == null))
                {
                    this.mUILineDownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineDownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line Down";
                    #endregion
                }
                return this.mUILineDownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnLeftButton;
        
        private WinButton mUIPageLeftButton;
        
        private WinButton mUIPositionButton;
        
        private WinButton mUIPageRightButton;
        
        private WinButton mUIColumnRightButton;
        
        private WinButton mUILineUpButton;
        
        private WinButton mUIPageUpButton;
        
        private WinButton mUIPageDownButton;
        
        private WinButton mUILineDownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar8 : WinScrollBar
    {
        
        public UIVerticalScrollBar8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar8 : WinScrollBar
    {
        
        public UIHorizontalScrollBar8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISocialonlyWindow : WinWindow
    {
        
        public UISocialonlyWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkbtnSocialOnly";
            #endregion
        }
        
        #region Properties
        public WinButton UISocialonlyButton
        {
            get
            {
                if ((this.mUISocialonlyButton == null))
                {
                    this.mUISocialonlyButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISocialonlyButton.SearchProperties[WinButton.PropertyNames.Name] = "Social only";
                    #endregion
                }
                return this.mUISocialonlyButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISocialonlyButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIShowDetailWindow : WinWindow
    {
        
        public UIShowDetailWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "checkButton4";
            #endregion
        }
        
        #region Properties
        public WinButton UIShowDetailButton
        {
            get
            {
                if ((this.mUIShowDetailButton == null))
                {
                    this.mUIShowDetailButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIShowDetailButton.SearchProperties[WinButton.PropertyNames.Name] = "Show Detail";
                    #endregion
                }
                return this.mUIShowDetailButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIShowDetailButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMagnifythelowvalueWindow : WinWindow
    {
        
        public UIMagnifythelowvalueWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "checkButton3";
            #endregion
        }
        
        #region Properties
        public WinButton UIMagnifythelowvalueButton
        {
            get
            {
                if ((this.mUIMagnifythelowvalueButton == null))
                {
                    this.mUIMagnifythelowvalueButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMagnifythelowvalueButton.SearchProperties[WinButton.PropertyNames.Name] = "Magnify the low value";
                    #endregion
                }
                return this.mUIMagnifythelowvalueButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIMagnifythelowvalueButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAccountPerformanceChWindow : WinWindow
    {
        
        public UIAccountPerformanceChWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "accountPerformanceChart";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIAccountPerformanceChMenuBar
        {
            get
            {
                if ((this.mUIAccountPerformanceChMenuBar == null))
                {
                    this.mUIAccountPerformanceChMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIAccountPerformanceChMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIAccountPerformanceChMenuBar;
            }
        }
        
        public WinTitleBar UIAccountPerformanceChTitleBar
        {
            get
            {
                if ((this.mUIAccountPerformanceChTitleBar == null))
                {
                    this.mUIAccountPerformanceChTitleBar = new WinTitleBar(this);
                }
                return this.mUIAccountPerformanceChTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIAccountPerformanceChMenuBar1
        {
            get
            {
                if ((this.mUIAccountPerformanceChMenuBar1 == null))
                {
                    this.mUIAccountPerformanceChMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIAccountPerformanceChMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIAccountPerformanceChMenuBar1;
            }
        }
        
        public WinClient UIAccountPerformanceChClient
        {
            get
            {
                if ((this.mUIAccountPerformanceChClient == null))
                {
                    this.mUIAccountPerformanceChClient = new WinClient(this);
                }
                return this.mUIAccountPerformanceChClient;
            }
        }
        
        public UIVerticalScrollBar9 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar9(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar9 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar9(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIAccountPerformanceChGrip
        {
            get
            {
                if ((this.mUIAccountPerformanceChGrip == null))
                {
                    this.mUIAccountPerformanceChGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIAccountPerformanceChGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIAccountPerformanceChGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIAccountPerformanceChMenuBar;
        
        private WinTitleBar mUIAccountPerformanceChTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIAccountPerformanceChMenuBar1;
        
        private WinClient mUIAccountPerformanceChClient;
        
        private UIVerticalScrollBar9 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar9 mUIHorizontalScrollBar;
        
        private WinControl mUIAccountPerformanceChGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar9 : WinScrollBar
    {
        
        public UIVerticalScrollBar9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar9 : WinScrollBar
    {
        
        public UIHorizontalScrollBar9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPanel3Window : WinWindow
    {
        
        public UIPanel3Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "panel3";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIPanel3MenuBar
        {
            get
            {
                if ((this.mUIPanel3MenuBar == null))
                {
                    this.mUIPanel3MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanel3MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIPanel3MenuBar;
            }
        }
        
        public WinTitleBar UIPanel3TitleBar
        {
            get
            {
                if ((this.mUIPanel3TitleBar == null))
                {
                    this.mUIPanel3TitleBar = new WinTitleBar(this);
                }
                return this.mUIPanel3TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIPanel3MenuBar1
        {
            get
            {
                if ((this.mUIPanel3MenuBar1 == null))
                {
                    this.mUIPanel3MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanel3MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIPanel3MenuBar1;
            }
        }
        
        public WinClient UIPanel3Client
        {
            get
            {
                if ((this.mUIPanel3Client == null))
                {
                    this.mUIPanel3Client = new WinClient(this);
                }
                return this.mUIPanel3Client;
            }
        }
        
        public WinWindow UIPanelControl13Window
        {
            get
            {
                if ((this.mUIPanelControl13Window == null))
                {
                    this.mUIPanelControl13Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUIPanelControl13Window.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "panelControl13";
                    this.mUIPanelControl13Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIPanelControl13Window;
            }
        }
        
        public UIPanelControl13Pane UIPanelControl13Pane
        {
            get
            {
                if ((this.mUIPanelControl13Pane == null))
                {
                    this.mUIPanelControl13Pane = new UIPanelControl13Pane(this);
                }
                return this.mUIPanelControl13Pane;
            }
        }
        
        public WinWindow UIAdsPerformanceChartWindow
        {
            get
            {
                if ((this.mUIAdsPerformanceChartWindow == null))
                {
                    this.mUIAdsPerformanceChartWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIAdsPerformanceChartWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIAdsPerformanceChartWindow.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    #endregion
                }
                return this.mUIAdsPerformanceChartWindow;
            }
        }
        
        public UIVerticalScrollBar10 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar10(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar10 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar10(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIPanel3Grip
        {
            get
            {
                if ((this.mUIPanel3Grip == null))
                {
                    this.mUIPanel3Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUIPanel3Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIPanel3Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIPanel3MenuBar;
        
        private WinTitleBar mUIPanel3TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIPanel3MenuBar1;
        
        private WinClient mUIPanel3Client;
        
        private WinWindow mUIPanelControl13Window;
        
        private UIPanelControl13Pane mUIPanelControl13Pane;
        
        private WinWindow mUIAdsPerformanceChartWindow;
        
        private UIVerticalScrollBar10 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar10 mUIHorizontalScrollBar;
        
        private WinControl mUIPanel3Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPanelControl13Pane : WinPane
    {
        
        public UIPanelControl13Pane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "panelControl13";
            #endregion
        }
        
        #region Properties
        public WinScrollBar UIScrollbarScrollBar
        {
            get
            {
                if ((this.mUIScrollbarScrollBar == null))
                {
                    this.mUIScrollbarScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIScrollbarScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "scroll bar";
                    #endregion
                }
                return this.mUIScrollbarScrollBar;
            }
        }
        
        public WinText UIAdsPerformanceText
        {
            get
            {
                if ((this.mUIAdsPerformanceText == null))
                {
                    this.mUIAdsPerformanceText = new WinText(this);
                    #region Search Criteria
                    this.mUIAdsPerformanceText.SearchProperties[WinText.PropertyNames.Name] = "Ads Performance";
                    #endregion
                }
                return this.mUIAdsPerformanceText;
            }
        }
        #endregion
        
        #region Fields
        private WinScrollBar mUIScrollbarScrollBar;
        
        private WinText mUIAdsPerformanceText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar10 : WinScrollBar
    {
        
        public UIVerticalScrollBar10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar10 : WinScrollBar
    {
        
        public UIHorizontalScrollBar10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPanelControl13Window : WinWindow
    {
        
        public UIPanelControl13Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "panelControl13";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIPanelControl13MenuBar
        {
            get
            {
                if ((this.mUIPanelControl13MenuBar == null))
                {
                    this.mUIPanelControl13MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanelControl13MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIPanelControl13MenuBar;
            }
        }
        
        public WinTitleBar UIPanelControl13TitleBar
        {
            get
            {
                if ((this.mUIPanelControl13TitleBar == null))
                {
                    this.mUIPanelControl13TitleBar = new WinTitleBar(this);
                }
                return this.mUIPanelControl13TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIPanelControl13MenuBar1
        {
            get
            {
                if ((this.mUIPanelControl13MenuBar1 == null))
                {
                    this.mUIPanelControl13MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanelControl13MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIPanelControl13MenuBar1;
            }
        }
        
        public UIScrollbarScrollBar6 UIScrollbarScrollBar
        {
            get
            {
                if ((this.mUIScrollbarScrollBar == null))
                {
                    this.mUIScrollbarScrollBar = new UIScrollbarScrollBar6(this);
                }
                return this.mUIScrollbarScrollBar;
            }
        }
        
        public UIVerticalScrollBar11 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar11(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar11 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar11(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIPanelControl13Grip
        {
            get
            {
                if ((this.mUIPanelControl13Grip == null))
                {
                    this.mUIPanelControl13Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUIPanelControl13Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIPanelControl13Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIPanelControl13MenuBar;
        
        private WinTitleBar mUIPanelControl13TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIPanelControl13MenuBar1;
        
        private UIScrollbarScrollBar6 mUIScrollbarScrollBar;
        
        private UIVerticalScrollBar11 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar11 mUIHorizontalScrollBar;
        
        private WinControl mUIPanelControl13Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIScrollbarScrollBar6 : WinScrollBar
    {
        
        public UIScrollbarScrollBar6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "scroll bar";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnLeftButton
        {
            get
            {
                if ((this.mUIColumnLeftButton == null))
                {
                    this.mUIColumnLeftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnLeftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column Left";
                    #endregion
                }
                return this.mUIColumnLeftButton;
            }
        }
        
        public WinButton UIPageLeftButton
        {
            get
            {
                if ((this.mUIPageLeftButton == null))
                {
                    this.mUIPageLeftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageLeftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Left";
                    #endregion
                }
                return this.mUIPageLeftButton;
            }
        }
        
        public WinButton UIPositionButton
        {
            get
            {
                if ((this.mUIPositionButton == null))
                {
                    this.mUIPositionButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPositionButton.SearchProperties[WinButton.PropertyNames.Name] = "Position";
                    #endregion
                }
                return this.mUIPositionButton;
            }
        }
        
        public WinButton UIPageRightButton
        {
            get
            {
                if ((this.mUIPageRightButton == null))
                {
                    this.mUIPageRightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageRightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Right";
                    #endregion
                }
                return this.mUIPageRightButton;
            }
        }
        
        public WinButton UIColumnRightButton
        {
            get
            {
                if ((this.mUIColumnRightButton == null))
                {
                    this.mUIColumnRightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnRightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column Right";
                    #endregion
                }
                return this.mUIColumnRightButton;
            }
        }
        
        public WinButton UILineUpButton
        {
            get
            {
                if ((this.mUILineUpButton == null))
                {
                    this.mUILineUpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineUpButton.SearchProperties[WinButton.PropertyNames.Name] = "Line Up";
                    #endregion
                }
                return this.mUILineUpButton;
            }
        }
        
        public WinButton UIPageUpButton
        {
            get
            {
                if ((this.mUIPageUpButton == null))
                {
                    this.mUIPageUpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageUpButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Up";
                    #endregion
                }
                return this.mUIPageUpButton;
            }
        }
        
        public WinButton UIPageDownButton
        {
            get
            {
                if ((this.mUIPageDownButton == null))
                {
                    this.mUIPageDownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageDownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Down";
                    #endregion
                }
                return this.mUIPageDownButton;
            }
        }
        
        public WinButton UILineDownButton
        {
            get
            {
                if ((this.mUILineDownButton == null))
                {
                    this.mUILineDownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineDownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line Down";
                    #endregion
                }
                return this.mUILineDownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnLeftButton;
        
        private WinButton mUIPageLeftButton;
        
        private WinButton mUIPositionButton;
        
        private WinButton mUIPageRightButton;
        
        private WinButton mUIColumnRightButton;
        
        private WinButton mUILineUpButton;
        
        private WinButton mUIPageUpButton;
        
        private WinButton mUIPageDownButton;
        
        private WinButton mUILineDownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar11 : WinScrollBar
    {
        
        public UIVerticalScrollBar11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar11 : WinScrollBar
    {
        
        public UIHorizontalScrollBar11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAdsPerformanceChartWindow : WinWindow
    {
        
        public UIAdsPerformanceChartWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "adsPerformanceChart";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIAdsPerformanceChartMenuBar
        {
            get
            {
                if ((this.mUIAdsPerformanceChartMenuBar == null))
                {
                    this.mUIAdsPerformanceChartMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIAdsPerformanceChartMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIAdsPerformanceChartMenuBar;
            }
        }
        
        public WinTitleBar UIAdsPerformanceChartTitleBar
        {
            get
            {
                if ((this.mUIAdsPerformanceChartTitleBar == null))
                {
                    this.mUIAdsPerformanceChartTitleBar = new WinTitleBar(this);
                }
                return this.mUIAdsPerformanceChartTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIAdsPerformanceChartMenuBar1
        {
            get
            {
                if ((this.mUIAdsPerformanceChartMenuBar1 == null))
                {
                    this.mUIAdsPerformanceChartMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIAdsPerformanceChartMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIAdsPerformanceChartMenuBar1;
            }
        }
        
        public WinClient UIAdsPerformanceChartClient
        {
            get
            {
                if ((this.mUIAdsPerformanceChartClient == null))
                {
                    this.mUIAdsPerformanceChartClient = new WinClient(this);
                }
                return this.mUIAdsPerformanceChartClient;
            }
        }
        
        public UIVerticalScrollBar12 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar12(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar12 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar12(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIAdsPerformanceChartGrip
        {
            get
            {
                if ((this.mUIAdsPerformanceChartGrip == null))
                {
                    this.mUIAdsPerformanceChartGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIAdsPerformanceChartGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIAdsPerformanceChartGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIAdsPerformanceChartMenuBar;
        
        private WinTitleBar mUIAdsPerformanceChartTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIAdsPerformanceChartMenuBar1;
        
        private WinClient mUIAdsPerformanceChartClient;
        
        private UIVerticalScrollBar12 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar12 mUIHorizontalScrollBar;
        
        private WinControl mUIAdsPerformanceChartGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar12 : WinScrollBar
    {
        
        public UIVerticalScrollBar12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar12 : WinScrollBar
    {
        
        public UIHorizontalScrollBar12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPanel2Window : WinWindow
    {
        
        public UIPanel2Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "panel2";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIPanel2MenuBar
        {
            get
            {
                if ((this.mUIPanel2MenuBar == null))
                {
                    this.mUIPanel2MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanel2MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIPanel2MenuBar;
            }
        }
        
        public WinTitleBar UIPanel2TitleBar
        {
            get
            {
                if ((this.mUIPanel2TitleBar == null))
                {
                    this.mUIPanel2TitleBar = new WinTitleBar(this);
                }
                return this.mUIPanel2TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIPanel2MenuBar1
        {
            get
            {
                if ((this.mUIPanel2MenuBar1 == null))
                {
                    this.mUIPanel2MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanel2MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIPanel2MenuBar1;
            }
        }
        
        public WinClient UIPanel2Client
        {
            get
            {
                if ((this.mUIPanel2Client == null))
                {
                    this.mUIPanel2Client = new WinClient(this);
                }
                return this.mUIPanel2Client;
            }
        }
        
        public WinWindow UIPanelControl15Window
        {
            get
            {
                if ((this.mUIPanelControl15Window == null))
                {
                    this.mUIPanelControl15Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUIPanelControl15Window.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "panelControl15";
                    this.mUIPanelControl15Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIPanelControl15Window;
            }
        }
        
        public UIPanelControl15Pane UIPanelControl15Pane
        {
            get
            {
                if ((this.mUIPanelControl15Pane == null))
                {
                    this.mUIPanelControl15Pane = new UIPanelControl15Pane(this);
                }
                return this.mUIPanelControl15Pane;
            }
        }
        
        public WinWindow UICostTrendChartWindow
        {
            get
            {
                if ((this.mUICostTrendChartWindow == null))
                {
                    this.mUICostTrendChartWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUICostTrendChartWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUICostTrendChartWindow.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    #endregion
                }
                return this.mUICostTrendChartWindow;
            }
        }
        
        public UIVerticalScrollBar13 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar13(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar13 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar13(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIPanel2Grip
        {
            get
            {
                if ((this.mUIPanel2Grip == null))
                {
                    this.mUIPanel2Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUIPanel2Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIPanel2Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIPanel2MenuBar;
        
        private WinTitleBar mUIPanel2TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIPanel2MenuBar1;
        
        private WinClient mUIPanel2Client;
        
        private WinWindow mUIPanelControl15Window;
        
        private UIPanelControl15Pane mUIPanelControl15Pane;
        
        private WinWindow mUICostTrendChartWindow;
        
        private UIVerticalScrollBar13 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar13 mUIHorizontalScrollBar;
        
        private WinControl mUIPanel2Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPanelControl15Pane : WinPane
    {
        
        public UIPanelControl15Pane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "panelControl15";
            #endregion
        }
        
        #region Properties
        public WinScrollBar UIScrollbarScrollBar
        {
            get
            {
                if ((this.mUIScrollbarScrollBar == null))
                {
                    this.mUIScrollbarScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIScrollbarScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "scroll bar";
                    #endregion
                }
                return this.mUIScrollbarScrollBar;
            }
        }
        
        public WinComboBox UISelectComboBox
        {
            get
            {
                if ((this.mUISelectComboBox == null))
                {
                    this.mUISelectComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUISelectComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "-- Select --";
                    #endregion
                }
                return this.mUISelectComboBox;
            }
        }
        
        public WinText UISencondaryMetircText
        {
            get
            {
                if ((this.mUISencondaryMetircText == null))
                {
                    this.mUISencondaryMetircText = new WinText(this);
                    #region Search Criteria
                    this.mUISencondaryMetircText.SearchProperties[WinText.PropertyNames.Name] = "Sencondary Metirc:";
                    #endregion
                }
                return this.mUISencondaryMetircText;
            }
        }
        
        public WinComboBox UISpentComboBox
        {
            get
            {
                if ((this.mUISpentComboBox == null))
                {
                    this.mUISpentComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUISpentComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "Spent";
                    #endregion
                }
                return this.mUISpentComboBox;
            }
        }
        
        public WinText UITrendsText
        {
            get
            {
                if ((this.mUITrendsText == null))
                {
                    this.mUITrendsText = new WinText(this);
                    #region Search Criteria
                    this.mUITrendsText.SearchProperties[WinText.PropertyNames.Name] = "Trends:";
                    #endregion
                }
                return this.mUITrendsText;
            }
        }
        #endregion
        
        #region Fields
        private WinScrollBar mUIScrollbarScrollBar;
        
        private WinComboBox mUISelectComboBox;
        
        private WinText mUISencondaryMetircText;
        
        private WinComboBox mUISpentComboBox;
        
        private WinText mUITrendsText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar13 : WinScrollBar
    {
        
        public UIVerticalScrollBar13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar13 : WinScrollBar
    {
        
        public UIHorizontalScrollBar13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPanelControl15Window : WinWindow
    {
        
        public UIPanelControl15Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "panelControl15";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIPanelControl15MenuBar
        {
            get
            {
                if ((this.mUIPanelControl15MenuBar == null))
                {
                    this.mUIPanelControl15MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanelControl15MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIPanelControl15MenuBar;
            }
        }
        
        public WinTitleBar UIPanelControl15TitleBar
        {
            get
            {
                if ((this.mUIPanelControl15TitleBar == null))
                {
                    this.mUIPanelControl15TitleBar = new WinTitleBar(this);
                }
                return this.mUIPanelControl15TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIPanelControl15MenuBar1
        {
            get
            {
                if ((this.mUIPanelControl15MenuBar1 == null))
                {
                    this.mUIPanelControl15MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanelControl15MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIPanelControl15MenuBar1;
            }
        }
        
        public UIScrollbarScrollBar7 UIScrollbarScrollBar
        {
            get
            {
                if ((this.mUIScrollbarScrollBar == null))
                {
                    this.mUIScrollbarScrollBar = new UIScrollbarScrollBar7(this);
                }
                return this.mUIScrollbarScrollBar;
            }
        }
        
        public UISelectComboBox UISelectComboBox
        {
            get
            {
                if ((this.mUISelectComboBox == null))
                {
                    this.mUISelectComboBox = new UISelectComboBox(this);
                }
                return this.mUISelectComboBox;
            }
        }
        
        public UISpentComboBox UISpentComboBox
        {
            get
            {
                if ((this.mUISpentComboBox == null))
                {
                    this.mUISpentComboBox = new UISpentComboBox(this);
                }
                return this.mUISpentComboBox;
            }
        }
        
        public UIVerticalScrollBar14 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar14(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar14 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar14(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIPanelControl15Grip
        {
            get
            {
                if ((this.mUIPanelControl15Grip == null))
                {
                    this.mUIPanelControl15Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUIPanelControl15Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIPanelControl15Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIPanelControl15MenuBar;
        
        private WinTitleBar mUIPanelControl15TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIPanelControl15MenuBar1;
        
        private UIScrollbarScrollBar7 mUIScrollbarScrollBar;
        
        private UISelectComboBox mUISelectComboBox;
        
        private UISpentComboBox mUISpentComboBox;
        
        private UIVerticalScrollBar14 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar14 mUIHorizontalScrollBar;
        
        private WinControl mUIPanelControl15Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIScrollbarScrollBar7 : WinScrollBar
    {
        
        public UIScrollbarScrollBar7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "scroll bar";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnLeftButton
        {
            get
            {
                if ((this.mUIColumnLeftButton == null))
                {
                    this.mUIColumnLeftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnLeftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column Left";
                    #endregion
                }
                return this.mUIColumnLeftButton;
            }
        }
        
        public WinButton UIPageLeftButton
        {
            get
            {
                if ((this.mUIPageLeftButton == null))
                {
                    this.mUIPageLeftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageLeftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Left";
                    #endregion
                }
                return this.mUIPageLeftButton;
            }
        }
        
        public WinButton UIPositionButton
        {
            get
            {
                if ((this.mUIPositionButton == null))
                {
                    this.mUIPositionButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPositionButton.SearchProperties[WinButton.PropertyNames.Name] = "Position";
                    #endregion
                }
                return this.mUIPositionButton;
            }
        }
        
        public WinButton UIPageRightButton
        {
            get
            {
                if ((this.mUIPageRightButton == null))
                {
                    this.mUIPageRightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageRightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Right";
                    #endregion
                }
                return this.mUIPageRightButton;
            }
        }
        
        public WinButton UIColumnRightButton
        {
            get
            {
                if ((this.mUIColumnRightButton == null))
                {
                    this.mUIColumnRightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnRightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column Right";
                    #endregion
                }
                return this.mUIColumnRightButton;
            }
        }
        
        public WinButton UILineUpButton
        {
            get
            {
                if ((this.mUILineUpButton == null))
                {
                    this.mUILineUpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineUpButton.SearchProperties[WinButton.PropertyNames.Name] = "Line Up";
                    #endregion
                }
                return this.mUILineUpButton;
            }
        }
        
        public WinButton UIPageUpButton
        {
            get
            {
                if ((this.mUIPageUpButton == null))
                {
                    this.mUIPageUpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageUpButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Up";
                    #endregion
                }
                return this.mUIPageUpButton;
            }
        }
        
        public WinButton UIPageDownButton
        {
            get
            {
                if ((this.mUIPageDownButton == null))
                {
                    this.mUIPageDownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageDownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Down";
                    #endregion
                }
                return this.mUIPageDownButton;
            }
        }
        
        public WinButton UILineDownButton
        {
            get
            {
                if ((this.mUILineDownButton == null))
                {
                    this.mUILineDownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineDownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line Down";
                    #endregion
                }
                return this.mUILineDownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnLeftButton;
        
        private WinButton mUIPageLeftButton;
        
        private WinButton mUIPositionButton;
        
        private WinButton mUIPageRightButton;
        
        private WinButton mUIColumnRightButton;
        
        private WinButton mUILineUpButton;
        
        private WinButton mUIPageUpButton;
        
        private WinButton mUIPageDownButton;
        
        private WinButton mUILineDownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISelectComboBox : WinComboBox
    {
        
        public UISelectComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinComboBox.PropertyNames.Name] = "-- Select --";
            #endregion
        }
        
        #region Properties
        public WinText UISelectText
        {
            get
            {
                if ((this.mUISelectText == null))
                {
                    this.mUISelectText = new WinText(this);
                    #region Search Criteria
                    this.mUISelectText.SearchProperties[WinText.PropertyNames.Name] = "-- Select --";
                    #endregion
                }
                return this.mUISelectText;
            }
        }
        
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        
        public WinList UIImageComboBoxEdit2List
        {
            get
            {
                if ((this.mUIImageComboBoxEdit2List == null))
                {
                    this.mUIImageComboBoxEdit2List = new WinList(this);
                    #region Search Criteria
                    this.mUIImageComboBoxEdit2List.SearchProperties[WinList.PropertyNames.Name] = "-- Select --";
                    #endregion
                }
                return this.mUIImageComboBoxEdit2List;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUISelectText;
        
        private WinButton mUIOpenButton;
        
        private WinList mUIImageComboBoxEdit2List;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISpentComboBox : WinComboBox
    {
        
        public UISpentComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinComboBox.PropertyNames.Name] = "Spent";
            #endregion
        }
        
        #region Properties
        public WinText UISpentText
        {
            get
            {
                if ((this.mUISpentText == null))
                {
                    this.mUISpentText = new WinText(this);
                    #region Search Criteria
                    this.mUISpentText.SearchProperties[WinText.PropertyNames.Name] = "Spent";
                    #endregion
                }
                return this.mUISpentText;
            }
        }
        
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        
        public WinList UIImageComboBoxEdit1List
        {
            get
            {
                if ((this.mUIImageComboBoxEdit1List == null))
                {
                    this.mUIImageComboBoxEdit1List = new WinList(this);
                    #region Search Criteria
                    this.mUIImageComboBoxEdit1List.SearchProperties[WinList.PropertyNames.Name] = "Spent";
                    #endregion
                }
                return this.mUIImageComboBoxEdit1List;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUISpentText;
        
        private WinButton mUIOpenButton;
        
        private WinList mUIImageComboBoxEdit1List;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar14 : WinScrollBar
    {
        
        public UIVerticalScrollBar14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar14 : WinScrollBar
    {
        
        public UIHorizontalScrollBar14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIImageComboBoxEdit2Window : WinWindow
    {
        
        public UIImageComboBoxEdit2Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "imageComboBoxEdit2";
            #endregion
        }
        
        #region Properties
        public UIImageComboBoxEdit2List UIImageComboBoxEdit2List
        {
            get
            {
                if ((this.mUIImageComboBoxEdit2List == null))
                {
                    this.mUIImageComboBoxEdit2List = new UIImageComboBoxEdit2List(this);
                }
                return this.mUIImageComboBoxEdit2List;
            }
        }
        #endregion
        
        #region Fields
        private UIImageComboBoxEdit2List mUIImageComboBoxEdit2List;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIImageComboBoxEdit2List : WinList
    {
        
        public UIImageComboBoxEdit2List(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "-- Select --";
            #endregion
        }
        
        #region Properties
        public WinListItem UISelectListItem
        {
            get
            {
                if ((this.mUISelectListItem == null))
                {
                    this.mUISelectListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUISelectListItem.SearchProperties[WinListItem.PropertyNames.Name] = "-- Select --";
                    #endregion
                }
                return this.mUISelectListItem;
            }
        }
        
        public WinListItem UIImpressionsListItem
        {
            get
            {
                if ((this.mUIImpressionsListItem == null))
                {
                    this.mUIImpressionsListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIImpressionsListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Impressions";
                    #endregion
                }
                return this.mUIImpressionsListItem;
            }
        }
        
        public WinListItem UIClicksListItem
        {
            get
            {
                if ((this.mUIClicksListItem == null))
                {
                    this.mUIClicksListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIClicksListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Clicks";
                    #endregion
                }
                return this.mUIClicksListItem;
            }
        }
        
        public WinListItem UICTRListItem
        {
            get
            {
                if ((this.mUICTRListItem == null))
                {
                    this.mUICTRListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUICTRListItem.SearchProperties[WinListItem.PropertyNames.Name] = "CTR";
                    #endregion
                }
                return this.mUICTRListItem;
            }
        }
        
        public WinListItem UIConnectionsListItem
        {
            get
            {
                if ((this.mUIConnectionsListItem == null))
                {
                    this.mUIConnectionsListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIConnectionsListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Connections";
                    #endregion
                }
                return this.mUIConnectionsListItem;
            }
        }
        
        public WinListItem UISocialImpressionsListItem
        {
            get
            {
                if ((this.mUISocialImpressionsListItem == null))
                {
                    this.mUISocialImpressionsListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUISocialImpressionsListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Social Impressions";
                    #endregion
                }
                return this.mUISocialImpressionsListItem;
            }
        }
        
        public WinListItem UISocialClicksListItem
        {
            get
            {
                if ((this.mUISocialClicksListItem == null))
                {
                    this.mUISocialClicksListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUISocialClicksListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Social Clicks";
                    #endregion
                }
                return this.mUISocialClicksListItem;
            }
        }
        
        public WinListItem UIReachListItem
        {
            get
            {
                if ((this.mUIReachListItem == null))
                {
                    this.mUIReachListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIReachListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Reach";
                    #endregion
                }
                return this.mUIReachListItem;
            }
        }
        
        public WinListItem UIFrequencyListItem
        {
            get
            {
                if ((this.mUIFrequencyListItem == null))
                {
                    this.mUIFrequencyListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIFrequencyListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Frequency";
                    #endregion
                }
                return this.mUIFrequencyListItem;
            }
        }
        
        public WinListItem UISocialCTRListItem
        {
            get
            {
                if ((this.mUISocialCTRListItem == null))
                {
                    this.mUISocialCTRListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUISocialCTRListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Social CTR";
                    #endregion
                }
                return this.mUISocialCTRListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUISelectListItem;
        
        private WinListItem mUIImpressionsListItem;
        
        private WinListItem mUIClicksListItem;
        
        private WinListItem mUICTRListItem;
        
        private WinListItem mUIConnectionsListItem;
        
        private WinListItem mUISocialImpressionsListItem;
        
        private WinListItem mUISocialClicksListItem;
        
        private WinListItem mUIReachListItem;
        
        private WinListItem mUIFrequencyListItem;
        
        private WinListItem mUISocialCTRListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIImageComboBoxEdit1Window : WinWindow
    {
        
        public UIImageComboBoxEdit1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "imageComboBoxEdit1";
            #endregion
        }
        
        #region Properties
        public UIImageComboBoxEdit1List UIImageComboBoxEdit1List
        {
            get
            {
                if ((this.mUIImageComboBoxEdit1List == null))
                {
                    this.mUIImageComboBoxEdit1List = new UIImageComboBoxEdit1List(this);
                }
                return this.mUIImageComboBoxEdit1List;
            }
        }
        #endregion
        
        #region Fields
        private UIImageComboBoxEdit1List mUIImageComboBoxEdit1List;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIImageComboBoxEdit1List : WinList
    {
        
        public UIImageComboBoxEdit1List(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Spent";
            #endregion
        }
        
        #region Properties
        public WinListItem UIImpressionsListItem
        {
            get
            {
                if ((this.mUIImpressionsListItem == null))
                {
                    this.mUIImpressionsListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIImpressionsListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Impressions";
                    #endregion
                }
                return this.mUIImpressionsListItem;
            }
        }
        
        public WinListItem UIClicksListItem
        {
            get
            {
                if ((this.mUIClicksListItem == null))
                {
                    this.mUIClicksListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIClicksListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Clicks";
                    #endregion
                }
                return this.mUIClicksListItem;
            }
        }
        
        public WinListItem UISpentListItem
        {
            get
            {
                if ((this.mUISpentListItem == null))
                {
                    this.mUISpentListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUISpentListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Spent";
                    #endregion
                }
                return this.mUISpentListItem;
            }
        }
        
        public WinListItem UICTRListItem
        {
            get
            {
                if ((this.mUICTRListItem == null))
                {
                    this.mUICTRListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUICTRListItem.SearchProperties[WinListItem.PropertyNames.Name] = "CTR";
                    #endregion
                }
                return this.mUICTRListItem;
            }
        }
        
        public WinListItem UIConnectionsListItem
        {
            get
            {
                if ((this.mUIConnectionsListItem == null))
                {
                    this.mUIConnectionsListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIConnectionsListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Connections";
                    #endregion
                }
                return this.mUIConnectionsListItem;
            }
        }
        
        public WinListItem UISocialImpressionsListItem
        {
            get
            {
                if ((this.mUISocialImpressionsListItem == null))
                {
                    this.mUISocialImpressionsListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUISocialImpressionsListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Social Impressions";
                    #endregion
                }
                return this.mUISocialImpressionsListItem;
            }
        }
        
        public WinListItem UISocialClicksListItem
        {
            get
            {
                if ((this.mUISocialClicksListItem == null))
                {
                    this.mUISocialClicksListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUISocialClicksListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Social Clicks";
                    #endregion
                }
                return this.mUISocialClicksListItem;
            }
        }
        
        public WinListItem UIReachListItem
        {
            get
            {
                if ((this.mUIReachListItem == null))
                {
                    this.mUIReachListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIReachListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Reach";
                    #endregion
                }
                return this.mUIReachListItem;
            }
        }
        
        public WinListItem UIFrequencyListItem
        {
            get
            {
                if ((this.mUIFrequencyListItem == null))
                {
                    this.mUIFrequencyListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIFrequencyListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Frequency";
                    #endregion
                }
                return this.mUIFrequencyListItem;
            }
        }
        
        public WinListItem UISocialCTRListItem
        {
            get
            {
                if ((this.mUISocialCTRListItem == null))
                {
                    this.mUISocialCTRListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUISocialCTRListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Social CTR";
                    #endregion
                }
                return this.mUISocialCTRListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUIImpressionsListItem;
        
        private WinListItem mUIClicksListItem;
        
        private WinListItem mUISpentListItem;
        
        private WinListItem mUICTRListItem;
        
        private WinListItem mUIConnectionsListItem;
        
        private WinListItem mUISocialImpressionsListItem;
        
        private WinListItem mUISocialClicksListItem;
        
        private WinListItem mUIReachListItem;
        
        private WinListItem mUIFrequencyListItem;
        
        private WinListItem mUISocialCTRListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UICostTrendChartWindow : WinWindow
    {
        
        public UICostTrendChartWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "costTrendChart";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UICostTrendChartMenuBar
        {
            get
            {
                if ((this.mUICostTrendChartMenuBar == null))
                {
                    this.mUICostTrendChartMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUICostTrendChartMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUICostTrendChartMenuBar;
            }
        }
        
        public WinTitleBar UICostTrendChartTitleBar
        {
            get
            {
                if ((this.mUICostTrendChartTitleBar == null))
                {
                    this.mUICostTrendChartTitleBar = new WinTitleBar(this);
                }
                return this.mUICostTrendChartTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UICostTrendChartMenuBar1
        {
            get
            {
                if ((this.mUICostTrendChartMenuBar1 == null))
                {
                    this.mUICostTrendChartMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUICostTrendChartMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUICostTrendChartMenuBar1;
            }
        }
        
        public WinClient UICostTrendChartClient
        {
            get
            {
                if ((this.mUICostTrendChartClient == null))
                {
                    this.mUICostTrendChartClient = new WinClient(this);
                }
                return this.mUICostTrendChartClient;
            }
        }
        
        public UIVerticalScrollBar15 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar15(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar15 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar15(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UICostTrendChartGrip
        {
            get
            {
                if ((this.mUICostTrendChartGrip == null))
                {
                    this.mUICostTrendChartGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUICostTrendChartGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUICostTrendChartGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUICostTrendChartMenuBar;
        
        private WinTitleBar mUICostTrendChartTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUICostTrendChartMenuBar1;
        
        private WinClient mUICostTrendChartClient;
        
        private UIVerticalScrollBar15 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar15 mUIHorizontalScrollBar;
        
        private WinControl mUICostTrendChartGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar15 : WinScrollBar
    {
        
        public UIVerticalScrollBar15(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar15 : WinScrollBar
    {
        
        public UIHorizontalScrollBar15(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPanel4Window : WinWindow
    {
        
        public UIPanel4Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "panel4";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIPanel4MenuBar
        {
            get
            {
                if ((this.mUIPanel4MenuBar == null))
                {
                    this.mUIPanel4MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanel4MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIPanel4MenuBar;
            }
        }
        
        public WinTitleBar UIPanel4TitleBar
        {
            get
            {
                if ((this.mUIPanel4TitleBar == null))
                {
                    this.mUIPanel4TitleBar = new WinTitleBar(this);
                }
                return this.mUIPanel4TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIPanel4MenuBar1
        {
            get
            {
                if ((this.mUIPanel4MenuBar1 == null))
                {
                    this.mUIPanel4MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanel4MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIPanel4MenuBar1;
            }
        }
        
        public WinClient UIPanel4Client
        {
            get
            {
                if ((this.mUIPanel4Client == null))
                {
                    this.mUIPanel4Client = new WinClient(this);
                }
                return this.mUIPanel4Client;
            }
        }
        
        public WinWindow UIPanelControl14Window
        {
            get
            {
                if ((this.mUIPanelControl14Window == null))
                {
                    this.mUIPanelControl14Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUIPanelControl14Window.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "panelControl14";
                    this.mUIPanelControl14Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIPanelControl14Window;
            }
        }
        
        public UIPanelControl14Pane UIPanelControl14Pane
        {
            get
            {
                if ((this.mUIPanelControl14Pane == null))
                {
                    this.mUIPanelControl14Pane = new UIPanelControl14Pane(this);
                }
                return this.mUIPanelControl14Pane;
            }
        }
        
        public WinWindow UIAudienceChartWindow
        {
            get
            {
                if ((this.mUIAudienceChartWindow == null))
                {
                    this.mUIAudienceChartWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIAudienceChartWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIAudienceChartWindow.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    #endregion
                }
                return this.mUIAudienceChartWindow;
            }
        }
        
        public WinWindow UINoadsinthiscampaignrWindow
        {
            get
            {
                if ((this.mUINoadsinthiscampaignrWindow == null))
                {
                    this.mUINoadsinthiscampaignrWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUINoadsinthiscampaignrWindow.SearchProperties[WinWindow.PropertyNames.Name] = "No ads in this campaign received impressions in the\r\npast 28 days, so there is no" +
                        " audience data to display.";
                    this.mUINoadsinthiscampaignrWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUINoadsinthiscampaignrWindow;
            }
        }
        
        public UIVerticalScrollBar16 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar16(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar16 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar16(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIPanel4Grip
        {
            get
            {
                if ((this.mUIPanel4Grip == null))
                {
                    this.mUIPanel4Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUIPanel4Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIPanel4Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIPanel4MenuBar;
        
        private WinTitleBar mUIPanel4TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIPanel4MenuBar1;
        
        private WinClient mUIPanel4Client;
        
        private WinWindow mUIPanelControl14Window;
        
        private UIPanelControl14Pane mUIPanelControl14Pane;
        
        private WinWindow mUIAudienceChartWindow;
        
        private WinWindow mUINoadsinthiscampaignrWindow;
        
        private UIVerticalScrollBar16 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar16 mUIHorizontalScrollBar;
        
        private WinControl mUIPanel4Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPanelControl14Pane : WinPane
    {
        
        public UIPanelControl14Pane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "panelControl14";
            #endregion
        }
        
        #region Properties
        public WinScrollBar UIScrollbarScrollBar
        {
            get
            {
                if ((this.mUIScrollbarScrollBar == null))
                {
                    this.mUIScrollbarScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIScrollbarScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "scroll bar";
                    #endregion
                }
                return this.mUIScrollbarScrollBar;
            }
        }
        
        public WinText UIAudienceText
        {
            get
            {
                if ((this.mUIAudienceText == null))
                {
                    this.mUIAudienceText = new WinText(this);
                    #region Search Criteria
                    this.mUIAudienceText.SearchProperties[WinText.PropertyNames.Name] = "Audience";
                    #endregion
                }
                return this.mUIAudienceText;
            }
        }
        #endregion
        
        #region Fields
        private WinScrollBar mUIScrollbarScrollBar;
        
        private WinText mUIAudienceText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar16 : WinScrollBar
    {
        
        public UIVerticalScrollBar16(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar16 : WinScrollBar
    {
        
        public UIHorizontalScrollBar16(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPanelControl14Window : WinWindow
    {
        
        public UIPanelControl14Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "panelControl14";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIPanelControl14MenuBar
        {
            get
            {
                if ((this.mUIPanelControl14MenuBar == null))
                {
                    this.mUIPanelControl14MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanelControl14MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIPanelControl14MenuBar;
            }
        }
        
        public WinTitleBar UIPanelControl14TitleBar
        {
            get
            {
                if ((this.mUIPanelControl14TitleBar == null))
                {
                    this.mUIPanelControl14TitleBar = new WinTitleBar(this);
                }
                return this.mUIPanelControl14TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIPanelControl14MenuBar1
        {
            get
            {
                if ((this.mUIPanelControl14MenuBar1 == null))
                {
                    this.mUIPanelControl14MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanelControl14MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIPanelControl14MenuBar1;
            }
        }
        
        public UIScrollbarScrollBar8 UIScrollbarScrollBar
        {
            get
            {
                if ((this.mUIScrollbarScrollBar == null))
                {
                    this.mUIScrollbarScrollBar = new UIScrollbarScrollBar8(this);
                }
                return this.mUIScrollbarScrollBar;
            }
        }
        
        public UIVerticalScrollBar17 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar17(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar17 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar17(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIPanelControl14Grip
        {
            get
            {
                if ((this.mUIPanelControl14Grip == null))
                {
                    this.mUIPanelControl14Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUIPanelControl14Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIPanelControl14Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIPanelControl14MenuBar;
        
        private WinTitleBar mUIPanelControl14TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIPanelControl14MenuBar1;
        
        private UIScrollbarScrollBar8 mUIScrollbarScrollBar;
        
        private UIVerticalScrollBar17 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar17 mUIHorizontalScrollBar;
        
        private WinControl mUIPanelControl14Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIScrollbarScrollBar8 : WinScrollBar
    {
        
        public UIScrollbarScrollBar8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "scroll bar";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnLeftButton
        {
            get
            {
                if ((this.mUIColumnLeftButton == null))
                {
                    this.mUIColumnLeftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnLeftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column Left";
                    #endregion
                }
                return this.mUIColumnLeftButton;
            }
        }
        
        public WinButton UIPageLeftButton
        {
            get
            {
                if ((this.mUIPageLeftButton == null))
                {
                    this.mUIPageLeftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageLeftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Left";
                    #endregion
                }
                return this.mUIPageLeftButton;
            }
        }
        
        public WinButton UIPositionButton
        {
            get
            {
                if ((this.mUIPositionButton == null))
                {
                    this.mUIPositionButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPositionButton.SearchProperties[WinButton.PropertyNames.Name] = "Position";
                    #endregion
                }
                return this.mUIPositionButton;
            }
        }
        
        public WinButton UIPageRightButton
        {
            get
            {
                if ((this.mUIPageRightButton == null))
                {
                    this.mUIPageRightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageRightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Right";
                    #endregion
                }
                return this.mUIPageRightButton;
            }
        }
        
        public WinButton UIColumnRightButton
        {
            get
            {
                if ((this.mUIColumnRightButton == null))
                {
                    this.mUIColumnRightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnRightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column Right";
                    #endregion
                }
                return this.mUIColumnRightButton;
            }
        }
        
        public WinButton UILineUpButton
        {
            get
            {
                if ((this.mUILineUpButton == null))
                {
                    this.mUILineUpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineUpButton.SearchProperties[WinButton.PropertyNames.Name] = "Line Up";
                    #endregion
                }
                return this.mUILineUpButton;
            }
        }
        
        public WinButton UIPageUpButton
        {
            get
            {
                if ((this.mUIPageUpButton == null))
                {
                    this.mUIPageUpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageUpButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Up";
                    #endregion
                }
                return this.mUIPageUpButton;
            }
        }
        
        public WinButton UIPageDownButton
        {
            get
            {
                if ((this.mUIPageDownButton == null))
                {
                    this.mUIPageDownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageDownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Down";
                    #endregion
                }
                return this.mUIPageDownButton;
            }
        }
        
        public WinButton UILineDownButton
        {
            get
            {
                if ((this.mUILineDownButton == null))
                {
                    this.mUILineDownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineDownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line Down";
                    #endregion
                }
                return this.mUILineDownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnLeftButton;
        
        private WinButton mUIPageLeftButton;
        
        private WinButton mUIPositionButton;
        
        private WinButton mUIPageRightButton;
        
        private WinButton mUIColumnRightButton;
        
        private WinButton mUILineUpButton;
        
        private WinButton mUIPageUpButton;
        
        private WinButton mUIPageDownButton;
        
        private WinButton mUILineDownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar17 : WinScrollBar
    {
        
        public UIVerticalScrollBar17(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar17 : WinScrollBar
    {
        
        public UIHorizontalScrollBar17(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIProgressForTargetedPWindow : WinWindow
    {
        
        public UIProgressForTargetedPWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "progressForTargetedPeople1";
            #endregion
        }
        
        #region Properties
        public WinClient UIProgressForTargetedPClient
        {
            get
            {
                if ((this.mUIProgressForTargetedPClient == null))
                {
                    this.mUIProgressForTargetedPClient = new WinClient(this);
                }
                return this.mUIProgressForTargetedPClient;
            }
        }
        
        public WinWindow UIGetTargetedPeopleWindow
        {
            get
            {
                if ((this.mUIGetTargetedPeopleWindow == null))
                {
                    this.mUIGetTargetedPeopleWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIGetTargetedPeopleWindow.SearchProperties[WinWindow.PropertyNames.Name] = "Get Targeted People";
                    this.mUIGetTargetedPeopleWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.BUTTON", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIGetTargetedPeopleWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIProgressForTargetedPClient;
        
        private WinWindow mUIGetTargetedPeopleWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIGetTargetedPeopleWindow : WinWindow
    {
        
        public UIGetTargetedPeopleWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnGetTargeted";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIBtnGetTargetedMenuBar
        {
            get
            {
                if ((this.mUIBtnGetTargetedMenuBar == null))
                {
                    this.mUIBtnGetTargetedMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIBtnGetTargetedMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIBtnGetTargetedMenuBar;
            }
        }
        
        public WinTitleBar UIGetTargetedPeopleTitleBar
        {
            get
            {
                if ((this.mUIGetTargetedPeopleTitleBar == null))
                {
                    this.mUIGetTargetedPeopleTitleBar = new WinTitleBar(this);
                }
                return this.mUIGetTargetedPeopleTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIBtnGetTargetedMenuBar1
        {
            get
            {
                if ((this.mUIBtnGetTargetedMenuBar1 == null))
                {
                    this.mUIBtnGetTargetedMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIBtnGetTargetedMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIBtnGetTargetedMenuBar1;
            }
        }
        
        public WinButton UIGetTargetedPeopleButton
        {
            get
            {
                if ((this.mUIGetTargetedPeopleButton == null))
                {
                    this.mUIGetTargetedPeopleButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIGetTargetedPeopleButton.SearchProperties[WinButton.PropertyNames.Name] = "Get Targeted People";
                    #endregion
                }
                return this.mUIGetTargetedPeopleButton;
            }
        }
        
        public UIGetTargetedPeopleScrollBar UIGetTargetedPeopleScrollBar
        {
            get
            {
                if ((this.mUIGetTargetedPeopleScrollBar == null))
                {
                    this.mUIGetTargetedPeopleScrollBar = new UIGetTargetedPeopleScrollBar(this);
                }
                return this.mUIGetTargetedPeopleScrollBar;
            }
        }
        
        public UIGetTargetedPeopleScrollBar1 UIGetTargetedPeopleScrollBar1
        {
            get
            {
                if ((this.mUIGetTargetedPeopleScrollBar1 == null))
                {
                    this.mUIGetTargetedPeopleScrollBar1 = new UIGetTargetedPeopleScrollBar1(this);
                }
                return this.mUIGetTargetedPeopleScrollBar1;
            }
        }
        
        public WinControl UIGetTargetedPeopleGrip
        {
            get
            {
                if ((this.mUIGetTargetedPeopleGrip == null))
                {
                    this.mUIGetTargetedPeopleGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIGetTargetedPeopleGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIGetTargetedPeopleGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIBtnGetTargetedMenuBar;
        
        private WinTitleBar mUIGetTargetedPeopleTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIBtnGetTargetedMenuBar1;
        
        private WinButton mUIGetTargetedPeopleButton;
        
        private UIGetTargetedPeopleScrollBar mUIGetTargetedPeopleScrollBar;
        
        private UIGetTargetedPeopleScrollBar1 mUIGetTargetedPeopleScrollBar1;
        
        private WinControl mUIGetTargetedPeopleGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIGetTargetedPeopleScrollBar : WinScrollBar
    {
        
        public UIGetTargetedPeopleScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIGetTargetedPeopleScrollBar1 : WinScrollBar
    {
        
        public UIGetTargetedPeopleScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAudienceChartWindow : WinWindow
    {
        
        public UIAudienceChartWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "audienceChart";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIAudienceChartMenuBar
        {
            get
            {
                if ((this.mUIAudienceChartMenuBar == null))
                {
                    this.mUIAudienceChartMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIAudienceChartMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIAudienceChartMenuBar;
            }
        }
        
        public WinTitleBar UIAudienceChartTitleBar
        {
            get
            {
                if ((this.mUIAudienceChartTitleBar == null))
                {
                    this.mUIAudienceChartTitleBar = new WinTitleBar(this);
                }
                return this.mUIAudienceChartTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIAudienceChartMenuBar1
        {
            get
            {
                if ((this.mUIAudienceChartMenuBar1 == null))
                {
                    this.mUIAudienceChartMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIAudienceChartMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIAudienceChartMenuBar1;
            }
        }
        
        public WinClient UIAudienceChartClient
        {
            get
            {
                if ((this.mUIAudienceChartClient == null))
                {
                    this.mUIAudienceChartClient = new WinClient(this);
                }
                return this.mUIAudienceChartClient;
            }
        }
        
        public UIVerticalScrollBar18 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar18(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar18 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar18(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIAudienceChartGrip
        {
            get
            {
                if ((this.mUIAudienceChartGrip == null))
                {
                    this.mUIAudienceChartGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIAudienceChartGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIAudienceChartGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIAudienceChartMenuBar;
        
        private WinTitleBar mUIAudienceChartTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIAudienceChartMenuBar1;
        
        private WinClient mUIAudienceChartClient;
        
        private UIVerticalScrollBar18 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar18 mUIHorizontalScrollBar;
        
        private WinControl mUIAudienceChartGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar18 : WinScrollBar
    {
        
        public UIVerticalScrollBar18(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar18 : WinScrollBar
    {
        
        public UIHorizontalScrollBar18(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UINoadsinthiscampaignrWindow : WinWindow
    {
        
        public UINoadsinthiscampaignrWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textForNoReachStat";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UITextForNoReachStatMenuBar
        {
            get
            {
                if ((this.mUITextForNoReachStatMenuBar == null))
                {
                    this.mUITextForNoReachStatMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUITextForNoReachStatMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUITextForNoReachStatMenuBar;
            }
        }
        
        public WinTitleBar UINoadsinthiscampaignrTitleBar
        {
            get
            {
                if ((this.mUINoadsinthiscampaignrTitleBar == null))
                {
                    this.mUINoadsinthiscampaignrTitleBar = new WinTitleBar(this);
                }
                return this.mUINoadsinthiscampaignrTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UITextForNoReachStatMenuBar1
        {
            get
            {
                if ((this.mUITextForNoReachStatMenuBar1 == null))
                {
                    this.mUITextForNoReachStatMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUITextForNoReachStatMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUITextForNoReachStatMenuBar1;
            }
        }
        
        public WinText UINoadsinthiscampaignrText
        {
            get
            {
                if ((this.mUINoadsinthiscampaignrText == null))
                {
                    this.mUINoadsinthiscampaignrText = new WinText(this);
                    #region Search Criteria
                    this.mUINoadsinthiscampaignrText.SearchProperties[WinText.PropertyNames.Name] = "No ads in this campaign received impressions in thepast 28 days, so there is no a" +
                        "udience data to display.";
                    #endregion
                }
                return this.mUINoadsinthiscampaignrText;
            }
        }
        
        public UINoadsinthiscampaignrScrollBar UINoadsinthiscampaignrScrollBar
        {
            get
            {
                if ((this.mUINoadsinthiscampaignrScrollBar == null))
                {
                    this.mUINoadsinthiscampaignrScrollBar = new UINoadsinthiscampaignrScrollBar(this);
                }
                return this.mUINoadsinthiscampaignrScrollBar;
            }
        }
        
        public UINoadsinthiscampaignrScrollBar1 UINoadsinthiscampaignrScrollBar1
        {
            get
            {
                if ((this.mUINoadsinthiscampaignrScrollBar1 == null))
                {
                    this.mUINoadsinthiscampaignrScrollBar1 = new UINoadsinthiscampaignrScrollBar1(this);
                }
                return this.mUINoadsinthiscampaignrScrollBar1;
            }
        }
        
        public WinControl UINoadsinthiscampaignrGrip
        {
            get
            {
                if ((this.mUINoadsinthiscampaignrGrip == null))
                {
                    this.mUINoadsinthiscampaignrGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUINoadsinthiscampaignrGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUINoadsinthiscampaignrGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUITextForNoReachStatMenuBar;
        
        private WinTitleBar mUINoadsinthiscampaignrTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUITextForNoReachStatMenuBar1;
        
        private WinText mUINoadsinthiscampaignrText;
        
        private UINoadsinthiscampaignrScrollBar mUINoadsinthiscampaignrScrollBar;
        
        private UINoadsinthiscampaignrScrollBar1 mUINoadsinthiscampaignrScrollBar1;
        
        private WinControl mUINoadsinthiscampaignrGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UINoadsinthiscampaignrScrollBar : WinScrollBar
    {
        
        public UINoadsinthiscampaignrScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UINoadsinthiscampaignrScrollBar1 : WinScrollBar
    {
        
        public UINoadsinthiscampaignrScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPanel1Window1 : WinWindow
    {
        
        public UIPanel1Window1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "panel1";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIPanel1MenuBar
        {
            get
            {
                if ((this.mUIPanel1MenuBar == null))
                {
                    this.mUIPanel1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanel1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIPanel1MenuBar;
            }
        }
        
        public WinTitleBar UIPanel1TitleBar
        {
            get
            {
                if ((this.mUIPanel1TitleBar == null))
                {
                    this.mUIPanel1TitleBar = new WinTitleBar(this);
                }
                return this.mUIPanel1TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIPanel1MenuBar1
        {
            get
            {
                if ((this.mUIPanel1MenuBar1 == null))
                {
                    this.mUIPanel1MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanel1MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIPanel1MenuBar1;
            }
        }
        
        public UINoadsinthiscampaignrClient UINoadsinthiscampaignrClient
        {
            get
            {
                if ((this.mUINoadsinthiscampaignrClient == null))
                {
                    this.mUINoadsinthiscampaignrClient = new UINoadsinthiscampaignrClient(this);
                }
                return this.mUINoadsinthiscampaignrClient;
            }
        }
        
        public UIVerticalScrollBar19 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar19(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar19 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar19(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIPanel1Grip
        {
            get
            {
                if ((this.mUIPanel1Grip == null))
                {
                    this.mUIPanel1Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUIPanel1Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIPanel1Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIPanel1MenuBar;
        
        private WinTitleBar mUIPanel1TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIPanel1MenuBar1;
        
        private UINoadsinthiscampaignrClient mUINoadsinthiscampaignrClient;
        
        private UIVerticalScrollBar19 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar19 mUIHorizontalScrollBar;
        
        private WinControl mUIPanel1Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UINoadsinthiscampaignrClient : WinClient
    {
        
        public UINoadsinthiscampaignrClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "No ads in this campaign received impressions in thepast 28 days, so there is no a" +
                "udience data to display.";
            #endregion
        }
        
        #region Properties
        public WinWindow UIGrdCtrSummaryWindow
        {
            get
            {
                if ((this.mUIGrdCtrSummaryWindow == null))
                {
                    this.mUIGrdCtrSummaryWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIGrdCtrSummaryWindow.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "No ads in this campaign received impressions in thepast 28 days, so there is no a" +
                        "udience data to display.";
                    this.mUIGrdCtrSummaryWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIGrdCtrSummaryWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUIGrdCtrSummaryWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar19 : WinScrollBar
    {
        
        public UIVerticalScrollBar19(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar19 : WinScrollBar
    {
        
        public UIHorizontalScrollBar19(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIGrdCtrSummaryWindow : WinWindow
    {
        
        public UIGrdCtrSummaryWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "grdCtrSummary";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIGrdCtrSummaryMenuBar
        {
            get
            {
                if ((this.mUIGrdCtrSummaryMenuBar == null))
                {
                    this.mUIGrdCtrSummaryMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIGrdCtrSummaryMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIGrdCtrSummaryMenuBar;
            }
        }
        
        public WinTitleBar UIGrdCtrSummaryTitleBar
        {
            get
            {
                if ((this.mUIGrdCtrSummaryTitleBar == null))
                {
                    this.mUIGrdCtrSummaryTitleBar = new WinTitleBar(this);
                }
                return this.mUIGrdCtrSummaryTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIGrdCtrSummaryMenuBar1
        {
            get
            {
                if ((this.mUIGrdCtrSummaryMenuBar1 == null))
                {
                    this.mUIGrdCtrSummaryMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIGrdCtrSummaryMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIGrdCtrSummaryMenuBar1;
            }
        }
        
        public UINoadsinthiscampaignrTable UINoadsinthiscampaignrTable
        {
            get
            {
                if ((this.mUINoadsinthiscampaignrTable == null))
                {
                    this.mUINoadsinthiscampaignrTable = new UINoadsinthiscampaignrTable(this);
                }
                return this.mUINoadsinthiscampaignrTable;
            }
        }
        
        public UIRow1Row UIRow1Row
        {
            get
            {
                if ((this.mUIRow1Row == null))
                {
                    this.mUIRow1Row = new UIRow1Row(this);
                }
                return this.mUIRow1Row;
            }
        }
        
        public UIRow2Row UIRow2Row
        {
            get
            {
                if ((this.mUIRow2Row == null))
                {
                    this.mUIRow2Row = new UIRow2Row(this);
                }
                return this.mUIRow2Row;
            }
        }
        
        public UIRow3Row UIRow3Row
        {
            get
            {
                if ((this.mUIRow3Row == null))
                {
                    this.mUIRow3Row = new UIRow3Row(this);
                }
                return this.mUIRow3Row;
            }
        }
        
        public UIRow4Row UIRow4Row
        {
            get
            {
                if ((this.mUIRow4Row == null))
                {
                    this.mUIRow4Row = new UIRow4Row(this);
                }
                return this.mUIRow4Row;
            }
        }
        
        public UIRow5Row UIRow5Row
        {
            get
            {
                if ((this.mUIRow5Row == null))
                {
                    this.mUIRow5Row = new UIRow5Row(this);
                }
                return this.mUIRow5Row;
            }
        }
        
        public UIRow6Row UIRow6Row
        {
            get
            {
                if ((this.mUIRow6Row == null))
                {
                    this.mUIRow6Row = new UIRow6Row(this);
                }
                return this.mUIRow6Row;
            }
        }
        
        public UIRow7Row UIRow7Row
        {
            get
            {
                if ((this.mUIRow7Row == null))
                {
                    this.mUIRow7Row = new UIRow7Row(this);
                }
                return this.mUIRow7Row;
            }
        }
        
        public UIRow8Row UIRow8Row
        {
            get
            {
                if ((this.mUIRow8Row == null))
                {
                    this.mUIRow8Row = new UIRow8Row(this);
                }
                return this.mUIRow8Row;
            }
        }
        
        public UIRow9Row UIRow9Row
        {
            get
            {
                if ((this.mUIRow9Row == null))
                {
                    this.mUIRow9Row = new UIRow9Row(this);
                }
                return this.mUIRow9Row;
            }
        }
        
        public UIRow10Row UIRow10Row
        {
            get
            {
                if ((this.mUIRow10Row == null))
                {
                    this.mUIRow10Row = new UIRow10Row(this);
                }
                return this.mUIRow10Row;
            }
        }
        
        public UIScrollbarScrollBar9 UIScrollbarScrollBar
        {
            get
            {
                if ((this.mUIScrollbarScrollBar == null))
                {
                    this.mUIScrollbarScrollBar = new UIScrollbarScrollBar9(this);
                }
                return this.mUIScrollbarScrollBar;
            }
        }
        
        public UIVerticalScrollBar20 UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar20(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar20 UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar20(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIGrdCtrSummaryGrip
        {
            get
            {
                if ((this.mUIGrdCtrSummaryGrip == null))
                {
                    this.mUIGrdCtrSummaryGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIGrdCtrSummaryGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIGrdCtrSummaryGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIGrdCtrSummaryMenuBar;
        
        private WinTitleBar mUIGrdCtrSummaryTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIGrdCtrSummaryMenuBar1;
        
        private UINoadsinthiscampaignrTable mUINoadsinthiscampaignrTable;
        
        private UIRow1Row mUIRow1Row;
        
        private UIRow2Row mUIRow2Row;
        
        private UIRow3Row mUIRow3Row;
        
        private UIRow4Row mUIRow4Row;
        
        private UIRow5Row mUIRow5Row;
        
        private UIRow6Row mUIRow6Row;
        
        private UIRow7Row mUIRow7Row;
        
        private UIRow8Row mUIRow8Row;
        
        private UIRow9Row mUIRow9Row;
        
        private UIRow10Row mUIRow10Row;
        
        private UIScrollbarScrollBar9 mUIScrollbarScrollBar;
        
        private UIVerticalScrollBar20 mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar20 mUIHorizontalScrollBar;
        
        private WinControl mUIGrdCtrSummaryGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UINoadsinthiscampaignrTable : WinTable
    {
        
        public UINoadsinthiscampaignrTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTable.PropertyNames.Name] = "No ads in this campaign received impressions in thepast 28 days, so there is no a" +
                "udience data to display.";
            #endregion
        }
        
        #region Properties
        public WinClient UIHeaderPanelClient
        {
            get
            {
                if ((this.mUIHeaderPanelClient == null))
                {
                    this.mUIHeaderPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIHeaderPanelClient.SearchProperties[WinControl.PropertyNames.Name] = "Header Panel";
                    #endregion
                }
                return this.mUIHeaderPanelClient;
            }
        }
        
        public UIHeaderPanelClient1 UIHeaderPanelClient1
        {
            get
            {
                if ((this.mUIHeaderPanelClient1 == null))
                {
                    this.mUIHeaderPanelClient1 = new UIHeaderPanelClient1(this);
                }
                return this.mUIHeaderPanelClient1;
            }
        }
        
        public UIDataPanelClient UIDataPanelClient
        {
            get
            {
                if ((this.mUIDataPanelClient == null))
                {
                    this.mUIDataPanelClient = new UIDataPanelClient(this);
                }
                return this.mUIDataPanelClient;
            }
        }
        
        public WinScrollBar UIScrollbarScrollBar
        {
            get
            {
                if ((this.mUIScrollbarScrollBar == null))
                {
                    this.mUIScrollbarScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIScrollbarScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "scroll bar";
                    #endregion
                }
                return this.mUIScrollbarScrollBar;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIHeaderPanelClient;
        
        private UIHeaderPanelClient1 mUIHeaderPanelClient1;
        
        private UIDataPanelClient mUIDataPanelClient;
        
        private WinScrollBar mUIScrollbarScrollBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHeaderPanelClient1 : WinClient
    {
        
        public UIHeaderPanelClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinRowHeader UIItemRowHeader
        {
            get
            {
                if ((this.mUIItemRowHeader == null))
                {
                    this.mUIItemRowHeader = new WinRowHeader(this);
                }
                return this.mUIItemRowHeader;
            }
        }
        
        public WinRowHeader UIItemRowHeader1
        {
            get
            {
                if ((this.mUIItemRowHeader1 == null))
                {
                    this.mUIItemRowHeader1 = new WinRowHeader(this);
                }
                return this.mUIItemRowHeader1;
            }
        }
        
        public WinRowHeader UIItemRowHeader2
        {
            get
            {
                if ((this.mUIItemRowHeader2 == null))
                {
                    this.mUIItemRowHeader2 = new WinRowHeader(this);
                }
                return this.mUIItemRowHeader2;
            }
        }
        
        public WinRowHeader UIItemRowHeader3
        {
            get
            {
                if ((this.mUIItemRowHeader3 == null))
                {
                    this.mUIItemRowHeader3 = new WinRowHeader(this);
                }
                return this.mUIItemRowHeader3;
            }
        }
        #endregion
        
        #region Fields
        private WinRowHeader mUIItemRowHeader;
        
        private WinRowHeader mUIItemRowHeader1;
        
        private WinRowHeader mUIItemRowHeader2;
        
        private WinRowHeader mUIItemRowHeader3;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDataPanelClient : WinClient
    {
        
        public UIDataPanelClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Data Panel";
            #endregion
        }
        
        #region Properties
        public WinRow UIRow1Row
        {
            get
            {
                if ((this.mUIRow1Row == null))
                {
                    this.mUIRow1Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow1Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 1";
                    this.mUIRow1Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow1Row;
            }
        }
        
        public WinRow UIRow2Row
        {
            get
            {
                if ((this.mUIRow2Row == null))
                {
                    this.mUIRow2Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow2Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 2";
                    this.mUIRow2Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow2Row;
            }
        }
        
        public WinRow UIRow3Row
        {
            get
            {
                if ((this.mUIRow3Row == null))
                {
                    this.mUIRow3Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow3Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 3";
                    this.mUIRow3Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow3Row;
            }
        }
        
        public WinRow UIRow4Row
        {
            get
            {
                if ((this.mUIRow4Row == null))
                {
                    this.mUIRow4Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow4Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 4";
                    this.mUIRow4Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow4Row;
            }
        }
        
        public WinRow UIRow5Row
        {
            get
            {
                if ((this.mUIRow5Row == null))
                {
                    this.mUIRow5Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow5Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 5";
                    this.mUIRow5Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow5Row;
            }
        }
        
        public WinRow UIRow6Row
        {
            get
            {
                if ((this.mUIRow6Row == null))
                {
                    this.mUIRow6Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow6Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 6";
                    this.mUIRow6Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow6Row;
            }
        }
        
        public WinRow UIRow7Row
        {
            get
            {
                if ((this.mUIRow7Row == null))
                {
                    this.mUIRow7Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow7Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 7";
                    this.mUIRow7Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow7Row;
            }
        }
        
        public WinRow UIRow8Row
        {
            get
            {
                if ((this.mUIRow8Row == null))
                {
                    this.mUIRow8Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow8Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 8";
                    this.mUIRow8Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow8Row;
            }
        }
        
        public WinRow UIRow9Row
        {
            get
            {
                if ((this.mUIRow9Row == null))
                {
                    this.mUIRow9Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow9Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 9";
                    this.mUIRow9Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow9Row;
            }
        }
        
        public WinRow UIRow10Row
        {
            get
            {
                if ((this.mUIRow10Row == null))
                {
                    this.mUIRow10Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow10Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 10";
                    this.mUIRow10Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow10Row;
            }
        }
        #endregion
        
        #region Fields
        private WinRow mUIRow1Row;
        
        private WinRow mUIRow2Row;
        
        private WinRow mUIRow3Row;
        
        private WinRow mUIRow4Row;
        
        private WinRow mUIRow5Row;
        
        private WinRow mUIRow6Row;
        
        private WinRow mUIRow7Row;
        
        private WinRow mUIRow8Row;
        
        private WinRow mUIRow9Row;
        
        private WinRow mUIRow10Row;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow1Row : WinRow
    {
        
        public UIRow1Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Name] = "Row 1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIImpressionsCell
        {
            get
            {
                if ((this.mUIImpressionsCell == null))
                {
                    this.mUIImpressionsCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIImpressionsCell.SearchProperties[WinCell.PropertyNames.Value] = "Impressions";
                    #endregion
                }
                return this.mUIImpressionsCell;
            }
        }
        
        public WinCell UIItem0Cell
        {
            get
            {
                if ((this.mUIItem0Cell == null))
                {
                    this.mUIItem0Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell.SearchProperties[WinCell.PropertyNames.Value] = "0";
                    #endregion
                }
                return this.mUIItem0Cell;
            }
        }
        
        public WinCell UIItem0Cell1
        {
            get
            {
                if ((this.mUIItem0Cell1 == null))
                {
                    this.mUIItem0Cell1 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell1.SearchProperties[WinCell.PropertyNames.Value] = "0";
                    #endregion
                }
                return this.mUIItem0Cell1;
            }
        }
        
        public WinCell UIItem0Cell2
        {
            get
            {
                if ((this.mUIItem0Cell2 == null))
                {
                    this.mUIItem0Cell2 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell2.SearchProperties[WinCell.PropertyNames.Value] = "0";
                    #endregion
                }
                return this.mUIItem0Cell2;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIImpressionsCell;
        
        private WinCell mUIItem0Cell;
        
        private WinCell mUIItem0Cell1;
        
        private WinCell mUIItem0Cell2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow2Row : WinRow
    {
        
        public UIRow2Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Name] = "Row 2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UISocialImpressionsCell
        {
            get
            {
                if ((this.mUISocialImpressionsCell == null))
                {
                    this.mUISocialImpressionsCell = new WinCell(this);
                    #region Search Criteria
                    this.mUISocialImpressionsCell.SearchProperties[WinCell.PropertyNames.Value] = "Social Impressions";
                    #endregion
                }
                return this.mUISocialImpressionsCell;
            }
        }
        
        public WinCell UIItem0Cell
        {
            get
            {
                if ((this.mUIItem0Cell == null))
                {
                    this.mUIItem0Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell.SearchProperties[WinCell.PropertyNames.Value] = "0";
                    #endregion
                }
                return this.mUIItem0Cell;
            }
        }
        
        public WinCell UIItem0Cell1
        {
            get
            {
                if ((this.mUIItem0Cell1 == null))
                {
                    this.mUIItem0Cell1 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell1.SearchProperties[WinCell.PropertyNames.Value] = "0";
                    #endregion
                }
                return this.mUIItem0Cell1;
            }
        }
        
        public WinCell UIItem0Cell2
        {
            get
            {
                if ((this.mUIItem0Cell2 == null))
                {
                    this.mUIItem0Cell2 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell2.SearchProperties[WinCell.PropertyNames.Value] = "0";
                    #endregion
                }
                return this.mUIItem0Cell2;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUISocialImpressionsCell;
        
        private WinCell mUIItem0Cell;
        
        private WinCell mUIItem0Cell1;
        
        private WinCell mUIItem0Cell2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow3Row : WinRow
    {
        
        public UIRow3Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Name] = "Row 3";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIClicksCell
        {
            get
            {
                if ((this.mUIClicksCell == null))
                {
                    this.mUIClicksCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIClicksCell.SearchProperties[WinCell.PropertyNames.Value] = "Clicks";
                    #endregion
                }
                return this.mUIClicksCell;
            }
        }
        
        public WinCell UIItem0Cell
        {
            get
            {
                if ((this.mUIItem0Cell == null))
                {
                    this.mUIItem0Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell.SearchProperties[WinCell.PropertyNames.Value] = "0";
                    #endregion
                }
                return this.mUIItem0Cell;
            }
        }
        
        public WinCell UIItem0Cell1
        {
            get
            {
                if ((this.mUIItem0Cell1 == null))
                {
                    this.mUIItem0Cell1 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell1.SearchProperties[WinCell.PropertyNames.Value] = "0";
                    #endregion
                }
                return this.mUIItem0Cell1;
            }
        }
        
        public WinCell UIItem0Cell2
        {
            get
            {
                if ((this.mUIItem0Cell2 == null))
                {
                    this.mUIItem0Cell2 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell2.SearchProperties[WinCell.PropertyNames.Value] = "0";
                    #endregion
                }
                return this.mUIItem0Cell2;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIClicksCell;
        
        private WinCell mUIItem0Cell;
        
        private WinCell mUIItem0Cell1;
        
        private WinCell mUIItem0Cell2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow4Row : WinRow
    {
        
        public UIRow4Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Name] = "Row 4";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UISocialClicksCell
        {
            get
            {
                if ((this.mUISocialClicksCell == null))
                {
                    this.mUISocialClicksCell = new WinCell(this);
                    #region Search Criteria
                    this.mUISocialClicksCell.SearchProperties[WinCell.PropertyNames.Value] = "Social Clicks";
                    #endregion
                }
                return this.mUISocialClicksCell;
            }
        }
        
        public WinCell UIItem0Cell
        {
            get
            {
                if ((this.mUIItem0Cell == null))
                {
                    this.mUIItem0Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell.SearchProperties[WinCell.PropertyNames.Value] = "0";
                    #endregion
                }
                return this.mUIItem0Cell;
            }
        }
        
        public WinCell UIItem0Cell1
        {
            get
            {
                if ((this.mUIItem0Cell1 == null))
                {
                    this.mUIItem0Cell1 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell1.SearchProperties[WinCell.PropertyNames.Value] = "0";
                    #endregion
                }
                return this.mUIItem0Cell1;
            }
        }
        
        public WinCell UIItem0Cell2
        {
            get
            {
                if ((this.mUIItem0Cell2 == null))
                {
                    this.mUIItem0Cell2 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell2.SearchProperties[WinCell.PropertyNames.Value] = "0";
                    #endregion
                }
                return this.mUIItem0Cell2;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUISocialClicksCell;
        
        private WinCell mUIItem0Cell;
        
        private WinCell mUIItem0Cell1;
        
        private WinCell mUIItem0Cell2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow5Row : WinRow
    {
        
        public UIRow5Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Name] = "Row 5";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIConnectionsCell
        {
            get
            {
                if ((this.mUIConnectionsCell == null))
                {
                    this.mUIConnectionsCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIConnectionsCell.SearchProperties[WinCell.PropertyNames.Value] = "Connections";
                    #endregion
                }
                return this.mUIConnectionsCell;
            }
        }
        
        public WinCell UIItem0Cell
        {
            get
            {
                if ((this.mUIItem0Cell == null))
                {
                    this.mUIItem0Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell.SearchProperties[WinCell.PropertyNames.Value] = "0";
                    #endregion
                }
                return this.mUIItem0Cell;
            }
        }
        
        public WinCell UIItem0Cell1
        {
            get
            {
                if ((this.mUIItem0Cell1 == null))
                {
                    this.mUIItem0Cell1 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell1.SearchProperties[WinCell.PropertyNames.Value] = "0";
                    #endregion
                }
                return this.mUIItem0Cell1;
            }
        }
        
        public WinCell UIItem0Cell2
        {
            get
            {
                if ((this.mUIItem0Cell2 == null))
                {
                    this.mUIItem0Cell2 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell2.SearchProperties[WinCell.PropertyNames.Value] = "0";
                    #endregion
                }
                return this.mUIItem0Cell2;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIConnectionsCell;
        
        private WinCell mUIItem0Cell;
        
        private WinCell mUIItem0Cell1;
        
        private WinCell mUIItem0Cell2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow6Row : WinRow
    {
        
        public UIRow6Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Name] = "Row 6";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIReachCell
        {
            get
            {
                if ((this.mUIReachCell == null))
                {
                    this.mUIReachCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIReachCell.SearchProperties[WinCell.PropertyNames.Value] = "Reach";
                    #endregion
                }
                return this.mUIReachCell;
            }
        }
        
        public WinCell UIItem0Cell
        {
            get
            {
                if ((this.mUIItem0Cell == null))
                {
                    this.mUIItem0Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell.SearchProperties[WinCell.PropertyNames.Value] = "0";
                    #endregion
                }
                return this.mUIItem0Cell;
            }
        }
        
        public WinCell UIItem0Cell1
        {
            get
            {
                if ((this.mUIItem0Cell1 == null))
                {
                    this.mUIItem0Cell1 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell1.SearchProperties[WinCell.PropertyNames.Value] = "0";
                    #endregion
                }
                return this.mUIItem0Cell1;
            }
        }
        
        public WinCell UIItem0Cell2
        {
            get
            {
                if ((this.mUIItem0Cell2 == null))
                {
                    this.mUIItem0Cell2 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell2.SearchProperties[WinCell.PropertyNames.Value] = "0";
                    #endregion
                }
                return this.mUIItem0Cell2;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIReachCell;
        
        private WinCell mUIItem0Cell;
        
        private WinCell mUIItem0Cell1;
        
        private WinCell mUIItem0Cell2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow7Row : WinRow
    {
        
        public UIRow7Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Name] = "Row 7";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UISpentCell
        {
            get
            {
                if ((this.mUISpentCell == null))
                {
                    this.mUISpentCell = new WinCell(this);
                    #region Search Criteria
                    this.mUISpentCell.SearchProperties[WinCell.PropertyNames.Value] = "Spent";
                    #endregion
                }
                return this.mUISpentCell;
            }
        }
        
        public WinCell UIItem000Cell
        {
            get
            {
                if ((this.mUIItem000Cell == null))
                {
                    this.mUIItem000Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem000Cell.SearchProperties[WinCell.PropertyNames.Value] = "$0.00";
                    #endregion
                }
                return this.mUIItem000Cell;
            }
        }
        
        public WinCell UIItem000Cell1
        {
            get
            {
                if ((this.mUIItem000Cell1 == null))
                {
                    this.mUIItem000Cell1 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem000Cell1.SearchProperties[WinCell.PropertyNames.Value] = "$0.00";
                    #endregion
                }
                return this.mUIItem000Cell1;
            }
        }
        
        public WinCell UIItem000Cell2
        {
            get
            {
                if ((this.mUIItem000Cell2 == null))
                {
                    this.mUIItem000Cell2 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem000Cell2.SearchProperties[WinCell.PropertyNames.Value] = "$0.00";
                    #endregion
                }
                return this.mUIItem000Cell2;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUISpentCell;
        
        private WinCell mUIItem000Cell;
        
        private WinCell mUIItem000Cell1;
        
        private WinCell mUIItem000Cell2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow8Row : WinRow
    {
        
        public UIRow8Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Name] = "Row 8";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UICTRCell
        {
            get
            {
                if ((this.mUICTRCell == null))
                {
                    this.mUICTRCell = new WinCell(this);
                    #region Search Criteria
                    this.mUICTRCell.SearchProperties[WinCell.PropertyNames.Value] = "CTR";
                    #endregion
                }
                return this.mUICTRCell;
            }
        }
        
        public WinCell UITotalrow7Cell
        {
            get
            {
                if ((this.mUITotalrow7Cell == null))
                {
                    this.mUITotalrow7Cell = new WinCell(this);
                }
                return this.mUITotalrow7Cell;
            }
        }
        
        public WinCell UIItem000Cell
        {
            get
            {
                if ((this.mUIItem000Cell == null))
                {
                    this.mUIItem000Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem000Cell.SearchProperties[WinCell.PropertyNames.Value] = "0.00%";
                    #endregion
                }
                return this.mUIItem000Cell;
            }
        }
        
        public WinCell UIItem000Cell1
        {
            get
            {
                if ((this.mUIItem000Cell1 == null))
                {
                    this.mUIItem000Cell1 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem000Cell1.SearchProperties[WinCell.PropertyNames.Value] = "0.00%";
                    #endregion
                }
                return this.mUIItem000Cell1;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUICTRCell;
        
        private WinCell mUITotalrow7Cell;
        
        private WinCell mUIItem000Cell;
        
        private WinCell mUIItem000Cell1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow9Row : WinRow
    {
        
        public UIRow9Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Name] = "Row 9";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFrequencyCell
        {
            get
            {
                if ((this.mUIFrequencyCell == null))
                {
                    this.mUIFrequencyCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFrequencyCell.SearchProperties[WinCell.PropertyNames.Value] = "Frequency";
                    #endregion
                }
                return this.mUIFrequencyCell;
            }
        }
        
        public WinCell UITotalrow8Cell
        {
            get
            {
                if ((this.mUITotalrow8Cell == null))
                {
                    this.mUITotalrow8Cell = new WinCell(this);
                }
                return this.mUITotalrow8Cell;
            }
        }
        
        public WinCell UIItem108Cell
        {
            get
            {
                if ((this.mUIItem108Cell == null))
                {
                    this.mUIItem108Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem108Cell.SearchProperties[WinCell.PropertyNames.Value] = "1.08";
                    #endregion
                }
                return this.mUIItem108Cell;
            }
        }
        
        public WinCell UIItem108Cell1
        {
            get
            {
                if ((this.mUIItem108Cell1 == null))
                {
                    this.mUIItem108Cell1 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem108Cell1.SearchProperties[WinCell.PropertyNames.Value] = "1.08";
                    #endregion
                }
                return this.mUIItem108Cell1;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFrequencyCell;
        
        private WinCell mUITotalrow8Cell;
        
        private WinCell mUIItem108Cell;
        
        private WinCell mUIItem108Cell1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow10Row : WinRow
    {
        
        public UIRow10Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Name] = "Row 10";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UISocialCTRCell
        {
            get
            {
                if ((this.mUISocialCTRCell == null))
                {
                    this.mUISocialCTRCell = new WinCell(this);
                    #region Search Criteria
                    this.mUISocialCTRCell.SearchProperties[WinCell.PropertyNames.Value] = "Social CTR";
                    #endregion
                }
                return this.mUISocialCTRCell;
            }
        }
        
        public WinCell UITotalrow9Cell
        {
            get
            {
                if ((this.mUITotalrow9Cell == null))
                {
                    this.mUITotalrow9Cell = new WinCell(this);
                }
                return this.mUITotalrow9Cell;
            }
        }
        
        public WinCell UIItem000Cell
        {
            get
            {
                if ((this.mUIItem000Cell == null))
                {
                    this.mUIItem000Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem000Cell.SearchProperties[WinCell.PropertyNames.Value] = "0.00 %";
                    #endregion
                }
                return this.mUIItem000Cell;
            }
        }
        
        public WinCell UIItem000Cell1
        {
            get
            {
                if ((this.mUIItem000Cell1 == null))
                {
                    this.mUIItem000Cell1 = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem000Cell1.SearchProperties[WinCell.PropertyNames.Value] = "0.00 %";
                    #endregion
                }
                return this.mUIItem000Cell1;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUISocialCTRCell;
        
        private WinCell mUITotalrow9Cell;
        
        private WinCell mUIItem000Cell;
        
        private WinCell mUIItem000Cell1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIScrollbarScrollBar9 : WinScrollBar
    {
        
        public UIScrollbarScrollBar9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "scroll bar";
            #endregion
        }
        
        #region Properties
        public WinButton UILineUpButton
        {
            get
            {
                if ((this.mUILineUpButton == null))
                {
                    this.mUILineUpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineUpButton.SearchProperties[WinButton.PropertyNames.Name] = "Line Up";
                    #endregion
                }
                return this.mUILineUpButton;
            }
        }
        
        public WinButton UIPageUpButton
        {
            get
            {
                if ((this.mUIPageUpButton == null))
                {
                    this.mUIPageUpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageUpButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Up";
                    #endregion
                }
                return this.mUIPageUpButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPageDownButton
        {
            get
            {
                if ((this.mUIPageDownButton == null))
                {
                    this.mUIPageDownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageDownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Down";
                    #endregion
                }
                return this.mUIPageDownButton;
            }
        }
        
        public WinButton UILineDownButton
        {
            get
            {
                if ((this.mUILineDownButton == null))
                {
                    this.mUILineDownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineDownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line Down";
                    #endregion
                }
                return this.mUILineDownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineUpButton;
        
        private WinButton mUIPageUpButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPageDownButton;
        
        private WinButton mUILineDownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar20 : WinScrollBar
    {
        
        public UIVerticalScrollBar20(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar20 : WinScrollBar
    {
        
        public UIHorizontalScrollBar20(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar110 : WinScrollBar
    {
        
        public UIVerticalScrollBar110(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar110 : WinScrollBar
    {
        
        public UIHorizontalScrollBar110(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISplitContainerControScrollBar : WinScrollBar
    {
        
        public UISplitContainerControScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISplitContainerControScrollBar1 : WinScrollBar
    {
        
        public UISplitContainerControScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRibbonStatusBarWindow : WinWindow
    {
        
        public UIRibbonStatusBarWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ribbonStatusBar";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIRibbonStatusBarMenuBar
        {
            get
            {
                if ((this.mUIRibbonStatusBarMenuBar == null))
                {
                    this.mUIRibbonStatusBarMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIRibbonStatusBarMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIRibbonStatusBarMenuBar;
            }
        }
        
        public WinTitleBar UIRibbonStatusBarTitleBar
        {
            get
            {
                if ((this.mUIRibbonStatusBarTitleBar == null))
                {
                    this.mUIRibbonStatusBarTitleBar = new WinTitleBar(this);
                }
                return this.mUIRibbonStatusBarTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIRibbonStatusBarMenuBar1
        {
            get
            {
                if ((this.mUIRibbonStatusBarMenuBar1 == null))
                {
                    this.mUIRibbonStatusBarMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIRibbonStatusBarMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIRibbonStatusBarMenuBar1;
            }
        }
        
        public WinScrollBar UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIVerticalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public WinScrollBar UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIHorizontalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIRibbonStatusBarGrip
        {
            get
            {
                if ((this.mUIRibbonStatusBarGrip == null))
                {
                    this.mUIRibbonStatusBarGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIRibbonStatusBarGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIRibbonStatusBarGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIRibbonStatusBarMenuBar;
        
        private WinTitleBar mUIRibbonStatusBarTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIRibbonStatusBarMenuBar1;
        
        private WinScrollBar mUIVerticalScrollBar;
        
        private WinScrollBar mUIHorizontalScrollBar;
        
        private WinControl mUIRibbonStatusBarGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIStatusBarPropertyPage : WinControl
    {
        
        public UIStatusBarPropertyPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Status Bar";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "PropertyPage";
            #endregion
        }
        
        #region Properties
        public WinText UIStaticText
        {
            get
            {
                if ((this.mUIStaticText == null))
                {
                    this.mUIStaticText = new WinText(this);
                    #region Search Criteria
                    this.mUIStaticText.SearchProperties[WinText.PropertyNames.Name] = "Static";
                    #endregion
                }
                return this.mUIStaticText;
            }
        }
        
        public WinText UIStaticText1
        {
            get
            {
                if ((this.mUIStaticText1 == null))
                {
                    this.mUIStaticText1 = new WinText(this);
                    #region Search Criteria
                    this.mUIStaticText1.SearchProperties[WinText.PropertyNames.Name] = "Static";
                    this.mUIStaticText1.SearchProperties[WinText.PropertyNames.Instance] = "2";
                    #endregion
                }
                return this.mUIStaticText1;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIStaticText;
        
        private WinText mUIStaticText1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar21 : WinScrollBar
    {
        
        public UIVerticalScrollBar21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar21 : WinScrollBar
    {
        
        public UIHorizontalScrollBar21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRibbonWindow : WinWindow
    {
        
        public UIRibbonWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ribbon";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIRibbonMenuBar
        {
            get
            {
                if ((this.mUIRibbonMenuBar == null))
                {
                    this.mUIRibbonMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIRibbonMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIRibbonMenuBar;
            }
        }
        
        public WinTitleBar UIRibbonTitleBar
        {
            get
            {
                if ((this.mUIRibbonTitleBar == null))
                {
                    this.mUIRibbonTitleBar = new WinTitleBar(this);
                }
                return this.mUIRibbonTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIRibbonMenuBar1
        {
            get
            {
                if ((this.mUIRibbonMenuBar1 == null))
                {
                    this.mUIRibbonMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIRibbonMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIRibbonMenuBar1;
            }
        }
        
        public WinScrollBar UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIVerticalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public WinScrollBar UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIHorizontalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIRibbonGrip
        {
            get
            {
                if ((this.mUIRibbonGrip == null))
                {
                    this.mUIRibbonGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIRibbonGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIRibbonGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIRibbonMenuBar;
        
        private WinTitleBar mUIRibbonTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIRibbonMenuBar1;
        
        private WinScrollBar mUIVerticalScrollBar;
        
        private WinScrollBar mUIHorizontalScrollBar;
        
        private WinControl mUIRibbonGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UITheRibbonPropertyPage : WinControl
    {
        
        public UITheRibbonPropertyPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "The Ribbon";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "PropertyPage";
            #endregion
        }
        
        #region Properties
        public WinControl UIItemDropDownGridButton
        {
            get
            {
                if ((this.mUIItemDropDownGridButton == null))
                {
                    this.mUIItemDropDownGridButton = new WinControl(this);
                    #region Search Criteria
                    this.mUIItemDropDownGridButton.SearchProperties[UITestControl.PropertyNames.ControlType] = "DropDownGridButton";
                    #endregion
                }
                return this.mUIItemDropDownGridButton;
            }
        }
        
        public WinToolBar UIRibbonToolBar
        {
            get
            {
                if ((this.mUIRibbonToolBar == null))
                {
                    this.mUIRibbonToolBar = new WinToolBar(this);
                    #region Search Criteria
                    this.mUIRibbonToolBar.SearchProperties[WinToolBar.PropertyNames.Name] = "Quick Access Toolbar";
                    #endregion
                }
                return this.mUIRibbonToolBar;
            }
        }
        
        public WinTabList UIRibbonTabsTabList
        {
            get
            {
                if ((this.mUIRibbonTabsTabList == null))
                {
                    this.mUIRibbonTabsTabList = new WinTabList(this);
                    #region Search Criteria
                    this.mUIRibbonTabsTabList.SearchProperties[WinTabList.PropertyNames.Name] = "Ribbon Tabs";
                    #endregion
                }
                return this.mUIRibbonTabsTabList;
            }
        }
        
        public WinPane UILowerRibbonPane
        {
            get
            {
                if ((this.mUILowerRibbonPane == null))
                {
                    this.mUILowerRibbonPane = new WinPane(this);
                    #region Search Criteria
                    this.mUILowerRibbonPane.SearchProperties[WinControl.PropertyNames.Name] = "Lower Ribbon";
                    #endregion
                }
                return this.mUILowerRibbonPane;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUIItemDropDownGridButton;
        
        private WinToolBar mUIRibbonToolBar;
        
        private WinTabList mUIRibbonTabsTabList;
        
        private WinPane mUILowerRibbonPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRibbonToolBar : WinToolBar
    {
        
        public UIRibbonToolBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "Quick Access Toolbar";
            #endregion
        }
        
        #region Properties
        public WinButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIItemButton.SearchProperties[WinButton.PropertyNames.Name] = "Item";
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItemButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRibbonTabsTabList : WinTabList
    {
        
        public UIRibbonTabsTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTabList.PropertyNames.Name] = "Ribbon Tabs";
            #endregion
        }
        
        #region Properties
        public WinTabPage UIHomeTabPage
        {
            get
            {
                if ((this.mUIHomeTabPage == null))
                {
                    this.mUIHomeTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUIHomeTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Home";
                    #endregion
                }
                return this.mUIHomeTabPage;
            }
        }
        
        public WinTabPage UIAccountTabPage
        {
            get
            {
                if ((this.mUIAccountTabPage == null))
                {
                    this.mUIAccountTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUIAccountTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Account";
                    #endregion
                }
                return this.mUIAccountTabPage;
            }
        }
        #endregion
        
        #region Fields
        private WinTabPage mUIHomeTabPage;
        
        private WinTabPage mUIAccountTabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UILowerRibbonPane : WinPane
    {
        
        public UILowerRibbonPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Lower Ribbon";
            #endregion
        }
        
        #region Properties
        public WinControl UIAccountPropertyPage
        {
            get
            {
                if ((this.mUIAccountPropertyPage == null))
                {
                    this.mUIAccountPropertyPage = new WinControl(this);
                    #region Search Criteria
                    this.mUIAccountPropertyPage.SearchProperties[UITestControl.PropertyNames.Name] = "Account";
                    this.mUIAccountPropertyPage.SearchProperties[UITestControl.PropertyNames.ControlType] = "PropertyPage";
                    #endregion
                }
                return this.mUIAccountPropertyPage;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUIAccountPropertyPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAccountPropertyPage : WinControl
    {
        
        public UIAccountPropertyPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Account";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "PropertyPage";
            #endregion
        }
        
        #region Properties
        public WinToolBar UIRibbonToolBar
        {
            get
            {
                if ((this.mUIRibbonToolBar == null))
                {
                    this.mUIRibbonToolBar = new WinToolBar(this);
                    #region Search Criteria
                    this.mUIRibbonToolBar.SearchProperties[WinToolBar.PropertyNames.Name] = "New";
                    #endregion
                }
                return this.mUIRibbonToolBar;
            }
        }
        
        public WinToolBar UIRibbonToolBar1
        {
            get
            {
                if ((this.mUIRibbonToolBar1 == null))
                {
                    this.mUIRibbonToolBar1 = new WinToolBar(this);
                    #region Search Criteria
                    this.mUIRibbonToolBar1.SearchProperties[WinToolBar.PropertyNames.Name] = "Synchronization";
                    #endregion
                }
                return this.mUIRibbonToolBar1;
            }
        }
        #endregion
        
        #region Fields
        private WinToolBar mUIRibbonToolBar;
        
        private WinToolBar mUIRibbonToolBar1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRibbonToolBar1 : WinToolBar
    {
        
        public UIRibbonToolBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "New";
            #endregion
        }
        
        #region Properties
        public WinButton UIAddCampaignButton
        {
            get
            {
                if ((this.mUIAddCampaignButton == null))
                {
                    this.mUIAddCampaignButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIAddCampaignButton.SearchProperties[WinButton.PropertyNames.Name] = "Add Campaign";
                    #endregion
                }
                return this.mUIAddCampaignButton;
            }
        }
        
        public WinControl UINewDropDownButton
        {
            get
            {
                if ((this.mUINewDropDownButton == null))
                {
                    this.mUINewDropDownButton = new WinControl(this);
                    #region Search Criteria
                    this.mUINewDropDownButton.SearchProperties[UITestControl.PropertyNames.Name] = "New";
                    this.mUINewDropDownButton.SearchProperties[UITestControl.PropertyNames.ControlType] = "DropDownButton";
                    #endregion
                }
                return this.mUINewDropDownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIAddCampaignButton;
        
        private WinControl mUINewDropDownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRibbonToolBar2 : WinToolBar
    {
        
        public UIRibbonToolBar2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "Synchronization";
            #endregion
        }
        
        #region Properties
        public WinButton UIDownloadAccountButton
        {
            get
            {
                if ((this.mUIDownloadAccountButton == null))
                {
                    this.mUIDownloadAccountButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIDownloadAccountButton.SearchProperties[WinButton.PropertyNames.Name] = "Download Account";
                    #endregion
                }
                return this.mUIDownloadAccountButton;
            }
        }
        
        public WinButton UIUploadAccountButton
        {
            get
            {
                if ((this.mUIUploadAccountButton == null))
                {
                    this.mUIUploadAccountButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIUploadAccountButton.SearchProperties[WinButton.PropertyNames.Name] = "Upload Account";
                    #endregion
                }
                return this.mUIUploadAccountButton;
            }
        }
        
        public WinButton UIDownloadPerformanceButton
        {
            get
            {
                if ((this.mUIDownloadPerformanceButton == null))
                {
                    this.mUIDownloadPerformanceButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIDownloadPerformanceButton.SearchProperties[WinButton.PropertyNames.Name] = "Download Performance";
                    #endregion
                }
                return this.mUIDownloadPerformanceButton;
            }
        }
        
        public WinControl UISynchronizationDropDownButton
        {
            get
            {
                if ((this.mUISynchronizationDropDownButton == null))
                {
                    this.mUISynchronizationDropDownButton = new WinControl(this);
                    #region Search Criteria
                    this.mUISynchronizationDropDownButton.SearchProperties[UITestControl.PropertyNames.Name] = "Synchronization";
                    this.mUISynchronizationDropDownButton.SearchProperties[UITestControl.PropertyNames.ControlType] = "DropDownButton";
                    #endregion
                }
                return this.mUISynchronizationDropDownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIDownloadAccountButton;
        
        private WinButton mUIUploadAccountButton;
        
        private WinButton mUIDownloadPerformanceButton;
        
        private WinControl mUISynchronizationDropDownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar31 : WinScrollBar
    {
        
        public UIVerticalScrollBar31(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar31 : WinScrollBar
    {
        
        public UIHorizontalScrollBar31(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAdSageforPerformanceScrollBar : WinScrollBar
    {
        
        public UIAdSageforPerformanceScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAdSageforPerformanceScrollBar1 : WinScrollBar
    {
        
        public UIAdSageforPerformanceScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
}
