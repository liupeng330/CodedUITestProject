// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Common.UITestFramework.UIMaps.DownloadAccountWindowClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public partial class DownloadAccountWindow
    {
        
        #region Properties
        public UIDownloadAccounthaihaWindow UIDownloadAccounthaihaWindow
        {
            get
            {
                if ((this.mUIDownloadAccounthaihaWindow == null))
                {
                    this.mUIDownloadAccounthaihaWindow = new UIDownloadAccounthaihaWindow();
                }
                return this.mUIDownloadAccounthaihaWindow;
            }
        }
        
        public UIDownloadAccounthaihaWindow1 UIDownloadAccounthaihaWindow1
        {
            get
            {
                if ((this.mUIDownloadAccounthaihaWindow1 == null))
                {
                    this.mUIDownloadAccounthaihaWindow1 = new UIDownloadAccounthaihaWindow1();
                }
                return this.mUIDownloadAccounthaihaWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIDownloadAccounthaihaWindow mUIDownloadAccounthaihaWindow;
        
        private UIDownloadAccounthaihaWindow1 mUIDownloadAccounthaihaWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDownloadAccounthaihaWindow : WinWindow
    {
        
        public UIDownloadAccounthaihaWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "DownloadCampaignsDialog";
            #endregion
        }
        
        #region Properties
        public UIDownloadCampaignsDiaMenuBar UIDownloadCampaignsDiaMenuBar
        {
            get
            {
                if ((this.mUIDownloadCampaignsDiaMenuBar == null))
                {
                    this.mUIDownloadCampaignsDiaMenuBar = new UIDownloadCampaignsDiaMenuBar(this);
                }
                return this.mUIDownloadCampaignsDiaMenuBar;
            }
        }
        
        public UISystemMenuItem1 UISystemMenuItem
        {
            get
            {
                if ((this.mUISystemMenuItem == null))
                {
                    this.mUISystemMenuItem = new UISystemMenuItem1(this);
                }
                return this.mUISystemMenuItem;
            }
        }
        
        public UISystemMenu UISystemMenu
        {
            get
            {
                if ((this.mUISystemMenu == null))
                {
                    this.mUISystemMenu = new UISystemMenu(this);
                }
                return this.mUISystemMenu;
            }
        }
        
        public UIDownloadAccounthaihaTitleBar UIDownloadAccounthaihaTitleBar
        {
            get
            {
                if ((this.mUIDownloadAccounthaihaTitleBar == null))
                {
                    this.mUIDownloadAccounthaihaTitleBar = new UIDownloadAccounthaihaTitleBar(this);
                }
                return this.mUIDownloadAccounthaihaTitleBar;
            }
        }
        
        public WinMenuBar UIDownloadCampaignsDiaMenuBar1
        {
            get
            {
                if ((this.mUIDownloadCampaignsDiaMenuBar1 == null))
                {
                    this.mUIDownloadCampaignsDiaMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIDownloadCampaignsDiaMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIDownloadCampaignsDiaMenuBar1;
            }
        }
        
        public UIDownloadAccounthaihaClient UIDownloadAccounthaihaClient
        {
            get
            {
                if ((this.mUIDownloadAccounthaihaClient == null))
                {
                    this.mUIDownloadAccounthaihaClient = new UIDownloadAccounthaihaClient(this);
                }
                return this.mUIDownloadAccounthaihaClient;
            }
        }
        
        public UIOverwriteselectedcamWindow UIOverwriteselectedcamWindow
        {
            get
            {
                if ((this.mUIOverwriteselectedcamWindow == null))
                {
                    this.mUIOverwriteselectedcamWindow = new UIOverwriteselectedcamWindow(this);
                }
                return this.mUIOverwriteselectedcamWindow;
            }
        }
        
        public UIOverwriteselectedcamScrollBar UIOverwriteselectedcamScrollBar
        {
            get
            {
                if ((this.mUIOverwriteselectedcamScrollBar == null))
                {
                    this.mUIOverwriteselectedcamScrollBar = new UIOverwriteselectedcamScrollBar(this);
                }
                return this.mUIOverwriteselectedcamScrollBar;
            }
        }
        
        public UIOverwriteselectedcamScrollBar1 UIOverwriteselectedcamScrollBar1
        {
            get
            {
                if ((this.mUIOverwriteselectedcamScrollBar1 == null))
                {
                    this.mUIOverwriteselectedcamScrollBar1 = new UIOverwriteselectedcamScrollBar1(this);
                }
                return this.mUIOverwriteselectedcamScrollBar1;
            }
        }
        
        public UIOverwriteentireaccouWindow UIOverwriteentireaccouWindow
        {
            get
            {
                if ((this.mUIOverwriteentireaccouWindow == null))
                {
                    this.mUIOverwriteentireaccouWindow = new UIOverwriteentireaccouWindow(this);
                }
                return this.mUIOverwriteentireaccouWindow;
            }
        }
        
        public UIOverwriteentireaccouScrollBar UIOverwriteentireaccouScrollBar
        {
            get
            {
                if ((this.mUIOverwriteentireaccouScrollBar == null))
                {
                    this.mUIOverwriteentireaccouScrollBar = new UIOverwriteentireaccouScrollBar(this);
                }
                return this.mUIOverwriteentireaccouScrollBar;
            }
        }
        
        public UIOverwriteentireaccouScrollBar1 UIOverwriteentireaccouScrollBar1
        {
            get
            {
                if ((this.mUIOverwriteentireaccouScrollBar1 == null))
                {
                    this.mUIOverwriteentireaccouScrollBar1 = new UIOverwriteentireaccouScrollBar1(this);
                }
                return this.mUIOverwriteentireaccouScrollBar1;
            }
        }
        
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow(this);
                }
                return this.mUIOKWindow;
            }
        }
        
        public UIOKScrollBar UIOKScrollBar
        {
            get
            {
                if ((this.mUIOKScrollBar == null))
                {
                    this.mUIOKScrollBar = new UIOKScrollBar(this);
                }
                return this.mUIOKScrollBar;
            }
        }
        
        public UIOKScrollBar1 UIOKScrollBar1
        {
            get
            {
                if ((this.mUIOKScrollBar1 == null))
                {
                    this.mUIOKScrollBar1 = new UIOKScrollBar1(this);
                }
                return this.mUIOKScrollBar1;
            }
        }
        
        public UICancelWindow UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow(this);
                }
                return this.mUICancelWindow;
            }
        }
        
        public UICancelScrollBar UICancelScrollBar
        {
            get
            {
                if ((this.mUICancelScrollBar == null))
                {
                    this.mUICancelScrollBar = new UICancelScrollBar(this);
                }
                return this.mUICancelScrollBar;
            }
        }
        
        public UICancelScrollBar1 UICancelScrollBar1
        {
            get
            {
                if ((this.mUICancelScrollBar1 == null))
                {
                    this.mUICancelScrollBar1 = new UICancelScrollBar1(this);
                }
                return this.mUICancelScrollBar1;
            }
        }
        
        public UICampaignsDataGridVieWindow UICampaignsDataGridVieWindow
        {
            get
            {
                if ((this.mUICampaignsDataGridVieWindow == null))
                {
                    this.mUICampaignsDataGridVieWindow = new UICampaignsDataGridVieWindow(this);
                }
                return this.mUICampaignsDataGridVieWindow;
            }
        }
        
        public UIDataGridViewTable1 UIDataGridViewTable
        {
            get
            {
                if ((this.mUIDataGridViewTable == null))
                {
                    this.mUIDataGridViewTable = new UIDataGridViewTable1(this);
                }
                return this.mUIDataGridViewTable;
            }
        }
        
        public UIVerticalScrollBarScrollBar UIVerticalScrollBarScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBarScrollBar == null))
                {
                    this.mUIVerticalScrollBarScrollBar = new UIVerticalScrollBarScrollBar(this);
                }
                return this.mUIVerticalScrollBarScrollBar;
            }
        }
        
        public UIVerticalScrollBar UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new UIVerticalScrollBar(this);
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public UIHorizontalScrollBar UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new UIHorizontalScrollBar(this);
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public UIAdObjectTreeSelectorWindow UIAdObjectTreeSelectorWindow
        {
            get
            {
                if ((this.mUIAdObjectTreeSelectorWindow == null))
                {
                    this.mUIAdObjectTreeSelectorWindow = new UIAdObjectTreeSelectorWindow(this);
                }
                return this.mUIAdObjectTreeSelectorWindow;
            }
        }
        
        public UIPanel1Window UIPanel1Window
        {
            get
            {
                if ((this.mUIPanel1Window == null))
                {
                    this.mUIPanel1Window = new UIPanel1Window(this);
                }
                return this.mUIPanel1Window;
            }
        }
        
        public UISelectWindow UISelectWindow
        {
            get
            {
                if ((this.mUISelectWindow == null))
                {
                    this.mUISelectWindow = new UISelectWindow(this);
                }
                return this.mUISelectWindow;
            }
        }
        
        public UISelectScrollBar UISelectScrollBar
        {
            get
            {
                if ((this.mUISelectScrollBar == null))
                {
                    this.mUISelectScrollBar = new UISelectScrollBar(this);
                }
                return this.mUISelectScrollBar;
            }
        }
        
        public UISelectScrollBar1 UISelectScrollBar1
        {
            get
            {
                if ((this.mUISelectScrollBar1 == null))
                {
                    this.mUISelectScrollBar1 = new UISelectScrollBar1(this);
                }
                return this.mUISelectScrollBar1;
            }
        }
        
        public UIVerticalScrollBar1 UIVerticalScrollBar1
        {
            get
            {
                if ((this.mUIVerticalScrollBar1 == null))
                {
                    this.mUIVerticalScrollBar1 = new UIVerticalScrollBar1(this);
                }
                return this.mUIVerticalScrollBar1;
            }
        }
        
        public UIHorizontalScrollBar1 UIHorizontalScrollBar1
        {
            get
            {
                if ((this.mUIHorizontalScrollBar1 == null))
                {
                    this.mUIHorizontalScrollBar1 = new UIHorizontalScrollBar1(this);
                }
                return this.mUIHorizontalScrollBar1;
            }
        }
        
        public UIPanel2Window UIPanel2Window
        {
            get
            {
                if ((this.mUIPanel2Window == null))
                {
                    this.mUIPanel2Window = new UIPanel2Window(this);
                }
                return this.mUIPanel2Window;
            }
        }
        
        public UISelectClient UISelectClient
        {
            get
            {
                if ((this.mUISelectClient == null))
                {
                    this.mUISelectClient = new UISelectClient(this);
                }
                return this.mUISelectClient;
            }
        }
        
        public UIAllWindow UIAllWindow
        {
            get
            {
                if ((this.mUIAllWindow == null))
                {
                    this.mUIAllWindow = new UIAllWindow(this);
                }
                return this.mUIAllWindow;
            }
        }
        
        public UIAllText UIAllText
        {
            get
            {
                if ((this.mUIAllText == null))
                {
                    this.mUIAllText = new UIAllText(this);
                }
                return this.mUIAllText;
            }
        }
        
        public UIAllScrollBar UIAllScrollBar
        {
            get
            {
                if ((this.mUIAllScrollBar == null))
                {
                    this.mUIAllScrollBar = new UIAllScrollBar(this);
                }
                return this.mUIAllScrollBar;
            }
        }
        
        public UIAllScrollBar1 UIAllScrollBar1
        {
            get
            {
                if ((this.mUIAllScrollBar1 == null))
                {
                    this.mUIAllScrollBar1 = new UIAllScrollBar1(this);
                }
                return this.mUIAllScrollBar1;
            }
        }
        
        public UINoneWindow UINoneWindow
        {
            get
            {
                if ((this.mUINoneWindow == null))
                {
                    this.mUINoneWindow = new UINoneWindow(this);
                }
                return this.mUINoneWindow;
            }
        }
        
        public UINoneText UINoneText
        {
            get
            {
                if ((this.mUINoneText == null))
                {
                    this.mUINoneText = new UINoneText(this);
                }
                return this.mUINoneText;
            }
        }
        
        public UINoneScrollBar UINoneScrollBar
        {
            get
            {
                if ((this.mUINoneScrollBar == null))
                {
                    this.mUINoneScrollBar = new UINoneScrollBar(this);
                }
                return this.mUINoneScrollBar;
            }
        }
        
        public UINoneScrollBar1 UINoneScrollBar1
        {
            get
            {
                if ((this.mUINoneScrollBar1 == null))
                {
                    this.mUINoneScrollBar1 = new UINoneScrollBar1(this);
                }
                return this.mUINoneScrollBar1;
            }
        }
        
        public UIActiveWindow UIActiveWindow
        {
            get
            {
                if ((this.mUIActiveWindow == null))
                {
                    this.mUIActiveWindow = new UIActiveWindow(this);
                }
                return this.mUIActiveWindow;
            }
        }
        
        public UIActiveText UIActiveText
        {
            get
            {
                if ((this.mUIActiveText == null))
                {
                    this.mUIActiveText = new UIActiveText(this);
                }
                return this.mUIActiveText;
            }
        }
        
        public UIActiveScrollBar UIActiveScrollBar
        {
            get
            {
                if ((this.mUIActiveScrollBar == null))
                {
                    this.mUIActiveScrollBar = new UIActiveScrollBar(this);
                }
                return this.mUIActiveScrollBar;
            }
        }
        
        public UIActiveScrollBar1 UIActiveScrollBar1
        {
            get
            {
                if ((this.mUIActiveScrollBar1 == null))
                {
                    this.mUIActiveScrollBar1 = new UIActiveScrollBar1(this);
                }
                return this.mUIActiveScrollBar1;
            }
        }
        
        public UIPausedWindow UIPausedWindow
        {
            get
            {
                if ((this.mUIPausedWindow == null))
                {
                    this.mUIPausedWindow = new UIPausedWindow(this);
                }
                return this.mUIPausedWindow;
            }
        }
        
        public UIPausedText UIPausedText
        {
            get
            {
                if ((this.mUIPausedText == null))
                {
                    this.mUIPausedText = new UIPausedText(this);
                }
                return this.mUIPausedText;
            }
        }
        
        public UIPausedScrollBar UIPausedScrollBar
        {
            get
            {
                if ((this.mUIPausedScrollBar == null))
                {
                    this.mUIPausedScrollBar = new UIPausedScrollBar(this);
                }
                return this.mUIPausedScrollBar;
            }
        }
        
        public UIPausedScrollBar1 UIPausedScrollBar1
        {
            get
            {
                if ((this.mUIPausedScrollBar1 == null))
                {
                    this.mUIPausedScrollBar1 = new UIPausedScrollBar1(this);
                }
                return this.mUIPausedScrollBar1;
            }
        }
        
        public UIVerticalScrollBar2 UIVerticalScrollBar2
        {
            get
            {
                if ((this.mUIVerticalScrollBar2 == null))
                {
                    this.mUIVerticalScrollBar2 = new UIVerticalScrollBar2(this);
                }
                return this.mUIVerticalScrollBar2;
            }
        }
        
        public UIHorizontalScrollBar2 UIHorizontalScrollBar2
        {
            get
            {
                if ((this.mUIHorizontalScrollBar2 == null))
                {
                    this.mUIHorizontalScrollBar2 = new UIHorizontalScrollBar2(this);
                }
                return this.mUIHorizontalScrollBar2;
            }
        }
        
        public UIVerticalScrollBar3 UIVerticalScrollBar3
        {
            get
            {
                if ((this.mUIVerticalScrollBar3 == null))
                {
                    this.mUIVerticalScrollBar3 = new UIVerticalScrollBar3(this);
                }
                return this.mUIVerticalScrollBar3;
            }
        }
        
        public UIHorizontalScrollBar3 UIHorizontalScrollBar3
        {
            get
            {
                if ((this.mUIHorizontalScrollBar3 == null))
                {
                    this.mUIHorizontalScrollBar3 = new UIHorizontalScrollBar3(this);
                }
                return this.mUIHorizontalScrollBar3;
            }
        }
        
        public UIDownloadAccounthaihaScrollBar UIDownloadAccounthaihaScrollBar
        {
            get
            {
                if ((this.mUIDownloadAccounthaihaScrollBar == null))
                {
                    this.mUIDownloadAccounthaihaScrollBar = new UIDownloadAccounthaihaScrollBar(this);
                }
                return this.mUIDownloadAccounthaihaScrollBar;
            }
        }
        
        public UIDownloadAccounthaihaScrollBar1 UIDownloadAccounthaihaScrollBar1
        {
            get
            {
                if ((this.mUIDownloadAccounthaihaScrollBar1 == null))
                {
                    this.mUIDownloadAccounthaihaScrollBar1 = new UIDownloadAccounthaihaScrollBar1(this);
                }
                return this.mUIDownloadAccounthaihaScrollBar1;
            }
        }
        
        public WinControl UIDownloadAccounthaihaGrip
        {
            get
            {
                if ((this.mUIDownloadAccounthaihaGrip == null))
                {
                    this.mUIDownloadAccounthaihaGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIDownloadAccounthaihaGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIDownloadAccounthaihaGrip;
            }
        }
        #endregion
        
        #region Fields
        private UIDownloadCampaignsDiaMenuBar mUIDownloadCampaignsDiaMenuBar;
        
        private UISystemMenuItem1 mUISystemMenuItem;
        
        private UISystemMenu mUISystemMenu;
        
        private UIDownloadAccounthaihaTitleBar mUIDownloadAccounthaihaTitleBar;
        
        private WinMenuBar mUIDownloadCampaignsDiaMenuBar1;
        
        private UIDownloadAccounthaihaClient mUIDownloadAccounthaihaClient;
        
        private UIOverwriteselectedcamWindow mUIOverwriteselectedcamWindow;
        
        private UIOverwriteselectedcamScrollBar mUIOverwriteselectedcamScrollBar;
        
        private UIOverwriteselectedcamScrollBar1 mUIOverwriteselectedcamScrollBar1;
        
        private UIOverwriteentireaccouWindow mUIOverwriteentireaccouWindow;
        
        private UIOverwriteentireaccouScrollBar mUIOverwriteentireaccouScrollBar;
        
        private UIOverwriteentireaccouScrollBar1 mUIOverwriteentireaccouScrollBar1;
        
        private UIOKWindow mUIOKWindow;
        
        private UIOKScrollBar mUIOKScrollBar;
        
        private UIOKScrollBar1 mUIOKScrollBar1;
        
        private UICancelWindow mUICancelWindow;
        
        private UICancelScrollBar mUICancelScrollBar;
        
        private UICancelScrollBar1 mUICancelScrollBar1;
        
        private UICampaignsDataGridVieWindow mUICampaignsDataGridVieWindow;
        
        private UIDataGridViewTable1 mUIDataGridViewTable;
        
        private UIVerticalScrollBarScrollBar mUIVerticalScrollBarScrollBar;
        
        private UIVerticalScrollBar mUIVerticalScrollBar;
        
        private UIHorizontalScrollBar mUIHorizontalScrollBar;
        
        private UIAdObjectTreeSelectorWindow mUIAdObjectTreeSelectorWindow;
        
        private UIPanel1Window mUIPanel1Window;
        
        private UISelectWindow mUISelectWindow;
        
        private UISelectScrollBar mUISelectScrollBar;
        
        private UISelectScrollBar1 mUISelectScrollBar1;
        
        private UIVerticalScrollBar1 mUIVerticalScrollBar1;
        
        private UIHorizontalScrollBar1 mUIHorizontalScrollBar1;
        
        private UIPanel2Window mUIPanel2Window;
        
        private UISelectClient mUISelectClient;
        
        private UIAllWindow mUIAllWindow;
        
        private UIAllText mUIAllText;
        
        private UIAllScrollBar mUIAllScrollBar;
        
        private UIAllScrollBar1 mUIAllScrollBar1;
        
        private UINoneWindow mUINoneWindow;
        
        private UINoneText mUINoneText;
        
        private UINoneScrollBar mUINoneScrollBar;
        
        private UINoneScrollBar1 mUINoneScrollBar1;
        
        private UIActiveWindow mUIActiveWindow;
        
        private UIActiveText mUIActiveText;
        
        private UIActiveScrollBar mUIActiveScrollBar;
        
        private UIActiveScrollBar1 mUIActiveScrollBar1;
        
        private UIPausedWindow mUIPausedWindow;
        
        private UIPausedText mUIPausedText;
        
        private UIPausedScrollBar mUIPausedScrollBar;
        
        private UIPausedScrollBar1 mUIPausedScrollBar1;
        
        private UIVerticalScrollBar2 mUIVerticalScrollBar2;
        
        private UIHorizontalScrollBar2 mUIHorizontalScrollBar2;
        
        private UIVerticalScrollBar3 mUIVerticalScrollBar3;
        
        private UIHorizontalScrollBar3 mUIHorizontalScrollBar3;
        
        private UIDownloadAccounthaihaScrollBar mUIDownloadAccounthaihaScrollBar;
        
        private UIDownloadAccounthaihaScrollBar1 mUIDownloadAccounthaihaScrollBar1;
        
        private WinControl mUIDownloadAccounthaihaGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDownloadCampaignsDiaMenuBar : WinMenuBar
    {
        
        public UIDownloadCampaignsDiaMenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "System";
            #endregion
        }
        
        #region Properties
        public UISystemMenuItem UISystemMenuItem
        {
            get
            {
                if ((this.mUISystemMenuItem == null))
                {
                    this.mUISystemMenuItem = new UISystemMenuItem(this);
                }
                return this.mUISystemMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UISystemMenuItem mUISystemMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISystemMenuItem : WinMenuItem
    {
        
        public UISystemMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "System";
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIRestoreMenuItem
        {
            get
            {
                if ((this.mUIRestoreMenuItem == null))
                {
                    this.mUIRestoreMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIRestoreMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Restore";
                    this.mUIRestoreMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUIRestoreMenuItem;
            }
        }
        
        public WinMenuItem UIMoveMenuItem
        {
            get
            {
                if ((this.mUIMoveMenuItem == null))
                {
                    this.mUIMoveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIMoveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Move";
                    this.mUIMoveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUIMoveMenuItem;
            }
        }
        
        public WinMenuItem UISizeMenuItem
        {
            get
            {
                if ((this.mUISizeMenuItem == null))
                {
                    this.mUISizeMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISizeMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Size";
                    this.mUISizeMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUISizeMenuItem;
            }
        }
        
        public WinMenuItem UIMinimizeMenuItem
        {
            get
            {
                if ((this.mUIMinimizeMenuItem == null))
                {
                    this.mUIMinimizeMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIMinimizeMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Minimize";
                    this.mUIMinimizeMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUIMinimizeMenuItem;
            }
        }
        
        public WinMenuItem UIMaximizeMenuItem
        {
            get
            {
                if ((this.mUIMaximizeMenuItem == null))
                {
                    this.mUIMaximizeMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIMaximizeMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Maximize";
                    this.mUIMaximizeMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUIMaximizeMenuItem;
            }
        }
        
        public WinMenuItem UICloseAltF4MenuItem
        {
            get
            {
                if ((this.mUICloseAltF4MenuItem == null))
                {
                    this.mUICloseAltF4MenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseAltF4MenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close\tAlt+F4";
                    this.mUICloseAltF4MenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUICloseAltF4MenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIRestoreMenuItem;
        
        private WinMenuItem mUIMoveMenuItem;
        
        private WinMenuItem mUISizeMenuItem;
        
        private WinMenuItem mUIMinimizeMenuItem;
        
        private WinMenuItem mUIMaximizeMenuItem;
        
        private WinMenuItem mUICloseAltF4MenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISystemMenuItem1 : WinMenuItem
    {
        
        public UISystemMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "System";
            #endregion
        }
        
        #region Properties
        public WinMenu UISystemMenu
        {
            get
            {
                if ((this.mUISystemMenu == null))
                {
                    this.mUISystemMenu = new WinMenu(this);
                    #region Search Criteria
                    this.mUISystemMenu.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    this.mUISystemMenu.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISystemMenu.SearchConfigurations.Remove(SearchConfiguration.VisibleOnly);
                    #endregion
                }
                return this.mUISystemMenu;
            }
        }
        #endregion
        
        #region Fields
        private WinMenu mUISystemMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISystemMenu : WinMenu
    {
        
        public UISystemMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "System";
            this.SearchConfigurations.Remove(SearchConfiguration.VisibleOnly);
            #endregion
        }
        
        #region Properties
        public WinSeparator UIItemSeparator
        {
            get
            {
                if ((this.mUIItemSeparator == null))
                {
                    this.mUIItemSeparator = new WinSeparator(this);
                }
                return this.mUIItemSeparator;
            }
        }
        #endregion
        
        #region Fields
        private WinSeparator mUIItemSeparator;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDownloadAccounthaihaTitleBar : WinTitleBar
    {
        
        public UIDownloadAccounthaihaTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDownloadAccounthaihaClient : WinClient
    {
        
        public UIDownloadAccounthaihaClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "SelectDownloadCampaignsDialog";
            #endregion
        }
        
        #region Properties
        public WinWindow UIOverwriteselectedcamWindow
        {
            get
            {
                if ((this.mUIOverwriteselectedcamWindow == null))
                {
                    this.mUIOverwriteselectedcamWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIOverwriteselectedcamWindow.SearchProperties[WinWindow.PropertyNames.Name] = "&Overwrite selected campaigns";
                    this.mUIOverwriteselectedcamWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.BUTTON", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIOverwriteselectedcamWindow;
            }
        }
        
        public WinWindow UIOverwriteentireaccouWindow
        {
            get
            {
                if ((this.mUIOverwriteentireaccouWindow == null))
                {
                    this.mUIOverwriteentireaccouWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIOverwriteentireaccouWindow.SearchProperties[WinWindow.PropertyNames.Name] = "&Overwrite entire a&ccount";
                    this.mUIOverwriteentireaccouWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.BUTTON", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIOverwriteentireaccouWindow;
            }
        }
        
        public WinWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIOKWindow.SearchProperties[WinWindow.PropertyNames.Name] = "OK";
                    this.mUIOKWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.BUTTON", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIOKWindow;
            }
        }
        
        public WinWindow UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUICancelWindow.SearchProperties[WinWindow.PropertyNames.Name] = "Cancel";
                    this.mUICancelWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.BUTTON", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUICancelWindow;
            }
        }
        
        public WinWindow UICampaignsDataGridVieWindow
        {
            get
            {
                if ((this.mUICampaignsDataGridVieWindow == null))
                {
                    this.mUICampaignsDataGridVieWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUICampaignsDataGridVieWindow.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "DataGridView";
                    this.mUICampaignsDataGridVieWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUICampaignsDataGridVieWindow;
            }
        }
        
        public WinWindow UIAdObjectTreeSelectorWindow
        {
            get
            {
                if ((this.mUIAdObjectTreeSelectorWindow == null))
                {
                    this.mUIAdObjectTreeSelectorWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIAdObjectTreeSelectorWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIAdObjectTreeSelectorWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUIOverwriteselectedcamWindow;
        
        private WinWindow mUIOverwriteentireaccouWindow;
        
        private WinWindow mUIOKWindow;
        
        private WinWindow mUICancelWindow;
        
        private WinWindow mUICampaignsDataGridVieWindow;
        
        private WinWindow mUIAdObjectTreeSelectorWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIOverwriteselectedcamWindow : WinWindow
    {
        
        public UIOverwriteselectedcamWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rbtnSelected";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIOverwriteCampaignRadMenuBar
        {
            get
            {
                if ((this.mUIOverwriteCampaignRadMenuBar == null))
                {
                    this.mUIOverwriteCampaignRadMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIOverwriteCampaignRadMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIOverwriteCampaignRadMenuBar;
            }
        }
        
        public WinTitleBar UIOverwriteselectedcamTitleBar
        {
            get
            {
                if ((this.mUIOverwriteselectedcamTitleBar == null))
                {
                    this.mUIOverwriteselectedcamTitleBar = new WinTitleBar(this);
                }
                return this.mUIOverwriteselectedcamTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIOverwriteCampaignRadMenuBar1
        {
            get
            {
                if ((this.mUIOverwriteCampaignRadMenuBar1 == null))
                {
                    this.mUIOverwriteCampaignRadMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIOverwriteCampaignRadMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIOverwriteCampaignRadMenuBar1;
            }
        }
        
        public WinRadioButton UIOverwriteselectedcamRadioButton
        {
            get
            {
                if ((this.mUIOverwriteselectedcamRadioButton == null))
                {
                    this.mUIOverwriteselectedcamRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUIOverwriteselectedcamRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "overwriteCampaignRadioButton";
                    #endregion
                }
                return this.mUIOverwriteselectedcamRadioButton;
            }
        }
        
        public WinScrollBar UIOverwriteselectedcamScrollBar
        {
            get
            {
                if ((this.mUIOverwriteselectedcamScrollBar == null))
                {
                    this.mUIOverwriteselectedcamScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIOverwriteselectedcamScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIOverwriteselectedcamScrollBar;
            }
        }
        
        public WinScrollBar UIOverwriteselectedcamScrollBar1
        {
            get
            {
                if ((this.mUIOverwriteselectedcamScrollBar1 == null))
                {
                    this.mUIOverwriteselectedcamScrollBar1 = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIOverwriteselectedcamScrollBar1.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIOverwriteselectedcamScrollBar1;
            }
        }
        
        public WinControl UIOverwriteselectedcamGrip
        {
            get
            {
                if ((this.mUIOverwriteselectedcamGrip == null))
                {
                    this.mUIOverwriteselectedcamGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIOverwriteselectedcamGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIOverwriteselectedcamGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIOverwriteCampaignRadMenuBar;
        
        private WinTitleBar mUIOverwriteselectedcamTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIOverwriteCampaignRadMenuBar1;
        
        private WinRadioButton mUIOverwriteselectedcamRadioButton;
        
        private WinScrollBar mUIOverwriteselectedcamScrollBar;
        
        private WinScrollBar mUIOverwriteselectedcamScrollBar1;
        
        private WinControl mUIOverwriteselectedcamGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIOverwriteselectedcamScrollBar : WinScrollBar
    {
        
        public UIOverwriteselectedcamScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIOverwriteselectedcamScrollBar1 : WinScrollBar
    {
        
        public UIOverwriteselectedcamScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIOverwriteentireaccouWindow : WinWindow
    {
        
        public UIOverwriteentireaccouWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "overwriteAccountRadioButton";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIOverwriteAccountRadiMenuBar
        {
            get
            {
                if ((this.mUIOverwriteAccountRadiMenuBar == null))
                {
                    this.mUIOverwriteAccountRadiMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIOverwriteAccountRadiMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIOverwriteAccountRadiMenuBar;
            }
        }
        
        public WinTitleBar UIOverwriteentireaccouTitleBar
        {
            get
            {
                if ((this.mUIOverwriteentireaccouTitleBar == null))
                {
                    this.mUIOverwriteentireaccouTitleBar = new WinTitleBar(this);
                }
                return this.mUIOverwriteentireaccouTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIOverwriteAccountRadiMenuBar1
        {
            get
            {
                if ((this.mUIOverwriteAccountRadiMenuBar1 == null))
                {
                    this.mUIOverwriteAccountRadiMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIOverwriteAccountRadiMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIOverwriteAccountRadiMenuBar1;
            }
        }
        
        public WinRadioButton UIOverwriteentireaccouRadioButton
        {
            get
            {
                if ((this.mUIOverwriteentireaccouRadioButton == null))
                {
                    this.mUIOverwriteentireaccouRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUIOverwriteentireaccouRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "overwriteAccountRadioButton";
                    #endregion
                }
                return this.mUIOverwriteentireaccouRadioButton;
            }
        }
        
        public WinScrollBar UIOverwriteentireaccouScrollBar
        {
            get
            {
                if ((this.mUIOverwriteentireaccouScrollBar == null))
                {
                    this.mUIOverwriteentireaccouScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIOverwriteentireaccouScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIOverwriteentireaccouScrollBar;
            }
        }
        
        public WinScrollBar UIOverwriteentireaccouScrollBar1
        {
            get
            {
                if ((this.mUIOverwriteentireaccouScrollBar1 == null))
                {
                    this.mUIOverwriteentireaccouScrollBar1 = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIOverwriteentireaccouScrollBar1.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIOverwriteentireaccouScrollBar1;
            }
        }
        
        public WinControl UIOverwriteentireaccouGrip
        {
            get
            {
                if ((this.mUIOverwriteentireaccouGrip == null))
                {
                    this.mUIOverwriteentireaccouGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIOverwriteentireaccouGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIOverwriteentireaccouGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIOverwriteAccountRadiMenuBar;
        
        private WinTitleBar mUIOverwriteentireaccouTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIOverwriteAccountRadiMenuBar1;
        
        private WinRadioButton mUIOverwriteentireaccouRadioButton;
        
        private WinScrollBar mUIOverwriteentireaccouScrollBar;
        
        private WinScrollBar mUIOverwriteentireaccouScrollBar1;
        
        private WinControl mUIOverwriteentireaccouGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIOverwriteentireaccouScrollBar : WinScrollBar
    {
        
        public UIOverwriteentireaccouScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIOverwriteentireaccouScrollBar1 : WinScrollBar
    {
        
        public UIOverwriteentireaccouScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonOK";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIButtonOKMenuBar
        {
            get
            {
                if ((this.mUIButtonOKMenuBar == null))
                {
                    this.mUIButtonOKMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIButtonOKMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIButtonOKMenuBar;
            }
        }
        
        public WinTitleBar UIOKTitleBar
        {
            get
            {
                if ((this.mUIOKTitleBar == null))
                {
                    this.mUIOKTitleBar = new WinTitleBar(this);
                }
                return this.mUIOKTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIButtonOKMenuBar1
        {
            get
            {
                if ((this.mUIButtonOKMenuBar1 == null))
                {
                    this.mUIButtonOKMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIButtonOKMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIButtonOKMenuBar1;
            }
        }
        
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        
        public WinScrollBar UIOKScrollBar
        {
            get
            {
                if ((this.mUIOKScrollBar == null))
                {
                    this.mUIOKScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIOKScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIOKScrollBar;
            }
        }
        
        public WinScrollBar UIOKScrollBar1
        {
            get
            {
                if ((this.mUIOKScrollBar1 == null))
                {
                    this.mUIOKScrollBar1 = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIOKScrollBar1.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIOKScrollBar1;
            }
        }
        
        public WinControl UIOKGrip
        {
            get
            {
                if ((this.mUIOKGrip == null))
                {
                    this.mUIOKGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIOKGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIOKGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIButtonOKMenuBar;
        
        private WinTitleBar mUIOKTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIButtonOKMenuBar1;
        
        private WinButton mUIOKButton;
        
        private WinScrollBar mUIOKScrollBar;
        
        private WinScrollBar mUIOKScrollBar1;
        
        private WinControl mUIOKGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIOKScrollBar : WinScrollBar
    {
        
        public UIOKScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIOKScrollBar1 : WinScrollBar
    {
        
        public UIOKScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UICancelWindow : WinWindow
    {
        
        public UICancelWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonCancel";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIButtonCancelMenuBar
        {
            get
            {
                if ((this.mUIButtonCancelMenuBar == null))
                {
                    this.mUIButtonCancelMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIButtonCancelMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIButtonCancelMenuBar;
            }
        }
        
        public WinTitleBar UICancelTitleBar
        {
            get
            {
                if ((this.mUICancelTitleBar == null))
                {
                    this.mUICancelTitleBar = new WinTitleBar(this);
                }
                return this.mUICancelTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIButtonCancelMenuBar1
        {
            get
            {
                if ((this.mUIButtonCancelMenuBar1 == null))
                {
                    this.mUIButtonCancelMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIButtonCancelMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIButtonCancelMenuBar1;
            }
        }
        
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        
        public WinScrollBar UICancelScrollBar
        {
            get
            {
                if ((this.mUICancelScrollBar == null))
                {
                    this.mUICancelScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUICancelScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUICancelScrollBar;
            }
        }
        
        public WinScrollBar UICancelScrollBar1
        {
            get
            {
                if ((this.mUICancelScrollBar1 == null))
                {
                    this.mUICancelScrollBar1 = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUICancelScrollBar1.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUICancelScrollBar1;
            }
        }
        
        public WinControl UICancelGrip
        {
            get
            {
                if ((this.mUICancelGrip == null))
                {
                    this.mUICancelGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUICancelGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUICancelGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIButtonCancelMenuBar;
        
        private WinTitleBar mUICancelTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIButtonCancelMenuBar1;
        
        private WinButton mUICancelButton;
        
        private WinScrollBar mUICancelScrollBar;
        
        private WinScrollBar mUICancelScrollBar1;
        
        private WinControl mUICancelGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UICancelScrollBar : WinScrollBar
    {
        
        public UICancelScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UICancelScrollBar1 : WinScrollBar
    {
        
        public UICancelScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UICampaignsDataGridVieWindow : WinWindow
    {
        
        public UICampaignsDataGridVieWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "campaignsDataGridView";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UICampaignsDataGridVieMenuBar
        {
            get
            {
                if ((this.mUICampaignsDataGridVieMenuBar == null))
                {
                    this.mUICampaignsDataGridVieMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUICampaignsDataGridVieMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUICampaignsDataGridVieMenuBar;
            }
        }
        
        public WinTitleBar UICampaignsDataGridVieTitleBar
        {
            get
            {
                if ((this.mUICampaignsDataGridVieTitleBar == null))
                {
                    this.mUICampaignsDataGridVieTitleBar = new WinTitleBar(this);
                }
                return this.mUICampaignsDataGridVieTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UICampaignsDataGridVieMenuBar1
        {
            get
            {
                if ((this.mUICampaignsDataGridVieMenuBar1 == null))
                {
                    this.mUICampaignsDataGridVieMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUICampaignsDataGridVieMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUICampaignsDataGridVieMenuBar1;
            }
        }
        
        public UIDataGridViewTable UIDataGridViewTable
        {
            get
            {
                if ((this.mUIDataGridViewTable == null))
                {
                    this.mUIDataGridViewTable = new UIDataGridViewTable(this);
                }
                return this.mUIDataGridViewTable;
            }
        }
        
        public WinScrollBar UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIVerticalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public WinScrollBar UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIHorizontalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UICampaignsDataGridVieGrip
        {
            get
            {
                if ((this.mUICampaignsDataGridVieGrip == null))
                {
                    this.mUICampaignsDataGridVieGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUICampaignsDataGridVieGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUICampaignsDataGridVieGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUICampaignsDataGridVieMenuBar;
        
        private WinTitleBar mUICampaignsDataGridVieTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUICampaignsDataGridVieMenuBar1;
        
        private UIDataGridViewTable mUIDataGridViewTable;
        
        private WinScrollBar mUIVerticalScrollBar;
        
        private WinScrollBar mUIHorizontalScrollBar;
        
        private WinControl mUICampaignsDataGridVieGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDataGridViewTable : WinTable
    {
        
        public UIDataGridViewTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTable.PropertyNames.Name] = "DataGridView";
            #endregion
        }
        
        #region Properties
        public UITopRowRow UITopRowRow
        {
            get
            {
                if ((this.mUITopRowRow == null))
                {
                    this.mUITopRowRow = new UITopRowRow(this);
                }
                return this.mUITopRowRow;
            }
        }
        
        public WinRow UIRow0Row
        {
            get
            {
                if ((this.mUIRow0Row == null))
                {
                    this.mUIRow0Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow0Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 0";
                    this.mUIRow0Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow0Row;
            }
        }
        
        public UIRow0Row1 UIRow0Row1
        {
            get
            {
                if ((this.mUIRow0Row1 == null))
                {
                    this.mUIRow0Row1 = new UIRow0Row1(this);
                }
                return this.mUIRow0Row1;
            }
        }
        
        public WinRow UIRow1Row
        {
            get
            {
                if ((this.mUIRow1Row == null))
                {
                    this.mUIRow1Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow1Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 1";
                    this.mUIRow1Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow1Row;
            }
        }
        
        public UIRow1Row1 UIRow1Row1
        {
            get
            {
                if ((this.mUIRow1Row1 == null))
                {
                    this.mUIRow1Row1 = new UIRow1Row1(this);
                }
                return this.mUIRow1Row1;
            }
        }
        
        public WinRow UIRow2Row
        {
            get
            {
                if ((this.mUIRow2Row == null))
                {
                    this.mUIRow2Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow2Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 2";
                    this.mUIRow2Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow2Row;
            }
        }
        
        public UIRow2Row1 UIRow2Row1
        {
            get
            {
                if ((this.mUIRow2Row1 == null))
                {
                    this.mUIRow2Row1 = new UIRow2Row1(this);
                }
                return this.mUIRow2Row1;
            }
        }
        
        public WinRow UIRow3Row
        {
            get
            {
                if ((this.mUIRow3Row == null))
                {
                    this.mUIRow3Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow3Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 3";
                    this.mUIRow3Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow3Row;
            }
        }
        
        public UIRow3Row1 UIRow3Row1
        {
            get
            {
                if ((this.mUIRow3Row1 == null))
                {
                    this.mUIRow3Row1 = new UIRow3Row1(this);
                }
                return this.mUIRow3Row1;
            }
        }
        
        public WinRow UIRow4Row
        {
            get
            {
                if ((this.mUIRow4Row == null))
                {
                    this.mUIRow4Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow4Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 4";
                    this.mUIRow4Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow4Row;
            }
        }
        
        public UIRow4Row1 UIRow4Row1
        {
            get
            {
                if ((this.mUIRow4Row1 == null))
                {
                    this.mUIRow4Row1 = new UIRow4Row1(this);
                }
                return this.mUIRow4Row1;
            }
        }
        
        public WinRow UIRow5Row
        {
            get
            {
                if ((this.mUIRow5Row == null))
                {
                    this.mUIRow5Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow5Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 5";
                    this.mUIRow5Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow5Row;
            }
        }
        
        public UIRow5Row1 UIRow5Row1
        {
            get
            {
                if ((this.mUIRow5Row1 == null))
                {
                    this.mUIRow5Row1 = new UIRow5Row1(this);
                }
                return this.mUIRow5Row1;
            }
        }
        
        public WinRow UIRow6Row
        {
            get
            {
                if ((this.mUIRow6Row == null))
                {
                    this.mUIRow6Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow6Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 6";
                    this.mUIRow6Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow6Row;
            }
        }
        
        public UIRow6Row1 UIRow6Row1
        {
            get
            {
                if ((this.mUIRow6Row1 == null))
                {
                    this.mUIRow6Row1 = new UIRow6Row1(this);
                }
                return this.mUIRow6Row1;
            }
        }
        
        public WinRow UIRow7Row
        {
            get
            {
                if ((this.mUIRow7Row == null))
                {
                    this.mUIRow7Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow7Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 7";
                    this.mUIRow7Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow7Row;
            }
        }
        
        public UIRow7Row1 UIRow7Row1
        {
            get
            {
                if ((this.mUIRow7Row1 == null))
                {
                    this.mUIRow7Row1 = new UIRow7Row1(this);
                }
                return this.mUIRow7Row1;
            }
        }
        
        public WinRow UIRow8Row
        {
            get
            {
                if ((this.mUIRow8Row == null))
                {
                    this.mUIRow8Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow8Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 8";
                    this.mUIRow8Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow8Row;
            }
        }
        
        public UIRow8Row1 UIRow8Row1
        {
            get
            {
                if ((this.mUIRow8Row1 == null))
                {
                    this.mUIRow8Row1 = new UIRow8Row1(this);
                }
                return this.mUIRow8Row1;
            }
        }
        
        public WinRow UIRow9Row
        {
            get
            {
                if ((this.mUIRow9Row == null))
                {
                    this.mUIRow9Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow9Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 9";
                    this.mUIRow9Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow9Row;
            }
        }
        
        public UIRow9Row1 UIRow9Row1
        {
            get
            {
                if ((this.mUIRow9Row1 == null))
                {
                    this.mUIRow9Row1 = new UIRow9Row1(this);
                }
                return this.mUIRow9Row1;
            }
        }
        
        public WinRow UIRow10Row
        {
            get
            {
                if ((this.mUIRow10Row == null))
                {
                    this.mUIRow10Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow10Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 10";
                    this.mUIRow10Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow10Row;
            }
        }
        
        public UIRow10Row1 UIRow10Row1
        {
            get
            {
                if ((this.mUIRow10Row1 == null))
                {
                    this.mUIRow10Row1 = new UIRow10Row1(this);
                }
                return this.mUIRow10Row1;
            }
        }
        
        public WinRow UIRow11Row
        {
            get
            {
                if ((this.mUIRow11Row == null))
                {
                    this.mUIRow11Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow11Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 11";
                    this.mUIRow11Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow11Row;
            }
        }
        
        public UIRow11Row1 UIRow11Row1
        {
            get
            {
                if ((this.mUIRow11Row1 == null))
                {
                    this.mUIRow11Row1 = new UIRow11Row1(this);
                }
                return this.mUIRow11Row1;
            }
        }
        
        public WinRow UIRow12Row
        {
            get
            {
                if ((this.mUIRow12Row == null))
                {
                    this.mUIRow12Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow12Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 12";
                    this.mUIRow12Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow12Row;
            }
        }
        
        public UIRow12Row1 UIRow12Row1
        {
            get
            {
                if ((this.mUIRow12Row1 == null))
                {
                    this.mUIRow12Row1 = new UIRow12Row1(this);
                }
                return this.mUIRow12Row1;
            }
        }
        
        public WinRow UIRow13Row
        {
            get
            {
                if ((this.mUIRow13Row == null))
                {
                    this.mUIRow13Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow13Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 13";
                    this.mUIRow13Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow13Row;
            }
        }
        
        public UIRow13Row1 UIRow13Row1
        {
            get
            {
                if ((this.mUIRow13Row1 == null))
                {
                    this.mUIRow13Row1 = new UIRow13Row1(this);
                }
                return this.mUIRow13Row1;
            }
        }
        
        public WinRow UIRow14Row
        {
            get
            {
                if ((this.mUIRow14Row == null))
                {
                    this.mUIRow14Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow14Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 14";
                    this.mUIRow14Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow14Row;
            }
        }
        
        public UIRow14Row1 UIRow14Row1
        {
            get
            {
                if ((this.mUIRow14Row1 == null))
                {
                    this.mUIRow14Row1 = new UIRow14Row1(this);
                }
                return this.mUIRow14Row1;
            }
        }
        
        public WinRow UIRow15Row
        {
            get
            {
                if ((this.mUIRow15Row == null))
                {
                    this.mUIRow15Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow15Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 15";
                    this.mUIRow15Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow15Row;
            }
        }
        
        public UIRow15Row1 UIRow15Row1
        {
            get
            {
                if ((this.mUIRow15Row1 == null))
                {
                    this.mUIRow15Row1 = new UIRow15Row1(this);
                }
                return this.mUIRow15Row1;
            }
        }
        
        public WinRow UIRow16Row
        {
            get
            {
                if ((this.mUIRow16Row == null))
                {
                    this.mUIRow16Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow16Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 16";
                    this.mUIRow16Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow16Row;
            }
        }
        
        public UIRow16Row1 UIRow16Row1
        {
            get
            {
                if ((this.mUIRow16Row1 == null))
                {
                    this.mUIRow16Row1 = new UIRow16Row1(this);
                }
                return this.mUIRow16Row1;
            }
        }
        
        public WinRow UIRow17Row
        {
            get
            {
                if ((this.mUIRow17Row == null))
                {
                    this.mUIRow17Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow17Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 17";
                    this.mUIRow17Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow17Row;
            }
        }
        
        public UIRow17Row1 UIRow17Row1
        {
            get
            {
                if ((this.mUIRow17Row1 == null))
                {
                    this.mUIRow17Row1 = new UIRow17Row1(this);
                }
                return this.mUIRow17Row1;
            }
        }
        
        public WinRow UIRow18Row
        {
            get
            {
                if ((this.mUIRow18Row == null))
                {
                    this.mUIRow18Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow18Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 18";
                    this.mUIRow18Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow18Row;
            }
        }
        
        public UIRow18Row1 UIRow18Row1
        {
            get
            {
                if ((this.mUIRow18Row1 == null))
                {
                    this.mUIRow18Row1 = new UIRow18Row1(this);
                }
                return this.mUIRow18Row1;
            }
        }
        
        public WinRow UIRow19Row
        {
            get
            {
                if ((this.mUIRow19Row == null))
                {
                    this.mUIRow19Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow19Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 19";
                    this.mUIRow19Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow19Row;
            }
        }
        
        public UIRow19Row1 UIRow19Row1
        {
            get
            {
                if ((this.mUIRow19Row1 == null))
                {
                    this.mUIRow19Row1 = new UIRow19Row1(this);
                }
                return this.mUIRow19Row1;
            }
        }
        
        public WinRow UIRow20Row
        {
            get
            {
                if ((this.mUIRow20Row == null))
                {
                    this.mUIRow20Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow20Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 20";
                    this.mUIRow20Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow20Row;
            }
        }
        
        public UIRow20Row1 UIRow20Row1
        {
            get
            {
                if ((this.mUIRow20Row1 == null))
                {
                    this.mUIRow20Row1 = new UIRow20Row1(this);
                }
                return this.mUIRow20Row1;
            }
        }
        
        public WinRow UIRow21Row
        {
            get
            {
                if ((this.mUIRow21Row == null))
                {
                    this.mUIRow21Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow21Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 21";
                    this.mUIRow21Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow21Row;
            }
        }
        
        public UIRow21Row1 UIRow21Row1
        {
            get
            {
                if ((this.mUIRow21Row1 == null))
                {
                    this.mUIRow21Row1 = new UIRow21Row1(this);
                }
                return this.mUIRow21Row1;
            }
        }
        
        public WinRow UIRow22Row
        {
            get
            {
                if ((this.mUIRow22Row == null))
                {
                    this.mUIRow22Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow22Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 22";
                    this.mUIRow22Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow22Row;
            }
        }
        
        public UIRow22Row1 UIRow22Row1
        {
            get
            {
                if ((this.mUIRow22Row1 == null))
                {
                    this.mUIRow22Row1 = new UIRow22Row1(this);
                }
                return this.mUIRow22Row1;
            }
        }
        
        public WinRow UIRow23Row
        {
            get
            {
                if ((this.mUIRow23Row == null))
                {
                    this.mUIRow23Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow23Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 23";
                    this.mUIRow23Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow23Row;
            }
        }
        
        public UIRow23Row1 UIRow23Row1
        {
            get
            {
                if ((this.mUIRow23Row1 == null))
                {
                    this.mUIRow23Row1 = new UIRow23Row1(this);
                }
                return this.mUIRow23Row1;
            }
        }
        
        public WinRow UIRow24Row
        {
            get
            {
                if ((this.mUIRow24Row == null))
                {
                    this.mUIRow24Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow24Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 24";
                    this.mUIRow24Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow24Row;
            }
        }
        
        public UIRow24Row1 UIRow24Row1
        {
            get
            {
                if ((this.mUIRow24Row1 == null))
                {
                    this.mUIRow24Row1 = new UIRow24Row1(this);
                }
                return this.mUIRow24Row1;
            }
        }
        
        public WinRow UIRow25Row
        {
            get
            {
                if ((this.mUIRow25Row == null))
                {
                    this.mUIRow25Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow25Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 25";
                    this.mUIRow25Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow25Row;
            }
        }
        
        public UIRow25Row1 UIRow25Row1
        {
            get
            {
                if ((this.mUIRow25Row1 == null))
                {
                    this.mUIRow25Row1 = new UIRow25Row1(this);
                }
                return this.mUIRow25Row1;
            }
        }
        
        public WinRow UIRow26Row
        {
            get
            {
                if ((this.mUIRow26Row == null))
                {
                    this.mUIRow26Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow26Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 26";
                    this.mUIRow26Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow26Row;
            }
        }
        
        public UIRow26Row1 UIRow26Row1
        {
            get
            {
                if ((this.mUIRow26Row1 == null))
                {
                    this.mUIRow26Row1 = new UIRow26Row1(this);
                }
                return this.mUIRow26Row1;
            }
        }
        
        public UIRow27Row UIRow27Row
        {
            get
            {
                if ((this.mUIRow27Row == null))
                {
                    this.mUIRow27Row = new UIRow27Row(this);
                }
                return this.mUIRow27Row;
            }
        }
        
        public UIRow28Row UIRow28Row
        {
            get
            {
                if ((this.mUIRow28Row == null))
                {
                    this.mUIRow28Row = new UIRow28Row(this);
                }
                return this.mUIRow28Row;
            }
        }
        
        public UIRow29Row UIRow29Row
        {
            get
            {
                if ((this.mUIRow29Row == null))
                {
                    this.mUIRow29Row = new UIRow29Row(this);
                }
                return this.mUIRow29Row;
            }
        }
        
        public WinRow UIRow30Row
        {
            get
            {
                if ((this.mUIRow30Row == null))
                {
                    this.mUIRow30Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow30Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 30";
                    this.mUIRow30Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow30Row;
            }
        }
        
        public UIRow30Row1 UIRow30Row1
        {
            get
            {
                if ((this.mUIRow30Row1 == null))
                {
                    this.mUIRow30Row1 = new UIRow30Row1(this);
                }
                return this.mUIRow30Row1;
            }
        }
        
        public UIRow31Row UIRow31Row
        {
            get
            {
                if ((this.mUIRow31Row == null))
                {
                    this.mUIRow31Row = new UIRow31Row(this);
                }
                return this.mUIRow31Row;
            }
        }
        
        public UIRow32Row UIRow32Row
        {
            get
            {
                if ((this.mUIRow32Row == null))
                {
                    this.mUIRow32Row = new UIRow32Row(this);
                }
                return this.mUIRow32Row;
            }
        }
        
        public WinRow UIRow33Row
        {
            get
            {
                if ((this.mUIRow33Row == null))
                {
                    this.mUIRow33Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow33Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 33";
                    this.mUIRow33Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow33Row;
            }
        }
        
        public UIRow33Row1 UIRow33Row1
        {
            get
            {
                if ((this.mUIRow33Row1 == null))
                {
                    this.mUIRow33Row1 = new UIRow33Row1(this);
                }
                return this.mUIRow33Row1;
            }
        }
        
        public WinRow UIRow34Row
        {
            get
            {
                if ((this.mUIRow34Row == null))
                {
                    this.mUIRow34Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow34Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 34";
                    this.mUIRow34Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow34Row;
            }
        }
        
        public UIRow34Row1 UIRow34Row1
        {
            get
            {
                if ((this.mUIRow34Row1 == null))
                {
                    this.mUIRow34Row1 = new UIRow34Row1(this);
                }
                return this.mUIRow34Row1;
            }
        }
        
        public WinRow UIRow35Row
        {
            get
            {
                if ((this.mUIRow35Row == null))
                {
                    this.mUIRow35Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow35Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 35";
                    this.mUIRow35Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow35Row;
            }
        }
        
        public UIRow35Row1 UIRow35Row1
        {
            get
            {
                if ((this.mUIRow35Row1 == null))
                {
                    this.mUIRow35Row1 = new UIRow35Row1(this);
                }
                return this.mUIRow35Row1;
            }
        }
        
        public WinRow UIRow36Row
        {
            get
            {
                if ((this.mUIRow36Row == null))
                {
                    this.mUIRow36Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow36Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 36";
                    this.mUIRow36Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow36Row;
            }
        }
        
        public UIRow36Row1 UIRow36Row1
        {
            get
            {
                if ((this.mUIRow36Row1 == null))
                {
                    this.mUIRow36Row1 = new UIRow36Row1(this);
                }
                return this.mUIRow36Row1;
            }
        }
        
        public WinRow UIRow37Row
        {
            get
            {
                if ((this.mUIRow37Row == null))
                {
                    this.mUIRow37Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow37Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 37";
                    this.mUIRow37Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow37Row;
            }
        }
        
        public UIRow37Row1 UIRow37Row1
        {
            get
            {
                if ((this.mUIRow37Row1 == null))
                {
                    this.mUIRow37Row1 = new UIRow37Row1(this);
                }
                return this.mUIRow37Row1;
            }
        }
        
        public UIRow38Row UIRow38Row
        {
            get
            {
                if ((this.mUIRow38Row == null))
                {
                    this.mUIRow38Row = new UIRow38Row(this);
                }
                return this.mUIRow38Row;
            }
        }
        
        public UIRow39Row UIRow39Row
        {
            get
            {
                if ((this.mUIRow39Row == null))
                {
                    this.mUIRow39Row = new UIRow39Row(this);
                }
                return this.mUIRow39Row;
            }
        }
        
        public WinRow UIRow40Row
        {
            get
            {
                if ((this.mUIRow40Row == null))
                {
                    this.mUIRow40Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow40Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 40";
                    this.mUIRow40Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow40Row;
            }
        }
        
        public UIRow40Row1 UIRow40Row1
        {
            get
            {
                if ((this.mUIRow40Row1 == null))
                {
                    this.mUIRow40Row1 = new UIRow40Row1(this);
                }
                return this.mUIRow40Row1;
            }
        }
        
        public WinRow UIRow41Row
        {
            get
            {
                if ((this.mUIRow41Row == null))
                {
                    this.mUIRow41Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow41Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 41";
                    this.mUIRow41Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow41Row;
            }
        }
        
        public UIRow41Row1 UIRow41Row1
        {
            get
            {
                if ((this.mUIRow41Row1 == null))
                {
                    this.mUIRow41Row1 = new UIRow41Row1(this);
                }
                return this.mUIRow41Row1;
            }
        }
        
        public WinRow UIRow42Row
        {
            get
            {
                if ((this.mUIRow42Row == null))
                {
                    this.mUIRow42Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow42Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 42";
                    this.mUIRow42Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow42Row;
            }
        }
        
        public UIRow42Row1 UIRow42Row1
        {
            get
            {
                if ((this.mUIRow42Row1 == null))
                {
                    this.mUIRow42Row1 = new UIRow42Row1(this);
                }
                return this.mUIRow42Row1;
            }
        }
        
        public WinRow UIRow43Row
        {
            get
            {
                if ((this.mUIRow43Row == null))
                {
                    this.mUIRow43Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow43Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 43";
                    this.mUIRow43Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow43Row;
            }
        }
        
        public UIRow43Row1 UIRow43Row1
        {
            get
            {
                if ((this.mUIRow43Row1 == null))
                {
                    this.mUIRow43Row1 = new UIRow43Row1(this);
                }
                return this.mUIRow43Row1;
            }
        }
        
        public WinRow UIRow44Row
        {
            get
            {
                if ((this.mUIRow44Row == null))
                {
                    this.mUIRow44Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow44Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 44";
                    this.mUIRow44Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow44Row;
            }
        }
        
        public UIRow44Row1 UIRow44Row1
        {
            get
            {
                if ((this.mUIRow44Row1 == null))
                {
                    this.mUIRow44Row1 = new UIRow44Row1(this);
                }
                return this.mUIRow44Row1;
            }
        }
        
        public WinRow UIRow45Row
        {
            get
            {
                if ((this.mUIRow45Row == null))
                {
                    this.mUIRow45Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow45Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 45";
                    this.mUIRow45Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow45Row;
            }
        }
        
        public UIRow45Row1 UIRow45Row1
        {
            get
            {
                if ((this.mUIRow45Row1 == null))
                {
                    this.mUIRow45Row1 = new UIRow45Row1(this);
                }
                return this.mUIRow45Row1;
            }
        }
        
        public WinRow UIRow46Row
        {
            get
            {
                if ((this.mUIRow46Row == null))
                {
                    this.mUIRow46Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow46Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 46";
                    this.mUIRow46Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow46Row;
            }
        }
        
        public UIRow46Row1 UIRow46Row1
        {
            get
            {
                if ((this.mUIRow46Row1 == null))
                {
                    this.mUIRow46Row1 = new UIRow46Row1(this);
                }
                return this.mUIRow46Row1;
            }
        }
        
        public WinRow UIRow47Row
        {
            get
            {
                if ((this.mUIRow47Row == null))
                {
                    this.mUIRow47Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow47Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 47";
                    this.mUIRow47Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow47Row;
            }
        }
        
        public UIRow47Row1 UIRow47Row1
        {
            get
            {
                if ((this.mUIRow47Row1 == null))
                {
                    this.mUIRow47Row1 = new UIRow47Row1(this);
                }
                return this.mUIRow47Row1;
            }
        }
        
        public WinRow UIRow48Row
        {
            get
            {
                if ((this.mUIRow48Row == null))
                {
                    this.mUIRow48Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow48Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 48";
                    this.mUIRow48Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow48Row;
            }
        }
        
        public UIRow48Row1 UIRow48Row1
        {
            get
            {
                if ((this.mUIRow48Row1 == null))
                {
                    this.mUIRow48Row1 = new UIRow48Row1(this);
                }
                return this.mUIRow48Row1;
            }
        }
        
        public WinRow UIRow49Row
        {
            get
            {
                if ((this.mUIRow49Row == null))
                {
                    this.mUIRow49Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow49Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 49";
                    this.mUIRow49Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow49Row;
            }
        }
        
        public UIRow49Row1 UIRow49Row1
        {
            get
            {
                if ((this.mUIRow49Row1 == null))
                {
                    this.mUIRow49Row1 = new UIRow49Row1(this);
                }
                return this.mUIRow49Row1;
            }
        }
        
        public WinRow UIRow50Row
        {
            get
            {
                if ((this.mUIRow50Row == null))
                {
                    this.mUIRow50Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow50Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 50";
                    this.mUIRow50Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow50Row;
            }
        }
        
        public UIRow50Row1 UIRow50Row1
        {
            get
            {
                if ((this.mUIRow50Row1 == null))
                {
                    this.mUIRow50Row1 = new UIRow50Row1(this);
                }
                return this.mUIRow50Row1;
            }
        }
        
        public WinRow UIRow51Row
        {
            get
            {
                if ((this.mUIRow51Row == null))
                {
                    this.mUIRow51Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow51Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 51";
                    this.mUIRow51Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow51Row;
            }
        }
        
        public UIRow51Row1 UIRow51Row1
        {
            get
            {
                if ((this.mUIRow51Row1 == null))
                {
                    this.mUIRow51Row1 = new UIRow51Row1(this);
                }
                return this.mUIRow51Row1;
            }
        }
        
        public WinRow UIRow52Row
        {
            get
            {
                if ((this.mUIRow52Row == null))
                {
                    this.mUIRow52Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow52Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 52";
                    this.mUIRow52Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow52Row;
            }
        }
        
        public UIRow52Row1 UIRow52Row1
        {
            get
            {
                if ((this.mUIRow52Row1 == null))
                {
                    this.mUIRow52Row1 = new UIRow52Row1(this);
                }
                return this.mUIRow52Row1;
            }
        }
        
        public WinRow UIRow53Row
        {
            get
            {
                if ((this.mUIRow53Row == null))
                {
                    this.mUIRow53Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow53Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 53";
                    this.mUIRow53Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow53Row;
            }
        }
        
        public UIRow53Row1 UIRow53Row1
        {
            get
            {
                if ((this.mUIRow53Row1 == null))
                {
                    this.mUIRow53Row1 = new UIRow53Row1(this);
                }
                return this.mUIRow53Row1;
            }
        }
        
        public WinRow UIRow54Row
        {
            get
            {
                if ((this.mUIRow54Row == null))
                {
                    this.mUIRow54Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow54Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 54";
                    this.mUIRow54Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow54Row;
            }
        }
        
        public UIRow54Row1 UIRow54Row1
        {
            get
            {
                if ((this.mUIRow54Row1 == null))
                {
                    this.mUIRow54Row1 = new UIRow54Row1(this);
                }
                return this.mUIRow54Row1;
            }
        }
        
        public WinRow UIRow55Row
        {
            get
            {
                if ((this.mUIRow55Row == null))
                {
                    this.mUIRow55Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow55Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 55";
                    this.mUIRow55Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow55Row;
            }
        }
        
        public UIRow55Row1 UIRow55Row1
        {
            get
            {
                if ((this.mUIRow55Row1 == null))
                {
                    this.mUIRow55Row1 = new UIRow55Row1(this);
                }
                return this.mUIRow55Row1;
            }
        }
        
        public WinRow UIRow56Row
        {
            get
            {
                if ((this.mUIRow56Row == null))
                {
                    this.mUIRow56Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow56Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 56";
                    this.mUIRow56Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow56Row;
            }
        }
        
        public UIRow56Row1 UIRow56Row1
        {
            get
            {
                if ((this.mUIRow56Row1 == null))
                {
                    this.mUIRow56Row1 = new UIRow56Row1(this);
                }
                return this.mUIRow56Row1;
            }
        }
        
        public WinRow UIRow57Row
        {
            get
            {
                if ((this.mUIRow57Row == null))
                {
                    this.mUIRow57Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow57Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 57";
                    this.mUIRow57Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow57Row;
            }
        }
        
        public UIRow57Row1 UIRow57Row1
        {
            get
            {
                if ((this.mUIRow57Row1 == null))
                {
                    this.mUIRow57Row1 = new UIRow57Row1(this);
                }
                return this.mUIRow57Row1;
            }
        }
        
        public WinRow UIRow58Row
        {
            get
            {
                if ((this.mUIRow58Row == null))
                {
                    this.mUIRow58Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow58Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 58";
                    this.mUIRow58Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow58Row;
            }
        }
        
        public UIRow58Row1 UIRow58Row1
        {
            get
            {
                if ((this.mUIRow58Row1 == null))
                {
                    this.mUIRow58Row1 = new UIRow58Row1(this);
                }
                return this.mUIRow58Row1;
            }
        }
        
        public WinRow UIRow59Row
        {
            get
            {
                if ((this.mUIRow59Row == null))
                {
                    this.mUIRow59Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow59Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 59";
                    this.mUIRow59Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow59Row;
            }
        }
        
        public UIRow59Row1 UIRow59Row1
        {
            get
            {
                if ((this.mUIRow59Row1 == null))
                {
                    this.mUIRow59Row1 = new UIRow59Row1(this);
                }
                return this.mUIRow59Row1;
            }
        }
        
        public WinRow UIRow60Row
        {
            get
            {
                if ((this.mUIRow60Row == null))
                {
                    this.mUIRow60Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow60Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 60";
                    this.mUIRow60Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow60Row;
            }
        }
        
        public UIRow60Row1 UIRow60Row1
        {
            get
            {
                if ((this.mUIRow60Row1 == null))
                {
                    this.mUIRow60Row1 = new UIRow60Row1(this);
                }
                return this.mUIRow60Row1;
            }
        }
        
        public WinRow UIRow61Row
        {
            get
            {
                if ((this.mUIRow61Row == null))
                {
                    this.mUIRow61Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow61Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 61";
                    this.mUIRow61Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow61Row;
            }
        }
        
        public UIRow61Row1 UIRow61Row1
        {
            get
            {
                if ((this.mUIRow61Row1 == null))
                {
                    this.mUIRow61Row1 = new UIRow61Row1(this);
                }
                return this.mUIRow61Row1;
            }
        }
        
        public WinRow UIRow62Row
        {
            get
            {
                if ((this.mUIRow62Row == null))
                {
                    this.mUIRow62Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow62Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 62";
                    this.mUIRow62Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow62Row;
            }
        }
        
        public UIRow62Row1 UIRow62Row1
        {
            get
            {
                if ((this.mUIRow62Row1 == null))
                {
                    this.mUIRow62Row1 = new UIRow62Row1(this);
                }
                return this.mUIRow62Row1;
            }
        }
        
        public WinRow UIRow63Row
        {
            get
            {
                if ((this.mUIRow63Row == null))
                {
                    this.mUIRow63Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow63Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 63";
                    this.mUIRow63Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow63Row;
            }
        }
        
        public UIRow63Row1 UIRow63Row1
        {
            get
            {
                if ((this.mUIRow63Row1 == null))
                {
                    this.mUIRow63Row1 = new UIRow63Row1(this);
                }
                return this.mUIRow63Row1;
            }
        }
        
        public WinRow UIRow64Row
        {
            get
            {
                if ((this.mUIRow64Row == null))
                {
                    this.mUIRow64Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow64Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 64";
                    this.mUIRow64Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow64Row;
            }
        }
        
        public UIRow64Row1 UIRow64Row1
        {
            get
            {
                if ((this.mUIRow64Row1 == null))
                {
                    this.mUIRow64Row1 = new UIRow64Row1(this);
                }
                return this.mUIRow64Row1;
            }
        }
        
        public WinRow UIRow65Row
        {
            get
            {
                if ((this.mUIRow65Row == null))
                {
                    this.mUIRow65Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow65Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 65";
                    this.mUIRow65Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow65Row;
            }
        }
        
        public UIRow65Row1 UIRow65Row1
        {
            get
            {
                if ((this.mUIRow65Row1 == null))
                {
                    this.mUIRow65Row1 = new UIRow65Row1(this);
                }
                return this.mUIRow65Row1;
            }
        }
        
        public WinRow UIRow66Row
        {
            get
            {
                if ((this.mUIRow66Row == null))
                {
                    this.mUIRow66Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow66Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 66";
                    this.mUIRow66Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow66Row;
            }
        }
        
        public UIRow66Row1 UIRow66Row1
        {
            get
            {
                if ((this.mUIRow66Row1 == null))
                {
                    this.mUIRow66Row1 = new UIRow66Row1(this);
                }
                return this.mUIRow66Row1;
            }
        }
        
        public WinRow UIRow67Row
        {
            get
            {
                if ((this.mUIRow67Row == null))
                {
                    this.mUIRow67Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow67Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 67";
                    this.mUIRow67Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow67Row;
            }
        }
        
        public UIRow67Row1 UIRow67Row1
        {
            get
            {
                if ((this.mUIRow67Row1 == null))
                {
                    this.mUIRow67Row1 = new UIRow67Row1(this);
                }
                return this.mUIRow67Row1;
            }
        }
        
        public WinRow UIRow68Row
        {
            get
            {
                if ((this.mUIRow68Row == null))
                {
                    this.mUIRow68Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow68Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 68";
                    this.mUIRow68Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow68Row;
            }
        }
        
        public UIRow68Row1 UIRow68Row1
        {
            get
            {
                if ((this.mUIRow68Row1 == null))
                {
                    this.mUIRow68Row1 = new UIRow68Row1(this);
                }
                return this.mUIRow68Row1;
            }
        }
        
        public WinRow UIRow69Row
        {
            get
            {
                if ((this.mUIRow69Row == null))
                {
                    this.mUIRow69Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow69Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 69";
                    this.mUIRow69Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow69Row;
            }
        }
        
        public UIRow69Row1 UIRow69Row1
        {
            get
            {
                if ((this.mUIRow69Row1 == null))
                {
                    this.mUIRow69Row1 = new UIRow69Row1(this);
                }
                return this.mUIRow69Row1;
            }
        }
        
        public WinRow UIRow70Row
        {
            get
            {
                if ((this.mUIRow70Row == null))
                {
                    this.mUIRow70Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow70Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 70";
                    this.mUIRow70Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow70Row;
            }
        }
        
        public UIRow70Row1 UIRow70Row1
        {
            get
            {
                if ((this.mUIRow70Row1 == null))
                {
                    this.mUIRow70Row1 = new UIRow70Row1(this);
                }
                return this.mUIRow70Row1;
            }
        }
        
        public WinRow UIRow71Row
        {
            get
            {
                if ((this.mUIRow71Row == null))
                {
                    this.mUIRow71Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow71Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 71";
                    this.mUIRow71Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow71Row;
            }
        }
        
        public UIRow71Row1 UIRow71Row1
        {
            get
            {
                if ((this.mUIRow71Row1 == null))
                {
                    this.mUIRow71Row1 = new UIRow71Row1(this);
                }
                return this.mUIRow71Row1;
            }
        }
        
        public WinRow UIRow72Row
        {
            get
            {
                if ((this.mUIRow72Row == null))
                {
                    this.mUIRow72Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow72Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 72";
                    this.mUIRow72Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow72Row;
            }
        }
        
        public UIRow72Row1 UIRow72Row1
        {
            get
            {
                if ((this.mUIRow72Row1 == null))
                {
                    this.mUIRow72Row1 = new UIRow72Row1(this);
                }
                return this.mUIRow72Row1;
            }
        }
        
        public WinRow UIRow73Row
        {
            get
            {
                if ((this.mUIRow73Row == null))
                {
                    this.mUIRow73Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow73Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 73";
                    this.mUIRow73Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow73Row;
            }
        }
        
        public UIRow73Row1 UIRow73Row1
        {
            get
            {
                if ((this.mUIRow73Row1 == null))
                {
                    this.mUIRow73Row1 = new UIRow73Row1(this);
                }
                return this.mUIRow73Row1;
            }
        }
        
        public WinRow UIRow74Row
        {
            get
            {
                if ((this.mUIRow74Row == null))
                {
                    this.mUIRow74Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow74Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 74";
                    this.mUIRow74Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow74Row;
            }
        }
        
        public UIRow74Row1 UIRow74Row1
        {
            get
            {
                if ((this.mUIRow74Row1 == null))
                {
                    this.mUIRow74Row1 = new UIRow74Row1(this);
                }
                return this.mUIRow74Row1;
            }
        }
        
        public WinRow UIRow75Row
        {
            get
            {
                if ((this.mUIRow75Row == null))
                {
                    this.mUIRow75Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow75Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 75";
                    this.mUIRow75Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow75Row;
            }
        }
        
        public UIRow75Row1 UIRow75Row1
        {
            get
            {
                if ((this.mUIRow75Row1 == null))
                {
                    this.mUIRow75Row1 = new UIRow75Row1(this);
                }
                return this.mUIRow75Row1;
            }
        }
        
        public WinRow UIRow76Row
        {
            get
            {
                if ((this.mUIRow76Row == null))
                {
                    this.mUIRow76Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow76Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 76";
                    this.mUIRow76Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow76Row;
            }
        }
        
        public UIRow76Row1 UIRow76Row1
        {
            get
            {
                if ((this.mUIRow76Row1 == null))
                {
                    this.mUIRow76Row1 = new UIRow76Row1(this);
                }
                return this.mUIRow76Row1;
            }
        }
        
        public WinRow UIRow77Row
        {
            get
            {
                if ((this.mUIRow77Row == null))
                {
                    this.mUIRow77Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow77Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 77";
                    this.mUIRow77Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow77Row;
            }
        }
        
        public UIRow77Row1 UIRow77Row1
        {
            get
            {
                if ((this.mUIRow77Row1 == null))
                {
                    this.mUIRow77Row1 = new UIRow77Row1(this);
                }
                return this.mUIRow77Row1;
            }
        }
        
        public WinRow UIRow78Row
        {
            get
            {
                if ((this.mUIRow78Row == null))
                {
                    this.mUIRow78Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow78Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 78";
                    this.mUIRow78Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow78Row;
            }
        }
        
        public UIRow78Row1 UIRow78Row1
        {
            get
            {
                if ((this.mUIRow78Row1 == null))
                {
                    this.mUIRow78Row1 = new UIRow78Row1(this);
                }
                return this.mUIRow78Row1;
            }
        }
        
        public WinRow UIRow79Row
        {
            get
            {
                if ((this.mUIRow79Row == null))
                {
                    this.mUIRow79Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow79Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 79";
                    this.mUIRow79Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow79Row;
            }
        }
        
        public UIRow79Row1 UIRow79Row1
        {
            get
            {
                if ((this.mUIRow79Row1 == null))
                {
                    this.mUIRow79Row1 = new UIRow79Row1(this);
                }
                return this.mUIRow79Row1;
            }
        }
        
        public WinRow UIRow80Row
        {
            get
            {
                if ((this.mUIRow80Row == null))
                {
                    this.mUIRow80Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow80Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 80";
                    this.mUIRow80Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow80Row;
            }
        }
        
        public UIRow80Row1 UIRow80Row1
        {
            get
            {
                if ((this.mUIRow80Row1 == null))
                {
                    this.mUIRow80Row1 = new UIRow80Row1(this);
                }
                return this.mUIRow80Row1;
            }
        }
        
        public WinRow UIRow81Row
        {
            get
            {
                if ((this.mUIRow81Row == null))
                {
                    this.mUIRow81Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow81Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 81";
                    this.mUIRow81Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow81Row;
            }
        }
        
        public UIRow81Row1 UIRow81Row1
        {
            get
            {
                if ((this.mUIRow81Row1 == null))
                {
                    this.mUIRow81Row1 = new UIRow81Row1(this);
                }
                return this.mUIRow81Row1;
            }
        }
        
        public WinRow UIRow82Row
        {
            get
            {
                if ((this.mUIRow82Row == null))
                {
                    this.mUIRow82Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow82Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 82";
                    this.mUIRow82Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow82Row;
            }
        }
        
        public UIRow82Row1 UIRow82Row1
        {
            get
            {
                if ((this.mUIRow82Row1 == null))
                {
                    this.mUIRow82Row1 = new UIRow82Row1(this);
                }
                return this.mUIRow82Row1;
            }
        }
        
        public WinRow UIRow83Row
        {
            get
            {
                if ((this.mUIRow83Row == null))
                {
                    this.mUIRow83Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow83Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 83";
                    this.mUIRow83Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow83Row;
            }
        }
        
        public UIRow83Row1 UIRow83Row1
        {
            get
            {
                if ((this.mUIRow83Row1 == null))
                {
                    this.mUIRow83Row1 = new UIRow83Row1(this);
                }
                return this.mUIRow83Row1;
            }
        }
        
        public WinRow UIRow84Row
        {
            get
            {
                if ((this.mUIRow84Row == null))
                {
                    this.mUIRow84Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow84Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 84";
                    this.mUIRow84Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow84Row;
            }
        }
        
        public UIRow84Row1 UIRow84Row1
        {
            get
            {
                if ((this.mUIRow84Row1 == null))
                {
                    this.mUIRow84Row1 = new UIRow84Row1(this);
                }
                return this.mUIRow84Row1;
            }
        }
        
        public WinRow UIRow85Row
        {
            get
            {
                if ((this.mUIRow85Row == null))
                {
                    this.mUIRow85Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow85Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 85";
                    this.mUIRow85Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow85Row;
            }
        }
        
        public UIRow85Row1 UIRow85Row1
        {
            get
            {
                if ((this.mUIRow85Row1 == null))
                {
                    this.mUIRow85Row1 = new UIRow85Row1(this);
                }
                return this.mUIRow85Row1;
            }
        }
        
        public WinRow UIRow86Row
        {
            get
            {
                if ((this.mUIRow86Row == null))
                {
                    this.mUIRow86Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow86Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 86";
                    this.mUIRow86Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow86Row;
            }
        }
        
        public UIRow86Row1 UIRow86Row1
        {
            get
            {
                if ((this.mUIRow86Row1 == null))
                {
                    this.mUIRow86Row1 = new UIRow86Row1(this);
                }
                return this.mUIRow86Row1;
            }
        }
        
        public WinRow UIRow87Row
        {
            get
            {
                if ((this.mUIRow87Row == null))
                {
                    this.mUIRow87Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow87Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 87";
                    this.mUIRow87Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow87Row;
            }
        }
        
        public UIRow87Row1 UIRow87Row1
        {
            get
            {
                if ((this.mUIRow87Row1 == null))
                {
                    this.mUIRow87Row1 = new UIRow87Row1(this);
                }
                return this.mUIRow87Row1;
            }
        }
        
        public WinRow UIRow88Row
        {
            get
            {
                if ((this.mUIRow88Row == null))
                {
                    this.mUIRow88Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow88Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 88";
                    this.mUIRow88Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow88Row;
            }
        }
        
        public UIRow88Row1 UIRow88Row1
        {
            get
            {
                if ((this.mUIRow88Row1 == null))
                {
                    this.mUIRow88Row1 = new UIRow88Row1(this);
                }
                return this.mUIRow88Row1;
            }
        }
        
        public WinRow UIRow89Row
        {
            get
            {
                if ((this.mUIRow89Row == null))
                {
                    this.mUIRow89Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow89Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 89";
                    this.mUIRow89Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow89Row;
            }
        }
        
        public UIRow89Row1 UIRow89Row1
        {
            get
            {
                if ((this.mUIRow89Row1 == null))
                {
                    this.mUIRow89Row1 = new UIRow89Row1(this);
                }
                return this.mUIRow89Row1;
            }
        }
        
        public WinRow UIRow90Row
        {
            get
            {
                if ((this.mUIRow90Row == null))
                {
                    this.mUIRow90Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow90Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 90";
                    this.mUIRow90Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow90Row;
            }
        }
        
        public UIRow90Row1 UIRow90Row1
        {
            get
            {
                if ((this.mUIRow90Row1 == null))
                {
                    this.mUIRow90Row1 = new UIRow90Row1(this);
                }
                return this.mUIRow90Row1;
            }
        }
        
        public WinRow UIRow91Row
        {
            get
            {
                if ((this.mUIRow91Row == null))
                {
                    this.mUIRow91Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow91Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 91";
                    this.mUIRow91Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow91Row;
            }
        }
        
        public UIRow91Row1 UIRow91Row1
        {
            get
            {
                if ((this.mUIRow91Row1 == null))
                {
                    this.mUIRow91Row1 = new UIRow91Row1(this);
                }
                return this.mUIRow91Row1;
            }
        }
        
        public WinRow UIRow92Row
        {
            get
            {
                if ((this.mUIRow92Row == null))
                {
                    this.mUIRow92Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow92Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 92";
                    this.mUIRow92Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUIRow92Row;
            }
        }
        
        public UIRow92Row1 UIRow92Row1
        {
            get
            {
                if ((this.mUIRow92Row1 == null))
                {
                    this.mUIRow92Row1 = new UIRow92Row1(this);
                }
                return this.mUIRow92Row1;
            }
        }
        #endregion
        
        #region Fields
        private UITopRowRow mUITopRowRow;
        
        private WinRow mUIRow0Row;
        
        private UIRow0Row1 mUIRow0Row1;
        
        private WinRow mUIRow1Row;
        
        private UIRow1Row1 mUIRow1Row1;
        
        private WinRow mUIRow2Row;
        
        private UIRow2Row1 mUIRow2Row1;
        
        private WinRow mUIRow3Row;
        
        private UIRow3Row1 mUIRow3Row1;
        
        private WinRow mUIRow4Row;
        
        private UIRow4Row1 mUIRow4Row1;
        
        private WinRow mUIRow5Row;
        
        private UIRow5Row1 mUIRow5Row1;
        
        private WinRow mUIRow6Row;
        
        private UIRow6Row1 mUIRow6Row1;
        
        private WinRow mUIRow7Row;
        
        private UIRow7Row1 mUIRow7Row1;
        
        private WinRow mUIRow8Row;
        
        private UIRow8Row1 mUIRow8Row1;
        
        private WinRow mUIRow9Row;
        
        private UIRow9Row1 mUIRow9Row1;
        
        private WinRow mUIRow10Row;
        
        private UIRow10Row1 mUIRow10Row1;
        
        private WinRow mUIRow11Row;
        
        private UIRow11Row1 mUIRow11Row1;
        
        private WinRow mUIRow12Row;
        
        private UIRow12Row1 mUIRow12Row1;
        
        private WinRow mUIRow13Row;
        
        private UIRow13Row1 mUIRow13Row1;
        
        private WinRow mUIRow14Row;
        
        private UIRow14Row1 mUIRow14Row1;
        
        private WinRow mUIRow15Row;
        
        private UIRow15Row1 mUIRow15Row1;
        
        private WinRow mUIRow16Row;
        
        private UIRow16Row1 mUIRow16Row1;
        
        private WinRow mUIRow17Row;
        
        private UIRow17Row1 mUIRow17Row1;
        
        private WinRow mUIRow18Row;
        
        private UIRow18Row1 mUIRow18Row1;
        
        private WinRow mUIRow19Row;
        
        private UIRow19Row1 mUIRow19Row1;
        
        private WinRow mUIRow20Row;
        
        private UIRow20Row1 mUIRow20Row1;
        
        private WinRow mUIRow21Row;
        
        private UIRow21Row1 mUIRow21Row1;
        
        private WinRow mUIRow22Row;
        
        private UIRow22Row1 mUIRow22Row1;
        
        private WinRow mUIRow23Row;
        
        private UIRow23Row1 mUIRow23Row1;
        
        private WinRow mUIRow24Row;
        
        private UIRow24Row1 mUIRow24Row1;
        
        private WinRow mUIRow25Row;
        
        private UIRow25Row1 mUIRow25Row1;
        
        private WinRow mUIRow26Row;
        
        private UIRow26Row1 mUIRow26Row1;
        
        private UIRow27Row mUIRow27Row;
        
        private UIRow28Row mUIRow28Row;
        
        private UIRow29Row mUIRow29Row;
        
        private WinRow mUIRow30Row;
        
        private UIRow30Row1 mUIRow30Row1;
        
        private UIRow31Row mUIRow31Row;
        
        private UIRow32Row mUIRow32Row;
        
        private WinRow mUIRow33Row;
        
        private UIRow33Row1 mUIRow33Row1;
        
        private WinRow mUIRow34Row;
        
        private UIRow34Row1 mUIRow34Row1;
        
        private WinRow mUIRow35Row;
        
        private UIRow35Row1 mUIRow35Row1;
        
        private WinRow mUIRow36Row;
        
        private UIRow36Row1 mUIRow36Row1;
        
        private WinRow mUIRow37Row;
        
        private UIRow37Row1 mUIRow37Row1;
        
        private UIRow38Row mUIRow38Row;
        
        private UIRow39Row mUIRow39Row;
        
        private WinRow mUIRow40Row;
        
        private UIRow40Row1 mUIRow40Row1;
        
        private WinRow mUIRow41Row;
        
        private UIRow41Row1 mUIRow41Row1;
        
        private WinRow mUIRow42Row;
        
        private UIRow42Row1 mUIRow42Row1;
        
        private WinRow mUIRow43Row;
        
        private UIRow43Row1 mUIRow43Row1;
        
        private WinRow mUIRow44Row;
        
        private UIRow44Row1 mUIRow44Row1;
        
        private WinRow mUIRow45Row;
        
        private UIRow45Row1 mUIRow45Row1;
        
        private WinRow mUIRow46Row;
        
        private UIRow46Row1 mUIRow46Row1;
        
        private WinRow mUIRow47Row;
        
        private UIRow47Row1 mUIRow47Row1;
        
        private WinRow mUIRow48Row;
        
        private UIRow48Row1 mUIRow48Row1;
        
        private WinRow mUIRow49Row;
        
        private UIRow49Row1 mUIRow49Row1;
        
        private WinRow mUIRow50Row;
        
        private UIRow50Row1 mUIRow50Row1;
        
        private WinRow mUIRow51Row;
        
        private UIRow51Row1 mUIRow51Row1;
        
        private WinRow mUIRow52Row;
        
        private UIRow52Row1 mUIRow52Row1;
        
        private WinRow mUIRow53Row;
        
        private UIRow53Row1 mUIRow53Row1;
        
        private WinRow mUIRow54Row;
        
        private UIRow54Row1 mUIRow54Row1;
        
        private WinRow mUIRow55Row;
        
        private UIRow55Row1 mUIRow55Row1;
        
        private WinRow mUIRow56Row;
        
        private UIRow56Row1 mUIRow56Row1;
        
        private WinRow mUIRow57Row;
        
        private UIRow57Row1 mUIRow57Row1;
        
        private WinRow mUIRow58Row;
        
        private UIRow58Row1 mUIRow58Row1;
        
        private WinRow mUIRow59Row;
        
        private UIRow59Row1 mUIRow59Row1;
        
        private WinRow mUIRow60Row;
        
        private UIRow60Row1 mUIRow60Row1;
        
        private WinRow mUIRow61Row;
        
        private UIRow61Row1 mUIRow61Row1;
        
        private WinRow mUIRow62Row;
        
        private UIRow62Row1 mUIRow62Row1;
        
        private WinRow mUIRow63Row;
        
        private UIRow63Row1 mUIRow63Row1;
        
        private WinRow mUIRow64Row;
        
        private UIRow64Row1 mUIRow64Row1;
        
        private WinRow mUIRow65Row;
        
        private UIRow65Row1 mUIRow65Row1;
        
        private WinRow mUIRow66Row;
        
        private UIRow66Row1 mUIRow66Row1;
        
        private WinRow mUIRow67Row;
        
        private UIRow67Row1 mUIRow67Row1;
        
        private WinRow mUIRow68Row;
        
        private UIRow68Row1 mUIRow68Row1;
        
        private WinRow mUIRow69Row;
        
        private UIRow69Row1 mUIRow69Row1;
        
        private WinRow mUIRow70Row;
        
        private UIRow70Row1 mUIRow70Row1;
        
        private WinRow mUIRow71Row;
        
        private UIRow71Row1 mUIRow71Row1;
        
        private WinRow mUIRow72Row;
        
        private UIRow72Row1 mUIRow72Row1;
        
        private WinRow mUIRow73Row;
        
        private UIRow73Row1 mUIRow73Row1;
        
        private WinRow mUIRow74Row;
        
        private UIRow74Row1 mUIRow74Row1;
        
        private WinRow mUIRow75Row;
        
        private UIRow75Row1 mUIRow75Row1;
        
        private WinRow mUIRow76Row;
        
        private UIRow76Row1 mUIRow76Row1;
        
        private WinRow mUIRow77Row;
        
        private UIRow77Row1 mUIRow77Row1;
        
        private WinRow mUIRow78Row;
        
        private UIRow78Row1 mUIRow78Row1;
        
        private WinRow mUIRow79Row;
        
        private UIRow79Row1 mUIRow79Row1;
        
        private WinRow mUIRow80Row;
        
        private UIRow80Row1 mUIRow80Row1;
        
        private WinRow mUIRow81Row;
        
        private UIRow81Row1 mUIRow81Row1;
        
        private WinRow mUIRow82Row;
        
        private UIRow82Row1 mUIRow82Row1;
        
        private WinRow mUIRow83Row;
        
        private UIRow83Row1 mUIRow83Row1;
        
        private WinRow mUIRow84Row;
        
        private UIRow84Row1 mUIRow84Row1;
        
        private WinRow mUIRow85Row;
        
        private UIRow85Row1 mUIRow85Row1;
        
        private WinRow mUIRow86Row;
        
        private UIRow86Row1 mUIRow86Row1;
        
        private WinRow mUIRow87Row;
        
        private UIRow87Row1 mUIRow87Row1;
        
        private WinRow mUIRow88Row;
        
        private UIRow88Row1 mUIRow88Row1;
        
        private WinRow mUIRow89Row;
        
        private UIRow89Row1 mUIRow89Row1;
        
        private WinRow mUIRow90Row;
        
        private UIRow90Row1 mUIRow90Row1;
        
        private WinRow mUIRow91Row;
        
        private UIRow91Row1 mUIRow91Row1;
        
        private WinRow mUIRow92Row;
        
        private UIRow92Row1 mUIRow92Row1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UITopRowRow : WinRow
    {
        
        public UITopRowRow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Name] = "Top Row";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinColumnHeader UIItemColumnHeader
        {
            get
            {
                if ((this.mUIItemColumnHeader == null))
                {
                    this.mUIItemColumnHeader = new WinColumnHeader(this);
                }
                return this.mUIItemColumnHeader;
            }
        }
        
        public WinColumnHeader UICampaignNameColumnHeader
        {
            get
            {
                if ((this.mUICampaignNameColumnHeader == null))
                {
                    this.mUICampaignNameColumnHeader = new WinColumnHeader(this);
                    #region Search Criteria
                    this.mUICampaignNameColumnHeader.SearchProperties[WinControl.PropertyNames.Name] = "Campaign Name";
                    #endregion
                }
                return this.mUICampaignNameColumnHeader;
            }
        }
        #endregion
        
        #region Fields
        private WinColumnHeader mUIItemColumnHeader;
        
        private WinColumnHeader mUICampaignNameColumnHeader;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow0Row1 : WinRow
    {
        
        public UIRow0Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;00_1_3";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIItem00_1_3Cell
        {
            get
            {
                if ((this.mUIItem00_1_3Cell == null))
                {
                    this.mUIItem00_1_3Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem00_1_3Cell.SearchProperties[WinCell.PropertyNames.Value] = "00_1_3";
                    #endregion
                }
                return this.mUIItem00_1_3Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIItem00_1_3Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow1Row1 : WinRow
    {
        
        public UIRow1Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;2_1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIItem2_1Cell
        {
            get
            {
                if ((this.mUIItem2_1Cell == null))
                {
                    this.mUIItem2_1Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem2_1Cell.SearchProperties[WinCell.PropertyNames.Value] = "2_1";
                    #endregion
                }
                return this.mUIItem2_1Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIItem2_1Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow2Row1 : WinRow
    {
        
        public UIRow2Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;3";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIItem3Cell
        {
            get
            {
                if ((this.mUIItem3Cell == null))
                {
                    this.mUIItem3Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem3Cell.SearchProperties[WinCell.PropertyNames.Value] = "3";
                    #endregion
                }
                return this.mUIItem3Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIItem3Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow3Row1 : WinRow
    {
        
        public UIRow3Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;3_1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIItem3_1Cell
        {
            get
            {
                if ((this.mUIItem3_1Cell == null))
                {
                    this.mUIItem3_1Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem3_1Cell.SearchProperties[WinCell.PropertyNames.Value] = "3_1";
                    #endregion
                }
                return this.mUIItem3_1Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIItem3_1Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow4Row1 : WinRow
    {
        
        public UIRow4Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;4tYwGqJxcI";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIItem4tYwGqJxcICell
        {
            get
            {
                if ((this.mUIItem4tYwGqJxcICell == null))
                {
                    this.mUIItem4tYwGqJxcICell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem4tYwGqJxcICell.SearchProperties[WinCell.PropertyNames.Value] = "4tYwGqJxcI";
                    #endregion
                }
                return this.mUIItem4tYwGqJxcICell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIItem4tYwGqJxcICell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow5Row1 : WinRow
    {
        
        public UIRow5Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;adSage.AFF2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIAdSageAFF2Cell
        {
            get
            {
                if ((this.mUIAdSageAFF2Cell == null))
                {
                    this.mUIAdSageAFF2Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAdSageAFF2Cell.SearchProperties[WinCell.PropertyNames.Value] = "adSage.AFF2";
                    #endregion
                }
                return this.mUIAdSageAFF2Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIAdSageAFF2Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow6Row1 : WinRow
    {
        
        public UIRow6Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;AdsForMajor22";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIAdsForMajor22Cell
        {
            get
            {
                if ((this.mUIAdsForMajor22Cell == null))
                {
                    this.mUIAdsForMajor22Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAdsForMajor22Cell.SearchProperties[WinCell.PropertyNames.Value] = "AdsForMajor22";
                    #endregion
                }
                return this.mUIAdsForMajor22Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIAdsForMajor22Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow7Row1 : WinRow
    {
        
        public UIRow7Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;AFF3.1.2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIAFF312Cell
        {
            get
            {
                if ((this.mUIAFF312Cell == null))
                {
                    this.mUIAFF312Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAFF312Cell.SearchProperties[WinCell.PropertyNames.Value] = "AFF3.1.2";
                    #endregion
                }
                return this.mUIAFF312Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIAFF312Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow8Row1 : WinRow
    {
        
        public UIRow8Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;AFF3.2.0";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIAFF320Cell
        {
            get
            {
                if ((this.mUIAFF320Cell == null))
                {
                    this.mUIAFF320Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAFF320Cell.SearchProperties[WinCell.PropertyNames.Value] = "AFF3.2.0";
                    #endregion
                }
                return this.mUIAFF320Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIAFF320Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow9Row1 : WinRow
    {
        
        public UIRow9Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;AFF3.2.0_1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIAFF320_1Cell
        {
            get
            {
                if ((this.mUIAFF320_1Cell == null))
                {
                    this.mUIAFF320_1Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAFF320_1Cell.SearchProperties[WinCell.PropertyNames.Value] = "AFF3.2.0_1";
                    #endregion
                }
                return this.mUIAFF320_1Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIAFF320_1Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow10Row1 : WinRow
    {
        
        public UIRow10Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;AFFPeng2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIAFFPeng2Cell
        {
            get
            {
                if ((this.mUIAFFPeng2Cell == null))
                {
                    this.mUIAFFPeng2Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAFFPeng2Cell.SearchProperties[WinCell.PropertyNames.Value] = "AFFPeng2";
                    #endregion
                }
                return this.mUIAFFPeng2Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIAFFPeng2Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow11Row1 : WinRow
    {
        
        public UIRow11Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;AFFPeng2_1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIAFFPeng2_1Cell
        {
            get
            {
                if ((this.mUIAFFPeng2_1Cell == null))
                {
                    this.mUIAFFPeng2_1Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAFFPeng2_1Cell.SearchProperties[WinCell.PropertyNames.Value] = "AFFPeng2_1";
                    #endregion
                }
                return this.mUIAFFPeng2_1Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIAFFPeng2_1Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow12Row1 : WinRow
    {
        
        public UIRow12Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;AFPPeng1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIAFPPeng1Cell
        {
            get
            {
                if ((this.mUIAFPPeng1Cell == null))
                {
                    this.mUIAFPPeng1Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAFPPeng1Cell.SearchProperties[WinCell.PropertyNames.Value] = "AFPPeng1";
                    #endregion
                }
                return this.mUIAFPPeng1Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIAFPPeng1Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow13Row1 : WinRow
    {
        
        public UIRow13Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;AFPPeng2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIAFPPeng2Cell
        {
            get
            {
                if ((this.mUIAFPPeng2Cell == null))
                {
                    this.mUIAFPPeng2Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAFPPeng2Cell.SearchProperties[WinCell.PropertyNames.Value] = "AFPPeng2";
                    #endregion
                }
                return this.mUIAFPPeng2Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIAFPPeng2Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow14Row1 : WinRow
    {
        
        public UIRow14Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;AFPPeng3";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIAFPPeng3Cell
        {
            get
            {
                if ((this.mUIAFPPeng3Cell == null))
                {
                    this.mUIAFPPeng3Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAFPPeng3Cell.SearchProperties[WinCell.PropertyNames.Value] = "AFPPeng3";
                    #endregion
                }
                return this.mUIAFPPeng3Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIAFPPeng3Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow15Row1 : WinRow
    {
        
        public UIRow15Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;AFPPeng4";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIAFPPeng4Cell
        {
            get
            {
                if ((this.mUIAFPPeng4Cell == null))
                {
                    this.mUIAFPPeng4Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAFPPeng4Cell.SearchProperties[WinCell.PropertyNames.Value] = "AFPPeng4";
                    #endregion
                }
                return this.mUIAFPPeng4Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIAFPPeng4Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow16Row1 : WinRow
    {
        
        public UIRow16Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;AFPPeng6";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIAFPPeng6Cell
        {
            get
            {
                if ((this.mUIAFPPeng6Cell == null))
                {
                    this.mUIAFPPeng6Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAFPPeng6Cell.SearchProperties[WinCell.PropertyNames.Value] = "AFPPeng6";
                    #endregion
                }
                return this.mUIAFPPeng6Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIAFPPeng6Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow17Row1 : WinRow
    {
        
        public UIRow17Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;AFPPeng7";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIAFPPeng7Cell
        {
            get
            {
                if ((this.mUIAFPPeng7Cell == null))
                {
                    this.mUIAFPPeng7Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAFPPeng7Cell.SearchProperties[WinCell.PropertyNames.Value] = "AFPPeng7";
                    #endregion
                }
                return this.mUIAFPPeng7Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIAFPPeng7Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow18Row1 : WinRow
    {
        
        public UIRow18Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;AFPPeng8";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIAFPPeng8Cell
        {
            get
            {
                if ((this.mUIAFPPeng8Cell == null))
                {
                    this.mUIAFPPeng8Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAFPPeng8Cell.SearchProperties[WinCell.PropertyNames.Value] = "AFPPeng8";
                    #endregion
                }
                return this.mUIAFPPeng8Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIAFPPeng8Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow19Row1 : WinRow
    {
        
        public UIRow19Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;AFPPeng9";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIAFPPeng9Cell
        {
            get
            {
                if ((this.mUIAFPPeng9Cell == null))
                {
                    this.mUIAFPPeng9Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAFPPeng9Cell.SearchProperties[WinCell.PropertyNames.Value] = "AFPPeng9";
                    #endregion
                }
                return this.mUIAFPPeng9Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIAFPPeng9Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow20Row1 : WinRow
    {
        
        public UIRow20Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;AFPPengTestA";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIAFPPengTestACell
        {
            get
            {
                if ((this.mUIAFPPengTestACell == null))
                {
                    this.mUIAFPPengTestACell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAFPPengTestACell.SearchProperties[WinCell.PropertyNames.Value] = "AFPPengTestA";
                    #endregion
                }
                return this.mUIAFPPengTestACell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIAFPPengTestACell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow21Row1 : WinRow
    {
        
        public UIRow21Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;AFPPengTestC";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIAFPPengTestCCell
        {
            get
            {
                if ((this.mUIAFPPengTestCCell == null))
                {
                    this.mUIAFPPengTestCCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAFPPengTestCCell.SearchProperties[WinCell.PropertyNames.Value] = "AFPPengTestC";
                    #endregion
                }
                return this.mUIAFPPengTestCCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIAFPPengTestCCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow22Row1 : WinRow
    {
        
        public UIRow22Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;AFPPengTestD";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIAFPPengTestDCell
        {
            get
            {
                if ((this.mUIAFPPengTestDCell == null))
                {
                    this.mUIAFPPengTestDCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAFPPengTestDCell.SearchProperties[WinCell.PropertyNames.Value] = "AFPPengTestD";
                    #endregion
                }
                return this.mUIAFPPengTestDCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIAFPPengTestDCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow23Row1 : WinRow
    {
        
        public UIRow23Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;AFPPengTestE";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIAFPPengTestECell
        {
            get
            {
                if ((this.mUIAFPPengTestECell == null))
                {
                    this.mUIAFPPengTestECell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAFPPengTestECell.SearchProperties[WinCell.PropertyNames.Value] = "AFPPengTestE";
                    #endregion
                }
                return this.mUIAFPPengTestECell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIAFPPengTestECell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow24Row1 : WinRow
    {
        
        public UIRow24Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;AFPSponsored2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIAFPSponsored2Cell
        {
            get
            {
                if ((this.mUIAFPSponsored2Cell == null))
                {
                    this.mUIAFPSponsored2Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAFPSponsored2Cell.SearchProperties[WinCell.PropertyNames.Value] = "AFPSponsored2";
                    #endregion
                }
                return this.mUIAFPSponsored2Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIAFPSponsored2Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow25Row1 : WinRow
    {
        
        public UIRow25Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;AFPSponsored3";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIAFPSponsored3Cell
        {
            get
            {
                if ((this.mUIAFPSponsored3Cell == null))
                {
                    this.mUIAFPSponsored3Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAFPSponsored3Cell.SearchProperties[WinCell.PropertyNames.Value] = "AFPSponsored3";
                    #endregion
                }
                return this.mUIAFPSponsored3Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIAFPSponsored3Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow26Row1 : WinRow
    {
        
        public UIRow26Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;Austria";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIAustriaCell
        {
            get
            {
                if ((this.mUIAustriaCell == null))
                {
                    this.mUIAustriaCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAustriaCell.SearchProperties[WinCell.PropertyNames.Value] = "Austria";
                    #endregion
                }
                return this.mUIAustriaCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIAustriaCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow27Row : WinRow
    {
        
        public UIRow27Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Name] = "Row 27";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIAutomationCampaignNaCell
        {
            get
            {
                if ((this.mUIAutomationCampaignNaCell == null))
                {
                    this.mUIAutomationCampaignNaCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAutomationCampaignNaCell.SearchProperties[WinCell.PropertyNames.Value] = "AutomationCampaignName";
                    #endregion
                }
                return this.mUIAutomationCampaignNaCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIAutomationCampaignNaCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow28Row : WinRow
    {
        
        public UIRow28Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Name] = "Row 28";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIAutomationCampaignNaCell
        {
            get
            {
                if ((this.mUIAutomationCampaignNaCell == null))
                {
                    this.mUIAutomationCampaignNaCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAutomationCampaignNaCell.SearchProperties[WinCell.PropertyNames.Value] = "AutomationCampaignName";
                    #endregion
                }
                return this.mUIAutomationCampaignNaCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIAutomationCampaignNaCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow29Row : WinRow
    {
        
        public UIRow29Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Name] = "Row 29";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIAutomationCampaignNaCell
        {
            get
            {
                if ((this.mUIAutomationCampaignNaCell == null))
                {
                    this.mUIAutomationCampaignNaCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIAutomationCampaignNaCell.SearchProperties[WinCell.PropertyNames.Value] = "AutomationCampaignName";
                    #endregion
                }
                return this.mUIAutomationCampaignNaCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIAutomationCampaignNaCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow30Row1 : WinRow
    {
        
        public UIRow30Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;beta testing";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIBetatestingCell
        {
            get
            {
                if ((this.mUIBetatestingCell == null))
                {
                    this.mUIBetatestingCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIBetatestingCell.SearchProperties[WinCell.PropertyNames.Value] = "beta testing";
                    #endregion
                }
                return this.mUIBetatestingCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIBetatestingCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow31Row : WinRow
    {
        
        public UIRow31Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Name] = "Row 31";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UICampaignCell
        {
            get
            {
                if ((this.mUICampaignCell == null))
                {
                    this.mUICampaignCell = new WinCell(this);
                    #region Search Criteria
                    this.mUICampaignCell.SearchProperties[WinCell.PropertyNames.Value] = "Campaign";
                    #endregion
                }
                return this.mUICampaignCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUICampaignCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow32Row : WinRow
    {
        
        public UIRow32Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Name] = "Row 32";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UICampaignCell
        {
            get
            {
                if ((this.mUICampaignCell == null))
                {
                    this.mUICampaignCell = new WinCell(this);
                    #region Search Criteria
                    this.mUICampaignCell.SearchProperties[WinCell.PropertyNames.Value] = "Campaign";
                    #endregion
                }
                return this.mUICampaignCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUICampaignCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow33Row1 : WinRow
    {
        
        public UIRow33Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;campaign_1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UICampaign_1Cell
        {
            get
            {
                if ((this.mUICampaign_1Cell == null))
                {
                    this.mUICampaign_1Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUICampaign_1Cell.SearchProperties[WinCell.PropertyNames.Value] = "campaign_1";
                    #endregion
                }
                return this.mUICampaign_1Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUICampaign_1Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow34Row1 : WinRow
    {
        
        public UIRow34Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;Campaign_1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UICampaign_1Cell
        {
            get
            {
                if ((this.mUICampaign_1Cell == null))
                {
                    this.mUICampaign_1Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUICampaign_1Cell.SearchProperties[WinCell.PropertyNames.Value] = "Campaign_1";
                    #endregion
                }
                return this.mUICampaign_1Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUICampaign_1Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow35Row1 : WinRow
    {
        
        public UIRow35Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;Campaign_2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UICampaign_2Cell
        {
            get
            {
                if ((this.mUICampaign_2Cell == null))
                {
                    this.mUICampaign_2Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUICampaign_2Cell.SearchProperties[WinCell.PropertyNames.Value] = "Campaign_2";
                    #endregion
                }
                return this.mUICampaign_2Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUICampaign_2Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow36Row1 : WinRow
    {
        
        public UIRow36Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;Campaign_buget_test";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UICampaign_buget_testCell
        {
            get
            {
                if ((this.mUICampaign_buget_testCell == null))
                {
                    this.mUICampaign_buget_testCell = new WinCell(this);
                    #region Search Criteria
                    this.mUICampaign_buget_testCell.SearchProperties[WinCell.PropertyNames.Value] = "Campaign_buget_test";
                    #endregion
                }
                return this.mUICampaign_buget_testCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUICampaign_buget_testCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow37Row1 : WinRow
    {
        
        public UIRow37Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;Campaign_buget_test_2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UICampaign_buget_test_Cell
        {
            get
            {
                if ((this.mUICampaign_buget_test_Cell == null))
                {
                    this.mUICampaign_buget_test_Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUICampaign_buget_test_Cell.SearchProperties[WinCell.PropertyNames.Value] = "Campaign_buget_test_2";
                    #endregion
                }
                return this.mUICampaign_buget_test_Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUICampaign_buget_test_Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow38Row : WinRow
    {
        
        public UIRow38Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Name] = "Row 38";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UICampaign_mengwpCell
        {
            get
            {
                if ((this.mUICampaign_mengwpCell == null))
                {
                    this.mUICampaign_mengwpCell = new WinCell(this);
                    #region Search Criteria
                    this.mUICampaign_mengwpCell.SearchProperties[WinCell.PropertyNames.Value] = "Campaign_mengwp";
                    #endregion
                }
                return this.mUICampaign_mengwpCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUICampaign_mengwpCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow39Row : WinRow
    {
        
        public UIRow39Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Name] = "Row 39";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UICampaign_mengwpCell
        {
            get
            {
                if ((this.mUICampaign_mengwpCell == null))
                {
                    this.mUICampaign_mengwpCell = new WinCell(this);
                    #region Search Criteria
                    this.mUICampaign_mengwpCell.SearchProperties[WinCell.PropertyNames.Value] = "Campaign_mengwp";
                    #endregion
                }
                return this.mUICampaign_mengwpCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUICampaign_mengwpCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow40Row1 : WinRow
    {
        
        public UIRow40Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;Campaign11";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UICampaign11Cell
        {
            get
            {
                if ((this.mUICampaign11Cell == null))
                {
                    this.mUICampaign11Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUICampaign11Cell.SearchProperties[WinCell.PropertyNames.Value] = "Campaign11";
                    #endregion
                }
                return this.mUICampaign11Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUICampaign11Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow41Row1 : WinRow
    {
        
        public UIRow41Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;Campaign2222";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UICampaign2222Cell
        {
            get
            {
                if ((this.mUICampaign2222Cell == null))
                {
                    this.mUICampaign2222Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUICampaign2222Cell.SearchProperties[WinCell.PropertyNames.Value] = "Campaign2222";
                    #endregion
                }
                return this.mUICampaign2222Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUICampaign2222Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow42Row1 : WinRow
    {
        
        public UIRow42Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;CampaignTest1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UICampaignTest1Cell
        {
            get
            {
                if ((this.mUICampaignTest1Cell == null))
                {
                    this.mUICampaignTest1Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUICampaignTest1Cell.SearchProperties[WinCell.PropertyNames.Value] = "CampaignTest1";
                    #endregion
                }
                return this.mUICampaignTest1Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUICampaignTest1Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow43Row1 : WinRow
    {
        
        public UIRow43Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;CampaignTest2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UICampaignTest2Cell
        {
            get
            {
                if ((this.mUICampaignTest2Cell == null))
                {
                    this.mUICampaignTest2Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUICampaignTest2Cell.SearchProperties[WinCell.PropertyNames.Value] = "CampaignTest2";
                    #endregion
                }
                return this.mUICampaignTest2Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUICampaignTest2Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow44Row1 : WinRow
    {
        
        public UIRow44Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;CampaignTest3";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UICampaignTest3Cell
        {
            get
            {
                if ((this.mUICampaignTest3Cell == null))
                {
                    this.mUICampaignTest3Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUICampaignTest3Cell.SearchProperties[WinCell.PropertyNames.Value] = "CampaignTest3";
                    #endregion
                }
                return this.mUICampaignTest3Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUICampaignTest3Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow45Row1 : WinRow
    {
        
        public UIRow45Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;Copy of AFPPengTestD";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UICopyofAFPPengTestDCell
        {
            get
            {
                if ((this.mUICopyofAFPPengTestDCell == null))
                {
                    this.mUICopyofAFPPengTestDCell = new WinCell(this);
                    #region Search Criteria
                    this.mUICopyofAFPPengTestDCell.SearchProperties[WinCell.PropertyNames.Value] = "Copy of AFPPengTestD";
                    #endregion
                }
                return this.mUICopyofAFPPengTestDCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUICopyofAFPPengTestDCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow46Row1 : WinRow
    {
        
        public UIRow46Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;Copy of0AFPPeng8";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UICopyof0AFPPeng8Cell
        {
            get
            {
                if ((this.mUICopyof0AFPPeng8Cell == null))
                {
                    this.mUICopyof0AFPPeng8Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUICopyof0AFPPeng8Cell.SearchProperties[WinCell.PropertyNames.Value] = "Copy of0AFPPeng8";
                    #endregion
                }
                return this.mUICopyof0AFPPeng8Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUICopyof0AFPPeng8Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow47Row1 : WinRow
    {
        
        public UIRow47Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;Copy of0AFPPeng9";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UICopyof0AFPPeng9Cell
        {
            get
            {
                if ((this.mUICopyof0AFPPeng9Cell == null))
                {
                    this.mUICopyof0AFPPeng9Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUICopyof0AFPPeng9Cell.SearchProperties[WinCell.PropertyNames.Value] = "Copy of0AFPPeng9";
                    #endregion
                }
                return this.mUICopyof0AFPPeng9Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUICopyof0AFPPeng9Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow48Row1 : WinRow
    {
        
        public UIRow48Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;Copy of0Campaign11";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UICopyof0Campaign11Cell
        {
            get
            {
                if ((this.mUICopyof0Campaign11Cell == null))
                {
                    this.mUICopyof0Campaign11Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUICopyof0Campaign11Cell.SearchProperties[WinCell.PropertyNames.Value] = "Copy of0Campaign11";
                    #endregion
                }
                return this.mUICopyof0Campaign11Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUICopyof0Campaign11Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow49Row1 : WinRow
    {
        
        public UIRow49Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;Copy of0Copy of0AFPPeng8";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UICopyof0Copyof0AFPPenCell
        {
            get
            {
                if ((this.mUICopyof0Copyof0AFPPenCell == null))
                {
                    this.mUICopyof0Copyof0AFPPenCell = new WinCell(this);
                    #region Search Criteria
                    this.mUICopyof0Copyof0AFPPenCell.SearchProperties[WinCell.PropertyNames.Value] = "Copy of0Copy of0AFPPeng8";
                    #endregion
                }
                return this.mUICopyof0Copyof0AFPPenCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUICopyof0Copyof0AFPPenCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow50Row1 : WinRow
    {
        
        public UIRow50Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;Copy of0Copy of0Campaign11";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UICopyof0Copyof0CampaiCell
        {
            get
            {
                if ((this.mUICopyof0Copyof0CampaiCell == null))
                {
                    this.mUICopyof0Copyof0CampaiCell = new WinCell(this);
                    #region Search Criteria
                    this.mUICopyof0Copyof0CampaiCell.SearchProperties[WinCell.PropertyNames.Value] = "Copy of0Copy of0Campaign11";
                    #endregion
                }
                return this.mUICopyof0Copyof0CampaiCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUICopyof0Copyof0CampaiCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow51Row1 : WinRow
    {
        
        public UIRow51Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;Copy of1AFPPeng8";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UICopyof1AFPPeng8Cell
        {
            get
            {
                if ((this.mUICopyof1AFPPeng8Cell == null))
                {
                    this.mUICopyof1AFPPeng8Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUICopyof1AFPPeng8Cell.SearchProperties[WinCell.PropertyNames.Value] = "Copy of1AFPPeng8";
                    #endregion
                }
                return this.mUICopyof1AFPPeng8Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUICopyof1AFPPeng8Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow52Row1 : WinRow
    {
        
        public UIRow52Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;Copy of1Campaign11";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UICopyof1Campaign11Cell
        {
            get
            {
                if ((this.mUICopyof1Campaign11Cell == null))
                {
                    this.mUICopyof1Campaign11Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUICopyof1Campaign11Cell.SearchProperties[WinCell.PropertyNames.Value] = "Copy of1Campaign11";
                    #endregion
                }
                return this.mUICopyof1Campaign11Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUICopyof1Campaign11Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow53Row1 : WinRow
    {
        
        public UIRow53Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;Copy of2AFPPeng8";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UICopyof2AFPPeng8Cell
        {
            get
            {
                if ((this.mUICopyof2AFPPeng8Cell == null))
                {
                    this.mUICopyof2AFPPeng8Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUICopyof2AFPPeng8Cell.SearchProperties[WinCell.PropertyNames.Value] = "Copy of2AFPPeng8";
                    #endregion
                }
                return this.mUICopyof2AFPPeng8Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUICopyof2AFPPeng8Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow54Row1 : WinRow
    {
        
        public UIRow54Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;cqm";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UICqmCell
        {
            get
            {
                if ((this.mUICqmCell == null))
                {
                    this.mUICqmCell = new WinCell(this);
                    #region Search Criteria
                    this.mUICqmCell.SearchProperties[WinCell.PropertyNames.Value] = "cqm";
                    #endregion
                }
                return this.mUICqmCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUICqmCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow55Row1 : WinRow
    {
        
        public UIRow55Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;cqm_1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UICqm_1Cell
        {
            get
            {
                if ((this.mUICqm_1Cell == null))
                {
                    this.mUICqm_1Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUICqm_1Cell.SearchProperties[WinCell.PropertyNames.Value] = "cqm_1";
                    #endregion
                }
                return this.mUICqm_1Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUICqm_1Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow56Row1 : WinRow
    {
        
        public UIRow56Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;DownLoadCampaignPerfTest1-1000Ad200like";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIDownLoadCampaignPerfCell
        {
            get
            {
                if ((this.mUIDownLoadCampaignPerfCell == null))
                {
                    this.mUIDownLoadCampaignPerfCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIDownLoadCampaignPerfCell.SearchProperties[WinCell.PropertyNames.Value] = "DownLoadCampaignPerfTest1-1000Ad200like";
                    #endregion
                }
                return this.mUIDownLoadCampaignPerfCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIDownLoadCampaignPerfCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow57Row1 : WinRow
    {
        
        public UIRow57Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;DownLoadCampaignPerfTest1-100Ad200like";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIDownLoadCampaignPerfCell
        {
            get
            {
                if ((this.mUIDownLoadCampaignPerfCell == null))
                {
                    this.mUIDownLoadCampaignPerfCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIDownLoadCampaignPerfCell.SearchProperties[WinCell.PropertyNames.Value] = "DownLoadCampaignPerfTest1-100Ad200like";
                    #endregion
                }
                return this.mUIDownLoadCampaignPerfCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIDownLoadCampaignPerfCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow58Row1 : WinRow
    {
        
        public UIRow58Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;DownLoadCampaignPerfTest1-10Ad200like";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIDownLoadCampaignPerfCell
        {
            get
            {
                if ((this.mUIDownLoadCampaignPerfCell == null))
                {
                    this.mUIDownLoadCampaignPerfCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIDownLoadCampaignPerfCell.SearchProperties[WinCell.PropertyNames.Value] = "DownLoadCampaignPerfTest1-10Ad200like";
                    #endregion
                }
                return this.mUIDownLoadCampaignPerfCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIDownLoadCampaignPerfCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow59Row1 : WinRow
    {
        
        public UIRow59Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;DownLoadCampaignPerfTest1-1Ad200like";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIDownLoadCampaignPerfCell
        {
            get
            {
                if ((this.mUIDownLoadCampaignPerfCell == null))
                {
                    this.mUIDownLoadCampaignPerfCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIDownLoadCampaignPerfCell.SearchProperties[WinCell.PropertyNames.Value] = "DownLoadCampaignPerfTest1-1Ad200like";
                    #endregion
                }
                return this.mUIDownLoadCampaignPerfCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIDownLoadCampaignPerfCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow60Row1 : WinRow
    {
        
        public UIRow60Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;DownLoadCampaignPerfTest1-1Ad200like_1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIDownLoadCampaignPerfCell
        {
            get
            {
                if ((this.mUIDownLoadCampaignPerfCell == null))
                {
                    this.mUIDownLoadCampaignPerfCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIDownLoadCampaignPerfCell.SearchProperties[WinCell.PropertyNames.Value] = "DownLoadCampaignPerfTest1-1Ad200like_1";
                    #endregion
                }
                return this.mUIDownLoadCampaignPerfCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIDownLoadCampaignPerfCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow61Row1 : WinRow
    {
        
        public UIRow61Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;DownLoadCampaignPerfTest1-1Ad200like_1_1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIDownLoadCampaignPerfCell
        {
            get
            {
                if ((this.mUIDownLoadCampaignPerfCell == null))
                {
                    this.mUIDownLoadCampaignPerfCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIDownLoadCampaignPerfCell.SearchProperties[WinCell.PropertyNames.Value] = "DownLoadCampaignPerfTest1-1Ad200like_1_1";
                    #endregion
                }
                return this.mUIDownLoadCampaignPerfCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIDownLoadCampaignPerfCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow62Row1 : WinRow
    {
        
        public UIRow62Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;DownLoadCampaignPerfTest1-300Ad200like";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIDownLoadCampaignPerfCell
        {
            get
            {
                if ((this.mUIDownLoadCampaignPerfCell == null))
                {
                    this.mUIDownLoadCampaignPerfCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIDownLoadCampaignPerfCell.SearchProperties[WinCell.PropertyNames.Value] = "DownLoadCampaignPerfTest1-300Ad200like";
                    #endregion
                }
                return this.mUIDownLoadCampaignPerfCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIDownLoadCampaignPerfCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow63Row1 : WinRow
    {
        
        public UIRow63Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;DownLoadCampaignPerfTest1-500Ad200like";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIDownLoadCampaignPerfCell
        {
            get
            {
                if ((this.mUIDownLoadCampaignPerfCell == null))
                {
                    this.mUIDownLoadCampaignPerfCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIDownLoadCampaignPerfCell.SearchProperties[WinCell.PropertyNames.Value] = "DownLoadCampaignPerfTest1-500Ad200like";
                    #endregion
                }
                return this.mUIDownLoadCampaignPerfCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIDownLoadCampaignPerfCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow64Row1 : WinRow
    {
        
        public UIRow64Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;DownLoadCampaignPerfTest1-50Ad200like";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIDownLoadCampaignPerfCell
        {
            get
            {
                if ((this.mUIDownLoadCampaignPerfCell == null))
                {
                    this.mUIDownLoadCampaignPerfCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIDownLoadCampaignPerfCell.SearchProperties[WinCell.PropertyNames.Value] = "DownLoadCampaignPerfTest1-50Ad200like";
                    #endregion
                }
                return this.mUIDownLoadCampaignPerfCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIDownLoadCampaignPerfCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow65Row1 : WinRow
    {
        
        public UIRow65Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;DownLoadCampaignPerfTest2-1000Ad200city";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIDownLoadCampaignPerfCell
        {
            get
            {
                if ((this.mUIDownLoadCampaignPerfCell == null))
                {
                    this.mUIDownLoadCampaignPerfCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIDownLoadCampaignPerfCell.SearchProperties[WinCell.PropertyNames.Value] = "DownLoadCampaignPerfTest2-1000Ad200city";
                    #endregion
                }
                return this.mUIDownLoadCampaignPerfCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIDownLoadCampaignPerfCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow66Row1 : WinRow
    {
        
        public UIRow66Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;DownLoadCampaignPerfTest2-100Ad200city";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIDownLoadCampaignPerfCell
        {
            get
            {
                if ((this.mUIDownLoadCampaignPerfCell == null))
                {
                    this.mUIDownLoadCampaignPerfCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIDownLoadCampaignPerfCell.SearchProperties[WinCell.PropertyNames.Value] = "DownLoadCampaignPerfTest2-100Ad200city";
                    #endregion
                }
                return this.mUIDownLoadCampaignPerfCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIDownLoadCampaignPerfCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow67Row1 : WinRow
    {
        
        public UIRow67Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;DownLoadCampaignPerfTest2-10Ad200city";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIDownLoadCampaignPerfCell
        {
            get
            {
                if ((this.mUIDownLoadCampaignPerfCell == null))
                {
                    this.mUIDownLoadCampaignPerfCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIDownLoadCampaignPerfCell.SearchProperties[WinCell.PropertyNames.Value] = "DownLoadCampaignPerfTest2-10Ad200city";
                    #endregion
                }
                return this.mUIDownLoadCampaignPerfCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIDownLoadCampaignPerfCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow68Row1 : WinRow
    {
        
        public UIRow68Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;DownLoadCampaignPerfTest2-1Ad200city";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIDownLoadCampaignPerfCell
        {
            get
            {
                if ((this.mUIDownLoadCampaignPerfCell == null))
                {
                    this.mUIDownLoadCampaignPerfCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIDownLoadCampaignPerfCell.SearchProperties[WinCell.PropertyNames.Value] = "DownLoadCampaignPerfTest2-1Ad200city";
                    #endregion
                }
                return this.mUIDownLoadCampaignPerfCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIDownLoadCampaignPerfCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow69Row1 : WinRow
    {
        
        public UIRow69Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;DownLoadCampaignPerfTest2-300Ad200city";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIDownLoadCampaignPerfCell
        {
            get
            {
                if ((this.mUIDownLoadCampaignPerfCell == null))
                {
                    this.mUIDownLoadCampaignPerfCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIDownLoadCampaignPerfCell.SearchProperties[WinCell.PropertyNames.Value] = "DownLoadCampaignPerfTest2-300Ad200city";
                    #endregion
                }
                return this.mUIDownLoadCampaignPerfCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIDownLoadCampaignPerfCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow70Row1 : WinRow
    {
        
        public UIRow70Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;DownLoadCampaignPerfTest2-500Ad200city";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIDownLoadCampaignPerfCell
        {
            get
            {
                if ((this.mUIDownLoadCampaignPerfCell == null))
                {
                    this.mUIDownLoadCampaignPerfCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIDownLoadCampaignPerfCell.SearchProperties[WinCell.PropertyNames.Value] = "DownLoadCampaignPerfTest2-500Ad200city";
                    #endregion
                }
                return this.mUIDownLoadCampaignPerfCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIDownLoadCampaignPerfCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow71Row1 : WinRow
    {
        
        public UIRow71Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;DownLoadCampaignPerfTest2-50Ad200city";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIDownLoadCampaignPerfCell
        {
            get
            {
                if ((this.mUIDownLoadCampaignPerfCell == null))
                {
                    this.mUIDownLoadCampaignPerfCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIDownLoadCampaignPerfCell.SearchProperties[WinCell.PropertyNames.Value] = "DownLoadCampaignPerfTest2-50Ad200city";
                    #endregion
                }
                return this.mUIDownLoadCampaignPerfCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIDownLoadCampaignPerfCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow72Row1 : WinRow
    {
        
        public UIRow72Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;eRohy";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIERohyCell
        {
            get
            {
                if ((this.mUIERohyCell == null))
                {
                    this.mUIERohyCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIERohyCell.SearchProperties[WinCell.PropertyNames.Value] = "eRohy";
                    #endregion
                }
                return this.mUIERohyCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIERohyCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow73Row1 : WinRow
    {
        
        public UIRow73Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;fdsa";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIFdsaCell
        {
            get
            {
                if ((this.mUIFdsaCell == null))
                {
                    this.mUIFdsaCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFdsaCell.SearchProperties[WinCell.PropertyNames.Value] = "fdsa";
                    #endregion
                }
                return this.mUIFdsaCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIFdsaCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow74Row1 : WinRow
    {
        
        public UIRow74Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;Hongmei_Test Ad Types";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIHongmei_TestAdTypesCell
        {
            get
            {
                if ((this.mUIHongmei_TestAdTypesCell == null))
                {
                    this.mUIHongmei_TestAdTypesCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIHongmei_TestAdTypesCell.SearchProperties[WinCell.PropertyNames.Value] = "Hongmei_Test Ad Types";
                    #endregion
                }
                return this.mUIHongmei_TestAdTypesCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIHongmei_TestAdTypesCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow75Row1 : WinRow
    {
        
        public UIRow75Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;J9ZIyC";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIJ9ZIyCCell
        {
            get
            {
                if ((this.mUIJ9ZIyCCell == null))
                {
                    this.mUIJ9ZIyCCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIJ9ZIyCCell.SearchProperties[WinCell.PropertyNames.Value] = "J9ZIyC";
                    #endregion
                }
                return this.mUIJ9ZIyCCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIJ9ZIyCCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow76Row1 : WinRow
    {
        
        public UIRow76Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;m7dLJIfulDo-2ps6NIC8XbI3Fi91x53TdjiTxh-GnN2RKywBvNmLTR9Ap_5_7";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIM7dLJIfulDo2ps6NIC8XCell
        {
            get
            {
                if ((this.mUIM7dLJIfulDo2ps6NIC8XCell == null))
                {
                    this.mUIM7dLJIfulDo2ps6NIC8XCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIM7dLJIfulDo2ps6NIC8XCell.SearchProperties[WinCell.PropertyNames.Value] = "m7dLJIfulDo-2ps6NIC8XbI3Fi91x53TdjiTxh-GnN2RKywBvNmLTR9Ap_5_7";
                    #endregion
                }
                return this.mUIM7dLJIfulDo2ps6NIC8XCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIM7dLJIfulDo2ps6NIC8XCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow77Row1 : WinRow
    {
        
        public UIRow77Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;New Sawce";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UINewSawceCell
        {
            get
            {
                if ((this.mUINewSawceCell == null))
                {
                    this.mUINewSawceCell = new WinCell(this);
                    #region Search Criteria
                    this.mUINewSawceCell.SearchProperties[WinCell.PropertyNames.Value] = "New Sawce";
                    #endregion
                }
                return this.mUINewSawceCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUINewSawceCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow78Row1 : WinRow
    {
        
        public UIRow78Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;PengAFP1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIPengAFP1Cell
        {
            get
            {
                if ((this.mUIPengAFP1Cell == null))
                {
                    this.mUIPengAFP1Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIPengAFP1Cell.SearchProperties[WinCell.PropertyNames.Value] = "PengAFP1";
                    #endregion
                }
                return this.mUIPengAFP1Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIPengAFP1Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow79Row1 : WinRow
    {
        
        public UIRow79Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;PengAFPCampaign1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIPengAFPCampaign1Cell
        {
            get
            {
                if ((this.mUIPengAFPCampaign1Cell == null))
                {
                    this.mUIPengAFPCampaign1Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIPengAFPCampaign1Cell.SearchProperties[WinCell.PropertyNames.Value] = "PengAFPCampaign1";
                    #endregion
                }
                return this.mUIPengAFPCampaign1Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIPengAFPCampaign1Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow80Row1 : WinRow
    {
        
        public UIRow80Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;PengAFPCampaign2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIPengAFPCampaign2Cell
        {
            get
            {
                if ((this.mUIPengAFPCampaign2Cell == null))
                {
                    this.mUIPengAFPCampaign2Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIPengAFPCampaign2Cell.SearchProperties[WinCell.PropertyNames.Value] = "PengAFPCampaign2";
                    #endregion
                }
                return this.mUIPengAFPCampaign2Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIPengAFPCampaign2Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow81Row1 : WinRow
    {
        
        public UIRow81Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;PengLiuSponsorTest";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIPengLiuSponsorTestCell
        {
            get
            {
                if ((this.mUIPengLiuSponsorTestCell == null))
                {
                    this.mUIPengLiuSponsorTestCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIPengLiuSponsorTestCell.SearchProperties[WinCell.PropertyNames.Value] = "PengLiuSponsorTest";
                    #endregion
                }
                return this.mUIPengLiuSponsorTestCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIPengLiuSponsorTestCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow82Row1 : WinRow
    {
        
        public UIRow82Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;PengLiuSponsorTest2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIPengLiuSponsorTest2Cell
        {
            get
            {
                if ((this.mUIPengLiuSponsorTest2Cell == null))
                {
                    this.mUIPengLiuSponsorTest2Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIPengLiuSponsorTest2Cell.SearchProperties[WinCell.PropertyNames.Value] = "PengLiuSponsorTest2";
                    #endregion
                }
                return this.mUIPengLiuSponsorTest2Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIPengLiuSponsorTest2Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow83Row1 : WinRow
    {
        
        public UIRow83Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;PengVerifybug1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIPengVerifybug1Cell
        {
            get
            {
                if ((this.mUIPengVerifybug1Cell == null))
                {
                    this.mUIPengVerifybug1Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIPengVerifybug1Cell.SearchProperties[WinCell.PropertyNames.Value] = "PengVerifybug1";
                    #endregion
                }
                return this.mUIPengVerifybug1Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIPengVerifybug1Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow84Row1 : WinRow
    {
        
        public UIRow84Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;pie";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIPieCell
        {
            get
            {
                if ((this.mUIPieCell == null))
                {
                    this.mUIPieCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIPieCell.SearchProperties[WinCell.PropertyNames.Value] = "pie";
                    #endregion
                }
                return this.mUIPieCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIPieCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow85Row1 : WinRow
    {
        
        public UIRow85Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;PJ";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIPJCell
        {
            get
            {
                if ((this.mUIPJCell == null))
                {
                    this.mUIPJCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIPJCell.SearchProperties[WinCell.PropertyNames.Value] = "PJ";
                    #endregion
                }
                return this.mUIPJCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIPJCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow86Row1 : WinRow
    {
        
        public UIRow86Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;PJ02";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIPJ02Cell
        {
            get
            {
                if ((this.mUIPJ02Cell == null))
                {
                    this.mUIPJ02Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIPJ02Cell.SearchProperties[WinCell.PropertyNames.Value] = "PJ02";
                    #endregion
                }
                return this.mUIPJ02Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIPJ02Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow87Row1 : WinRow
    {
        
        public UIRow87Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;S8lUexlZ";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIS8lUexlZCell
        {
            get
            {
                if ((this.mUIS8lUexlZCell == null))
                {
                    this.mUIS8lUexlZCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIS8lUexlZCell.SearchProperties[WinCell.PropertyNames.Value] = "S8lUexlZ";
                    #endregion
                }
                return this.mUIS8lUexlZCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIS8lUexlZCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow88Row1 : WinRow
    {
        
        public UIRow88Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;Tracking";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UITrackingCell
        {
            get
            {
                if ((this.mUITrackingCell == null))
                {
                    this.mUITrackingCell = new WinCell(this);
                    #region Search Criteria
                    this.mUITrackingCell.SearchProperties[WinCell.PropertyNames.Value] = "Tracking";
                    #endregion
                }
                return this.mUITrackingCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUITrackingCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow89Row1 : WinRow
    {
        
        public UIRow89Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;wdH3pYEl4lnPJAzmRkc3dteNgFts3X-GE1C7i4LGzContBp5kMw7kS";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIWdH3pYEl4lnPJAzmRkc3Cell
        {
            get
            {
                if ((this.mUIWdH3pYEl4lnPJAzmRkc3Cell == null))
                {
                    this.mUIWdH3pYEl4lnPJAzmRkc3Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIWdH3pYEl4lnPJAzmRkc3Cell.SearchProperties[WinCell.PropertyNames.Value] = "wdH3pYEl4lnPJAzmRkc3dteNgFts3X-GE1C7i4LGzContBp5kMw7kS";
                    #endregion
                }
                return this.mUIWdH3pYEl4lnPJAzmRkc3Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIWdH3pYEl4lnPJAzmRkc3Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow90Row1 : WinRow
    {
        
        public UIRow90Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;yun 2011";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIYun2011Cell
        {
            get
            {
                if ((this.mUIYun2011Cell == null))
                {
                    this.mUIYun2011Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIYun2011Cell.SearchProperties[WinCell.PropertyNames.Value] = "yun 2011";
                    #endregion
                }
                return this.mUIYun2011Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIYun2011Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow91Row1 : WinRow
    {
        
        public UIRow91Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;zip_code_targeting";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIZip_code_targetingCell
        {
            get
            {
                if ((this.mUIZip_code_targetingCell == null))
                {
                    this.mUIZip_code_targetingCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIZip_code_targetingCell.SearchProperties[WinCell.PropertyNames.Value] = "zip_code_targeting";
                    #endregion
                }
                return this.mUIZip_code_targetingCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIZip_code_targetingCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow92Row1 : WinRow
    {
        
        public UIRow92Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;Zülpich:Altötting:Überherrn";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        
        public WinCell UIZülpichAltöttingÜberCell
        {
            get
            {
                if ((this.mUIZülpichAltöttingÜberCell == null))
                {
                    this.mUIZülpichAltöttingÜberCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIZülpichAltöttingÜberCell.SearchProperties[WinCell.PropertyNames.Value] = "Zülpich:Altötting:Überherrn";
                    #endregion
                }
                return this.mUIZülpichAltöttingÜberCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        
        private WinCell mUIZülpichAltöttingÜberCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDataGridViewTable1 : WinTable
    {
        
        public UIDataGridViewTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTable.PropertyNames.Name] = "DataGridView";
            #endregion
        }
        
        #region Properties
        public WinScrollBar UIVerticalScrollBarScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBarScrollBar == null))
                {
                    this.mUIVerticalScrollBarScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIVerticalScrollBarScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical Scroll Bar";
                    #endregion
                }
                return this.mUIVerticalScrollBarScrollBar;
            }
        }
        #endregion
        
        #region Fields
        private WinScrollBar mUIVerticalScrollBarScrollBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBarScrollBar : WinScrollBar
    {
        
        public UIVerticalScrollBarScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical Scroll Bar";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar : WinScrollBar
    {
        
        public UIVerticalScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar : WinScrollBar
    {
        
        public UIHorizontalScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAdObjectTreeSelectorWindow : WinWindow
    {
        
        public UIAdObjectTreeSelectorWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "adObjectTreeSelector";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIAdObjectTreeSelectorMenuBar
        {
            get
            {
                if ((this.mUIAdObjectTreeSelectorMenuBar == null))
                {
                    this.mUIAdObjectTreeSelectorMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIAdObjectTreeSelectorMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIAdObjectTreeSelectorMenuBar;
            }
        }
        
        public WinTitleBar UIAdObjectTreeSelectorTitleBar
        {
            get
            {
                if ((this.mUIAdObjectTreeSelectorTitleBar == null))
                {
                    this.mUIAdObjectTreeSelectorTitleBar = new WinTitleBar(this);
                }
                return this.mUIAdObjectTreeSelectorTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIAdObjectTreeSelectorMenuBar1
        {
            get
            {
                if ((this.mUIAdObjectTreeSelectorMenuBar1 == null))
                {
                    this.mUIAdObjectTreeSelectorMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIAdObjectTreeSelectorMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIAdObjectTreeSelectorMenuBar1;
            }
        }
        
        public WinClient UIAdObjectTreeSelectorClient
        {
            get
            {
                if ((this.mUIAdObjectTreeSelectorClient == null))
                {
                    this.mUIAdObjectTreeSelectorClient = new WinClient(this);
                }
                return this.mUIAdObjectTreeSelectorClient;
            }
        }
        
        public WinWindow UIPanel1Window
        {
            get
            {
                if ((this.mUIPanel1Window == null))
                {
                    this.mUIPanel1Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUIPanel1Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIPanel1Window.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
                    #endregion
                }
                return this.mUIPanel1Window;
            }
        }
        
        public WinWindow UIPanel2Window
        {
            get
            {
                if ((this.mUIPanel2Window == null))
                {
                    this.mUIPanel2Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUIPanel2Window.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Select:";
                    this.mUIPanel2Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIPanel2Window;
            }
        }
        
        public WinScrollBar UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIVerticalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public WinScrollBar UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIHorizontalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIAdObjectTreeSelectorGrip
        {
            get
            {
                if ((this.mUIAdObjectTreeSelectorGrip == null))
                {
                    this.mUIAdObjectTreeSelectorGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIAdObjectTreeSelectorGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIAdObjectTreeSelectorGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIAdObjectTreeSelectorMenuBar;
        
        private WinTitleBar mUIAdObjectTreeSelectorTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIAdObjectTreeSelectorMenuBar1;
        
        private WinClient mUIAdObjectTreeSelectorClient;
        
        private WinWindow mUIPanel1Window;
        
        private WinWindow mUIPanel2Window;
        
        private WinScrollBar mUIVerticalScrollBar;
        
        private WinScrollBar mUIHorizontalScrollBar;
        
        private WinControl mUIAdObjectTreeSelectorGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPanel1Window : WinWindow
    {
        
        public UIPanel1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "panel1";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIPanel1MenuBar
        {
            get
            {
                if ((this.mUIPanel1MenuBar == null))
                {
                    this.mUIPanel1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanel1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIPanel1MenuBar;
            }
        }
        
        public WinTitleBar UIPanel1TitleBar
        {
            get
            {
                if ((this.mUIPanel1TitleBar == null))
                {
                    this.mUIPanel1TitleBar = new WinTitleBar(this);
                }
                return this.mUIPanel1TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIPanel1MenuBar1
        {
            get
            {
                if ((this.mUIPanel1MenuBar1 == null))
                {
                    this.mUIPanel1MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanel1MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIPanel1MenuBar1;
            }
        }
        
        public WinClient UIPanel1Client
        {
            get
            {
                if ((this.mUIPanel1Client == null))
                {
                    this.mUIPanel1Client = new WinClient(this);
                }
                return this.mUIPanel1Client;
            }
        }
        
        public WinWindow UISelectWindow
        {
            get
            {
                if ((this.mUISelectWindow == null))
                {
                    this.mUISelectWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUISelectWindow.SearchProperties[WinWindow.PropertyNames.Name] = "Select:";
                    this.mUISelectWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUISelectWindow;
            }
        }
        
        public WinScrollBar UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIVerticalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public WinScrollBar UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIHorizontalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIPanel1Grip
        {
            get
            {
                if ((this.mUIPanel1Grip == null))
                {
                    this.mUIPanel1Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUIPanel1Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIPanel1Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIPanel1MenuBar;
        
        private WinTitleBar mUIPanel1TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIPanel1MenuBar1;
        
        private WinClient mUIPanel1Client;
        
        private WinWindow mUISelectWindow;
        
        private WinScrollBar mUIVerticalScrollBar;
        
        private WinScrollBar mUIHorizontalScrollBar;
        
        private WinControl mUIPanel1Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISelectWindow : WinWindow
    {
        
        public UISelectWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "label1";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UILabel1MenuBar
        {
            get
            {
                if ((this.mUILabel1MenuBar == null))
                {
                    this.mUILabel1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabel1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUILabel1MenuBar;
            }
        }
        
        public WinTitleBar UISelectTitleBar
        {
            get
            {
                if ((this.mUISelectTitleBar == null))
                {
                    this.mUISelectTitleBar = new WinTitleBar(this);
                }
                return this.mUISelectTitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UILabel1MenuBar1
        {
            get
            {
                if ((this.mUILabel1MenuBar1 == null))
                {
                    this.mUILabel1MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUILabel1MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUILabel1MenuBar1;
            }
        }
        
        public WinText UISelectText
        {
            get
            {
                if ((this.mUISelectText == null))
                {
                    this.mUISelectText = new WinText(this);
                    #region Search Criteria
                    this.mUISelectText.SearchProperties[WinText.PropertyNames.Name] = "Select:";
                    #endregion
                }
                return this.mUISelectText;
            }
        }
        
        public WinScrollBar UISelectScrollBar
        {
            get
            {
                if ((this.mUISelectScrollBar == null))
                {
                    this.mUISelectScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUISelectScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUISelectScrollBar;
            }
        }
        
        public WinScrollBar UISelectScrollBar1
        {
            get
            {
                if ((this.mUISelectScrollBar1 == null))
                {
                    this.mUISelectScrollBar1 = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUISelectScrollBar1.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUISelectScrollBar1;
            }
        }
        
        public WinControl UISelectGrip
        {
            get
            {
                if ((this.mUISelectGrip == null))
                {
                    this.mUISelectGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUISelectGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUISelectGrip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUILabel1MenuBar;
        
        private WinTitleBar mUISelectTitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUILabel1MenuBar1;
        
        private WinText mUISelectText;
        
        private WinScrollBar mUISelectScrollBar;
        
        private WinScrollBar mUISelectScrollBar1;
        
        private WinControl mUISelectGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISelectScrollBar : WinScrollBar
    {
        
        public UISelectScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISelectScrollBar1 : WinScrollBar
    {
        
        public UISelectScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar1 : WinScrollBar
    {
        
        public UIVerticalScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar1 : WinScrollBar
    {
        
        public UIHorizontalScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPanel2Window : WinWindow
    {
        
        public UIPanel2Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "panel2";
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIPanel2MenuBar
        {
            get
            {
                if ((this.mUIPanel2MenuBar == null))
                {
                    this.mUIPanel2MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanel2MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUIPanel2MenuBar;
            }
        }
        
        public WinTitleBar UIPanel2TitleBar
        {
            get
            {
                if ((this.mUIPanel2TitleBar == null))
                {
                    this.mUIPanel2TitleBar = new WinTitleBar(this);
                }
                return this.mUIPanel2TitleBar;
            }
        }
        
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinMenuBar UIPanel2MenuBar1
        {
            get
            {
                if ((this.mUIPanel2MenuBar1 == null))
                {
                    this.mUIPanel2MenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIPanel2MenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIPanel2MenuBar1;
            }
        }
        
        public WinClient UISelectClient
        {
            get
            {
                if ((this.mUISelectClient == null))
                {
                    this.mUISelectClient = new WinClient(this);
                    #region Search Criteria
                    this.mUISelectClient.SearchProperties[WinControl.PropertyNames.Name] = "Select:";
                    #endregion
                }
                return this.mUISelectClient;
            }
        }
        
        public WinScrollBar UIVerticalScrollBar
        {
            get
            {
                if ((this.mUIVerticalScrollBar == null))
                {
                    this.mUIVerticalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIVerticalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIVerticalScrollBar;
            }
        }
        
        public WinScrollBar UIHorizontalScrollBar
        {
            get
            {
                if ((this.mUIHorizontalScrollBar == null))
                {
                    this.mUIHorizontalScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIHorizontalScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIHorizontalScrollBar;
            }
        }
        
        public WinControl UIPanel2Grip
        {
            get
            {
                if ((this.mUIPanel2Grip == null))
                {
                    this.mUIPanel2Grip = new WinControl(this);
                    #region Search Criteria
                    this.mUIPanel2Grip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIPanel2Grip;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIPanel2MenuBar;
        
        private WinTitleBar mUIPanel2TitleBar;
        
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        
        private WinMenuBar mUIPanel2MenuBar1;
        
        private WinClient mUISelectClient;
        
        private WinScrollBar mUIVerticalScrollBar;
        
        private WinScrollBar mUIHorizontalScrollBar;
        
        private WinControl mUIPanel2Grip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISelectClient : WinClient
    {
        
        public UISelectClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Select:";
            #endregion
        }
        
        #region Properties
        public WinWindow UIAllWindow
        {
            get
            {
                if ((this.mUIAllWindow == null))
                {
                    this.mUIAllWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIAllWindow.SearchProperties[WinWindow.PropertyNames.Name] = "All";
                    this.mUIAllWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIAllWindow;
            }
        }
        
        public WinMenuBar UISystemMenuBar
        {
            get
            {
                if ((this.mUISystemMenuBar == null))
                {
                    this.mUISystemMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISystemMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUISystemMenuBar;
            }
        }
        
        public WinMenuBar UIApplicationMenuBar
        {
            get
            {
                if ((this.mUIApplicationMenuBar == null))
                {
                    this.mUIApplicationMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIApplicationMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIApplicationMenuBar;
            }
        }
        
        public WinText UIAllText
        {
            get
            {
                if ((this.mUIAllText == null))
                {
                    this.mUIAllText = new WinText(this);
                    #region Search Criteria
                    this.mUIAllText.SearchProperties[WinText.PropertyNames.Name] = "All";
                    #endregion
                }
                return this.mUIAllText;
            }
        }
        
        public WinScrollBar UIAllScrollBar
        {
            get
            {
                if ((this.mUIAllScrollBar == null))
                {
                    this.mUIAllScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIAllScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIAllScrollBar;
            }
        }
        
        public WinScrollBar UIAllScrollBar1
        {
            get
            {
                if ((this.mUIAllScrollBar1 == null))
                {
                    this.mUIAllScrollBar1 = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIAllScrollBar1.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIAllScrollBar1;
            }
        }
        
        public WinWindow UINoneWindow
        {
            get
            {
                if ((this.mUINoneWindow == null))
                {
                    this.mUINoneWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUINoneWindow.SearchProperties[WinWindow.PropertyNames.Name] = "None";
                    this.mUINoneWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUINoneWindow;
            }
        }
        
        public WinMenuBar UISystemMenuBar1
        {
            get
            {
                if ((this.mUISystemMenuBar1 == null))
                {
                    this.mUISystemMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISystemMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUISystemMenuBar1;
            }
        }
        
        public WinMenuBar UIApplicationMenuBar1
        {
            get
            {
                if ((this.mUIApplicationMenuBar1 == null))
                {
                    this.mUIApplicationMenuBar1 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIApplicationMenuBar1.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIApplicationMenuBar1;
            }
        }
        
        public WinText UINoneText
        {
            get
            {
                if ((this.mUINoneText == null))
                {
                    this.mUINoneText = new WinText(this);
                    #region Search Criteria
                    this.mUINoneText.SearchProperties[WinText.PropertyNames.Name] = "None";
                    #endregion
                }
                return this.mUINoneText;
            }
        }
        
        public WinScrollBar UINoneScrollBar
        {
            get
            {
                if ((this.mUINoneScrollBar == null))
                {
                    this.mUINoneScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUINoneScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUINoneScrollBar;
            }
        }
        
        public WinScrollBar UINoneScrollBar1
        {
            get
            {
                if ((this.mUINoneScrollBar1 == null))
                {
                    this.mUINoneScrollBar1 = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUINoneScrollBar1.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUINoneScrollBar1;
            }
        }
        
        public WinWindow UIActiveWindow
        {
            get
            {
                if ((this.mUIActiveWindow == null))
                {
                    this.mUIActiveWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIActiveWindow.SearchProperties[WinWindow.PropertyNames.Name] = "Active";
                    this.mUIActiveWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIActiveWindow;
            }
        }
        
        public WinMenuBar UISystemMenuBar2
        {
            get
            {
                if ((this.mUISystemMenuBar2 == null))
                {
                    this.mUISystemMenuBar2 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISystemMenuBar2.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUISystemMenuBar2;
            }
        }
        
        public WinMenuBar UIApplicationMenuBar2
        {
            get
            {
                if ((this.mUIApplicationMenuBar2 == null))
                {
                    this.mUIApplicationMenuBar2 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIApplicationMenuBar2.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIApplicationMenuBar2;
            }
        }
        
        public WinText UIActiveText
        {
            get
            {
                if ((this.mUIActiveText == null))
                {
                    this.mUIActiveText = new WinText(this);
                    #region Search Criteria
                    this.mUIActiveText.SearchProperties[WinText.PropertyNames.Name] = "Active";
                    #endregion
                }
                return this.mUIActiveText;
            }
        }
        
        public WinScrollBar UIActiveScrollBar
        {
            get
            {
                if ((this.mUIActiveScrollBar == null))
                {
                    this.mUIActiveScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIActiveScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIActiveScrollBar;
            }
        }
        
        public WinScrollBar UIActiveScrollBar1
        {
            get
            {
                if ((this.mUIActiveScrollBar1 == null))
                {
                    this.mUIActiveScrollBar1 = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIActiveScrollBar1.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIActiveScrollBar1;
            }
        }
        
        public WinWindow UIPausedWindow
        {
            get
            {
                if ((this.mUIPausedWindow == null))
                {
                    this.mUIPausedWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIPausedWindow.SearchProperties[WinWindow.PropertyNames.Name] = "Paused";
                    this.mUIPausedWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIPausedWindow;
            }
        }
        
        public WinMenuBar UISystemMenuBar3
        {
            get
            {
                if ((this.mUISystemMenuBar3 == null))
                {
                    this.mUISystemMenuBar3 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISystemMenuBar3.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    #endregion
                }
                return this.mUISystemMenuBar3;
            }
        }
        
        public WinMenuBar UIApplicationMenuBar3
        {
            get
            {
                if ((this.mUIApplicationMenuBar3 == null))
                {
                    this.mUIApplicationMenuBar3 = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIApplicationMenuBar3.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    #endregion
                }
                return this.mUIApplicationMenuBar3;
            }
        }
        
        public WinText UIPausedText
        {
            get
            {
                if ((this.mUIPausedText == null))
                {
                    this.mUIPausedText = new WinText(this);
                    #region Search Criteria
                    this.mUIPausedText.SearchProperties[WinText.PropertyNames.Name] = "Paused";
                    #endregion
                }
                return this.mUIPausedText;
            }
        }
        
        public WinScrollBar UIPausedScrollBar
        {
            get
            {
                if ((this.mUIPausedScrollBar == null))
                {
                    this.mUIPausedScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIPausedScrollBar.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
                    #endregion
                }
                return this.mUIPausedScrollBar;
            }
        }
        
        public WinScrollBar UIPausedScrollBar1
        {
            get
            {
                if ((this.mUIPausedScrollBar1 == null))
                {
                    this.mUIPausedScrollBar1 = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIPausedScrollBar1.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
                    #endregion
                }
                return this.mUIPausedScrollBar1;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUIAllWindow;
        
        private WinMenuBar mUISystemMenuBar;
        
        private WinMenuBar mUIApplicationMenuBar;
        
        private WinText mUIAllText;
        
        private WinScrollBar mUIAllScrollBar;
        
        private WinScrollBar mUIAllScrollBar1;
        
        private WinWindow mUINoneWindow;
        
        private WinMenuBar mUISystemMenuBar1;
        
        private WinMenuBar mUIApplicationMenuBar1;
        
        private WinText mUINoneText;
        
        private WinScrollBar mUINoneScrollBar;
        
        private WinScrollBar mUINoneScrollBar1;
        
        private WinWindow mUIActiveWindow;
        
        private WinMenuBar mUISystemMenuBar2;
        
        private WinMenuBar mUIApplicationMenuBar2;
        
        private WinText mUIActiveText;
        
        private WinScrollBar mUIActiveScrollBar;
        
        private WinScrollBar mUIActiveScrollBar1;
        
        private WinWindow mUIPausedWindow;
        
        private WinMenuBar mUISystemMenuBar3;
        
        private WinMenuBar mUIApplicationMenuBar3;
        
        private WinText mUIPausedText;
        
        private WinScrollBar mUIPausedScrollBar;
        
        private WinScrollBar mUIPausedScrollBar1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAllWindow : WinWindow
    {
        
        public UIAllWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "All";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIAllTitleBar UIAllTitleBar
        {
            get
            {
                if ((this.mUIAllTitleBar == null))
                {
                    this.mUIAllTitleBar = new UIAllTitleBar(this);
                }
                return this.mUIAllTitleBar;
            }
        }
        
        public WinControl UIAllGrip
        {
            get
            {
                if ((this.mUIAllGrip == null))
                {
                    this.mUIAllGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIAllGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIAllGrip;
            }
        }
        #endregion
        
        #region Fields
        private UIAllTitleBar mUIAllTitleBar;
        
        private WinControl mUIAllGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAllTitleBar : WinTitleBar
    {
        
        public UIAllTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAllText : WinText
    {
        
        public UIAllText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinText.PropertyNames.Name] = "All";
            #endregion
        }
        
        #region Properties
        public WinHyperlink UIAllHyperlink
        {
            get
            {
                if ((this.mUIAllHyperlink == null))
                {
                    this.mUIAllHyperlink = new WinHyperlink(this);
                    #region Search Criteria
                    this.mUIAllHyperlink.SearchProperties[WinHyperlink.PropertyNames.Name] = "All";
                    #endregion
                }
                return this.mUIAllHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private WinHyperlink mUIAllHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAllScrollBar : WinScrollBar
    {
        
        public UIAllScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAllScrollBar1 : WinScrollBar
    {
        
        public UIAllScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UINoneWindow : WinWindow
    {
        
        public UINoneWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "None";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UINoneTitleBar UINoneTitleBar
        {
            get
            {
                if ((this.mUINoneTitleBar == null))
                {
                    this.mUINoneTitleBar = new UINoneTitleBar(this);
                }
                return this.mUINoneTitleBar;
            }
        }
        
        public WinControl UINoneGrip
        {
            get
            {
                if ((this.mUINoneGrip == null))
                {
                    this.mUINoneGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUINoneGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUINoneGrip;
            }
        }
        #endregion
        
        #region Fields
        private UINoneTitleBar mUINoneTitleBar;
        
        private WinControl mUINoneGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UINoneTitleBar : WinTitleBar
    {
        
        public UINoneTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UINoneText : WinText
    {
        
        public UINoneText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinText.PropertyNames.Name] = "None";
            #endregion
        }
        
        #region Properties
        public WinHyperlink UINoneHyperlink
        {
            get
            {
                if ((this.mUINoneHyperlink == null))
                {
                    this.mUINoneHyperlink = new WinHyperlink(this);
                    #region Search Criteria
                    this.mUINoneHyperlink.SearchProperties[WinHyperlink.PropertyNames.Name] = "None";
                    #endregion
                }
                return this.mUINoneHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private WinHyperlink mUINoneHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UINoneScrollBar : WinScrollBar
    {
        
        public UINoneScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UINoneScrollBar1 : WinScrollBar
    {
        
        public UINoneScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIActiveWindow : WinWindow
    {
        
        public UIActiveWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Active";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIActiveTitleBar UIActiveTitleBar
        {
            get
            {
                if ((this.mUIActiveTitleBar == null))
                {
                    this.mUIActiveTitleBar = new UIActiveTitleBar(this);
                }
                return this.mUIActiveTitleBar;
            }
        }
        
        public WinControl UIActiveGrip
        {
            get
            {
                if ((this.mUIActiveGrip == null))
                {
                    this.mUIActiveGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIActiveGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIActiveGrip;
            }
        }
        #endregion
        
        #region Fields
        private UIActiveTitleBar mUIActiveTitleBar;
        
        private WinControl mUIActiveGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIActiveTitleBar : WinTitleBar
    {
        
        public UIActiveTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIActiveText : WinText
    {
        
        public UIActiveText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinText.PropertyNames.Name] = "Active";
            #endregion
        }
        
        #region Properties
        public WinHyperlink UIActiveHyperlink
        {
            get
            {
                if ((this.mUIActiveHyperlink == null))
                {
                    this.mUIActiveHyperlink = new WinHyperlink(this);
                    #region Search Criteria
                    this.mUIActiveHyperlink.SearchProperties[WinHyperlink.PropertyNames.Name] = "Active";
                    #endregion
                }
                return this.mUIActiveHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private WinHyperlink mUIActiveHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIActiveScrollBar : WinScrollBar
    {
        
        public UIActiveScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIActiveScrollBar1 : WinScrollBar
    {
        
        public UIActiveScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPausedWindow : WinWindow
    {
        
        public UIPausedWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Paused";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIPausedTitleBar UIPausedTitleBar
        {
            get
            {
                if ((this.mUIPausedTitleBar == null))
                {
                    this.mUIPausedTitleBar = new UIPausedTitleBar(this);
                }
                return this.mUIPausedTitleBar;
            }
        }
        
        public WinControl UIPausedGrip
        {
            get
            {
                if ((this.mUIPausedGrip == null))
                {
                    this.mUIPausedGrip = new WinControl(this);
                    #region Search Criteria
                    this.mUIPausedGrip.SearchProperties[UITestControl.PropertyNames.ControlType] = "Grip";
                    #endregion
                }
                return this.mUIPausedGrip;
            }
        }
        #endregion
        
        #region Fields
        private UIPausedTitleBar mUIPausedTitleBar;
        
        private WinControl mUIPausedGrip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPausedTitleBar : WinTitleBar
    {
        
        public UIPausedTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinButton UIIMEButton
        {
            get
            {
                if ((this.mUIIMEButton == null))
                {
                    this.mUIIMEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIMEButton.SearchProperties[WinButton.PropertyNames.Name] = "IME";
                    #endregion
                }
                return this.mUIIMEButton;
            }
        }
        
        public WinButton UIMinimizeButton
        {
            get
            {
                if ((this.mUIMinimizeButton == null))
                {
                    this.mUIMinimizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimize";
                    #endregion
                }
                return this.mUIMinimizeButton;
            }
        }
        
        public WinButton UIMaximizeButton
        {
            get
            {
                if ((this.mUIMaximizeButton == null))
                {
                    this.mUIMaximizeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMaximizeButton.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    #endregion
                }
                return this.mUIMaximizeButton;
            }
        }
        
        public WinButton UIContexthelpButton
        {
            get
            {
                if ((this.mUIContexthelpButton == null))
                {
                    this.mUIContexthelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContexthelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Context help";
                    #endregion
                }
                return this.mUIContexthelpButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIIMEButton;
        
        private WinButton mUIMinimizeButton;
        
        private WinButton mUIMaximizeButton;
        
        private WinButton mUIContexthelpButton;
        
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPausedText : WinText
    {
        
        public UIPausedText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinText.PropertyNames.Name] = "Paused";
            #endregion
        }
        
        #region Properties
        public WinHyperlink UIPausedHyperlink
        {
            get
            {
                if ((this.mUIPausedHyperlink == null))
                {
                    this.mUIPausedHyperlink = new WinHyperlink(this);
                    #region Search Criteria
                    this.mUIPausedHyperlink.SearchProperties[WinHyperlink.PropertyNames.Name] = "Paused";
                    #endregion
                }
                return this.mUIPausedHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private WinHyperlink mUIPausedHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPausedScrollBar : WinScrollBar
    {
        
        public UIPausedScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPausedScrollBar1 : WinScrollBar
    {
        
        public UIPausedScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar2 : WinScrollBar
    {
        
        public UIVerticalScrollBar2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar2 : WinScrollBar
    {
        
        public UIHorizontalScrollBar2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVerticalScrollBar3 : WinScrollBar
    {
        
        public UIVerticalScrollBar3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHorizontalScrollBar3 : WinScrollBar
    {
        
        public UIHorizontalScrollBar3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDownloadAccounthaihaScrollBar : WinScrollBar
    {
        
        public UIDownloadAccounthaihaScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            #endregion
        }
        
        #region Properties
        public WinButton UILineupButton
        {
            get
            {
                if ((this.mUILineupButton == null))
                {
                    this.mUILineupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILineupButton.SearchProperties[WinButton.PropertyNames.Name] = "Line up";
                    #endregion
                }
                return this.mUILineupButton;
            }
        }
        
        public WinButton UIPageupButton
        {
            get
            {
                if ((this.mUIPageupButton == null))
                {
                    this.mUIPageupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page up";
                    #endregion
                }
                return this.mUIPageupButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagedownButton
        {
            get
            {
                if ((this.mUIPagedownButton == null))
                {
                    this.mUIPagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    #endregion
                }
                return this.mUIPagedownButton;
            }
        }
        
        public WinButton UILinedownButton
        {
            get
            {
                if ((this.mUILinedownButton == null))
                {
                    this.mUILinedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILinedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Line down";
                    #endregion
                }
                return this.mUILinedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILineupButton;
        
        private WinButton mUIPageupButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagedownButton;
        
        private WinButton mUILinedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDownloadAccounthaihaScrollBar1 : WinScrollBar
    {
        
        public UIDownloadAccounthaihaScrollBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Horizontal";
            #endregion
        }
        
        #region Properties
        public WinButton UIColumnleftButton
        {
            get
            {
                if ((this.mUIColumnleftButton == null))
                {
                    this.mUIColumnleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Column left";
                    #endregion
                }
                return this.mUIColumnleftButton;
            }
        }
        
        public WinButton UIPageleftButton
        {
            get
            {
                if ((this.mUIPageleftButton == null))
                {
                    this.mUIPageleftButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageleftButton.SearchProperties[WinButton.PropertyNames.Name] = "Page left";
                    #endregion
                }
                return this.mUIPageleftButton;
            }
        }
        
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        
        public WinButton UIPagerightButton
        {
            get
            {
                if ((this.mUIPagerightButton == null))
                {
                    this.mUIPagerightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPagerightButton.SearchProperties[WinButton.PropertyNames.Name] = "Page right";
                    #endregion
                }
                return this.mUIPagerightButton;
            }
        }
        
        public WinButton UIColumnrightButton
        {
            get
            {
                if ((this.mUIColumnrightButton == null))
                {
                    this.mUIColumnrightButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColumnrightButton.SearchProperties[WinButton.PropertyNames.Name] = "Column right";
                    #endregion
                }
                return this.mUIColumnrightButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIColumnleftButton;
        
        private WinButton mUIPageleftButton;
        
        private WinControl mUIPositionIndicator;
        
        private WinButton mUIPagerightButton;
        
        private WinButton mUIColumnrightButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDownloadAccounthaihaWindow1 : WinWindow
    {
        
        public UIDownloadAccounthaihaWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Download Account - haih@ad-sage.com #46848300(USD)";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Download Account - haih@ad-sage.com #46848300(USD)");
            #endregion
        }
        
        #region Properties
        public UIAllcampaignsWindow UIAllcampaignsWindow
        {
            get
            {
                if ((this.mUIAllcampaignsWindow == null))
                {
                    this.mUIAllcampaignsWindow = new UIAllcampaignsWindow(this);
                }
                return this.mUIAllcampaignsWindow;
            }
        }
        
        public UIOKWindow1 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow1(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIAllcampaignsWindow mUIAllcampaignsWindow;
        
        private UIOKWindow1 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAllcampaignsWindow : WinWindow
    {
        
        public UIAllcampaignsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rbtnAll";
            this.WindowTitles.Add("Download Account - haih@ad-sage.com #46848300(USD)");
            #endregion
        }
        
        #region Properties
        public WinRadioButton UIAllcampaignsRadioButton
        {
            get
            {
                if ((this.mUIAllcampaignsRadioButton == null))
                {
                    this.mUIAllcampaignsRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUIAllcampaignsRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "overwriteAccountRadioButton";
                    this.mUIAllcampaignsRadioButton.WindowTitles.Add("Download Account - haih@ad-sage.com #46848300(USD)");
                    #endregion
                }
                return this.mUIAllcampaignsRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mUIAllcampaignsRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIOKWindow1 : WinWindow
    {
        
        public UIOKWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonOK";
            this.WindowTitles.Add("Download Account - haih@ad-sage.com #46848300(USD)");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Download Account - haih@ad-sage.com #46848300(USD)");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
}
